{"classes":{"Bars":{"name":"Bars","shortname":"Bars","classitems":[],"plugins":[],"extensions":[{"name":"Chart","shortname":"Chart","classitems":[{"id":"Chart-z_index","file":"src\\Chart.js","line":39,"description":"Default z-index for chart\n(Components are 50 by default, so Chart = 100 is above component by default)","example":["\n```js\nd3.chart('Chart').extend('BelowComponentLayers', {\n  // ...\n}, {\n  z_index: 40\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"100","class":"Chart"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Chart.js","line":3,"description":"Common base for creating charts.\nStandard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\n\n### Extending\n\nTo take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\nand automatically setting properties from `options`, use `d3.compose.helpers.di`\nand `d3.compose.helpers.property` when creating your chart.","example":["\n```js\nvar helpers = d3.compose.helpers;\n\nd3.chart('Chart').extend('Pie', {\n  initialize: function() {\n    // same as d3.chart\n  },\n  transform: function(data) {\n    // same as d3.chart\n  },\n\n  color: helpers.di(function(chart, d, i) {\n    // \"di\" function with parent chart injected (\"this\" = element)\n  }),\n\n  centered: helpers.property({\n    default_value: true\n    // can be automatically set from options object\n  })\n});\n```"],"extends":"Base","id":"Chart"},{"name":"mixins.Series","shortname":"Series","classitems":[{"id":"mixins-Series-seriesKey","file":"src\\mixins\\series.js","line":16,"description":"Get key for given series data","itemtype":"method","name":"seriesKey","params":[{"name":"d","description":"Series object with `key`","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins","code":"seriesKey(d)"},{"id":"mixins-Series-seriesValues","file":"src\\mixins\\series.js","line":27,"description":"Get values for given series data","itemtype":"method","name":"seriesValues","params":[{"name":"d","description":"Series object with `values` array","type":"Any"}],"return":{"description":"","type":"Array"},"class":"mixins.Series","namespace":"mixins","code":"seriesValues(d)"},{"id":"mixins-Series-seriesClass","file":"src\\mixins\\series.js","line":40,"description":"Get class for given series data","itemtype":"method","name":"seriesClass","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"seriesClass(d, i)"},{"id":"mixins-Series-seriesIndex","file":"src\\mixins\\series.js","line":52,"description":"Get index for given data-point of series","itemtype":"method","name":"seriesIndex","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"class":"mixins.Series","namespace":"mixins","code":"seriesIndex(d, i)"},{"id":"mixins-Series-seriesData","file":"src\\mixins\\series.js","line":64,"description":"Get parent series data for given data-point","itemtype":"method","name":"seriesData","return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-itemStyle","file":"src\\mixins\\series.js","line":74,"description":"(di) Get style given series data or data-point\n(Uses \"style\" object on `d`, if defined)","itemtype":"method","name":"itemStyle","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number","optional":true},{"name":"j","description":"","type":"Number","optional":true}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"itemStyle(d, [i], [j])"},{"id":"mixins-Series-seriesCount","file":"src\\mixins\\series.js","line":88,"description":"Get series count for chart","itemtype":"method","name":"seriesCount","return":{"description":"","type":"Number"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-seriesLayer","file":"src\\mixins\\series.js","line":99,"description":"Extension of layer() that handles data-binding and layering for series data.\n\n- Updates `dataBind` method to access underlying series values\n- Creates group layer for each series in chart\n- Should be used just like layer()","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n  initialize: function() {\n    this.seriesLayer('Circles', this.base, {\n      // Create group for each series on this.base\n      // and calls the following for each series item\n      // (entire layer is called twice: series-1 and series-2)\n\n      dataBind: function(data) {\n        // 1. data = [1, 2, 3]\n        // 2. data = [4, 5, 6]\n      },\n      insert: function() {\n        // Same as chart.layer\n        // (where \"this\" is series group layer)\n      },\n      events: {\n        // Same as chart.layer\n      }\n    });\n  }\n}));\n\n// ...\n\nchart.draw([\n  {key: 'series-1', values: [1, 2, 3]},\n  {key: 'series-2', values: [4, 5, 6]}\n]);\n```"],"itemtype":"method","name":"seriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"Selection"},{"name":"options","description":"(`dataBind` and `insert` required)","type":"Object"}],"return":{"description":"","type":"d3.chart.layer"},"class":"mixins.Series","namespace":"mixins","code":"seriesLayer(name, selection, options)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\series.js","line":9,"description":"Mixin for handling series data","id":"mixins-Series"},{"name":"mixins.XY","shortname":"XY","classitems":[{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":53,"description":"Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":78,"description":"Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xKey","file":"src\\mixins\\xy.js","line":103,"description":"Key on data object for x-value","itemtype":"property","name":"xKey","type":"String","default":"'x'","class":"mixins.XY","namespace":"mixins","code":"{String} ['x']"},{"id":"mixins-XY-yKey","file":"src\\mixins\\xy.js","line":114,"description":"Key on data object for y-value","itemtype":"property","name":"yKey","type":"String","default":"'y'","class":"mixins.XY","namespace":"mixins","code":"{String} ['y']"},{"id":"mixins-XY-x","file":"src\\mixins\\xy.js","line":125,"description":"Get scaled x-value for given data-point","itemtype":"method","name":"x","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"x(d, i)"},{"id":"mixins-XY-y","file":"src\\mixins\\xy.js","line":140,"description":"Get scaled y-value for given data-point","itemtype":"method","name":"y","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"y(d, i)"},{"id":"mixins-XY-key","file":"src\\mixins\\xy.js","line":155,"description":"Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.","itemtype":"method","name":"key","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"key(d, i)"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":167,"description":"Get scaled `x = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":177,"description":"Get scaled `y = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-xValue","file":"src\\mixins\\xy.js","line":187,"description":"Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.","example":["\n```js\nxValue({x: 10, y: 20}); // -> 10\nxValue([10, 20]); // -> 10\n```"],"itemtype":"method","name":"xValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"xValue(d)"},{"id":"mixins-XY-yValue","file":"src\\mixins\\xy.js","line":205,"description":"Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.","example":["\n```js\nyValue({x: 10, y: 20}); // -> 20\nyValue([10, 20]); // -> 20\n```"],"itemtype":"method","name":"yValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"yValue(d)"},{"id":"mixins-XY-setScales","file":"src\\mixins\\xy.js","line":223,"description":"Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)","itemtype":"method","name":"setScales","class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-setXScaleRange","file":"src\\mixins\\xy.js","line":233,"description":"Set range (0, width) for given x-scale","itemtype":"method","name":"setXScaleRange","params":[{"name":"x_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setXScaleRange(x_scale)"},{"id":"mixins-XY-setYScaleRange","file":"src\\mixins\\xy.js","line":243,"description":"Set range(height, 0) for given y-scale","itemtype":"method","name":"setYScaleRange","params":[{"name":"y_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setYScaleRange(y_scale)"},{"id":"mixins-XY-getDefaultXScale","file":"src\\mixins\\xy.js","line":253,"description":"Get default x-scale: `{data: this.data(), key: 'x'}`","itemtype":"method","name":"getDefaultXScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-getDefaultYScale","file":"src\\mixins\\xy.js","line":266,"description":"Get default y-scale: `{data: this.data(), key: 'y'}`","itemtype":"method","name":"getDefaultYScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy.js","line":14,"description":"Mixin for handling XY data","id":"mixins-XY"},{"name":"mixins.XYValues","shortname":"XYValues","classitems":[{"id":"mixins-XYValues-adjacentWidth","file":"src\\mixins\\xy-values.js","line":10,"description":"Determine width of data-point when displayed adjacent","itemtype":"method","name":"adjacentWidth","return":{"description":"","type":"Number"},"class":"mixins.XYValues","namespace":"mixins"},{"id":"mixins-XYValues-layeredWidth","file":"src\\mixins\\xy-values.js","line":21,"description":"Determine layered width (width of group for adjacent)","itemtype":"method","name":"layeredWidth","return":{"description":"","type":"Number"},"class":"mixins.XYValues","namespace":"mixins"},{"id":"mixins-XYValues-itemWidth","file":"src\\mixins\\xy-values.js","line":34,"description":"Determine item width based on series display type (adjacent or layered)","itemtype":"method","name":"itemWidth","return":{"description":"","type":"Number"},"class":"mixins.XYValues","namespace":"mixins"},{"id":"mixins-XYValues-getDefaultYScale","file":"src\\mixins\\xy-values.js","line":46,"description":"Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`","itemtype":"method","name":"getDefaultYScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XYValues","namespace":"mixins"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy-values.js","line":3,"description":"Mixin for charts of centered key,value data (x: index, y: value, key)","id":"mixins-XYValues"},{"name":"mixins.LabelsXY","shortname":"LabelsXY","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\labels.js","line":102,"description":"Mixin for handling labels in XY charts\n(proxies `x` and `y` to properly place labels for XY charts)","extends":"Labels","id":"mixins-LabelsXY"},{"name":"mixins.Hover","shortname":"Hover","classitems":[{"id":"mixins-Hover-getPoint","file":"src\\mixins\\hover.js","line":29,"description":"Get point information for given data-point","itemtype":"method","name":"getPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"return":{"description":"}","type":"Key, series, d, meta chart, i, j, x, y"},"class":"mixins.Hover","namespace":"mixins","code":"getPoint(d, i, j)"},{"id":"mixins-Hover-mouseEnterPoint","file":"src\\mixins\\hover.js","line":56,"description":"Call to trigger mouseenter:point when mouse enters data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseEnterPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseEnterPoint(d, i, j)"},{"id":"mixins-Hover-mouseleavePoint","file":"src\\mixins\\hover.js","line":87,"description":"Call to trigger mouseleave:point when mouse leaves data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseleavePoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseleavePoint(d, i, j)"},{"id":"mixins-Hover-onMouseEnter","file":"src\\mixins\\hover.js","line":118,"description":"(Override) Called when mouse enters container","itemtype":"method","name":"onMouseEnter","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseEnter(position)"},{"id":"mixins-Hover-onMouseMove","file":"src\\mixins\\hover.js","line":128,"description":"(Override) Called when mouse moves within container","itemtype":"method","name":"onMouseMove","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseMove(position)"},{"id":"mixins-Hover-onMouseLeave","file":"src\\mixins\\hover.js","line":138,"description":"(Override) Called when mouse leaves container","itemtype":"method","name":"onMouseLeave","class":"mixins.Hover","namespace":"mixins"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\hover.js","line":13,"description":"Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\nand `getPoint` helper for adding helpful meta information to raw data point.","id":"mixins-Hover"},{"name":"mixins.Transition","shortname":"Transition","classitems":[{"id":"mixins-Transition-delay","file":"src\\mixins\\transition.js","line":15,"description":"Delay start of transition by specified milliseconds.","itemtype":"property","name":"delay","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-duration","file":"src\\mixins\\transition.js","line":28,"description":"Transition duration in milliseconds.","itemtype":"property","name":"duration","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-ease","file":"src\\mixins\\transition.js","line":41,"description":"Transition ease function\n\n- See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n- Note: arguments to pass to `d3.ease` are not supported","itemtype":"property","name":"ease","type":"String|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{String|Function} [(use container value, if available)]"},{"id":"mixins-Transition-setupTransition","file":"src\\mixins\\transition.js","line":57,"description":"Setup delay, duration, and ease for transition","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n  initialize: function() {\n    this.layer('circles', this.base, {\n      // ...\n      events: {\n        'merge:transition': function() {\n          // Set delay, duration, and ease from properties\n          this.chart().setupTransition(this);\n        }\n      }\n    });\n  }\n}));\n```"],"itemtype":"method","name":"setupTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.Transition","namespace":"mixins","code":"setupTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\transition.js","line":8,"description":"Mixin for handling common transition behaviors","id":"mixins-Transition"},{"name":"mixins.StandardLayer","shortname":"StandardLayer","classitems":[{"id":"mixins-StandardLayer-standardLayer","file":"src\\mixins\\standard-layer.js","line":31,"description":"extension of `layer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('circles', this.base.append('g'));\n  }\n\n  // onDataBind, onInsert, etc. work with \"circles\" layer\n}));\n```"],"itemtype":"method","name":"standardLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardLayer(name, selection)"},{"id":"mixins-StandardLayer-standardSeriesLayer","file":"src\\mixins\\standard-layer.js","line":52,"description":"extension of `seriesLayer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardSeriesLayer('circles', this.base.append('g'));\n  },\n\n  // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n}));\n```"],"itemtype":"method","name":"standardSeriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardSeriesLayer(name, selection)"},{"id":"mixins-StandardLayer-onDataBind","file":"src\\mixins\\standard-layer.js","line":73,"description":"Called for standard layer's `dataBind`","itemtype":"method","name":"onDataBind","params":[{"name":"selection","description":"","type":"d3.selection"},{"name":"data","description":"","type":"Any"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onDataBind(selection, data)"},{"id":"mixins-StandardLayer-onInsert","file":"src\\mixins\\standard-layer.js","line":83,"description":"Called for standard layer's `insert`","itemtype":"method","name":"onInsert","params":[{"name":"selection","description":"","type":"d3.selection"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onInsert(selection)"},{"id":"mixins-StandardLayer-onEnter","file":"src\\mixins\\standard-layer.js","line":92,"description":"Call for standard layer's `events['enter']`","itemtype":"method","name":"onEnter","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnter(selection)"},{"id":"mixins-StandardLayer-onEnterTransition","file":"src\\mixins\\standard-layer.js","line":100,"description":"Call for standard layer's `events['enter:transition']`","itemtype":"method","name":"onEnterTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnterTransition(selection)"},{"id":"mixins-StandardLayer-onUpdate","file":"src\\mixins\\standard-layer.js","line":108,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdate","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdate(selection)"},{"id":"mixins-StandardLayer-onUpdateTransition","file":"src\\mixins\\standard-layer.js","line":116,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdateTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdateTransition(selection)"},{"id":"mixins-StandardLayer-onMerge","file":"src\\mixins\\standard-layer.js","line":124,"description":"Call for standard layer's `events['merge']`","itemtype":"method","name":"onMerge","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMerge(selection)"},{"id":"mixins-StandardLayer-onMergeTransition","file":"src\\mixins\\standard-layer.js","line":132,"description":"Call for standard layer's `events['merge:transition']`","itemtype":"method","name":"onMergeTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMergeTransition(selection)"},{"id":"mixins-StandardLayer-onExit","file":"src\\mixins\\standard-layer.js","line":140,"description":"Call for standard layer's `events['exit']`","itemtype":"method","name":"onExit","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExit(selection)"},{"id":"mixins-StandardLayer-onExitTransition","file":"src\\mixins\\standard-layer.js","line":148,"description":"Call for standard layer's `events['exit:transition']`","itemtype":"method","name":"onExitTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExitTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\standard-layer.js","line":1,"description":"Mixin to create standard layer to make extending charts straightforward.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('main', this.base.append('g'))\n    // dataBind, insert, events are defined on prototype\n  },\n\n  onDataBind: function(selection, data) {\n    // ...\n  },\n  onInsert: function(selection) {\n    // ...\n  },\n  onEnter: function(selection) {\n    // ...\n  },\n  onUpdateTransition: function(selection) {\n    // ...\n  },\n  // all d3.chart events are available: onMerge, onExit, ...\n}));\n```"],"id":"mixins-StandardLayer"}],"plugin_for":[],"extension_for":[],"file":"src\\charts\\Bars.js","line":20,"description":"Bars chart with centered or adjacent display for single or series data.\n\nTo display bars for different series next to each other (adjacent),\nuse the `adjacent` option when creating the `xScale` (see example below).\n\n### Extending\n\nTo extend the `Bars` chart, the following methods are available:\n\n- `barHeight`\n- `barWidth`\n- `barX`\n- `barY`\n- `barClass`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'Bars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer","id":"Bars"},"HorizontalBars":{"name":"HorizontalBars","shortname":"HorizontalBars","classitems":[],"plugins":[],"extensions":[{"name":"Bars","shortname":"Bars","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"src\\charts\\Bars.js","line":20,"description":"Bars chart with centered or adjacent display for single or series data.\n\nTo display bars for different series next to each other (adjacent),\nuse the `adjacent` option when creating the `xScale` (see example below).\n\n### Extending\n\nTo extend the `Bars` chart, the following methods are available:\n\n- `barHeight`\n- `barWidth`\n- `barX`\n- `barY`\n- `barClass`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'Bars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer","id":"Bars"},{"name":"mixins.XYInverted","shortname":"XYInverted","classitems":[{"id":"mixins-XYInverted-x","file":"src\\mixins\\xy-inverted.js","line":10,"description":"Get x-value for plotting (scaled y-value)","itemtype":"method","name":"x","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins","code":"x(d, i)"},{"id":"mixins-XYInverted-y","file":"src\\mixins\\xy-inverted.js","line":25,"description":"Get y-value for plotting (scaled x-value)","itemtype":"method","name":"y","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins","code":"y(d, i)"},{"id":"mixins-XYInverted-x0","file":"src\\mixins\\xy-inverted.js","line":40,"description":"Get scaled y = 0 value (along x-axis)","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins"},{"id":"mixins-XYInverted-x0","file":"src\\mixins\\xy-inverted.js","line":50,"description":"Get scaled x = 0 value (along y-axis)","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins"},{"id":"mixins-XYInverted-setXScaleRange","file":"src\\mixins\\xy-inverted.js","line":60,"description":"Set range (height, 0) for given x-scale","itemtype":"method","name":"setXScaleRange","params":[{"name":"x_scale","description":"","type":"d3.scale"}],"class":"mixins.XYInverted","namespace":"mixins","code":"setXScaleRange(x_scale)"},{"id":"mixins-XYInverted-setYScaleRange","file":"src\\mixins\\xy-inverted.js","line":70,"description":"Set range (0, width) for given y-scale","itemtype":"method","name":"setYScaleRange","params":[{"name":"y_scale","description":"","type":"d3.scale"}],"class":"mixins.XYInverted","namespace":"mixins","code":"setYScaleRange(y_scale)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy-inverted.js","line":3,"description":"Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right","id":"mixins-XYInverted"}],"plugin_for":[],"extension_for":[],"file":"src\\charts\\HorizontalBars.js","line":10,"description":"Bars chart with bars that group from left-to-right\n\n(See `Bars` for extensibility details)","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'HorizontalBars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Bars, XYInverted","id":"HorizontalBars"},"HorizontalStackedBars":{"name":"HorizontalStackedBars","shortname":"HorizontalStackedBars","classitems":[],"plugins":[],"extensions":[{"name":"HorizontalBars","shortname":"HorizontalBars","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"src\\charts\\HorizontalBars.js","line":10,"description":"Bars chart with bars that group from left-to-right\n\n(See `Bars` for extensibility details)","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'HorizontalBars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Bars, XYInverted","id":"HorizontalBars"}],"plugin_for":[],"extension_for":[],"file":"src\\charts\\HorizontalStackedBars.js","line":8,"description":"Horizontal Stacked Bars\n\n(See `Bars` for extensibility details)","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'HorizontalStackedBars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"HorizontalBars","id":"HorizontalStackedBars"},"HoverLabels":{"name":"HoverLabels","shortname":"HoverLabels","classitems":[{"id":"HoverLabels-hoverTolerance","file":"src\\charts\\HoverLabels.js","line":26,"description":"Maximum distance to find active points","itemtype":"property","name":"hoverTolerance","type":"Number","default":"Infinity","class":"HoverLabels","code":"{Number} [Infinity]"}],"plugins":[],"plugin_for":[],"extension_for":[],"file":"src\\charts\\HoverLabels.js","line":11,"description":"(in-progress)","id":"HoverLabels"},"Labels":{"name":"Labels","shortname":"Labels","classitems":[{"id":"Labels-format","file":"src\\charts\\Labels.js","line":137,"description":"Formatting function or string (string is passed to `d3.format`) for label values","itemtype":"property","name":"format","type":"String|Function","class":"Labels","code":"{String|Function}"},{"id":"Labels-position","file":"src\\charts\\Labels.js","line":153,"description":"Label position relative to data point\n(top, right, bottom, or left)\n\nAdditionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\nwhere `a` and `b` are `top`, `right`, `bottom`, or `left`\n\nFor more advanced positioning, a \"di\" function can be specified to set position per label","example":["\n```js\nlabels.position('top'); // top for all values\nlabels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\nlabels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\n```"],"itemtype":"property","name":"position","type":"String|Function","default":"top|bottom","class":"Labels","code":"{String|Function} [top|bottom]"},{"id":"Labels-offset","file":"src\\charts\\Labels.js","line":189,"description":"Offset between data point and label\n(if `Number` is given, offset is set based on position)","itemtype":"property","name":"offset","type":"Number|Object","default":"0","class":"Labels","code":"{Number|Object} [0]"},{"id":"Labels-padding","file":"src\\charts\\Labels.js","line":201,"description":"Padding between text and label background","itemtype":"property","name":"padding","type":"Number","default":"1","class":"Labels","code":"{Number} [1]"},{"id":"Labels-anchor","file":"src\\charts\\Labels.js","line":210,"description":"Define text anchor (start, middle, or end)\n\n(set by default based on label position)","itemtype":"property","name":"anchor","type":"String","default":"middle","class":"Labels","code":"{String} [middle]"},{"id":"Labels-alignment","file":"src\\charts\\Labels.js","line":225,"description":"Define text-alignment (top, middle, or bottom)\n\n(set by default based on label position)","itemtype":"property","name":"alignment","type":"String","default":"middle","class":"Labels","code":"{String} [middle]"},{"id":"Labels-labelText","file":"src\\charts\\Labels.js","line":240,"description":"Get label text for data-point (uses \"label\" property or y-value)","itemtype":"method","name":"labelText","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"Labels","code":"labelText(d, i)"},{"id":"Labels-labelClass","file":"src\\charts\\Labels.js","line":255,"description":"Get class for label group","itemtype":"method","name":"labelClass","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"Labels","code":"labelClass(d, i)"}],"plugins":[],"extensions":[{"name":"Chart","shortname":"Chart","classitems":[{"id":"Chart-z_index","file":"src\\Chart.js","line":39,"description":"Default z-index for chart\n(Components are 50 by default, so Chart = 100 is above component by default)","example":["\n```js\nd3.chart('Chart').extend('BelowComponentLayers', {\n  // ...\n}, {\n  z_index: 40\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"100","class":"Chart"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Chart.js","line":3,"description":"Common base for creating charts.\nStandard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\n\n### Extending\n\nTo take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\nand automatically setting properties from `options`, use `d3.compose.helpers.di`\nand `d3.compose.helpers.property` when creating your chart.","example":["\n```js\nvar helpers = d3.compose.helpers;\n\nd3.chart('Chart').extend('Pie', {\n  initialize: function() {\n    // same as d3.chart\n  },\n  transform: function(data) {\n    // same as d3.chart\n  },\n\n  color: helpers.di(function(chart, d, i) {\n    // \"di\" function with parent chart injected (\"this\" = element)\n  }),\n\n  centered: helpers.property({\n    default_value: true\n    // can be automatically set from options object\n  })\n});\n```"],"extends":"Base","id":"Chart"},{"name":"mixins.Series","shortname":"Series","classitems":[{"id":"mixins-Series-seriesKey","file":"src\\mixins\\series.js","line":16,"description":"Get key for given series data","itemtype":"method","name":"seriesKey","params":[{"name":"d","description":"Series object with `key`","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins","code":"seriesKey(d)"},{"id":"mixins-Series-seriesValues","file":"src\\mixins\\series.js","line":27,"description":"Get values for given series data","itemtype":"method","name":"seriesValues","params":[{"name":"d","description":"Series object with `values` array","type":"Any"}],"return":{"description":"","type":"Array"},"class":"mixins.Series","namespace":"mixins","code":"seriesValues(d)"},{"id":"mixins-Series-seriesClass","file":"src\\mixins\\series.js","line":40,"description":"Get class for given series data","itemtype":"method","name":"seriesClass","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"seriesClass(d, i)"},{"id":"mixins-Series-seriesIndex","file":"src\\mixins\\series.js","line":52,"description":"Get index for given data-point of series","itemtype":"method","name":"seriesIndex","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"class":"mixins.Series","namespace":"mixins","code":"seriesIndex(d, i)"},{"id":"mixins-Series-seriesData","file":"src\\mixins\\series.js","line":64,"description":"Get parent series data for given data-point","itemtype":"method","name":"seriesData","return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-itemStyle","file":"src\\mixins\\series.js","line":74,"description":"(di) Get style given series data or data-point\n(Uses \"style\" object on `d`, if defined)","itemtype":"method","name":"itemStyle","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number","optional":true},{"name":"j","description":"","type":"Number","optional":true}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"itemStyle(d, [i], [j])"},{"id":"mixins-Series-seriesCount","file":"src\\mixins\\series.js","line":88,"description":"Get series count for chart","itemtype":"method","name":"seriesCount","return":{"description":"","type":"Number"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-seriesLayer","file":"src\\mixins\\series.js","line":99,"description":"Extension of layer() that handles data-binding and layering for series data.\n\n- Updates `dataBind` method to access underlying series values\n- Creates group layer for each series in chart\n- Should be used just like layer()","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n  initialize: function() {\n    this.seriesLayer('Circles', this.base, {\n      // Create group for each series on this.base\n      // and calls the following for each series item\n      // (entire layer is called twice: series-1 and series-2)\n\n      dataBind: function(data) {\n        // 1. data = [1, 2, 3]\n        // 2. data = [4, 5, 6]\n      },\n      insert: function() {\n        // Same as chart.layer\n        // (where \"this\" is series group layer)\n      },\n      events: {\n        // Same as chart.layer\n      }\n    });\n  }\n}));\n\n// ...\n\nchart.draw([\n  {key: 'series-1', values: [1, 2, 3]},\n  {key: 'series-2', values: [4, 5, 6]}\n]);\n```"],"itemtype":"method","name":"seriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"Selection"},{"name":"options","description":"(`dataBind` and `insert` required)","type":"Object"}],"return":{"description":"","type":"d3.chart.layer"},"class":"mixins.Series","namespace":"mixins","code":"seriesLayer(name, selection, options)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\series.js","line":9,"description":"Mixin for handling series data","id":"mixins-Series"},{"name":"mixins.XY","shortname":"XY","classitems":[{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":53,"description":"Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":78,"description":"Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xKey","file":"src\\mixins\\xy.js","line":103,"description":"Key on data object for x-value","itemtype":"property","name":"xKey","type":"String","default":"'x'","class":"mixins.XY","namespace":"mixins","code":"{String} ['x']"},{"id":"mixins-XY-yKey","file":"src\\mixins\\xy.js","line":114,"description":"Key on data object for y-value","itemtype":"property","name":"yKey","type":"String","default":"'y'","class":"mixins.XY","namespace":"mixins","code":"{String} ['y']"},{"id":"mixins-XY-x","file":"src\\mixins\\xy.js","line":125,"description":"Get scaled x-value for given data-point","itemtype":"method","name":"x","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"x(d, i)"},{"id":"mixins-XY-y","file":"src\\mixins\\xy.js","line":140,"description":"Get scaled y-value for given data-point","itemtype":"method","name":"y","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"y(d, i)"},{"id":"mixins-XY-key","file":"src\\mixins\\xy.js","line":155,"description":"Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.","itemtype":"method","name":"key","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"key(d, i)"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":167,"description":"Get scaled `x = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":177,"description":"Get scaled `y = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-xValue","file":"src\\mixins\\xy.js","line":187,"description":"Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.","example":["\n```js\nxValue({x: 10, y: 20}); // -> 10\nxValue([10, 20]); // -> 10\n```"],"itemtype":"method","name":"xValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"xValue(d)"},{"id":"mixins-XY-yValue","file":"src\\mixins\\xy.js","line":205,"description":"Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.","example":["\n```js\nyValue({x: 10, y: 20}); // -> 20\nyValue([10, 20]); // -> 20\n```"],"itemtype":"method","name":"yValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"yValue(d)"},{"id":"mixins-XY-setScales","file":"src\\mixins\\xy.js","line":223,"description":"Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)","itemtype":"method","name":"setScales","class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-setXScaleRange","file":"src\\mixins\\xy.js","line":233,"description":"Set range (0, width) for given x-scale","itemtype":"method","name":"setXScaleRange","params":[{"name":"x_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setXScaleRange(x_scale)"},{"id":"mixins-XY-setYScaleRange","file":"src\\mixins\\xy.js","line":243,"description":"Set range(height, 0) for given y-scale","itemtype":"method","name":"setYScaleRange","params":[{"name":"y_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setYScaleRange(y_scale)"},{"id":"mixins-XY-getDefaultXScale","file":"src\\mixins\\xy.js","line":253,"description":"Get default x-scale: `{data: this.data(), key: 'x'}`","itemtype":"method","name":"getDefaultXScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-getDefaultYScale","file":"src\\mixins\\xy.js","line":266,"description":"Get default y-scale: `{data: this.data(), key: 'y'}`","itemtype":"method","name":"getDefaultYScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy.js","line":14,"description":"Mixin for handling XY data","id":"mixins-XY"},{"name":"mixins.Hover","shortname":"Hover","classitems":[{"id":"mixins-Hover-getPoint","file":"src\\mixins\\hover.js","line":29,"description":"Get point information for given data-point","itemtype":"method","name":"getPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"return":{"description":"}","type":"Key, series, d, meta chart, i, j, x, y"},"class":"mixins.Hover","namespace":"mixins","code":"getPoint(d, i, j)"},{"id":"mixins-Hover-mouseEnterPoint","file":"src\\mixins\\hover.js","line":56,"description":"Call to trigger mouseenter:point when mouse enters data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseEnterPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseEnterPoint(d, i, j)"},{"id":"mixins-Hover-mouseleavePoint","file":"src\\mixins\\hover.js","line":87,"description":"Call to trigger mouseleave:point when mouse leaves data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseleavePoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseleavePoint(d, i, j)"},{"id":"mixins-Hover-onMouseEnter","file":"src\\mixins\\hover.js","line":118,"description":"(Override) Called when mouse enters container","itemtype":"method","name":"onMouseEnter","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseEnter(position)"},{"id":"mixins-Hover-onMouseMove","file":"src\\mixins\\hover.js","line":128,"description":"(Override) Called when mouse moves within container","itemtype":"method","name":"onMouseMove","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseMove(position)"},{"id":"mixins-Hover-onMouseLeave","file":"src\\mixins\\hover.js","line":138,"description":"(Override) Called when mouse leaves container","itemtype":"method","name":"onMouseLeave","class":"mixins.Hover","namespace":"mixins"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\hover.js","line":13,"description":"Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\nand `getPoint` helper for adding helpful meta information to raw data point.","id":"mixins-Hover"},{"name":"mixins.Transition","shortname":"Transition","classitems":[{"id":"mixins-Transition-delay","file":"src\\mixins\\transition.js","line":15,"description":"Delay start of transition by specified milliseconds.","itemtype":"property","name":"delay","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-duration","file":"src\\mixins\\transition.js","line":28,"description":"Transition duration in milliseconds.","itemtype":"property","name":"duration","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-ease","file":"src\\mixins\\transition.js","line":41,"description":"Transition ease function\n\n- See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n- Note: arguments to pass to `d3.ease` are not supported","itemtype":"property","name":"ease","type":"String|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{String|Function} [(use container value, if available)]"},{"id":"mixins-Transition-setupTransition","file":"src\\mixins\\transition.js","line":57,"description":"Setup delay, duration, and ease for transition","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n  initialize: function() {\n    this.layer('circles', this.base, {\n      // ...\n      events: {\n        'merge:transition': function() {\n          // Set delay, duration, and ease from properties\n          this.chart().setupTransition(this);\n        }\n      }\n    });\n  }\n}));\n```"],"itemtype":"method","name":"setupTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.Transition","namespace":"mixins","code":"setupTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\transition.js","line":8,"description":"Mixin for handling common transition behaviors","id":"mixins-Transition"},{"name":"mixins.StandardLayer","shortname":"StandardLayer","classitems":[{"id":"mixins-StandardLayer-standardLayer","file":"src\\mixins\\standard-layer.js","line":31,"description":"extension of `layer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('circles', this.base.append('g'));\n  }\n\n  // onDataBind, onInsert, etc. work with \"circles\" layer\n}));\n```"],"itemtype":"method","name":"standardLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardLayer(name, selection)"},{"id":"mixins-StandardLayer-standardSeriesLayer","file":"src\\mixins\\standard-layer.js","line":52,"description":"extension of `seriesLayer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardSeriesLayer('circles', this.base.append('g'));\n  },\n\n  // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n}));\n```"],"itemtype":"method","name":"standardSeriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardSeriesLayer(name, selection)"},{"id":"mixins-StandardLayer-onDataBind","file":"src\\mixins\\standard-layer.js","line":73,"description":"Called for standard layer's `dataBind`","itemtype":"method","name":"onDataBind","params":[{"name":"selection","description":"","type":"d3.selection"},{"name":"data","description":"","type":"Any"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onDataBind(selection, data)"},{"id":"mixins-StandardLayer-onInsert","file":"src\\mixins\\standard-layer.js","line":83,"description":"Called for standard layer's `insert`","itemtype":"method","name":"onInsert","params":[{"name":"selection","description":"","type":"d3.selection"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onInsert(selection)"},{"id":"mixins-StandardLayer-onEnter","file":"src\\mixins\\standard-layer.js","line":92,"description":"Call for standard layer's `events['enter']`","itemtype":"method","name":"onEnter","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnter(selection)"},{"id":"mixins-StandardLayer-onEnterTransition","file":"src\\mixins\\standard-layer.js","line":100,"description":"Call for standard layer's `events['enter:transition']`","itemtype":"method","name":"onEnterTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnterTransition(selection)"},{"id":"mixins-StandardLayer-onUpdate","file":"src\\mixins\\standard-layer.js","line":108,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdate","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdate(selection)"},{"id":"mixins-StandardLayer-onUpdateTransition","file":"src\\mixins\\standard-layer.js","line":116,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdateTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdateTransition(selection)"},{"id":"mixins-StandardLayer-onMerge","file":"src\\mixins\\standard-layer.js","line":124,"description":"Call for standard layer's `events['merge']`","itemtype":"method","name":"onMerge","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMerge(selection)"},{"id":"mixins-StandardLayer-onMergeTransition","file":"src\\mixins\\standard-layer.js","line":132,"description":"Call for standard layer's `events['merge:transition']`","itemtype":"method","name":"onMergeTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMergeTransition(selection)"},{"id":"mixins-StandardLayer-onExit","file":"src\\mixins\\standard-layer.js","line":140,"description":"Call for standard layer's `events['exit']`","itemtype":"method","name":"onExit","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExit(selection)"},{"id":"mixins-StandardLayer-onExitTransition","file":"src\\mixins\\standard-layer.js","line":148,"description":"Call for standard layer's `events['exit:transition']`","itemtype":"method","name":"onExitTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExitTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\standard-layer.js","line":1,"description":"Mixin to create standard layer to make extending charts straightforward.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('main', this.base.append('g'))\n    // dataBind, insert, events are defined on prototype\n  },\n\n  onDataBind: function(selection, data) {\n    // ...\n  },\n  onInsert: function(selection) {\n    // ...\n  },\n  onEnter: function(selection) {\n    // ...\n  },\n  onUpdateTransition: function(selection) {\n    // ...\n  },\n  // all d3.chart events are available: onMerge, onExit, ...\n}));\n```"],"id":"mixins-StandardLayer"}],"plugin_for":[],"extension_for":[],"file":"src\\charts\\Labels.js","line":31,"description":"Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\n\n### Extending\n\nTo extend the `Labels` chart, the following methods are available:\n\n- `insertLabels`\n- `mergeLabels`\n- `layoutLabels`\n- `transitionLabels`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`\n\nView the `Labels.js` source for the default implementation and more information on these methods.","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  return {\n    charts: {\n      input: {\n        type: 'Lines',\n        data: data.input,\n        // xScale, yScale, other properties...\n\n        // Show labels with default properties\n        labels: true\n      },\n      output: {\n        type: 'Bars',\n        data: data.output,\n        // xScale, yScale, other properties...\n\n        // Pass options to labels\n        labels: {\n          offset: 2,\n          position: 'top',\n          style: {\n            'font-size': '14px'\n          },\n          format: d3.format(',0d')\n        }\n      },\n      labels: {\n        type: 'Labels',\n        data: data.labels,\n\n        // xScale, yScale, other properties...\n      }\n    }\n  };\n});\n\nchart.draw({\n  input: [1, 2, 3],\n  output: [10, 20, 30],\n  labels: [\n    {x: 0, y: 0},\n    {x: 0, y: 30, label: 'Override (y by default)'},\n    {x: 2, y: 0},\n    {x: 2, y: 30}\n  ]\n});\n```"],"extends":"Chart, Series, XY, Hover, Transition, StandardLayer","id":"Labels"},"Lines":{"name":"Lines","shortname":"Lines","classitems":[{"id":"Lines-interpolate","file":"src\\charts\\Lines.js","line":85,"description":"Set interpolation mode for line\n\n- See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\n- Set to `null` or `'linear'` for no interpolation","itemtype":"property","name":"interpolate","type":"String","default":"monotone","class":"Lines","code":"{String} [monotone]"}],"plugins":[],"extensions":[{"name":"Chart","shortname":"Chart","classitems":[{"id":"Chart-z_index","file":"src\\Chart.js","line":39,"description":"Default z-index for chart\n(Components are 50 by default, so Chart = 100 is above component by default)","example":["\n```js\nd3.chart('Chart').extend('BelowComponentLayers', {\n  // ...\n}, {\n  z_index: 40\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"100","class":"Chart"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Chart.js","line":3,"description":"Common base for creating charts.\nStandard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\n\n### Extending\n\nTo take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\nand automatically setting properties from `options`, use `d3.compose.helpers.di`\nand `d3.compose.helpers.property` when creating your chart.","example":["\n```js\nvar helpers = d3.compose.helpers;\n\nd3.chart('Chart').extend('Pie', {\n  initialize: function() {\n    // same as d3.chart\n  },\n  transform: function(data) {\n    // same as d3.chart\n  },\n\n  color: helpers.di(function(chart, d, i) {\n    // \"di\" function with parent chart injected (\"this\" = element)\n  }),\n\n  centered: helpers.property({\n    default_value: true\n    // can be automatically set from options object\n  })\n});\n```"],"extends":"Base","id":"Chart"},{"name":"mixins.Series","shortname":"Series","classitems":[{"id":"mixins-Series-seriesKey","file":"src\\mixins\\series.js","line":16,"description":"Get key for given series data","itemtype":"method","name":"seriesKey","params":[{"name":"d","description":"Series object with `key`","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins","code":"seriesKey(d)"},{"id":"mixins-Series-seriesValues","file":"src\\mixins\\series.js","line":27,"description":"Get values for given series data","itemtype":"method","name":"seriesValues","params":[{"name":"d","description":"Series object with `values` array","type":"Any"}],"return":{"description":"","type":"Array"},"class":"mixins.Series","namespace":"mixins","code":"seriesValues(d)"},{"id":"mixins-Series-seriesClass","file":"src\\mixins\\series.js","line":40,"description":"Get class for given series data","itemtype":"method","name":"seriesClass","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"seriesClass(d, i)"},{"id":"mixins-Series-seriesIndex","file":"src\\mixins\\series.js","line":52,"description":"Get index for given data-point of series","itemtype":"method","name":"seriesIndex","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"class":"mixins.Series","namespace":"mixins","code":"seriesIndex(d, i)"},{"id":"mixins-Series-seriesData","file":"src\\mixins\\series.js","line":64,"description":"Get parent series data for given data-point","itemtype":"method","name":"seriesData","return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-itemStyle","file":"src\\mixins\\series.js","line":74,"description":"(di) Get style given series data or data-point\n(Uses \"style\" object on `d`, if defined)","itemtype":"method","name":"itemStyle","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number","optional":true},{"name":"j","description":"","type":"Number","optional":true}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"itemStyle(d, [i], [j])"},{"id":"mixins-Series-seriesCount","file":"src\\mixins\\series.js","line":88,"description":"Get series count for chart","itemtype":"method","name":"seriesCount","return":{"description":"","type":"Number"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-seriesLayer","file":"src\\mixins\\series.js","line":99,"description":"Extension of layer() that handles data-binding and layering for series data.\n\n- Updates `dataBind` method to access underlying series values\n- Creates group layer for each series in chart\n- Should be used just like layer()","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n  initialize: function() {\n    this.seriesLayer('Circles', this.base, {\n      // Create group for each series on this.base\n      // and calls the following for each series item\n      // (entire layer is called twice: series-1 and series-2)\n\n      dataBind: function(data) {\n        // 1. data = [1, 2, 3]\n        // 2. data = [4, 5, 6]\n      },\n      insert: function() {\n        // Same as chart.layer\n        // (where \"this\" is series group layer)\n      },\n      events: {\n        // Same as chart.layer\n      }\n    });\n  }\n}));\n\n// ...\n\nchart.draw([\n  {key: 'series-1', values: [1, 2, 3]},\n  {key: 'series-2', values: [4, 5, 6]}\n]);\n```"],"itemtype":"method","name":"seriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"Selection"},{"name":"options","description":"(`dataBind` and `insert` required)","type":"Object"}],"return":{"description":"","type":"d3.chart.layer"},"class":"mixins.Series","namespace":"mixins","code":"seriesLayer(name, selection, options)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\series.js","line":9,"description":"Mixin for handling series data","id":"mixins-Series"},{"name":"mixins.XY","shortname":"XY","classitems":[{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":53,"description":"Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":78,"description":"Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xKey","file":"src\\mixins\\xy.js","line":103,"description":"Key on data object for x-value","itemtype":"property","name":"xKey","type":"String","default":"'x'","class":"mixins.XY","namespace":"mixins","code":"{String} ['x']"},{"id":"mixins-XY-yKey","file":"src\\mixins\\xy.js","line":114,"description":"Key on data object for y-value","itemtype":"property","name":"yKey","type":"String","default":"'y'","class":"mixins.XY","namespace":"mixins","code":"{String} ['y']"},{"id":"mixins-XY-x","file":"src\\mixins\\xy.js","line":125,"description":"Get scaled x-value for given data-point","itemtype":"method","name":"x","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"x(d, i)"},{"id":"mixins-XY-y","file":"src\\mixins\\xy.js","line":140,"description":"Get scaled y-value for given data-point","itemtype":"method","name":"y","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"y(d, i)"},{"id":"mixins-XY-key","file":"src\\mixins\\xy.js","line":155,"description":"Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.","itemtype":"method","name":"key","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"key(d, i)"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":167,"description":"Get scaled `x = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":177,"description":"Get scaled `y = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-xValue","file":"src\\mixins\\xy.js","line":187,"description":"Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.","example":["\n```js\nxValue({x: 10, y: 20}); // -> 10\nxValue([10, 20]); // -> 10\n```"],"itemtype":"method","name":"xValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"xValue(d)"},{"id":"mixins-XY-yValue","file":"src\\mixins\\xy.js","line":205,"description":"Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.","example":["\n```js\nyValue({x: 10, y: 20}); // -> 20\nyValue([10, 20]); // -> 20\n```"],"itemtype":"method","name":"yValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"yValue(d)"},{"id":"mixins-XY-setScales","file":"src\\mixins\\xy.js","line":223,"description":"Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)","itemtype":"method","name":"setScales","class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-setXScaleRange","file":"src\\mixins\\xy.js","line":233,"description":"Set range (0, width) for given x-scale","itemtype":"method","name":"setXScaleRange","params":[{"name":"x_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setXScaleRange(x_scale)"},{"id":"mixins-XY-setYScaleRange","file":"src\\mixins\\xy.js","line":243,"description":"Set range(height, 0) for given y-scale","itemtype":"method","name":"setYScaleRange","params":[{"name":"y_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setYScaleRange(y_scale)"},{"id":"mixins-XY-getDefaultXScale","file":"src\\mixins\\xy.js","line":253,"description":"Get default x-scale: `{data: this.data(), key: 'x'}`","itemtype":"method","name":"getDefaultXScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-getDefaultYScale","file":"src\\mixins\\xy.js","line":266,"description":"Get default y-scale: `{data: this.data(), key: 'y'}`","itemtype":"method","name":"getDefaultYScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy.js","line":14,"description":"Mixin for handling XY data","id":"mixins-XY"},{"name":"mixins.LabelsXY","shortname":"LabelsXY","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\labels.js","line":102,"description":"Mixin for handling labels in XY charts\n(proxies `x` and `y` to properly place labels for XY charts)","extends":"Labels","id":"mixins-LabelsXY"},{"name":"mixins.Hover","shortname":"Hover","classitems":[{"id":"mixins-Hover-getPoint","file":"src\\mixins\\hover.js","line":29,"description":"Get point information for given data-point","itemtype":"method","name":"getPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"return":{"description":"}","type":"Key, series, d, meta chart, i, j, x, y"},"class":"mixins.Hover","namespace":"mixins","code":"getPoint(d, i, j)"},{"id":"mixins-Hover-mouseEnterPoint","file":"src\\mixins\\hover.js","line":56,"description":"Call to trigger mouseenter:point when mouse enters data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseEnterPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseEnterPoint(d, i, j)"},{"id":"mixins-Hover-mouseleavePoint","file":"src\\mixins\\hover.js","line":87,"description":"Call to trigger mouseleave:point when mouse leaves data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseleavePoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseleavePoint(d, i, j)"},{"id":"mixins-Hover-onMouseEnter","file":"src\\mixins\\hover.js","line":118,"description":"(Override) Called when mouse enters container","itemtype":"method","name":"onMouseEnter","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseEnter(position)"},{"id":"mixins-Hover-onMouseMove","file":"src\\mixins\\hover.js","line":128,"description":"(Override) Called when mouse moves within container","itemtype":"method","name":"onMouseMove","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseMove(position)"},{"id":"mixins-Hover-onMouseLeave","file":"src\\mixins\\hover.js","line":138,"description":"(Override) Called when mouse leaves container","itemtype":"method","name":"onMouseLeave","class":"mixins.Hover","namespace":"mixins"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\hover.js","line":13,"description":"Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\nand `getPoint` helper for adding helpful meta information to raw data point.","id":"mixins-Hover"},{"name":"mixins.HoverPoints","shortname":"HoverPoints","classitems":[{"id":"mixins-HoverPoints-hoverTolerance","file":"src\\mixins\\hover.js","line":184,"description":"Hover tolerance (in px) for calculating close points","itemtype":"property","name":"hoverTolerance","type":"Number","default":"Infinity","class":"mixins.HoverPoints","namespace":"mixins","code":"{Number} [Infinity]"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\hover.js","line":146,"description":"Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.","id":"mixins-HoverPoints"},{"name":"mixins.Transition","shortname":"Transition","classitems":[{"id":"mixins-Transition-delay","file":"src\\mixins\\transition.js","line":15,"description":"Delay start of transition by specified milliseconds.","itemtype":"property","name":"delay","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-duration","file":"src\\mixins\\transition.js","line":28,"description":"Transition duration in milliseconds.","itemtype":"property","name":"duration","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-ease","file":"src\\mixins\\transition.js","line":41,"description":"Transition ease function\n\n- See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n- Note: arguments to pass to `d3.ease` are not supported","itemtype":"property","name":"ease","type":"String|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{String|Function} [(use container value, if available)]"},{"id":"mixins-Transition-setupTransition","file":"src\\mixins\\transition.js","line":57,"description":"Setup delay, duration, and ease for transition","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n  initialize: function() {\n    this.layer('circles', this.base, {\n      // ...\n      events: {\n        'merge:transition': function() {\n          // Set delay, duration, and ease from properties\n          this.chart().setupTransition(this);\n        }\n      }\n    });\n  }\n}));\n```"],"itemtype":"method","name":"setupTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.Transition","namespace":"mixins","code":"setupTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\transition.js","line":8,"description":"Mixin for handling common transition behaviors","id":"mixins-Transition"},{"name":"mixins.StandardLayer","shortname":"StandardLayer","classitems":[{"id":"mixins-StandardLayer-standardLayer","file":"src\\mixins\\standard-layer.js","line":31,"description":"extension of `layer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('circles', this.base.append('g'));\n  }\n\n  // onDataBind, onInsert, etc. work with \"circles\" layer\n}));\n```"],"itemtype":"method","name":"standardLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardLayer(name, selection)"},{"id":"mixins-StandardLayer-standardSeriesLayer","file":"src\\mixins\\standard-layer.js","line":52,"description":"extension of `seriesLayer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardSeriesLayer('circles', this.base.append('g'));\n  },\n\n  // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n}));\n```"],"itemtype":"method","name":"standardSeriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardSeriesLayer(name, selection)"},{"id":"mixins-StandardLayer-onDataBind","file":"src\\mixins\\standard-layer.js","line":73,"description":"Called for standard layer's `dataBind`","itemtype":"method","name":"onDataBind","params":[{"name":"selection","description":"","type":"d3.selection"},{"name":"data","description":"","type":"Any"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onDataBind(selection, data)"},{"id":"mixins-StandardLayer-onInsert","file":"src\\mixins\\standard-layer.js","line":83,"description":"Called for standard layer's `insert`","itemtype":"method","name":"onInsert","params":[{"name":"selection","description":"","type":"d3.selection"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onInsert(selection)"},{"id":"mixins-StandardLayer-onEnter","file":"src\\mixins\\standard-layer.js","line":92,"description":"Call for standard layer's `events['enter']`","itemtype":"method","name":"onEnter","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnter(selection)"},{"id":"mixins-StandardLayer-onEnterTransition","file":"src\\mixins\\standard-layer.js","line":100,"description":"Call for standard layer's `events['enter:transition']`","itemtype":"method","name":"onEnterTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnterTransition(selection)"},{"id":"mixins-StandardLayer-onUpdate","file":"src\\mixins\\standard-layer.js","line":108,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdate","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdate(selection)"},{"id":"mixins-StandardLayer-onUpdateTransition","file":"src\\mixins\\standard-layer.js","line":116,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdateTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdateTransition(selection)"},{"id":"mixins-StandardLayer-onMerge","file":"src\\mixins\\standard-layer.js","line":124,"description":"Call for standard layer's `events['merge']`","itemtype":"method","name":"onMerge","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMerge(selection)"},{"id":"mixins-StandardLayer-onMergeTransition","file":"src\\mixins\\standard-layer.js","line":132,"description":"Call for standard layer's `events['merge:transition']`","itemtype":"method","name":"onMergeTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMergeTransition(selection)"},{"id":"mixins-StandardLayer-onExit","file":"src\\mixins\\standard-layer.js","line":140,"description":"Call for standard layer's `events['exit']`","itemtype":"method","name":"onExit","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExit(selection)"},{"id":"mixins-StandardLayer-onExitTransition","file":"src\\mixins\\standard-layer.js","line":148,"description":"Call for standard layer's `events['exit:transition']`","itemtype":"method","name":"onExitTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExitTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\standard-layer.js","line":1,"description":"Mixin to create standard layer to make extending charts straightforward.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('main', this.base.append('g'))\n    // dataBind, insert, events are defined on prototype\n  },\n\n  onDataBind: function(selection, data) {\n    // ...\n  },\n  onInsert: function(selection) {\n    // ...\n  },\n  onEnter: function(selection) {\n    // ...\n  },\n  onUpdateTransition: function(selection) {\n    // ...\n  },\n  // all d3.chart events are available: onMerge, onExit, ...\n}));\n```"],"id":"mixins-StandardLayer"}],"plugin_for":[],"extension_for":[],"file":"src\\charts\\Lines.js","line":19,"description":"Create an XY Lines chart with single or series data.\n\n### Extending\n\nGreat care has been taken in making the standard charts in d3.compose extensible.\nTo extend the `Lines` chart, the following methods are available:\n\n- `createLine`\n- `lineKey`\n- `lineData`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`\n\nView the `Lines.js` source for the default implementation and more information on these methods.","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  return {\n    charts: {\n      input: {\n        type: 'Lines'\n        data: data.input,\n        // xScale: ...,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([1, 2, 3]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\n  {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\n]);\n```"],"extends":"Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer","id":"Lines"},"StackedBars":{"name":"StackedBars","shortname":"StackedBars","classitems":[],"plugins":[],"extensions":[{"name":"Bars","shortname":"Bars","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"src\\charts\\Bars.js","line":20,"description":"Bars chart with centered or adjacent display for single or series data.\n\nTo display bars for different series next to each other (adjacent),\nuse the `adjacent` option when creating the `xScale` (see example below).\n\n### Extending\n\nTo extend the `Bars` chart, the following methods are available:\n\n- `barHeight`\n- `barWidth`\n- `barX`\n- `barY`\n- `barClass`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'Bars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer","id":"Bars"}],"plugin_for":[],"extension_for":[],"file":"src\\charts\\StackedBars.js","line":10,"description":"Bars chart with values stacked on top of each other\n\n(See `Bars` for extensibility details)","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      stacked_output: {\n        type: 'StackedBars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Bars","id":"StackedBars"},"Axis":{"name":"Axis","shortname":"Axis","classitems":[{"id":"Axis-scale","file":"src\\components\\Axis.js","line":146,"description":"Scale to pass to d3.axis\n\n- If `xScale`/`yScale` are given, `scale` is set automatically based on `position`.\n- Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used","example":["\n```js\n// Set with d3.scale directly\naxis.scale(d3.scale());\n\n// or with Object passed helpers.createScale\naxis.scale({data: data, key: 'x'});\n\n// For x0/y0 position, both xScale and yScale needed\n// (scale is automatically set by position)\naxis.xScale({domain: [0, 100]});\naxis.yScale({domain: [0, 10]});\naxis.position('y0');\n\n// -> axis.scale() -> axis.xScale by default\n```"],"itemtype":"property","name":"scale","type":"Object|d3.scale","class":"Axis","code":"{Object|d3.scale}"},{"id":"Axis-translation","file":"src\\components\\Axis.js","line":177,"description":"{x,y} translation of axis relative to chart\n(set by default based on position)","itemtype":"property","name":"translation","type":"Object","default":"(set based on position)","class":"Axis","code":"{Object} [(set based on position)]"},{"id":"Axis-orient","file":"src\\components\\Axis.js","line":197,"description":"Axis orient for ticks\n(set by default based on position)","itemtype":"property","name":"orient","type":"String","default":"(set based on position)","class":"Axis","code":"{String} [(set based on position)]"},{"id":"Axis-orientation","file":"src\\components\\Axis.js","line":212,"description":"Axis orientation (vertical or horizonal)","itemtype":"property","name":"orientation","type":"String","default":"(set based on position)","class":"Axis","code":"{String} [(set based on position)]"},{"id":"Axis-gridlines","file":"src\\components\\Axis.js","line":236,"description":"Attach gridlines for axis\n(`true` to show with default options, `{...}` to pass options to `Gridlines`)","itemtype":"property","name":"gridlines","type":"Boolean|Object","default":"false","class":"Axis","code":"{Boolean|Object} [false]"}],"plugins":[],"extensions":[{"name":"Component","shortname":"Component","classitems":[{"id":"Component-position","file":"src\\Component.js","line":52,"description":"Component's position relative to chart\n(top, right, bottom, left)","itemtype":"property","name":"position","type":"String","default":"'top'","class":"Component","code":"{String} ['top']"},{"id":"Component-width","file":"src\\Component.js","line":67,"description":"Get/set the width of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"width","type":"Number","default":"(actual width)","class":"Component","code":"{Number} [(actual width)]"},{"id":"Component-height","file":"src\\Component.js","line":81,"description":"Get/set the height of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"height","type":"Number","default":"(actual height)","class":"Component","code":"{Number} [(actual height)]"},{"id":"Component-margins","file":"src\\Component.js","line":95,"description":"Margins (in pixels) around component","itemtype":"property","name":"margins","type":"Object","default":"{top: 0, right: 0, bottom: 0, left: 0}","class":"Component","code":"{Object} [{top: 0, right: 0, bottom: 0, left: 0}]"},{"id":"Component-centered","file":"src\\Component.js","line":111,"description":"Center the component vertically/horizontally (depending on position)","itemtype":"property","name":"centered","type":"Boolean","default":"false","class":"Component","code":"{Boolean} [false]"},{"id":"Component-skip_layout","file":"src\\Component.js","line":122,"description":"Skip component during layout calculations and positioning\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('NotLaidOut', {\n  skip_layout: true\n});\n```"],"itemtype":"attribute","name":"skip_layout","type":"Boolean","default":"false","class":"Component"},{"id":"Component-prepareLayout","file":"src\\Component.js","line":138,"description":"Perform any layout preparation required before getLayout (default is draw)\n(override in prototype of extension)\n\nNote: By default, components are double-drawn;\nfor every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\nThis can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  prepareLayout: function(data) {\n    // default: this.draw(data);\n    // so that getLayout has real dimensions\n\n    // -> custom preparation (if necessary)\n  }\n})\n```"],"itemtype":"method","name":"prepareLayout","params":[{"name":"data","description":"","type":"Any"}],"class":"Component","code":"prepareLayout(data)"},{"id":"Component-getLayout","file":"src\\Component.js","line":164,"description":"Get layout details for use when laying out component\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  getLayout: function(data) {\n    var calculated_width, calculated_height;\n\n    // Perform custom calculations...\n\n    // Must return position, width, and height\n    return {\n      position: this.position(),\n      width: calculated_width,\n      height: calculated_height\n    };\n  }\n});\n```"],"itemtype":"method","name":"getLayout","params":[{"name":"data","description":"","type":"Any"}],"return":{"description":"position, width, and height for layout","type":"Object"},"class":"Component","code":"getLayout(data)"},{"id":"Component-setLayout","file":"src\\Component.js","line":200,"description":"Set layout of underlying base\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  setLayout: function(x, y, options) {\n    // Set layout of this.base...\n    // (the following is the default implementation)\n    var margins = this.margins();\n\n    // (handle this.centered())\n\n    this.base\n      .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n    this.height(options && options.height);\n    this.width(options && options.width);\n  }\n});\n```"],"itemtype":"method","name":"setLayout","params":[{"name":"x","description":"position of base top-left","type":"Number"},{"name":"y","description":"position of base top-left","type":"Number"},{"name":"options","description":"","type":"Object","props":[{"name":"height","description":"height of component in layout","type":"Object","optional":true},{"name":"width","description":"width of component in layout","type":"Object","optional":true}]}],"class":"Component","code":"setLayout(x, y, options)"},{"id":"Component-z_index","file":"src\\Component.js","line":278,"description":"Default z-index for component\n(Charts are 100 by default, so Component = 50 is below chart by default)","example":["\n```js\nd3.chart('Component').extend('AboveChartLayers', {\n  // ...\n}, {\n  z_index: 150\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"50","class":"Component"},{"id":"Component-layer_type","file":"src\\Component.js","line":297,"description":"Set to `'chart'` to use chart layer for component.\n(e.g. Axis uses chart layer to position with charts, but includes layout for ticks)","example":["\n```js\nd3.chart('Component').extend('ChartComponent', {\n  // ...\n}, {\n  layer_type: 'chart'\n});\n```"],"itemtype":"attribute","name":"layer_type","static":1,"type":"String","default":"'component'","class":"Component"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Component.js","line":12,"description":"Common base for creating components that includes helpers for positioning and layout.\n\n### Extending\n\n`d3.chart('Component')` contains intelligent defaults and there are no required overrides.\nCreate a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n- To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n- To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`","example":["\n```js\nd3.chart('Component').extend('Key', {\n  initialize: function() {\n    this.layer('Key', this.base, {\n      dataBind: function(data) {\n        return this.selectAll('text')\n          .data(data);\n      },\n      insert: function() {\n        return this.append('text');\n      },\n      events: {\n        merge: function() {\n          this.text(this.chart().keyText)\n        }\n      }\n    })\n  },\n\n  keyText: helpers.di(function(chart, d, i) {\n    return d.abbr + ' = ' + d.value;\n  })\n});\n```"],"extends":"Base","id":"Component"},{"name":"mixins.Transition","shortname":"Transition","classitems":[{"id":"mixins-Transition-delay","file":"src\\mixins\\transition.js","line":15,"description":"Delay start of transition by specified milliseconds.","itemtype":"property","name":"delay","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-duration","file":"src\\mixins\\transition.js","line":28,"description":"Transition duration in milliseconds.","itemtype":"property","name":"duration","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-ease","file":"src\\mixins\\transition.js","line":41,"description":"Transition ease function\n\n- See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n- Note: arguments to pass to `d3.ease` are not supported","itemtype":"property","name":"ease","type":"String|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{String|Function} [(use container value, if available)]"},{"id":"mixins-Transition-setupTransition","file":"src\\mixins\\transition.js","line":57,"description":"Setup delay, duration, and ease for transition","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n  initialize: function() {\n    this.layer('circles', this.base, {\n      // ...\n      events: {\n        'merge:transition': function() {\n          // Set delay, duration, and ease from properties\n          this.chart().setupTransition(this);\n        }\n      }\n    });\n  }\n}));\n```"],"itemtype":"method","name":"setupTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.Transition","namespace":"mixins","code":"setupTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\transition.js","line":8,"description":"Mixin for handling common transition behaviors","id":"mixins-Transition"}],"plugin_for":[],"extension_for":[],"file":"src\\components\\Axis.js","line":31,"description":"Axis component for XY data (wraps `d3.axis`).\n\nAvailable d3.axis extensions:\n\n- `ticks`\n- `tickValues`\n- `tickSize`\n- `innerTickSize`\n- `outerTickSize`\n- `tickPadding`\n- `tickFormat`","example":["\n```js\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    var scales = {\n      x: {data: data, key: 'x'},\n      y: {data: data, key: 'y'}\n    };\n\n    var charts = [];\n    var xAxis = d3c.axis({scale: scales.x});\n    var yAxis = d3c.axis({scale: scales.y});\n\n    return [\n      // Display y-axis to left of charts\n      [yAxis, d3c.layered(charts)],\n\n      // Display x-axis below charts\n      xAxis\n    ];\n  });\n```"],"extends":"Component, Transition","id":"Axis"},"AxisTitle":{"name":"AxisTitle","shortname":"AxisTitle","classitems":[{"id":"AxisTitle-margins","file":"src\\components\\AxisTitle.js","line":37,"description":"Margins (in pixels) around axis title","itemtype":"property","name":"margins","type":"Object","default":"(set based on `position`)","class":"AxisTitle","code":"{Object} [(set based on `position`)]"}],"plugins":[],"extensions":[{"name":"Title","shortname":"Title","classitems":[{"id":"Title-margins","file":"src\\components\\Title.js","line":36,"description":"Margins (in pixels) around Title","itemtype":"property","name":"margins","type":"Object","default":"(set based on `position`)","class":"Title","code":"{Object} [(set based on `position`)]"},{"id":"Title-rotation","file":"src\\components\\Title.js","line":50,"description":"Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).","itemtype":"property","name":"rotation","type":"Number","default":"(set based on `position`)","class":"Title","code":"{Number} [(set based on `position`)]"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"src\\components\\Title.js","line":12,"description":"Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)","extends":"Text","id":"Title"}],"plugin_for":[],"extension_for":[],"file":"src\\components\\AxisTitle.js","line":13,"description":"Axis title component that extends Title with defaults (styling)","extends":"Title","id":"AxisTitle"},"Gridlines":{"name":"Gridlines","shortname":"Gridlines","classitems":[{"id":"Gridlines-orientation","file":"src\\components\\Gridlines.js","line":90,"description":"Use horizontal, vertical gridlines","itemtype":"property","name":"orientation","type":"String","default":"horizontal","class":"Gridlines","code":"{String} [horizontal]"},{"id":"Gridlines-scale","file":"src\\components\\Gridlines.js","line":109,"description":"Scale to use for gridlines.\nCan be `d3.scale` or, if `Object` is given, `helpers.createScale` is used.","example":["\n```js\n// Set with d3.scale directly\ngridlines.scale(d3.scale());\n\n// or with Object passed to helpers.createScale\ngridlines.scale({data: data, key: 'x'});\n```"],"itemtype":"property","name":"scale","type":"Object|d3.scale","class":"Gridlines","code":"{Object|d3.scale}"}],"plugins":[],"plugin_for":[],"extension_for":[],"file":"src\\components\\Gridlines.js","line":17,"description":"Gridlines component that draws major ticks for chart\n\nUses d3.axis extensions for ticks:\n\n- `ticks`\n- `tickValues`\n\n### Extending\n\nTo extend the `Gridlines` component, the following methods are available\n\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`","example":["\n```js\nd3.select('#chart').chart('Compose', function(data) {\n  var scales = {\n    x: {data: data, key: 'x'},\n    y: {data: data, key: 'y'}\n  };\n\n  var vertical = d3c.gridlines({\n    scale: scales.x,\n    orientation: 'vertical'\n  });\n  var horizontal = d3c.gridlines({\n    scale: scales.y,\n    orientation: 'horizontal'\n  });\n\n  return [\n    vertical,\n    horizontal\n  ];\n});\n```"],"id":"Gridlines"},"InsetLegend":{"name":"InsetLegend","shortname":"InsetLegend","classitems":[{"id":"InsetLegend-translation","file":"src\\components\\InsetLegend.js","line":33,"description":"Position legend within chart layer `{x, y, relative_to}`\nUse `relative_to` to use x,y values relative to x-y origin\n(e.g. `\"left-top\"` is default)","example":["\n```js\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    return {\n      components: {\n        legend: {\n          type: 'InsetLegend',\n          // Position legend 10px away from right-bottom corner of chart\n          translation: {x: 10, y: 10, relative_to: 'right-bottom'}\n        }\n      }\n    }\n  });\n```"],"itemtype":"property","name":"translation","type":"Object {x,y}","default":"{x: 10, y: 10, relative_to: 'left-top'}","class":"InsetLegend","code":"{Object {x,y}} [{x: 10, y: 10, relative_to: 'left-top'}]"}],"plugins":[],"extensions":[{"name":"Legend","shortname":"Legend","classitems":[{"id":"Legend-charts","file":"src\\components\\Legend.js","line":160,"description":"Array of chart keys from container to display in legend","example":["\n```js\nd3.select('#chart')\n.chart('Compose', function(data) {\n  var charts = [\n    {id: 'a'},\n    {id: 'b'},\n    {id: 'c'}\n  ];\n  var legend = d3c.legend({charts: ['a', 'c']});\n\n  return [\n    [d3c.layered(charts), legend]\n  ];\n});\n```"],"itemtype":"property","name":"charts","type":"Array","class":"Legend","code":"{Array}"},{"id":"Legend-swatchDimensions","file":"src\\components\\Legend.js","line":186,"description":"Dimensions of \"swatch\" in px","itemtype":"property","name":"swatchDimensions","type":"Object","default":"{width: 20, height: 20}","class":"Legend","code":"{Object} [{width: 20, height: 20}]"},{"id":"Legend-margins","file":"src\\components\\Legend.js","line":200,"description":"Margins (in pixels) around legend","itemtype":"property","name":"margins","type":"Object","default":"{top: 8, right: 8, bottom: 8, left: 8}","class":"Legend","code":"{Object} [{top: 8, right: 8, bottom: 8, left: 8}]"},{"id":"Legend-stackDirection","file":"src\\components\\Legend.js","line":214,"description":"Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\n(Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")","itemtype":"property","name":"stackDirection","type":"String","default":"(based on position)","class":"Legend","code":"{String} [(based on position)]"},{"id":"Legend-registerSwatch","file":"src\\components\\Legend.js","line":252,"description":"Register a swatch create function for the given chart type","example":["\n```js\nd3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\n  var dimensions = chart.swatchDimensions();\n\n  return this.append('line')\n    .attr('x1', 0).attr('y1', dimensions.height / 2)\n    .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\n    .attr('class', 'chart-line');\n});\n```"],"itemtype":"method","name":"registerSwatch","static":1,"params":[{"name":"types","description":"Chart type(s)","type":"Array|String"},{"name":"create","description":"\"di\" function that inserts swatch","type":"Function"}],"class":"Legend","code":"registerSwatch(types, create)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"src\\components\\Legend.js","line":38,"description":"Legend component that can automatically pull chart and series information from d3.compose\n\nNotes:\n\n- To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\n- To exclude a series from the legend, use `exclude_from_legend = true` in series object\n- To add swatch for custom chart, use `Legend.registerSwatch()`","example":["\n```js\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    var input = [{key: 'input', name: 'Input', values: data.input}];\n    var output = [\n      {key: 'output1', name: 'Output 1', values: data.output1},\n      {key: 'output2', name: 'Output 2', values: data.output2}\n    ];\n\n    var charts = [\n      d3c.lines('a', {data: input}), // ...\n      d3c.bars('b', {data: output}) // ...\n    ];\n    var legend = d3c.legend({charts: ['a', 'b']});\n\n    return [\n      [d3c.layered(charts), legend]\n    ];\n  });\n\n// -> automatically creates legend from series data for 'a' and 'b'\n//    (Lines Swatch) Input\n//    (Bars Swatch) Output 1\n//    (Bars Swatch) Output 2\n\n// or, manually set data for legend\nreturn [\n  d3c.legend({\n    data: [\n      {type: 'Lines', text: 'Input', class: 'series-index-0'},\n      {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\n      {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\n    ]\n  })\n};\n```"],"extends":"Component, StandardLayer","id":"Legend"}],"plugin_for":[],"extension_for":[],"file":"src\\components\\InsetLegend.js","line":14,"description":"Legend positioned within chart bounds.","extends":"Legend","id":"InsetLegend"},"Legend":{"name":"Legend","shortname":"Legend","classitems":[{"id":"Legend-charts","file":"src\\components\\Legend.js","line":160,"description":"Array of chart keys from container to display in legend","example":["\n```js\nd3.select('#chart')\n.chart('Compose', function(data) {\n  var charts = [\n    {id: 'a'},\n    {id: 'b'},\n    {id: 'c'}\n  ];\n  var legend = d3c.legend({charts: ['a', 'c']});\n\n  return [\n    [d3c.layered(charts), legend]\n  ];\n});\n```"],"itemtype":"property","name":"charts","type":"Array","class":"Legend","code":"{Array}"},{"id":"Legend-swatchDimensions","file":"src\\components\\Legend.js","line":186,"description":"Dimensions of \"swatch\" in px","itemtype":"property","name":"swatchDimensions","type":"Object","default":"{width: 20, height: 20}","class":"Legend","code":"{Object} [{width: 20, height: 20}]"},{"id":"Legend-margins","file":"src\\components\\Legend.js","line":200,"description":"Margins (in pixels) around legend","itemtype":"property","name":"margins","type":"Object","default":"{top: 8, right: 8, bottom: 8, left: 8}","class":"Legend","code":"{Object} [{top: 8, right: 8, bottom: 8, left: 8}]"},{"id":"Legend-stackDirection","file":"src\\components\\Legend.js","line":214,"description":"Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\n(Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")","itemtype":"property","name":"stackDirection","type":"String","default":"(based on position)","class":"Legend","code":"{String} [(based on position)]"},{"id":"Legend-registerSwatch","file":"src\\components\\Legend.js","line":252,"description":"Register a swatch create function for the given chart type","example":["\n```js\nd3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\n  var dimensions = chart.swatchDimensions();\n\n  return this.append('line')\n    .attr('x1', 0).attr('y1', dimensions.height / 2)\n    .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\n    .attr('class', 'chart-line');\n});\n```"],"itemtype":"method","name":"registerSwatch","static":1,"params":[{"name":"types","description":"Chart type(s)","type":"Array|String"},{"name":"create","description":"\"di\" function that inserts swatch","type":"Function"}],"class":"Legend","code":"registerSwatch(types, create)"}],"plugins":[],"extensions":[{"name":"Component","shortname":"Component","classitems":[{"id":"Component-position","file":"src\\Component.js","line":52,"description":"Component's position relative to chart\n(top, right, bottom, left)","itemtype":"property","name":"position","type":"String","default":"'top'","class":"Component","code":"{String} ['top']"},{"id":"Component-width","file":"src\\Component.js","line":67,"description":"Get/set the width of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"width","type":"Number","default":"(actual width)","class":"Component","code":"{Number} [(actual width)]"},{"id":"Component-height","file":"src\\Component.js","line":81,"description":"Get/set the height of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"height","type":"Number","default":"(actual height)","class":"Component","code":"{Number} [(actual height)]"},{"id":"Component-margins","file":"src\\Component.js","line":95,"description":"Margins (in pixels) around component","itemtype":"property","name":"margins","type":"Object","default":"{top: 0, right: 0, bottom: 0, left: 0}","class":"Component","code":"{Object} [{top: 0, right: 0, bottom: 0, left: 0}]"},{"id":"Component-centered","file":"src\\Component.js","line":111,"description":"Center the component vertically/horizontally (depending on position)","itemtype":"property","name":"centered","type":"Boolean","default":"false","class":"Component","code":"{Boolean} [false]"},{"id":"Component-skip_layout","file":"src\\Component.js","line":122,"description":"Skip component during layout calculations and positioning\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('NotLaidOut', {\n  skip_layout: true\n});\n```"],"itemtype":"attribute","name":"skip_layout","type":"Boolean","default":"false","class":"Component"},{"id":"Component-prepareLayout","file":"src\\Component.js","line":138,"description":"Perform any layout preparation required before getLayout (default is draw)\n(override in prototype of extension)\n\nNote: By default, components are double-drawn;\nfor every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\nThis can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  prepareLayout: function(data) {\n    // default: this.draw(data);\n    // so that getLayout has real dimensions\n\n    // -> custom preparation (if necessary)\n  }\n})\n```"],"itemtype":"method","name":"prepareLayout","params":[{"name":"data","description":"","type":"Any"}],"class":"Component","code":"prepareLayout(data)"},{"id":"Component-getLayout","file":"src\\Component.js","line":164,"description":"Get layout details for use when laying out component\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  getLayout: function(data) {\n    var calculated_width, calculated_height;\n\n    // Perform custom calculations...\n\n    // Must return position, width, and height\n    return {\n      position: this.position(),\n      width: calculated_width,\n      height: calculated_height\n    };\n  }\n});\n```"],"itemtype":"method","name":"getLayout","params":[{"name":"data","description":"","type":"Any"}],"return":{"description":"position, width, and height for layout","type":"Object"},"class":"Component","code":"getLayout(data)"},{"id":"Component-setLayout","file":"src\\Component.js","line":200,"description":"Set layout of underlying base\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  setLayout: function(x, y, options) {\n    // Set layout of this.base...\n    // (the following is the default implementation)\n    var margins = this.margins();\n\n    // (handle this.centered())\n\n    this.base\n      .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n    this.height(options && options.height);\n    this.width(options && options.width);\n  }\n});\n```"],"itemtype":"method","name":"setLayout","params":[{"name":"x","description":"position of base top-left","type":"Number"},{"name":"y","description":"position of base top-left","type":"Number"},{"name":"options","description":"","type":"Object","props":[{"name":"height","description":"height of component in layout","type":"Object","optional":true},{"name":"width","description":"width of component in layout","type":"Object","optional":true}]}],"class":"Component","code":"setLayout(x, y, options)"},{"id":"Component-z_index","file":"src\\Component.js","line":278,"description":"Default z-index for component\n(Charts are 100 by default, so Component = 50 is below chart by default)","example":["\n```js\nd3.chart('Component').extend('AboveChartLayers', {\n  // ...\n}, {\n  z_index: 150\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"50","class":"Component"},{"id":"Component-layer_type","file":"src\\Component.js","line":297,"description":"Set to `'chart'` to use chart layer for component.\n(e.g. Axis uses chart layer to position with charts, but includes layout for ticks)","example":["\n```js\nd3.chart('Component').extend('ChartComponent', {\n  // ...\n}, {\n  layer_type: 'chart'\n});\n```"],"itemtype":"attribute","name":"layer_type","static":1,"type":"String","default":"'component'","class":"Component"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Component.js","line":12,"description":"Common base for creating components that includes helpers for positioning and layout.\n\n### Extending\n\n`d3.chart('Component')` contains intelligent defaults and there are no required overrides.\nCreate a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n- To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n- To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`","example":["\n```js\nd3.chart('Component').extend('Key', {\n  initialize: function() {\n    this.layer('Key', this.base, {\n      dataBind: function(data) {\n        return this.selectAll('text')\n          .data(data);\n      },\n      insert: function() {\n        return this.append('text');\n      },\n      events: {\n        merge: function() {\n          this.text(this.chart().keyText)\n        }\n      }\n    })\n  },\n\n  keyText: helpers.di(function(chart, d, i) {\n    return d.abbr + ' = ' + d.value;\n  })\n});\n```"],"extends":"Base","id":"Component"},{"name":"mixins.StandardLayer","shortname":"StandardLayer","classitems":[{"id":"mixins-StandardLayer-standardLayer","file":"src\\mixins\\standard-layer.js","line":31,"description":"extension of `layer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('circles', this.base.append('g'));\n  }\n\n  // onDataBind, onInsert, etc. work with \"circles\" layer\n}));\n```"],"itemtype":"method","name":"standardLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardLayer(name, selection)"},{"id":"mixins-StandardLayer-standardSeriesLayer","file":"src\\mixins\\standard-layer.js","line":52,"description":"extension of `seriesLayer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardSeriesLayer('circles', this.base.append('g'));\n  },\n\n  // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n}));\n```"],"itemtype":"method","name":"standardSeriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardSeriesLayer(name, selection)"},{"id":"mixins-StandardLayer-onDataBind","file":"src\\mixins\\standard-layer.js","line":73,"description":"Called for standard layer's `dataBind`","itemtype":"method","name":"onDataBind","params":[{"name":"selection","description":"","type":"d3.selection"},{"name":"data","description":"","type":"Any"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onDataBind(selection, data)"},{"id":"mixins-StandardLayer-onInsert","file":"src\\mixins\\standard-layer.js","line":83,"description":"Called for standard layer's `insert`","itemtype":"method","name":"onInsert","params":[{"name":"selection","description":"","type":"d3.selection"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onInsert(selection)"},{"id":"mixins-StandardLayer-onEnter","file":"src\\mixins\\standard-layer.js","line":92,"description":"Call for standard layer's `events['enter']`","itemtype":"method","name":"onEnter","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnter(selection)"},{"id":"mixins-StandardLayer-onEnterTransition","file":"src\\mixins\\standard-layer.js","line":100,"description":"Call for standard layer's `events['enter:transition']`","itemtype":"method","name":"onEnterTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnterTransition(selection)"},{"id":"mixins-StandardLayer-onUpdate","file":"src\\mixins\\standard-layer.js","line":108,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdate","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdate(selection)"},{"id":"mixins-StandardLayer-onUpdateTransition","file":"src\\mixins\\standard-layer.js","line":116,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdateTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdateTransition(selection)"},{"id":"mixins-StandardLayer-onMerge","file":"src\\mixins\\standard-layer.js","line":124,"description":"Call for standard layer's `events['merge']`","itemtype":"method","name":"onMerge","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMerge(selection)"},{"id":"mixins-StandardLayer-onMergeTransition","file":"src\\mixins\\standard-layer.js","line":132,"description":"Call for standard layer's `events['merge:transition']`","itemtype":"method","name":"onMergeTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMergeTransition(selection)"},{"id":"mixins-StandardLayer-onExit","file":"src\\mixins\\standard-layer.js","line":140,"description":"Call for standard layer's `events['exit']`","itemtype":"method","name":"onExit","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExit(selection)"},{"id":"mixins-StandardLayer-onExitTransition","file":"src\\mixins\\standard-layer.js","line":148,"description":"Call for standard layer's `events['exit:transition']`","itemtype":"method","name":"onExitTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExitTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\standard-layer.js","line":1,"description":"Mixin to create standard layer to make extending charts straightforward.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('main', this.base.append('g'))\n    // dataBind, insert, events are defined on prototype\n  },\n\n  onDataBind: function(selection, data) {\n    // ...\n  },\n  onInsert: function(selection) {\n    // ...\n  },\n  onEnter: function(selection) {\n    // ...\n  },\n  onUpdateTransition: function(selection) {\n    // ...\n  },\n  // all d3.chart events are available: onMerge, onExit, ...\n}));\n```"],"id":"mixins-StandardLayer"}],"plugin_for":[],"extension_for":[],"file":"src\\components\\Legend.js","line":38,"description":"Legend component that can automatically pull chart and series information from d3.compose\n\nNotes:\n\n- To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\n- To exclude a series from the legend, use `exclude_from_legend = true` in series object\n- To add swatch for custom chart, use `Legend.registerSwatch()`","example":["\n```js\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    var input = [{key: 'input', name: 'Input', values: data.input}];\n    var output = [\n      {key: 'output1', name: 'Output 1', values: data.output1},\n      {key: 'output2', name: 'Output 2', values: data.output2}\n    ];\n\n    var charts = [\n      d3c.lines('a', {data: input}), // ...\n      d3c.bars('b', {data: output}) // ...\n    ];\n    var legend = d3c.legend({charts: ['a', 'b']});\n\n    return [\n      [d3c.layered(charts), legend]\n    ];\n  });\n\n// -> automatically creates legend from series data for 'a' and 'b'\n//    (Lines Swatch) Input\n//    (Bars Swatch) Output 1\n//    (Bars Swatch) Output 2\n\n// or, manually set data for legend\nreturn [\n  d3c.legend({\n    data: [\n      {type: 'Lines', text: 'Input', class: 'series-index-0'},\n      {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\n      {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\n    ]\n  })\n};\n```"],"extends":"Component, StandardLayer","id":"Legend"},"Text":{"name":"Text","shortname":"Text","classitems":[{"id":"Text-text","file":"src\\components\\Text.js","line":78,"description":"Text to display","itemtype":"property","name":"text","type":"String","class":"Text","code":"{String}"},{"id":"Text-rotation","file":"src\\components\\Text.js","line":86,"description":"Rotation of text","itemtype":"property","name":"rotation","type":"Number","default":"0","class":"Text","code":"{Number} [0]"},{"id":"Text-textAlign","file":"src\\components\\Text.js","line":100,"description":"Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)","itemtype":"property","name":"textAlign","type":"String","default":"\"center\"","class":"Text","code":"{String} [\"center\"]"},{"id":"Text-anchor","file":"src\\components\\Text.js","line":117,"description":"text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)","itemtype":"property","name":"anchor","type":"String","default":"(set by `textAlign`)","class":"Text","code":"{String} [(set by `textAlign`)]"},{"id":"Text-verticalAlign","file":"src\\components\\Text.js","line":138,"description":"Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)","itemtype":"property","name":"verticalAlign","type":"String","default":"\"middle\"","class":"Text","code":"{String} [\"middle\"]"},{"id":"Text-style","file":"src\\components\\Text.js","line":155,"description":"Style object containing styles for text","itemtype":"property","name":"style","type":"Object","default":"{}","class":"Text","code":"{Object} [{}]"}],"plugins":[],"extensions":[{"name":"Component","shortname":"Component","classitems":[{"id":"Component-position","file":"src\\Component.js","line":52,"description":"Component's position relative to chart\n(top, right, bottom, left)","itemtype":"property","name":"position","type":"String","default":"'top'","class":"Component","code":"{String} ['top']"},{"id":"Component-width","file":"src\\Component.js","line":67,"description":"Get/set the width of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"width","type":"Number","default":"(actual width)","class":"Component","code":"{Number} [(actual width)]"},{"id":"Component-height","file":"src\\Component.js","line":81,"description":"Get/set the height of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"height","type":"Number","default":"(actual height)","class":"Component","code":"{Number} [(actual height)]"},{"id":"Component-margins","file":"src\\Component.js","line":95,"description":"Margins (in pixels) around component","itemtype":"property","name":"margins","type":"Object","default":"{top: 0, right: 0, bottom: 0, left: 0}","class":"Component","code":"{Object} [{top: 0, right: 0, bottom: 0, left: 0}]"},{"id":"Component-centered","file":"src\\Component.js","line":111,"description":"Center the component vertically/horizontally (depending on position)","itemtype":"property","name":"centered","type":"Boolean","default":"false","class":"Component","code":"{Boolean} [false]"},{"id":"Component-skip_layout","file":"src\\Component.js","line":122,"description":"Skip component during layout calculations and positioning\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('NotLaidOut', {\n  skip_layout: true\n});\n```"],"itemtype":"attribute","name":"skip_layout","type":"Boolean","default":"false","class":"Component"},{"id":"Component-prepareLayout","file":"src\\Component.js","line":138,"description":"Perform any layout preparation required before getLayout (default is draw)\n(override in prototype of extension)\n\nNote: By default, components are double-drawn;\nfor every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\nThis can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  prepareLayout: function(data) {\n    // default: this.draw(data);\n    // so that getLayout has real dimensions\n\n    // -> custom preparation (if necessary)\n  }\n})\n```"],"itemtype":"method","name":"prepareLayout","params":[{"name":"data","description":"","type":"Any"}],"class":"Component","code":"prepareLayout(data)"},{"id":"Component-getLayout","file":"src\\Component.js","line":164,"description":"Get layout details for use when laying out component\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  getLayout: function(data) {\n    var calculated_width, calculated_height;\n\n    // Perform custom calculations...\n\n    // Must return position, width, and height\n    return {\n      position: this.position(),\n      width: calculated_width,\n      height: calculated_height\n    };\n  }\n});\n```"],"itemtype":"method","name":"getLayout","params":[{"name":"data","description":"","type":"Any"}],"return":{"description":"position, width, and height for layout","type":"Object"},"class":"Component","code":"getLayout(data)"},{"id":"Component-setLayout","file":"src\\Component.js","line":200,"description":"Set layout of underlying base\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  setLayout: function(x, y, options) {\n    // Set layout of this.base...\n    // (the following is the default implementation)\n    var margins = this.margins();\n\n    // (handle this.centered())\n\n    this.base\n      .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n    this.height(options && options.height);\n    this.width(options && options.width);\n  }\n});\n```"],"itemtype":"method","name":"setLayout","params":[{"name":"x","description":"position of base top-left","type":"Number"},{"name":"y","description":"position of base top-left","type":"Number"},{"name":"options","description":"","type":"Object","props":[{"name":"height","description":"height of component in layout","type":"Object","optional":true},{"name":"width","description":"width of component in layout","type":"Object","optional":true}]}],"class":"Component","code":"setLayout(x, y, options)"},{"id":"Component-z_index","file":"src\\Component.js","line":278,"description":"Default z-index for component\n(Charts are 100 by default, so Component = 50 is below chart by default)","example":["\n```js\nd3.chart('Component').extend('AboveChartLayers', {\n  // ...\n}, {\n  z_index: 150\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"50","class":"Component"},{"id":"Component-layer_type","file":"src\\Component.js","line":297,"description":"Set to `'chart'` to use chart layer for component.\n(e.g. Axis uses chart layer to position with charts, but includes layout for ticks)","example":["\n```js\nd3.chart('Component').extend('ChartComponent', {\n  // ...\n}, {\n  layer_type: 'chart'\n});\n```"],"itemtype":"attribute","name":"layer_type","static":1,"type":"String","default":"'component'","class":"Component"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Component.js","line":12,"description":"Common base for creating components that includes helpers for positioning and layout.\n\n### Extending\n\n`d3.chart('Component')` contains intelligent defaults and there are no required overrides.\nCreate a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n- To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n- To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`","example":["\n```js\nd3.chart('Component').extend('Key', {\n  initialize: function() {\n    this.layer('Key', this.base, {\n      dataBind: function(data) {\n        return this.selectAll('text')\n          .data(data);\n      },\n      insert: function() {\n        return this.append('text');\n      },\n      events: {\n        merge: function() {\n          this.text(this.chart().keyText)\n        }\n      }\n    })\n  },\n\n  keyText: helpers.di(function(chart, d, i) {\n    return d.abbr + ' = ' + d.value;\n  })\n});\n```"],"extends":"Base","id":"Component"},{"name":"mixins.StandardLayer","shortname":"StandardLayer","classitems":[{"id":"mixins-StandardLayer-standardLayer","file":"src\\mixins\\standard-layer.js","line":31,"description":"extension of `layer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('circles', this.base.append('g'));\n  }\n\n  // onDataBind, onInsert, etc. work with \"circles\" layer\n}));\n```"],"itemtype":"method","name":"standardLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardLayer(name, selection)"},{"id":"mixins-StandardLayer-standardSeriesLayer","file":"src\\mixins\\standard-layer.js","line":52,"description":"extension of `seriesLayer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardSeriesLayer('circles', this.base.append('g'));\n  },\n\n  // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n}));\n```"],"itemtype":"method","name":"standardSeriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardSeriesLayer(name, selection)"},{"id":"mixins-StandardLayer-onDataBind","file":"src\\mixins\\standard-layer.js","line":73,"description":"Called for standard layer's `dataBind`","itemtype":"method","name":"onDataBind","params":[{"name":"selection","description":"","type":"d3.selection"},{"name":"data","description":"","type":"Any"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onDataBind(selection, data)"},{"id":"mixins-StandardLayer-onInsert","file":"src\\mixins\\standard-layer.js","line":83,"description":"Called for standard layer's `insert`","itemtype":"method","name":"onInsert","params":[{"name":"selection","description":"","type":"d3.selection"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onInsert(selection)"},{"id":"mixins-StandardLayer-onEnter","file":"src\\mixins\\standard-layer.js","line":92,"description":"Call for standard layer's `events['enter']`","itemtype":"method","name":"onEnter","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnter(selection)"},{"id":"mixins-StandardLayer-onEnterTransition","file":"src\\mixins\\standard-layer.js","line":100,"description":"Call for standard layer's `events['enter:transition']`","itemtype":"method","name":"onEnterTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnterTransition(selection)"},{"id":"mixins-StandardLayer-onUpdate","file":"src\\mixins\\standard-layer.js","line":108,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdate","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdate(selection)"},{"id":"mixins-StandardLayer-onUpdateTransition","file":"src\\mixins\\standard-layer.js","line":116,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdateTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdateTransition(selection)"},{"id":"mixins-StandardLayer-onMerge","file":"src\\mixins\\standard-layer.js","line":124,"description":"Call for standard layer's `events['merge']`","itemtype":"method","name":"onMerge","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMerge(selection)"},{"id":"mixins-StandardLayer-onMergeTransition","file":"src\\mixins\\standard-layer.js","line":132,"description":"Call for standard layer's `events['merge:transition']`","itemtype":"method","name":"onMergeTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMergeTransition(selection)"},{"id":"mixins-StandardLayer-onExit","file":"src\\mixins\\standard-layer.js","line":140,"description":"Call for standard layer's `events['exit']`","itemtype":"method","name":"onExit","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExit(selection)"},{"id":"mixins-StandardLayer-onExitTransition","file":"src\\mixins\\standard-layer.js","line":148,"description":"Call for standard layer's `events['exit:transition']`","itemtype":"method","name":"onExitTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExitTransition(selection)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\standard-layer.js","line":1,"description":"Mixin to create standard layer to make extending charts straightforward.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('main', this.base.append('g'))\n    // dataBind, insert, events are defined on prototype\n  },\n\n  onDataBind: function(selection, data) {\n    // ...\n  },\n  onInsert: function(selection) {\n    // ...\n  },\n  onEnter: function(selection) {\n    // ...\n  },\n  onUpdateTransition: function(selection) {\n    // ...\n  },\n  // all d3.chart events are available: onMerge, onExit, ...\n}));\n```"],"id":"mixins-StandardLayer"}],"plugin_for":[],"extension_for":[],"file":"src\\components\\Text.js","line":21,"description":"Add text to a chart.","example":["\n```js\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    return {\n      components: {\n        title: {\n          type: 'Text',\n          position: 'top'\n          text: 'Main Title',\n          textAlign: 'left',\n          'class': 'title'\n        },\n        notes: {\n          type: 'Text',\n          position: 'bottom',\n          text: 'Notes',\n          'class': 'notes'\n        }\n      }\n    };\n  });\n```"],"extends":"Component, StandardLayer","id":"Text"},"Title":{"name":"Title","shortname":"Title","classitems":[{"id":"Title-margins","file":"src\\components\\Title.js","line":36,"description":"Margins (in pixels) around Title","itemtype":"property","name":"margins","type":"Object","default":"(set based on `position`)","class":"Title","code":"{Object} [(set based on `position`)]"},{"id":"Title-rotation","file":"src\\components\\Title.js","line":50,"description":"Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).","itemtype":"property","name":"rotation","type":"Number","default":"(set based on `position`)","class":"Title","code":"{Number} [(set based on `position`)]"}],"plugins":[],"extensions":[{"name":"Text","shortname":"Text","classitems":[{"id":"Text-text","file":"src\\components\\Text.js","line":78,"description":"Text to display","itemtype":"property","name":"text","type":"String","class":"Text","code":"{String}"},{"id":"Text-rotation","file":"src\\components\\Text.js","line":86,"description":"Rotation of text","itemtype":"property","name":"rotation","type":"Number","default":"0","class":"Text","code":"{Number} [0]"},{"id":"Text-textAlign","file":"src\\components\\Text.js","line":100,"description":"Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)","itemtype":"property","name":"textAlign","type":"String","default":"\"center\"","class":"Text","code":"{String} [\"center\"]"},{"id":"Text-anchor","file":"src\\components\\Text.js","line":117,"description":"text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)","itemtype":"property","name":"anchor","type":"String","default":"(set by `textAlign`)","class":"Text","code":"{String} [(set by `textAlign`)]"},{"id":"Text-verticalAlign","file":"src\\components\\Text.js","line":138,"description":"Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)","itemtype":"property","name":"verticalAlign","type":"String","default":"\"middle\"","class":"Text","code":"{String} [\"middle\"]"},{"id":"Text-style","file":"src\\components\\Text.js","line":155,"description":"Style object containing styles for text","itemtype":"property","name":"style","type":"Object","default":"{}","class":"Text","code":"{Object} [{}]"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"src\\components\\Text.js","line":21,"description":"Add text to a chart.","example":["\n```js\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    return {\n      components: {\n        title: {\n          type: 'Text',\n          position: 'top'\n          text: 'Main Title',\n          textAlign: 'left',\n          'class': 'title'\n        },\n        notes: {\n          type: 'Text',\n          position: 'bottom',\n          text: 'Notes',\n          'class': 'notes'\n        }\n      }\n    };\n  });\n```"],"extends":"Component, StandardLayer","id":"Text"}],"plugin_for":[],"extension_for":[],"file":"src\\components\\Title.js","line":12,"description":"Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)","extends":"Text","id":"Title"},"helpers":{"name":"helpers","shortname":"helpers","classitems":[{"id":"helpers-createScale","file":"src\\helpers\\create-scale.js","line":16,"description":"Create scale from options","example":["\n```javascript\n// Simple type, range, and domain\nvar scale = createScale({\n  type: 'linear',\n  domain: [0, 100],\n  range: [0, 500]\n});\n\n// Calculate domain for data\nvar scale = createScale({\n  type: 'log',\n  data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\n  key: 'y'\n});\n\n// Scale is passed through\nvar original = d3.scale.linear();\nvar scale = createScale(original);\nscale === original;\n\n// Set other properties by passing in \"arguments\" array\nvar scale = createScale({\n  type: 'ordinal',\n  domain: ['a', 'b', 'c', 'd', 'e'],\n  rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\n});\n\n// Use ordinal + adjacent for bar charts\nvar scale = createScale({\n  type: 'ordinal',\n  adjacent: true,\n  domain: ['a', 'b', 'c'],\n  series: 2 // Series count is required for adjacent if data isn't given\n})\n```"],"itemtype":"method","name":"createScale","params":[{"name":"options","description":"(passing in `Function` returns original function with no changes)","type":"Object|Function","props":[{"name":"type","description":"Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`","type":"String","optional":true,"optdefault":"'linear'"},{"name":"domain","description":"Domain for scale","type":"Array","optional":true},{"name":"range","description":"Range for scale","type":"Array","optional":true},{"name":"data","description":"Used to dynamically set domain (with given value or key)","type":"Any","optional":true},{"name":"value","description":"\"di\"-function for getting value for data","type":"Function","optional":true},{"name":"key","description":"Data key to extract value","type":"String","optional":true},{"name":"centered","description":"For \"ordinal\" scales, use centered x-values","type":"Boolean","optional":true},{"name":"adjacent","description":"For \"ordinal\" + centered, set x-values for different series next to each other\n\n- Requires series-index as second argument to scale, otherwise centered x-value is used\n- Requires \"data\" or \"series\" options to determine number of series","type":"Boolean","optional":true},{"name":"series","description":"Used with \"adjacent\" if no \"data\" is given to set series count","type":"Number","optional":true},{"name":"padding","description":"For \"ordinal\" scales, set padding between different x-values","type":"Number","optional":true,"optdefault":"0.1"},{"name":"...","description":"Set any other scale properties with array of arguments to pass to property","type":"Array...","optional":true}]}],"return":{"description":"","type":"d3.Scale"},"class":"helpers","code":"createScale(options)"},{"id":"helpers-dimensions","file":"src\\helpers\\dimensions.js","line":3,"description":"Helper for robustly determining width/height of given selector.\nChecks dimensions from css, attributes, and bounding box.","itemtype":"method","name":"dimensions","params":[{"name":"selection","description":"","type":"d3.Selection"}],"return":{"description":"`{width, height}`","type":"Object"},"class":"helpers","code":"dimensions(selection)"},{"id":"helpers-mixin","file":"src\\helpers\\mixin.js","line":6,"description":"Combine mixins with Parent super class for extension","example":["\n```js\nvar a = {transform: function() {}, a: 1};\nvar b = {initialize: function() {}, b: 2};\nvar c = {c: 3};\n\nvar Custom = mixin(Chart, a, b, c).extend({\n  initialize: function(options) {\n    this._super.initialize.call(this, options);\n    // d\n  },\n  transform: function(data) {\n    data = this._super.transform.call(this, data);\n    // d\n  }\n});\n\n// initialize: Chart, b, d\n// transform: Chart, a, d\n```"],"itemtype":"method","name":"mixin","params":[{"name":"Parent","description":"","type":"Function"},{"name":"mixins","description":"","type":"...Object","multiple":true}],"return":{"description":"","type":"Function"},"class":"helpers","code":"mixin(Parent, mixins)"},{"id":"helpers-property","file":"src\\helpers\\property.js","line":9,"description":"Helper for creating properties for charts/components","example":["\n```javascript\nvar Custom = d3.chart('Chart').extend('Custom', {\n  // Create property that's stored internally as 'simple'\n  simple: property()\n});\nvar custom; // = new Custom(...);\n\n// set\ncustom.simple('Howdy');\n\n// get\nconsole.log(custom.simple()); // -> 'Howdy'\n\n// Advanced\n// --------\n// Default values:\nCustom.prototype.message = property({\n  default_value: 'Howdy!'\n});\n\nconsole.log(custom.message()); // -> 'Howdy!'\ncustom.message('Goodbye');\nconsole.log(custom.message()); // -> 'Goodbye'\n\n// Set to undefined to reset to default value\ncustom.message(undefined);\nconsole.log(custom.message()); // -> 'Howdy!'\n\n// Computed default value:\nCustom.property.computed = property({\n  default_value: function() {\n    // \"this\" = Custom instance\n    return this.message();\n  }\n});\n\n// Function default value:\n// For function default_values, wrap in function to differentiate from computed\nCustom.property.fn = property({\n  default_value: function() {\n    return function defaultFn() {};\n  }\n  // The following would be incorrectly evaluated\n  // default_value: function defaultFn() {}\n})\n\n// Custom getter:\nCustom.prototype.exclaimed = property({\n  get: function(value) {\n    // Value is the underlying set value\n    return value + '!';\n  }\n});\n\ncustom.exclaimed('Howdy');\nconsole.log(custom.exclaimed()); // -> 'Howdy!'\n\n// Custom setter:\nCustom.prototype.feeling = property({\n  set: function(value, previous) {\n    if (value == 'Hate') {\n      // To override value, return Object with override specified\n      return {\n        override: 'Love',\n\n        // To do something after override, use after callback\n        after: function() {\n          console.log('After: ' + this.feeling()); // -> 'After: Love'\n        }\n      };\n    }\n  }\n\n  custom.feeling('Hate'); // -> 'After: Love'\n  console.log(custom.feeling()); // -> 'Love'\n});\n```"],"itemtype":"method","name":"property","params":[{"name":"options","description":"","type":"Object","optional":true,"props":[{"name":"default_value","description":"default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.","type":"Any","optional":true},{"name":"get","description":"`function(value) {return ...}` getter, where `value` is the stored value and return desired value","type":"Function","optional":true},{"name":"set","description":"`function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set","type":"Function","optional":true},{"name":"context","description":"context to evaluate get/set/after functions","type":"Object","optional":true,"optdefault":"this"}]}],"return":{"description":"`()`: get, `(value)`: set","type":"Function"},"class":"helpers","code":"property([options])"},{"id":"helpers-stack","file":"src\\helpers\\stack.js","line":5,"description":"Stack given array of elements vertically or horizontally","example":["\n```js\n// Stack all text elements vertically, from the top, with 0px padding\nd3.selectAll('text').call(helpers.stack())\n\n// Stack all text elements horizontally, from the right, with 5px padding\nd3.selectAll('text').call(helpers.stack({\n  direction: 'horizontal',\n  origin: 'right',\n  padding: 5\n}));\n```"],"itemtype":"method","name":"stack","params":[{"name":"options","description":"","type":"Object","optional":true,"props":[{"name":"direction","description":"`\"vertical\"` or `\"horizontal\"`","type":"String","optional":true,"optdefault":"vertical"},{"name":"origin","description":"`\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)","type":"String","optional":true},{"name":"padding","description":"padding (in px) between elements","type":"Number","optional":true,"optdefault":"0"},{"name":"min_height","description":"minimum spacing height (for vertical stacking)","type":"Number","optional":true,"optdefault":"0"},{"name":"min_width","description":"minimum spacing width (for horizontal stacking)","type":"Number","optional":true,"optdefault":"0"}]}],"return":{"description":"","type":"Function"},"class":"helpers","code":"stack([options])"},{"id":"helpers-translate","file":"src\\helpers.js","line":27,"description":"Translate by (x, y) distance","example":["\n```javascript\ntranslate(10, 15) == 'translate(10, 15)'\ntranslate({x: 10, y: 15}) == 'translate(10, 15)'\n```"],"itemtype":"method","name":"translate","params":[{"name":"x","description":"value or `{x, y}`","type":"Number|Object","optional":true},{"name":"y","description":"","type":"Number","optional":true}],"return":{"description":"","type":"String"},"class":"helpers","code":"translate([x], [y])"},{"id":"helpers-rotate","file":"src\\helpers.js","line":49,"description":"Rotate by degrees, with optional center","itemtype":"method","name":"rotate","params":[{"name":"degrees","description":"","type":"Number"},{"name":"center ","description":"","type":"Object","optional":true,"optdefault":" {x: 0, y: 0}"}],"return":{"description":"","type":"String"},"class":"helpers","code":"rotate(degrees, [center = {x: 0, y: 0}])"},{"id":"helpers-alignText","file":"src\\helpers.js","line":66,"description":"Find vertical offset to vertically align text\n(needed due to lack of `alignment-baseline` support in Firefox)","example":["\n```js\nvar label = d3.select('text');\n\n// Place label vertically so that origin is top-left\nvar offset = alignText(label);\nlabel.attr('transform', translate(0, offset));\n\n// Center label for line-height of 20px\nvar offset = alignText(label, 20);\nlabel.attr('transform', translate(0, offset));\n```"],"itemtype":"method","name":"alignText","params":[{"name":"element","description":"","type":"Element"},{"name":"line_height","description":"","type":"Number","optional":true}],"return":{"description":"offset","type":"Number"},"class":"helpers","code":"alignText(element, [line_height])"},{"id":"helpers-isSeriesData","file":"src\\helpers.js","line":118,"description":"Determine if given data is likely series data","itemtype":"method","name":"isSeriesData","params":[{"name":"data","description":"","type":"Array"}],"return":{"description":"","type":"Boolean"},"class":"helpers","code":"isSeriesData(data)"},{"id":"helpers-max","file":"src\\helpers.js","line":130,"description":"Get max for array/series by value di","example":["\n```js\nvar data = [\n  {values: [{y: 1}, {y: 2}, {y: 3}]},\n  {values: [{y: 4}, {y: 2}, {y: 0}]}\n];\nmax(data, function(d, i) { return d.y; }); // -> 4\n```"],"itemtype":"method","name":"max","params":[{"name":"data","description":"","type":"Array"},{"name":"getValue","description":"di function that returns value for given (d, i)","type":"Function"}],"return":{"description":"","type":"Number"},"class":"helpers","code":"max(data, getValue)"},{"id":"helpers-min","file":"src\\helpers.js","line":167,"description":"Get min for array/series by value di","example":["\n```js\nvar data = [\n  {values: [{x: 1}, {x: 2}, {x: 3}]},\n  {values: [{x: 4}, {x: 2}, {x: 0}]}\n];\nmin(data, function(d, i) { return d.x; }); // -> 0\n```"],"itemtype":"method","name":"min","params":[{"name":"data","description":"","type":"Array"},{"name":"getValue","description":"di function that returns value for given (d, i)","type":"Function"}],"return":{"description":"","type":"Number"},"class":"helpers","code":"min(data, getValue)"},{"id":"helpers-getMargins","file":"src\\helpers.js","line":227,"description":"Get formatted margins for varying input","itemtype":"method","name":"getMargins","example":["\n```js\ngetMargins(4);\n// -> {top: 4, right: 4, bottom: 4, left: 4}\n\ngetMargins({top: 20}, {top: 8, bottom: 8});\n// -> {top: 20, right: 0, bottom: 8, left: 0}\n```"],"params":[{"name":"margins","description":"","type":"Number|Object"},{"name":"default_margins","description":"","type":"Object"}],"return":{"description":"","type":"Object"},"class":"helpers","code":"getMargins(margins, default_margins)"},{"id":"helpers-di","file":"src\\helpers.js","line":250,"description":"Create wrapped `(d, i)` function that adds chart instance as first argument.\nWrapped function uses standard d3 arguments and context.\n\nNote: in order to pass proper context to di-functions called within di-function\nuse `.call(this, d, i)` (where \"this\" is d3 context)","example":["\n```javascript\nd3.chart('Base').extend('Custom', {\n  initialize: function() {\n    this.base.select('point')\n      .attr('cx', this.x);\n    // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\n  },\n\n  x: di(function(chart, d, i) {\n    // \"this\" is standard d3 context: node\n    return chart.xScale()(chart.xValue.call(this, d, i));\n  })\n\n  // xScale, xValue...\n});\n```"],"itemtype":"method","name":"di","params":[{"name":"callback","description":"with `(chart, d, i)` arguments","type":"Function"}],"return":{"description":"","type":"Function"},"class":"helpers","code":"di(callback)"},{"id":"helpers-getParentData","file":"src\\helpers.js","line":304,"description":"Get parent data for element (used to get parent series for data point)","example":["\n```js\nvar data = [{\n  name: 'Input',\n  values: [1, 2, 3]\n}];\n\nd3.selectAll('g')\n  .data(data)\n  .enter().append('g')\n    .selectAll('text')\n      .data(function(d) { return d.values; })\n      .enter().append('text')\n        .text(function(d) {\n          var series_data = getParentData(this);\n          return series_data.name + ': ' + d;\n        });\n\n// Input: 1, Input: 2, Input: 3\n```"],"itemtype":"method","name":"getParentData","params":[{"name":"element","description":"","type":"Element"}],"return":{"description":"","type":"Any"},"class":"helpers","code":"getParentData(element)"}],"plugins":[],"plugin_for":[],"extension_for":[],"file":"src\\helpers.js","line":13,"description":"`d3.compose.helpers` includes general purpose helpers that are used throughout d3.compose.\nIncludes convenience functions for create charts/components (`property`, `di`, and `mixin`),\nhelpful calculations (`dimensions`, `max`, and `min`) and other common behavior.","id":"helpers"},"mixins-Hover":{"name":"mixins.Hover","shortname":"Hover","classitems":[{"id":"mixins-Hover-getPoint","file":"src\\mixins\\hover.js","line":29,"description":"Get point information for given data-point","itemtype":"method","name":"getPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"return":{"description":"}","type":"Key, series, d, meta chart, i, j, x, y"},"class":"mixins.Hover","namespace":"mixins","code":"getPoint(d, i, j)"},{"id":"mixins-Hover-mouseEnterPoint","file":"src\\mixins\\hover.js","line":56,"description":"Call to trigger mouseenter:point when mouse enters data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseEnterPoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseEnterPoint(d, i, j)"},{"id":"mixins-Hover-mouseleavePoint","file":"src\\mixins\\hover.js","line":87,"description":"Call to trigger mouseleave:point when mouse leaves data-point","example":["\n```js\nd3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n  initialize: function() {\n    this.layer('bars', this.base, {\n      // dataBind...\n      insert: function() {\n        // Want to trigger enter/leave point\n        // when mouse enter/leaves bar (rect)\n        var chart = this.chart();\n        return this.append('rect')\n          .on('mouseenter', chart.mouseEnterPoint)\n          .on('mouseleave', chart.mouseLeavePoint);\n      }\n      // events...\n    })\n  }\n}));\n```"],"itemtype":"method","name":"mouseleavePoint","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"},{"name":"j","description":"","type":"Number"}],"class":"mixins.Hover","namespace":"mixins","code":"mouseleavePoint(d, i, j)"},{"id":"mixins-Hover-onMouseEnter","file":"src\\mixins\\hover.js","line":118,"description":"(Override) Called when mouse enters container","itemtype":"method","name":"onMouseEnter","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseEnter(position)"},{"id":"mixins-Hover-onMouseMove","file":"src\\mixins\\hover.js","line":128,"description":"(Override) Called when mouse moves within container","itemtype":"method","name":"onMouseMove","params":[{"name":"position","description":"(chart and container {x,y} position of mouse)","type":"Object","props":[{"name":"chart","description":"{x, y} position relative to chart origin","type":"Object"},{"name":"container","description":"{x, y} position relative to container origin","type":"Object"}]}],"class":"mixins.Hover","namespace":"mixins","code":"onMouseMove(position)"},{"id":"mixins-Hover-onMouseLeave","file":"src\\mixins\\hover.js","line":138,"description":"(Override) Called when mouse leaves container","itemtype":"method","name":"onMouseLeave","class":"mixins.Hover","namespace":"mixins"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\hover.js","line":13,"description":"Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\nand `getPoint` helper for adding helpful meta information to raw data point.","id":"mixins-Hover"},"mixins-HoverPoints":{"name":"mixins.HoverPoints","shortname":"HoverPoints","classitems":[{"id":"mixins-HoverPoints-hoverTolerance","file":"src\\mixins\\hover.js","line":184,"description":"Hover tolerance (in px) for calculating close points","itemtype":"property","name":"hoverTolerance","type":"Number","default":"Infinity","class":"mixins.HoverPoints","namespace":"mixins","code":"{Number} [Infinity]"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\hover.js","line":146,"description":"Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.","id":"mixins-HoverPoints"},"mixins-Labels":{"name":"mixins.Labels","shortname":"Labels","classitems":[{"id":"mixins-Labels-attachLabels","file":"src\\mixins\\labels.js","line":16,"description":"Call during chart initialization to add labels to chart","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n  initialize: function() {\n    // this.layer()...\n\n    // Attach labels layer\n    this.attachLabels();\n  }\n}));\n```"],"itemtype":"method","name":"attachLabels","class":"mixins.Labels","namespace":"mixins"},{"id":"mixins-Labels-labels","file":"src\\mixins\\labels.js","line":58,"description":"Options passed to labels chart","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n  // ...\n}));\n\n// ...\n\nchart.labels(true); // -> display labels with defaults\nchart.labels(false); // -> hide labels\nchart.labels({offset: 10}); // -> pass options to labels chart\n\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    return {\n      charts: {\n        custom: {labels: {offset: 10}}\n      }\n    };\n  });\n```"],"itemtype":"property","name":"labels","type":"Object","class":"mixins.Labels","namespace":"mixins","code":"{Object}"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\labels.js","line":9,"description":"Mixin for handling labels in charts","id":"mixins-Labels"},"mixins-LabelsXY":{"name":"mixins.LabelsXY","shortname":"LabelsXY","classitems":[],"plugins":[],"extensions":[{"name":"Labels","shortname":"Labels","classitems":[{"id":"Labels-format","file":"src\\charts\\Labels.js","line":137,"description":"Formatting function or string (string is passed to `d3.format`) for label values","itemtype":"property","name":"format","type":"String|Function","class":"Labels","code":"{String|Function}"},{"id":"Labels-position","file":"src\\charts\\Labels.js","line":153,"description":"Label position relative to data point\n(top, right, bottom, or left)\n\nAdditionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\nwhere `a` and `b` are `top`, `right`, `bottom`, or `left`\n\nFor more advanced positioning, a \"di\" function can be specified to set position per label","example":["\n```js\nlabels.position('top'); // top for all values\nlabels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\nlabels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\n```"],"itemtype":"property","name":"position","type":"String|Function","default":"top|bottom","class":"Labels","code":"{String|Function} [top|bottom]"},{"id":"Labels-offset","file":"src\\charts\\Labels.js","line":189,"description":"Offset between data point and label\n(if `Number` is given, offset is set based on position)","itemtype":"property","name":"offset","type":"Number|Object","default":"0","class":"Labels","code":"{Number|Object} [0]"},{"id":"Labels-padding","file":"src\\charts\\Labels.js","line":201,"description":"Padding between text and label background","itemtype":"property","name":"padding","type":"Number","default":"1","class":"Labels","code":"{Number} [1]"},{"id":"Labels-anchor","file":"src\\charts\\Labels.js","line":210,"description":"Define text anchor (start, middle, or end)\n\n(set by default based on label position)","itemtype":"property","name":"anchor","type":"String","default":"middle","class":"Labels","code":"{String} [middle]"},{"id":"Labels-alignment","file":"src\\charts\\Labels.js","line":225,"description":"Define text-alignment (top, middle, or bottom)\n\n(set by default based on label position)","itemtype":"property","name":"alignment","type":"String","default":"middle","class":"Labels","code":"{String} [middle]"},{"id":"Labels-labelText","file":"src\\charts\\Labels.js","line":240,"description":"Get label text for data-point (uses \"label\" property or y-value)","itemtype":"method","name":"labelText","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"Labels","code":"labelText(d, i)"},{"id":"Labels-labelClass","file":"src\\charts\\Labels.js","line":255,"description":"Get class for label group","itemtype":"method","name":"labelClass","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"Labels","code":"labelClass(d, i)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"src\\charts\\Labels.js","line":31,"description":"Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\n\n### Extending\n\nTo extend the `Labels` chart, the following methods are available:\n\n- `insertLabels`\n- `mergeLabels`\n- `layoutLabels`\n- `transitionLabels`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`\n\nView the `Labels.js` source for the default implementation and more information on these methods.","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  return {\n    charts: {\n      input: {\n        type: 'Lines',\n        data: data.input,\n        // xScale, yScale, other properties...\n\n        // Show labels with default properties\n        labels: true\n      },\n      output: {\n        type: 'Bars',\n        data: data.output,\n        // xScale, yScale, other properties...\n\n        // Pass options to labels\n        labels: {\n          offset: 2,\n          position: 'top',\n          style: {\n            'font-size': '14px'\n          },\n          format: d3.format(',0d')\n        }\n      },\n      labels: {\n        type: 'Labels',\n        data: data.labels,\n\n        // xScale, yScale, other properties...\n      }\n    }\n  };\n});\n\nchart.draw({\n  input: [1, 2, 3],\n  output: [10, 20, 30],\n  labels: [\n    {x: 0, y: 0},\n    {x: 0, y: 30, label: 'Override (y by default)'},\n    {x: 2, y: 0},\n    {x: 2, y: 30}\n  ]\n});\n```"],"extends":"Chart, Series, XY, Hover, Transition, StandardLayer","id":"Labels"}],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\labels.js","line":102,"description":"Mixin for handling labels in XY charts\n(proxies `x` and `y` to properly place labels for XY charts)","extends":"Labels","id":"mixins-LabelsXY"},"mixins-Series":{"name":"mixins.Series","shortname":"Series","classitems":[{"id":"mixins-Series-seriesKey","file":"src\\mixins\\series.js","line":16,"description":"Get key for given series data","itemtype":"method","name":"seriesKey","params":[{"name":"d","description":"Series object with `key`","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins","code":"seriesKey(d)"},{"id":"mixins-Series-seriesValues","file":"src\\mixins\\series.js","line":27,"description":"Get values for given series data","itemtype":"method","name":"seriesValues","params":[{"name":"d","description":"Series object with `values` array","type":"Any"}],"return":{"description":"","type":"Array"},"class":"mixins.Series","namespace":"mixins","code":"seriesValues(d)"},{"id":"mixins-Series-seriesClass","file":"src\\mixins\\series.js","line":40,"description":"Get class for given series data","itemtype":"method","name":"seriesClass","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"seriesClass(d, i)"},{"id":"mixins-Series-seriesIndex","file":"src\\mixins\\series.js","line":52,"description":"Get index for given data-point of series","itemtype":"method","name":"seriesIndex","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"class":"mixins.Series","namespace":"mixins","code":"seriesIndex(d, i)"},{"id":"mixins-Series-seriesData","file":"src\\mixins\\series.js","line":64,"description":"Get parent series data for given data-point","itemtype":"method","name":"seriesData","return":{"description":"","type":"Any"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-itemStyle","file":"src\\mixins\\series.js","line":74,"description":"(di) Get style given series data or data-point\n(Uses \"style\" object on `d`, if defined)","itemtype":"method","name":"itemStyle","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number","optional":true},{"name":"j","description":"","type":"Number","optional":true}],"return":{"description":"","type":"String"},"class":"mixins.Series","namespace":"mixins","code":"itemStyle(d, [i], [j])"},{"id":"mixins-Series-seriesCount","file":"src\\mixins\\series.js","line":88,"description":"Get series count for chart","itemtype":"method","name":"seriesCount","return":{"description":"","type":"Number"},"class":"mixins.Series","namespace":"mixins"},{"id":"mixins-Series-seriesLayer","file":"src\\mixins\\series.js","line":99,"description":"Extension of layer() that handles data-binding and layering for series data.\n\n- Updates `dataBind` method to access underlying series values\n- Creates group layer for each series in chart\n- Should be used just like layer()","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n  initialize: function() {\n    this.seriesLayer('Circles', this.base, {\n      // Create group for each series on this.base\n      // and calls the following for each series item\n      // (entire layer is called twice: series-1 and series-2)\n\n      dataBind: function(data) {\n        // 1. data = [1, 2, 3]\n        // 2. data = [4, 5, 6]\n      },\n      insert: function() {\n        // Same as chart.layer\n        // (where \"this\" is series group layer)\n      },\n      events: {\n        // Same as chart.layer\n      }\n    });\n  }\n}));\n\n// ...\n\nchart.draw([\n  {key: 'series-1', values: [1, 2, 3]},\n  {key: 'series-2', values: [4, 5, 6]}\n]);\n```"],"itemtype":"method","name":"seriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"Selection"},{"name":"options","description":"(`dataBind` and `insert` required)","type":"Object"}],"return":{"description":"","type":"d3.chart.layer"},"class":"mixins.Series","namespace":"mixins","code":"seriesLayer(name, selection, options)"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\series.js","line":9,"description":"Mixin for handling series data","id":"mixins-Series"},"mixins-StandardLayer":{"name":"mixins.StandardLayer","shortname":"StandardLayer","classitems":[{"id":"mixins-StandardLayer-standardLayer","file":"src\\mixins\\standard-layer.js","line":31,"description":"extension of `layer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('circles', this.base.append('g'));\n  }\n\n  // onDataBind, onInsert, etc. work with \"circles\" layer\n}));\n```"],"itemtype":"method","name":"standardLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardLayer(name, selection)"},{"id":"mixins-StandardLayer-standardSeriesLayer","file":"src\\mixins\\standard-layer.js","line":52,"description":"extension of `seriesLayer()` that uses standard methods on prototype for extensibility.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardSeriesLayer('circles', this.base.append('g'));\n  },\n\n  // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n}));\n```"],"itemtype":"method","name":"standardSeriesLayer","params":[{"name":"name","description":"","type":"String"},{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"standardSeriesLayer(name, selection)"},{"id":"mixins-StandardLayer-onDataBind","file":"src\\mixins\\standard-layer.js","line":73,"description":"Called for standard layer's `dataBind`","itemtype":"method","name":"onDataBind","params":[{"name":"selection","description":"","type":"d3.selection"},{"name":"data","description":"","type":"Any"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onDataBind(selection, data)"},{"id":"mixins-StandardLayer-onInsert","file":"src\\mixins\\standard-layer.js","line":83,"description":"Called for standard layer's `insert`","itemtype":"method","name":"onInsert","params":[{"name":"selection","description":"","type":"d3.selection"}],"return":{"description":"","type":"d3.selection"},"class":"mixins.StandardLayer","namespace":"mixins","code":"onInsert(selection)"},{"id":"mixins-StandardLayer-onEnter","file":"src\\mixins\\standard-layer.js","line":92,"description":"Call for standard layer's `events['enter']`","itemtype":"method","name":"onEnter","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnter(selection)"},{"id":"mixins-StandardLayer-onEnterTransition","file":"src\\mixins\\standard-layer.js","line":100,"description":"Call for standard layer's `events['enter:transition']`","itemtype":"method","name":"onEnterTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onEnterTransition(selection)"},{"id":"mixins-StandardLayer-onUpdate","file":"src\\mixins\\standard-layer.js","line":108,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdate","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdate(selection)"},{"id":"mixins-StandardLayer-onUpdateTransition","file":"src\\mixins\\standard-layer.js","line":116,"description":"Call for standard layer's `events['update']`","itemtype":"method","name":"onUpdateTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onUpdateTransition(selection)"},{"id":"mixins-StandardLayer-onMerge","file":"src\\mixins\\standard-layer.js","line":124,"description":"Call for standard layer's `events['merge']`","itemtype":"method","name":"onMerge","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMerge(selection)"},{"id":"mixins-StandardLayer-onMergeTransition","file":"src\\mixins\\standard-layer.js","line":132,"description":"Call for standard layer's `events['merge:transition']`","itemtype":"method","name":"onMergeTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onMergeTransition(selection)"},{"id":"mixins-StandardLayer-onExit","file":"src\\mixins\\standard-layer.js","line":140,"description":"Call for standard layer's `events['exit']`","itemtype":"method","name":"onExit","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExit(selection)"},{"id":"mixins-StandardLayer-onExitTransition","file":"src\\mixins\\standard-layer.js","line":148,"description":"Call for standard layer's `events['exit:transition']`","itemtype":"method","name":"onExitTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.StandardLayer","namespace":"mixins","code":"onExitTransition(selection)"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\standard-layer.js","line":1,"description":"Mixin to create standard layer to make extending charts straightforward.","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n  initialize: function() {\n    this.standardLayer('main', this.base.append('g'))\n    // dataBind, insert, events are defined on prototype\n  },\n\n  onDataBind: function(selection, data) {\n    // ...\n  },\n  onInsert: function(selection) {\n    // ...\n  },\n  onEnter: function(selection) {\n    // ...\n  },\n  onUpdateTransition: function(selection) {\n    // ...\n  },\n  // all d3.chart events are available: onMerge, onExit, ...\n}));\n```"],"id":"mixins-StandardLayer"},"mixins-Transition":{"name":"mixins.Transition","shortname":"Transition","classitems":[{"id":"mixins-Transition-delay","file":"src\\mixins\\transition.js","line":15,"description":"Delay start of transition by specified milliseconds.","itemtype":"property","name":"delay","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-duration","file":"src\\mixins\\transition.js","line":28,"description":"Transition duration in milliseconds.","itemtype":"property","name":"duration","type":"Number|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{Number|Function} [(use container value, if available)]"},{"id":"mixins-Transition-ease","file":"src\\mixins\\transition.js","line":41,"description":"Transition ease function\n\n- See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n- Note: arguments to pass to `d3.ease` are not supported","itemtype":"property","name":"ease","type":"String|Function","default":"(use container value, if available)","class":"mixins.Transition","namespace":"mixins","code":"{String|Function} [(use container value, if available)]"},{"id":"mixins-Transition-setupTransition","file":"src\\mixins\\transition.js","line":57,"description":"Setup delay, duration, and ease for transition","example":["\n```js\nd3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n  initialize: function() {\n    this.layer('circles', this.base, {\n      // ...\n      events: {\n        'merge:transition': function() {\n          // Set delay, duration, and ease from properties\n          this.chart().setupTransition(this);\n        }\n      }\n    });\n  }\n}));\n```"],"itemtype":"method","name":"setupTransition","params":[{"name":"selection","description":"","type":"d3.selection"}],"class":"mixins.Transition","namespace":"mixins","code":"setupTransition(selection)"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\transition.js","line":8,"description":"Mixin for handling common transition behaviors","id":"mixins-Transition"},"mixins-XYInverted":{"name":"mixins.XYInverted","shortname":"XYInverted","classitems":[{"id":"mixins-XYInverted-x","file":"src\\mixins\\xy-inverted.js","line":10,"description":"Get x-value for plotting (scaled y-value)","itemtype":"method","name":"x","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins","code":"x(d, i)"},{"id":"mixins-XYInverted-y","file":"src\\mixins\\xy-inverted.js","line":25,"description":"Get y-value for plotting (scaled x-value)","itemtype":"method","name":"y","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins","code":"y(d, i)"},{"id":"mixins-XYInverted-x0","file":"src\\mixins\\xy-inverted.js","line":40,"description":"Get scaled y = 0 value (along x-axis)","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins"},{"id":"mixins-XYInverted-x0","file":"src\\mixins\\xy-inverted.js","line":50,"description":"Get scaled x = 0 value (along y-axis)","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XYInverted","namespace":"mixins"},{"id":"mixins-XYInverted-setXScaleRange","file":"src\\mixins\\xy-inverted.js","line":60,"description":"Set range (height, 0) for given x-scale","itemtype":"method","name":"setXScaleRange","params":[{"name":"x_scale","description":"","type":"d3.scale"}],"class":"mixins.XYInverted","namespace":"mixins","code":"setXScaleRange(x_scale)"},{"id":"mixins-XYInverted-setYScaleRange","file":"src\\mixins\\xy-inverted.js","line":70,"description":"Set range (0, width) for given y-scale","itemtype":"method","name":"setYScaleRange","params":[{"name":"y_scale","description":"","type":"d3.scale"}],"class":"mixins.XYInverted","namespace":"mixins","code":"setYScaleRange(y_scale)"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy-inverted.js","line":3,"description":"Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right","id":"mixins-XYInverted"},"mixins-XYValues":{"name":"mixins.XYValues","shortname":"XYValues","classitems":[{"id":"mixins-XYValues-adjacentWidth","file":"src\\mixins\\xy-values.js","line":10,"description":"Determine width of data-point when displayed adjacent","itemtype":"method","name":"adjacentWidth","return":{"description":"","type":"Number"},"class":"mixins.XYValues","namespace":"mixins"},{"id":"mixins-XYValues-layeredWidth","file":"src\\mixins\\xy-values.js","line":21,"description":"Determine layered width (width of group for adjacent)","itemtype":"method","name":"layeredWidth","return":{"description":"","type":"Number"},"class":"mixins.XYValues","namespace":"mixins"},{"id":"mixins-XYValues-itemWidth","file":"src\\mixins\\xy-values.js","line":34,"description":"Determine item width based on series display type (adjacent or layered)","itemtype":"method","name":"itemWidth","return":{"description":"","type":"Number"},"class":"mixins.XYValues","namespace":"mixins"},{"id":"mixins-XYValues-getDefaultYScale","file":"src\\mixins\\xy-values.js","line":46,"description":"Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`","itemtype":"method","name":"getDefaultYScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XYValues","namespace":"mixins"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy-values.js","line":3,"description":"Mixin for charts of centered key,value data (x: index, y: value, key)","id":"mixins-XYValues"},"mixins-XY":{"name":"mixins.XY","shortname":"XY","classitems":[{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":53,"description":"Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xScale","file":"src\\mixins\\xy.js","line":78,"description":"Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)","itemtype":"property","name":"xScale","type":"Object|d3.scale","class":"mixins.XY","namespace":"mixins","code":"{Object|d3.scale}"},{"id":"mixins-XY-xKey","file":"src\\mixins\\xy.js","line":103,"description":"Key on data object for x-value","itemtype":"property","name":"xKey","type":"String","default":"'x'","class":"mixins.XY","namespace":"mixins","code":"{String} ['x']"},{"id":"mixins-XY-yKey","file":"src\\mixins\\xy.js","line":114,"description":"Key on data object for y-value","itemtype":"property","name":"yKey","type":"String","default":"'y'","class":"mixins.XY","namespace":"mixins","code":"{String} ['y']"},{"id":"mixins-XY-x","file":"src\\mixins\\xy.js","line":125,"description":"Get scaled x-value for given data-point","itemtype":"method","name":"x","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"x(d, i)"},{"id":"mixins-XY-y","file":"src\\mixins\\xy.js","line":140,"description":"Get scaled y-value for given data-point","itemtype":"method","name":"y","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins","code":"y(d, i)"},{"id":"mixins-XY-key","file":"src\\mixins\\xy.js","line":155,"description":"Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.","itemtype":"method","name":"key","params":[{"name":"d","description":"","type":"Any"},{"name":"i","description":"","type":"Number"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"key(d, i)"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":167,"description":"Get scaled `x = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-x0","file":"src\\mixins\\xy.js","line":177,"description":"Get scaled `y = 0` value","itemtype":"method","name":"x0","return":{"description":"","type":"Number"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-xValue","file":"src\\mixins\\xy.js","line":187,"description":"Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.","example":["\n```js\nxValue({x: 10, y: 20}); // -> 10\nxValue([10, 20]); // -> 10\n```"],"itemtype":"method","name":"xValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"xValue(d)"},{"id":"mixins-XY-yValue","file":"src\\mixins\\xy.js","line":205,"description":"Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.","example":["\n```js\nyValue({x: 10, y: 20}); // -> 20\nyValue([10, 20]); // -> 20\n```"],"itemtype":"method","name":"yValue","params":[{"name":"d","description":"","type":"Any"}],"return":{"description":"","type":"Any"},"class":"mixins.XY","namespace":"mixins","code":"yValue(d)"},{"id":"mixins-XY-setScales","file":"src\\mixins\\xy.js","line":223,"description":"Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)","itemtype":"method","name":"setScales","class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-setXScaleRange","file":"src\\mixins\\xy.js","line":233,"description":"Set range (0, width) for given x-scale","itemtype":"method","name":"setXScaleRange","params":[{"name":"x_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setXScaleRange(x_scale)"},{"id":"mixins-XY-setYScaleRange","file":"src\\mixins\\xy.js","line":243,"description":"Set range(height, 0) for given y-scale","itemtype":"method","name":"setYScaleRange","params":[{"name":"y_scale","description":"","type":"d3.scale"}],"class":"mixins.XY","namespace":"mixins","code":"setYScaleRange(y_scale)"},{"id":"mixins-XY-getDefaultXScale","file":"src\\mixins\\xy.js","line":253,"description":"Get default x-scale: `{data: this.data(), key: 'x'}`","itemtype":"method","name":"getDefaultXScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"},{"id":"mixins-XY-getDefaultYScale","file":"src\\mixins\\xy.js","line":266,"description":"Get default y-scale: `{data: this.data(), key: 'y'}`","itemtype":"method","name":"getDefaultYScale","return":{"description":"","type":"d3.scale"},"class":"mixins.XY","namespace":"mixins"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"mixins","file":"src\\mixins\\xy.js","line":14,"description":"Mixin for handling XY data","id":"mixins-XY"},"Base":{"name":"Base","shortname":"Base","classitems":[{"id":"Base-data","file":"src\\Base.js","line":88,"description":"Store fully-transformed data for direct access from the chart","itemtype":"property","name":"data","type":"Any","class":"Base","code":"{Any}"},{"id":"Base-options","file":"src\\Base.js","line":96,"description":"Overall options for chart/component, automatically setting any matching properties.","example":["\n```js\nvar property = d3.compose.helpers.property;\n\nd3.chart('Base').extend('HasProperties', {\n  a: property(),\n  b: property({\n    set: function(value) {\n      return {\n        override: value + '!'\n      };\n    }\n  })\n});\n\nvar instance = d3.select('#chart')\n  .chart('HasProperties', {\n    a: 123,\n    b: 'Howdy',\n    c: true\n  });\n\n// Equivalent to:\n// d3.select(...)\n//   .chart('HasProperties')\n//   .options({...});\n\nconsole.log(instance.a()); // -> 123\nconsole.log(instance.b()); // -> Howdy!\nconsole.log(instance.options().c); // -> true\n```"],"itemtype":"property","name":"options","type":"Object","class":"Base","code":"{Object}"},{"id":"Base-width","file":"src\\Base.js","line":156,"description":"Get width of `this.base`.\n(Does not include `set` for setting width of `this.base`)","itemtype":"method","name":"width","return":{"description":"","type":"Number"},"class":"Base"},{"id":"Base-height","file":"src\\Base.js","line":167,"description":"Get height of `this.base`.\n(Does not include `set` for setting height of `this.base`)","itemtype":"method","name":"height","return":{"description":"","type":"Number"},"class":"Base"}],"plugins":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Base.js","line":22,"description":"Shared functionality between all charts and components.\n\n- Set properties automatically from `options`,\n- Store fully transformed data\n- Adds `\"before:draw\"` and `\"draw\"` events\n- Standard `width` and `height` calculations","id":"Base"},"Chart":{"name":"Chart","shortname":"Chart","classitems":[{"id":"Chart-z_index","file":"src\\Chart.js","line":39,"description":"Default z-index for chart\n(Components are 50 by default, so Chart = 100 is above component by default)","example":["\n```js\nd3.chart('Chart').extend('BelowComponentLayers', {\n  // ...\n}, {\n  z_index: 40\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"100","class":"Chart"}],"plugins":[],"extensions":[{"name":"Base","shortname":"Base","classitems":[{"id":"Base-data","file":"src\\Base.js","line":88,"description":"Store fully-transformed data for direct access from the chart","itemtype":"property","name":"data","type":"Any","class":"Base","code":"{Any}"},{"id":"Base-options","file":"src\\Base.js","line":96,"description":"Overall options for chart/component, automatically setting any matching properties.","example":["\n```js\nvar property = d3.compose.helpers.property;\n\nd3.chart('Base').extend('HasProperties', {\n  a: property(),\n  b: property({\n    set: function(value) {\n      return {\n        override: value + '!'\n      };\n    }\n  })\n});\n\nvar instance = d3.select('#chart')\n  .chart('HasProperties', {\n    a: 123,\n    b: 'Howdy',\n    c: true\n  });\n\n// Equivalent to:\n// d3.select(...)\n//   .chart('HasProperties')\n//   .options({...});\n\nconsole.log(instance.a()); // -> 123\nconsole.log(instance.b()); // -> Howdy!\nconsole.log(instance.options().c); // -> true\n```"],"itemtype":"property","name":"options","type":"Object","class":"Base","code":"{Object}"},{"id":"Base-width","file":"src\\Base.js","line":156,"description":"Get width of `this.base`.\n(Does not include `set` for setting width of `this.base`)","itemtype":"method","name":"width","return":{"description":"","type":"Number"},"class":"Base"},{"id":"Base-height","file":"src\\Base.js","line":167,"description":"Get height of `this.base`.\n(Does not include `set` for setting height of `this.base`)","itemtype":"method","name":"height","return":{"description":"","type":"Number"},"class":"Base"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Base.js","line":22,"description":"Shared functionality between all charts and components.\n\n- Set properties automatically from `options`,\n- Store fully transformed data\n- Adds `\"before:draw\"` and `\"draw\"` events\n- Standard `width` and `height` calculations","id":"Base"}],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Chart.js","line":3,"description":"Common base for creating charts.\nStandard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\n\n### Extending\n\nTo take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\nand automatically setting properties from `options`, use `d3.compose.helpers.di`\nand `d3.compose.helpers.property` when creating your chart.","example":["\n```js\nvar helpers = d3.compose.helpers;\n\nd3.chart('Chart').extend('Pie', {\n  initialize: function() {\n    // same as d3.chart\n  },\n  transform: function(data) {\n    // same as d3.chart\n  },\n\n  color: helpers.di(function(chart, d, i) {\n    // \"di\" function with parent chart injected (\"this\" = element)\n  }),\n\n  centered: helpers.property({\n    default_value: true\n    // can be automatically set from options object\n  })\n});\n```"],"extends":"Base","id":"Chart"},"Component":{"name":"Component","shortname":"Component","classitems":[{"id":"Component-position","file":"src\\Component.js","line":52,"description":"Component's position relative to chart\n(top, right, bottom, left)","itemtype":"property","name":"position","type":"String","default":"'top'","class":"Component","code":"{String} ['top']"},{"id":"Component-width","file":"src\\Component.js","line":67,"description":"Get/set the width of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"width","type":"Number","default":"(actual width)","class":"Component","code":"{Number} [(actual width)]"},{"id":"Component-height","file":"src\\Component.js","line":81,"description":"Get/set the height of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"height","type":"Number","default":"(actual height)","class":"Component","code":"{Number} [(actual height)]"},{"id":"Component-margins","file":"src\\Component.js","line":95,"description":"Margins (in pixels) around component","itemtype":"property","name":"margins","type":"Object","default":"{top: 0, right: 0, bottom: 0, left: 0}","class":"Component","code":"{Object} [{top: 0, right: 0, bottom: 0, left: 0}]"},{"id":"Component-centered","file":"src\\Component.js","line":111,"description":"Center the component vertically/horizontally (depending on position)","itemtype":"property","name":"centered","type":"Boolean","default":"false","class":"Component","code":"{Boolean} [false]"},{"id":"Component-skip_layout","file":"src\\Component.js","line":122,"description":"Skip component during layout calculations and positioning\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('NotLaidOut', {\n  skip_layout: true\n});\n```"],"itemtype":"attribute","name":"skip_layout","type":"Boolean","default":"false","class":"Component"},{"id":"Component-prepareLayout","file":"src\\Component.js","line":138,"description":"Perform any layout preparation required before getLayout (default is draw)\n(override in prototype of extension)\n\nNote: By default, components are double-drawn;\nfor every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\nThis can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  prepareLayout: function(data) {\n    // default: this.draw(data);\n    // so that getLayout has real dimensions\n\n    // -> custom preparation (if necessary)\n  }\n})\n```"],"itemtype":"method","name":"prepareLayout","params":[{"name":"data","description":"","type":"Any"}],"class":"Component","code":"prepareLayout(data)"},{"id":"Component-getLayout","file":"src\\Component.js","line":164,"description":"Get layout details for use when laying out component\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  getLayout: function(data) {\n    var calculated_width, calculated_height;\n\n    // Perform custom calculations...\n\n    // Must return position, width, and height\n    return {\n      position: this.position(),\n      width: calculated_width,\n      height: calculated_height\n    };\n  }\n});\n```"],"itemtype":"method","name":"getLayout","params":[{"name":"data","description":"","type":"Any"}],"return":{"description":"position, width, and height for layout","type":"Object"},"class":"Component","code":"getLayout(data)"},{"id":"Component-setLayout","file":"src\\Component.js","line":200,"description":"Set layout of underlying base\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  setLayout: function(x, y, options) {\n    // Set layout of this.base...\n    // (the following is the default implementation)\n    var margins = this.margins();\n\n    // (handle this.centered())\n\n    this.base\n      .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n    this.height(options && options.height);\n    this.width(options && options.width);\n  }\n});\n```"],"itemtype":"method","name":"setLayout","params":[{"name":"x","description":"position of base top-left","type":"Number"},{"name":"y","description":"position of base top-left","type":"Number"},{"name":"options","description":"","type":"Object","props":[{"name":"height","description":"height of component in layout","type":"Object","optional":true},{"name":"width","description":"width of component in layout","type":"Object","optional":true}]}],"class":"Component","code":"setLayout(x, y, options)"},{"id":"Component-z_index","file":"src\\Component.js","line":278,"description":"Default z-index for component\n(Charts are 100 by default, so Component = 50 is below chart by default)","example":["\n```js\nd3.chart('Component').extend('AboveChartLayers', {\n  // ...\n}, {\n  z_index: 150\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"50","class":"Component"},{"id":"Component-layer_type","file":"src\\Component.js","line":297,"description":"Set to `'chart'` to use chart layer for component.\n(e.g. Axis uses chart layer to position with charts, but includes layout for ticks)","example":["\n```js\nd3.chart('Component').extend('ChartComponent', {\n  // ...\n}, {\n  layer_type: 'chart'\n});\n```"],"itemtype":"attribute","name":"layer_type","static":1,"type":"String","default":"'component'","class":"Component"}],"plugins":[],"extensions":[{"name":"Base","shortname":"Base","classitems":[{"id":"Base-data","file":"src\\Base.js","line":88,"description":"Store fully-transformed data for direct access from the chart","itemtype":"property","name":"data","type":"Any","class":"Base","code":"{Any}"},{"id":"Base-options","file":"src\\Base.js","line":96,"description":"Overall options for chart/component, automatically setting any matching properties.","example":["\n```js\nvar property = d3.compose.helpers.property;\n\nd3.chart('Base').extend('HasProperties', {\n  a: property(),\n  b: property({\n    set: function(value) {\n      return {\n        override: value + '!'\n      };\n    }\n  })\n});\n\nvar instance = d3.select('#chart')\n  .chart('HasProperties', {\n    a: 123,\n    b: 'Howdy',\n    c: true\n  });\n\n// Equivalent to:\n// d3.select(...)\n//   .chart('HasProperties')\n//   .options({...});\n\nconsole.log(instance.a()); // -> 123\nconsole.log(instance.b()); // -> Howdy!\nconsole.log(instance.options().c); // -> true\n```"],"itemtype":"property","name":"options","type":"Object","class":"Base","code":"{Object}"},{"id":"Base-width","file":"src\\Base.js","line":156,"description":"Get width of `this.base`.\n(Does not include `set` for setting width of `this.base`)","itemtype":"method","name":"width","return":{"description":"","type":"Number"},"class":"Base"},{"id":"Base-height","file":"src\\Base.js","line":167,"description":"Get height of `this.base`.\n(Does not include `set` for setting height of `this.base`)","itemtype":"method","name":"height","return":{"description":"","type":"Number"},"class":"Base"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Base.js","line":22,"description":"Shared functionality between all charts and components.\n\n- Set properties automatically from `options`,\n- Store fully transformed data\n- Adds `\"before:draw\"` and `\"draw\"` events\n- Standard `width` and `height` calculations","id":"Base"}],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Component.js","line":12,"description":"Common base for creating components that includes helpers for positioning and layout.\n\n### Extending\n\n`d3.chart('Component')` contains intelligent defaults and there are no required overrides.\nCreate a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n- To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n- To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`","example":["\n```js\nd3.chart('Component').extend('Key', {\n  initialize: function() {\n    this.layer('Key', this.base, {\n      dataBind: function(data) {\n        return this.selectAll('text')\n          .data(data);\n      },\n      insert: function() {\n        return this.append('text');\n      },\n      events: {\n        merge: function() {\n          this.text(this.chart().keyText)\n        }\n      }\n    })\n  },\n\n  keyText: helpers.di(function(chart, d, i) {\n    return d.abbr + ' = ' + d.value;\n  })\n});\n```"],"extends":"Base","id":"Component"},"Compose":{"name":"Compose","shortname":"Compose","classitems":[{"id":"Compose-options","file":"src\\Compose.js","line":98,"description":"Get/set the options `object/function` for the chart that takes `data` and\nreturns `[...layout]` for composing child charts and components.","example":["\n```js\n// get\nchart.options();\n\n// set (static)\nchart.options([\n  // ...\n]);\n\n// set (dynamic, takes data and returns options)\nchart.options(function(data) {\n  // process data...\n\n  return [\n    // ...\n  ];\n});\n\n// Set directly from d3.chart creation\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    // ...\n  });\n```"],"itemtype":"property","name":"options","type":"Function|Object","class":"Compose","code":"{Function|Object}"},{"id":"Compose-margins","file":"src\\Compose.js","line":148,"description":"Margins between edge of container and components/chart","example":["\n```js\nchart.margins({top: 10, right: 20, bottom: 10, left: 20});\n```"],"itemtype":"property","name":"margins","type":"Object {top, right, bottom, left}","default":"{top: 10, right: 10, bottom: 10, left: 10}","class":"Compose","code":"{Object {top, right, bottom, left}} [{top: 10, right: 10, bottom: 10, left: 10}]"},{"id":"Compose-width","file":"src\\Compose.js","line":184,"description":"Get/set overall width of chart","itemtype":"property","name":"width","type":"Number","class":"Compose","code":"{Number}"},{"id":"Compose-height","file":"src\\Compose.js","line":194,"description":"Get/set overall height of chart","itemtype":"property","name":"height","type":"Number","class":"Compose","code":"{Number}"},{"id":"Compose-responsive","file":"src\\Compose.js","line":213,"description":"Enable responsive container + viewBox so that chart scales to fill width\n(only works if selection is not an svg)","itemtype":"property","name":"responsive","type":"Boolean","default":"true","class":"Compose","code":"{Boolean} [true]"},{"id":"Compose-charts","file":"src\\Compose.js","line":282,"description":"Set charts from options or get chart instances.\nEach chart should use a unique key so that updates are passed to the existing chart\n(otherwise they are recreated on update).\nThe `type` option must be a registered `d3.chart` and all other options are passed to the chart.","example":["\n```js\nchart.charts([\n  {id: 'input', type: 'Bars'}, // options to pass to Bars chart\n  {id: 'output', type: 'Lines'} // options to pass to Lines chart\n]);\n```"],"itemtype":"property","name":"charts","type":"Array","class":"Compose","code":"{Array}"},{"id":"Compose-components","file":"src\\Compose.js","line":308,"description":"Set components from options or get components instances.\nEach component should use a unique key so that updates are passed to the existing chart\n(otherwise they are recreated on update).\nThe `type` option must be a registered `d3.chart` and all other options are passed to the component.","example":["\n```js\nchart.components([\n  {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\n  {id: 'title', type: 'Title'} // options to pass to Title component\n])\n```"],"itemtype":"property","name":"components","type":"Array","class":"Compose","code":"{Array}"},{"id":"Compose-delay","file":"src\\Compose.js","line":334,"description":"Delay start of transition by specified milliseconds.\n(applied to all charts and components as default)","itemtype":"property","name":"delay","type":"Number|Function","default":"d3 default: 0","class":"Compose","code":"{Number|Function} [d3 default: 0]"},{"id":"Compose-duration","file":"src\\Compose.js","line":344,"description":"Transition duration in milliseconds.\n(applied to all charts and components as default)","itemtype":"property","name":"duration","type":"Number|Function","default":"d3 default: 250ms","class":"Compose","code":"{Number|Function} [d3 default: 250ms]"},{"id":"Compose-ease","file":"src\\Compose.js","line":354,"description":"Transition ease function.\n(applied to all charts and components as default)\n\n- See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n- Note: arguments to pass to `d3.ease` are not supported","itemtype":"property","name":"ease","type":"String|Function","default":"d3 default: 'cubic-in-out'","class":"Compose","code":"{String|Function} [d3 default: 'cubic-in-out']"},{"id":"Compose-draw","file":"src\\Compose.js","line":367,"description":"Draw chart with given data","example":["\n```js\nvar chart = d3.select('#chart')\n  .chart('Compose', function(data) {\n    // ...\n  });\n\nchart.draw([1, 2, 3]);\n\nchart.draw({values: [1, 2, 3]});\n\nchart.draw([\n  {values: [1, 2, 3]},\n  {values: [4, 5, 6]}\n]);\n```"],"itemtype":"method","name":"draw","params":[{"name":"data","description":"","type":"Any"}],"class":"Compose","code":"draw(data)"},{"id":"Compose-redraw","file":"src\\Compose.js","line":414,"description":"Redraw chart with current data","itemtype":"method","name":"redraw","class":"Compose"}],"plugins":[],"extensions":[{"name":"Base","shortname":"Base","classitems":[{"id":"Base-data","file":"src\\Base.js","line":88,"description":"Store fully-transformed data for direct access from the chart","itemtype":"property","name":"data","type":"Any","class":"Base","code":"{Any}"},{"id":"Base-options","file":"src\\Base.js","line":96,"description":"Overall options for chart/component, automatically setting any matching properties.","example":["\n```js\nvar property = d3.compose.helpers.property;\n\nd3.chart('Base').extend('HasProperties', {\n  a: property(),\n  b: property({\n    set: function(value) {\n      return {\n        override: value + '!'\n      };\n    }\n  })\n});\n\nvar instance = d3.select('#chart')\n  .chart('HasProperties', {\n    a: 123,\n    b: 'Howdy',\n    c: true\n  });\n\n// Equivalent to:\n// d3.select(...)\n//   .chart('HasProperties')\n//   .options({...});\n\nconsole.log(instance.a()); // -> 123\nconsole.log(instance.b()); // -> Howdy!\nconsole.log(instance.options().c); // -> true\n```"],"itemtype":"property","name":"options","type":"Object","class":"Base","code":"{Object}"},{"id":"Base-width","file":"src\\Base.js","line":156,"description":"Get width of `this.base`.\n(Does not include `set` for setting width of `this.base`)","itemtype":"method","name":"width","return":{"description":"","type":"Number"},"class":"Base"},{"id":"Base-height","file":"src\\Base.js","line":167,"description":"Get height of `this.base`.\n(Does not include `set` for setting height of `this.base`)","itemtype":"method","name":"height","return":{"description":"","type":"Number"},"class":"Base"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Base.js","line":22,"description":"Shared functionality between all charts and components.\n\n- Set properties automatically from `options`,\n- Store fully transformed data\n- Adds `\"before:draw\"` and `\"draw\"` events\n- Standard `width` and `height` calculations","id":"Base"}],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Compose.js","line":26,"description":"Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\nUsing the `options` property, charts and components can be bound to data and customized to create dynamic charts.","example":["\n```html\n<div id=\"#chart\"></div>\n```\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Process data...\n\n  // Create shared scales\n  var scales = {\n    x: {data: data.input, key: 'x', adjacent: true},\n    y: {data: data.input, key: 'y'},\n    y2: {data: data.output, key: 'y'}\n  };\n\n  // Setup charts and components\n  var charts = [\n    d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\n    d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\n  ];\n\n  var title = d3c.title('d3.compose');\n  var xAxis = d3c.axis('xAxis', {scale: scales.x});\n  var yAxis = d3c.axis('yAxis', {scale: scales.y});\n  var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\n\n  // Layout charts and components\n  return [\n    title,\n    [yAxis, d3c.layered(charts), y2Axis],\n    xAxis\n  ];;\n});\n\nchart.draw({input: [...], output: [...]});\n```"],"extends":"Base","id":"Compose"},"Overlay":{"name":"Overlay","shortname":"Overlay","classitems":[{"id":"Overlay-x","file":"src\\Overlay.js","line":35,"description":"Overlay's top-left x-position in px from left","itemtype":"property","name":"x","type":"Number","default":"0","class":"Overlay","code":"{Number} [0]"},{"id":"Overlay-y","file":"src\\Overlay.js","line":46,"description":"Overlay's top-left y-position in px from top","itemtype":"property","name":"y","type":"Number","default":"0","class":"Overlay","code":"{Number} [0]"},{"id":"Overlay-hidden","file":"src\\Overlay.js","line":57,"description":"Whether overlay is currently hidden","itemtype":"property","name":"hidden","type":"Boolean","default":"true","class":"Overlay","code":"{Boolean} [true]"},{"id":"Overlay-style","file":"src\\Overlay.js","line":68,"description":"Overlays base styling\n(default includes position and hidden)","itemtype":"property","name":"style","type":"String","default":"set from x, y, and hidden","class":"Overlay","code":"{String} [set from x, y, and hidden]"},{"id":"Overlay-position","file":"src\\Overlay.js","line":95,"description":"Position overlay layer at given x,y coordinates","example":["\n```js\n// Absolute, x: 100, y: 50\noverlay.position(100, 50);\noverlay.position({x: 100, y: 50});\n\n// Relative-to-chart, x: 50, y: 40\noverlay.position({chart: {x: 50, y: 40}});\n\n// Relative-to-container, x: 75, y: 50\noverlay.position({container: {x: 75, y: 50}});\n```"],"itemtype":"method","name":"position","params":[{"name":"position","description":"{x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left","type":"Object|Number"},{"name":"y","description":"in px from top","type":"Number","optional":true}],"class":"Overlay","code":"position(position, [y])"},{"id":"Overlay-show","file":"src\\Overlay.js","line":144,"description":"Show overlay (with `display: block`)","itemtype":"method","name":"show","class":"Overlay"},{"id":"Overlay-hide","file":"src\\Overlay.js","line":154,"description":"Hide overlay (with `display: none`)","itemtype":"method","name":"hide","class":"Overlay"},{"id":"Overlay-getAbsolutePosition","file":"src\\Overlay.js","line":164,"description":"Get absolute position from container position\n(needed since container position uses viewBox and needs to be scaled to absolute position)","itemtype":"method","name":"getAbsolutePosition","params":[{"name":"container_position","description":"({x, y})","type":"Object"}],"return":{"description":"absolute {x, y} relative to container div","type":"Object"},"class":"Overlay","code":"getAbsolutePosition(container_position)"}],"plugins":[],"extensions":[{"name":"Component","shortname":"Component","classitems":[{"id":"Component-position","file":"src\\Component.js","line":52,"description":"Component's position relative to chart\n(top, right, bottom, left)","itemtype":"property","name":"position","type":"String","default":"'top'","class":"Component","code":"{String} ['top']"},{"id":"Component-width","file":"src\\Component.js","line":67,"description":"Get/set the width of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"width","type":"Number","default":"(actual width)","class":"Component","code":"{Number} [(actual width)]"},{"id":"Component-height","file":"src\\Component.js","line":81,"description":"Get/set the height of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"height","type":"Number","default":"(actual height)","class":"Component","code":"{Number} [(actual height)]"},{"id":"Component-margins","file":"src\\Component.js","line":95,"description":"Margins (in pixels) around component","itemtype":"property","name":"margins","type":"Object","default":"{top: 0, right: 0, bottom: 0, left: 0}","class":"Component","code":"{Object} [{top: 0, right: 0, bottom: 0, left: 0}]"},{"id":"Component-centered","file":"src\\Component.js","line":111,"description":"Center the component vertically/horizontally (depending on position)","itemtype":"property","name":"centered","type":"Boolean","default":"false","class":"Component","code":"{Boolean} [false]"},{"id":"Component-skip_layout","file":"src\\Component.js","line":122,"description":"Skip component during layout calculations and positioning\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('NotLaidOut', {\n  skip_layout: true\n});\n```"],"itemtype":"attribute","name":"skip_layout","type":"Boolean","default":"false","class":"Component"},{"id":"Component-prepareLayout","file":"src\\Component.js","line":138,"description":"Perform any layout preparation required before getLayout (default is draw)\n(override in prototype of extension)\n\nNote: By default, components are double-drawn;\nfor every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\nThis can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  prepareLayout: function(data) {\n    // default: this.draw(data);\n    // so that getLayout has real dimensions\n\n    // -> custom preparation (if necessary)\n  }\n})\n```"],"itemtype":"method","name":"prepareLayout","params":[{"name":"data","description":"","type":"Any"}],"class":"Component","code":"prepareLayout(data)"},{"id":"Component-getLayout","file":"src\\Component.js","line":164,"description":"Get layout details for use when laying out component\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  getLayout: function(data) {\n    var calculated_width, calculated_height;\n\n    // Perform custom calculations...\n\n    // Must return position, width, and height\n    return {\n      position: this.position(),\n      width: calculated_width,\n      height: calculated_height\n    };\n  }\n});\n```"],"itemtype":"method","name":"getLayout","params":[{"name":"data","description":"","type":"Any"}],"return":{"description":"position, width, and height for layout","type":"Object"},"class":"Component","code":"getLayout(data)"},{"id":"Component-setLayout","file":"src\\Component.js","line":200,"description":"Set layout of underlying base\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  setLayout: function(x, y, options) {\n    // Set layout of this.base...\n    // (the following is the default implementation)\n    var margins = this.margins();\n\n    // (handle this.centered())\n\n    this.base\n      .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n    this.height(options && options.height);\n    this.width(options && options.width);\n  }\n});\n```"],"itemtype":"method","name":"setLayout","params":[{"name":"x","description":"position of base top-left","type":"Number"},{"name":"y","description":"position of base top-left","type":"Number"},{"name":"options","description":"","type":"Object","props":[{"name":"height","description":"height of component in layout","type":"Object","optional":true},{"name":"width","description":"width of component in layout","type":"Object","optional":true}]}],"class":"Component","code":"setLayout(x, y, options)"},{"id":"Component-z_index","file":"src\\Component.js","line":278,"description":"Default z-index for component\n(Charts are 100 by default, so Component = 50 is below chart by default)","example":["\n```js\nd3.chart('Component').extend('AboveChartLayers', {\n  // ...\n}, {\n  z_index: 150\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"50","class":"Component"},{"id":"Component-layer_type","file":"src\\Component.js","line":297,"description":"Set to `'chart'` to use chart layer for component.\n(e.g. Axis uses chart layer to position with charts, but includes layout for ticks)","example":["\n```js\nd3.chart('Component').extend('ChartComponent', {\n  // ...\n}, {\n  layer_type: 'chart'\n});\n```"],"itemtype":"attribute","name":"layer_type","static":1,"type":"String","default":"'component'","class":"Component"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Component.js","line":12,"description":"Common base for creating components that includes helpers for positioning and layout.\n\n### Extending\n\n`d3.chart('Component')` contains intelligent defaults and there are no required overrides.\nCreate a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n- To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n- To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`","example":["\n```js\nd3.chart('Component').extend('Key', {\n  initialize: function() {\n    this.layer('Key', this.base, {\n      dataBind: function(data) {\n        return this.selectAll('text')\n          .data(data);\n      },\n      insert: function() {\n        return this.append('text');\n      },\n      events: {\n        merge: function() {\n          this.text(this.chart().keyText)\n        }\n      }\n    })\n  },\n\n  keyText: helpers.di(function(chart, d, i) {\n    return d.abbr + ' = ' + d.value;\n  })\n});\n```"],"extends":"Base","id":"Component"}],"plugin_for":[],"extension_for":[],"namespace":"","file":"src\\Overlay.js","line":9,"description":"Common base for creating overlays that includes helpers for positioning and show/hide.\n\n### Extending\n\nCreate an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\n\n- To adjust positioning, override `position`\n- To adjust show/hide behavior, override `show`/`hide`","example":["\n```js\nd3.chart('Overlay').extend('ClosestPoints', {\n  // TODO\n});\n```"],"extends":"Component","id":"Overlay"}}}