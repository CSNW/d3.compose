{"classes":{"Bars":{"name":"Bars","shortname":"Bars","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\charts\\Bars.js","line":7,"description":"Bars chart with centered or adjacent display for single or series data.\n\nTo display bars for different series next to each other (adjacent),\nuse the `adjacent` option when creating the `xScale` (see example below).\n\n### Extending\n\nTo extend the `Bars` chart, the following methods are available:\n\n- `barHeight`\n- `barWidth`\n- `barX`\n- `barY`\n- `barClass`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'Bars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Chart, Series, XYValues, XYLabels, Hover, Transition, StandardLayer","id":"Bars"},"StackedBars":{"name":"StackedBars","shortname":"StackedBars","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\charts\\Bars.js","line":159,"description":"Bars chart with values stacked on top of each other\n\n(See `Bars` for extensibility details)","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      stacked_output: {\n        type: 'StackedBars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Bars","id":"StackedBars"},"HorizontalBars":{"name":"HorizontalBars","shortname":"HorizontalBars","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\charts\\Bars.js","line":226,"description":"Bars chart with bars that group from left-to-right\n\n(See `Bars` for extensibility details)","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'HorizontalBars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"Bars, InvertedXY","id":"HorizontalBars"},"HorizontalStackedBars":{"name":"HorizontalStackedBars","shortname":"HorizontalStackedBars","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\charts\\Bars.js","line":303,"description":"Horizontal Stacked Bars\n\n(See `Bars` for extensibility details)","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  // Display bars for different series next to each other (adjacent: true)\n  var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n  return {\n    charts: {\n      output: {\n        type: 'HorizontalStackedBars',\n        data: data.output,\n        xScale: xScale,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n\n// Single y-values\nchart.draw([10, 20, 30]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n  {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n]);\n```"],"extends":"HorizontalBars","id":"HorizontalStackedBars"},"Labels":{"name":"Labels","shortname":"Labels","classitems":[{"id":"Labels-format","file":"src\\charts\\Labels.js","line":41,"description":"Formatting function or string (string is passed to d3.format) for label values","itemtype":"property","name":"format","type":"String|Function","class":"Labels"},{"id":"Labels-position","file":"src\\charts\\Labels.js","line":58,"description":"Label position relative to data-point","itemtype":"property","name":"position","type":"String","default":"top","class":"Labels"},{"id":"Labels-offset","file":"src\\charts\\Labels.js","line":72,"description":"Offset between data-point and label\n(if number is given, offset is set based on position)","itemtype":"property","name":"offset","type":"Number|Object","default":"{x: 0, y: 0}","class":"Labels"},{"id":"Labels-padding","file":"src\\charts\\Labels.js","line":101,"description":"Padding between text and label background","itemtype":"property","name":"padding","type":"Number","default":"0","class":"Labels"},{"id":"Labels-anchor","file":"src\\charts\\Labels.js","line":110,"description":"Define text anchor, start, middle, or end\n(set by default based on label position)","itemtype":"property","name":"anchor","type":"String","default":"middle","class":"Labels"},{"id":"Labels-alignment","file":"src\\charts\\Labels.js","line":132,"description":"Define text-aligmment, top, middle, or bottom\n(set by default based on label position)","itemtype":"property","name":"alignment","type":"String","default":"middle","class":"Labels"},{"id":"Labels-labelText","file":"src\\charts\\Labels.js","line":154,"description":"Get label text for data-point (uses \"label\" property or y-value)","itemtype":"method","name":"labelText","return":{"description":"","type":"String"},"class":"Labels"},{"id":"Labels-labelClass","file":"src\\charts\\Labels.js","line":167,"description":"Get class for label group","itemtype":"method","name":"labelClass","return":{"description":"","type":"String"},"class":"Labels"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\charts\\Labels.js","line":7,"id":"Labels"},"HoverLabels":{"name":"HoverLabels","shortname":"HoverLabels","classitems":[{"id":"HoverLabels-hoverTolerance","file":"src\\charts\\Labels.js","line":266,"description":"Maximum distance to find active points","itemtype":"property","name":"hoverTolerance","type":"Number","default":"20","class":"HoverLabels"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\charts\\Labels.js","line":255,"id":"HoverLabels"},"Lines":{"name":"Lines","shortname":"Lines","classitems":[{"id":"Lines-interpolate","file":"src\\charts\\Lines.js","line":77,"description":"Set interpolation mode for line\n\n- See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\n- Set to `null` or `'linear'` for no interpolation","itemtype":"property","name":"interpolate","type":"String","default":"monotone","class":"Lines"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\charts\\Lines.js","line":6,"description":"Create an XY Lines chart with single or series data.\n\n### Extending\n\nGreat care has been taken in making the standard charts in d3.compose extensible.\nTo extend the `Lines` chart, the following methods are available:\n\n- `createLine`\n- `lineKey`\n- `lineData`\n- `onDataBind`\n- `onInsert`\n- `onEnter`\n- `onEnterTransition`\n- `onUpdate`\n- `onUpdateTransition`\n- `onMerge`\n- `onMergeTransition`\n- `onExit`\n- `onExitTransition`\n\nView the `Lines.js` source for the default implementation and more information on these methods.","example":["\n```js\nvar chart = d3.select('#chart').chart('Compose', function(data) {\n  return {\n    charts: {\n      input: {\n        type: 'Lines'\n        data: data.input,\n        // xScale: ...,\n        // yScale: ...,\n        // other properties...\n      }\n    }\n  };\n});\n  \n// Single y-values\nchart.draw([1, 2, 3]);\n\n// Series (x,y) values\nchart.draw([\n  {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\n  {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\n]);\n```"],"extends":"Chart, Series, XY, XYLabels, Hover, HoverPoints, Transition, StandardLayer","id":"Lines"},"Axis":{"name":"Axis","shortname":"Axis","classitems":[{"id":"Axis-scale","file":"src\\components\\Axis.js","line":53,"description":"Scale to pass to d3.axis\n(if Object is given, helpers.createScale is used)","itemtype":"property","name":"scale","type":"Object|d3.scale","class":"Axis"},{"id":"Axis-position","file":"src\\components\\Axis.js","line":76,"description":"Position axis relative to chart\n(top, right, bottom, left, x0, y0)","itemtype":"property","name":"position","type":"String","default":"bottom","class":"Axis"},{"id":"Axis-translation","file":"src\\components\\Axis.js","line":96,"description":"{x,y} translation of axis relative to chart\n(set by default based on position)","itemtype":"property","name":"translation","type":"Object","default":"(set based on position)","class":"Axis"},{"id":"Axis-orient","file":"src\\components\\Axis.js","line":126,"description":"Axis orient for ticks\n(set by default based on position)","itemtype":"property","name":"orient","type":"String","default":"(set based on position)","class":"Axis"},{"id":"Axis-orientation","file":"src\\components\\Axis.js","line":147,"description":"Axis orientation (vertical or horizonal)","itemtype":"property","name":"orientation","type":"String","default":"(set based on position)","class":"Axis"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\components\\Axis.js","line":6,"description":"Axis component for XY data\n\nAvailable d3.axis extensions:\n- ticks\n- tickValues\n- tickSize\n- innerTickSize\n- outerTickSize\n- tickPadding\n- tickFormat","id":"Axis"},"Legend":{"name":"Legend","shortname":"Legend","classitems":[{"id":"Legend-charts","file":"src\\components\\Legend.js","line":44,"description":"Array of chart keys from container to display in legend","itemtype":"property","name":"charts","type":"Array","class":"Legend"},{"id":"Legend-swatchDimensions","file":"src\\components\\Legend.js","line":52,"description":"Dimensions of \"swatch\"","itemtype":"property","name":"swatchDimensions","type":"Object","default":"{width: 20, height: 20}","class":"Legend"},{"id":"Legend-itemKey","file":"src\\components\\Legend.js","line":102,"description":"Key for legend item (default is key from data)","itemtype":"method","name":"itemKey","return":{"description":"","type":"Any"},"class":"Legend"},{"id":"Legend-itemText","file":"src\\components\\Legend.js","line":112,"description":"Text for legend item (default is text from data)","itemtype":"method","name":"itemText","return":{"description":"","type":"String"},"class":"Legend"},{"id":"Legend-swatchClass","file":"src\\components\\Legend.js","line":122,"description":"Class to apply to swatch (default is class from data)","itemtype":"method","name":"swatchClass","return":{"description":"","type":"String"},"class":"Legend"},{"id":"Legend-createSwatch","file":"src\\components\\Legend.js","line":132,"description":"Create swatch (using registered swatches based on type from data)","itemtype":"method","name":"createSwatch","class":"Legend"},{"id":"Legend-registerSwatch","file":"src\\components\\Legend.js","line":211,"description":"Register a swatch create function for the given chart type","itemtype":"method","name":"registerSwatch","static":1,"params":[{"name":"type","description":"Chart type","type":"String"},{"name":"create","description":"\"di\" function that inserts swatch","type":"Function"}],"class":"Legend","code":"registerSwatch(type, create)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\components\\Legend.js","line":7,"description":"Legend component that can automatically draw data from charts","example":["\n```js\n// (in Multi options)\nreturn {\n  charts: {\n    a: {...},\n    b: {...}\n  },\n  components: {\n    legend: {type: 'Legend', charts: ['a', 'b']}\n  }\n}\n// -> automatically adds legend with data from charts a and b\n\n// or, manually set data for legend\nreturn {\n  components: {\n    legend: {type: 'Legend', data: [\n      {text: 'A', key: 'a', type: 'Bars', class: 'legend-blue'},\n      {text: 'B', key: 'b', type: 'Line', class: 'legend-green'},\n      {text: 'C', key: 'c', class: 'legend-red'}\n    ]}\n  }\n}\n```"],"id":"Legend"},"InsetLegend":{"name":"InsetLegend","shortname":"InsetLegend","classitems":[{"id":"InsetLegend-translation","file":"src\\components\\Legend.js","line":264,"description":"Position legend within chart layer {x,y,relative_to}\nUse `relative_to` to use x,y values relative to x-y origin\n(e.g. left-top is default)","itemtype":"property","name":"translation","type":"Object {x,y} translation","default":"{x: 10, y: 10, relative_to: 'left-top'}","class":"InsetLegend"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\components\\Legend.js","line":249,"description":"Legend positioned within chart bounds","id":"InsetLegend"},"Title":{"name":"Title","shortname":"Title","classitems":[{"id":"Title-text","file":"src\\components\\Title.js","line":15,"itemtype":"property","name":"text","type":"String","class":"Title"},{"id":"Title-rotation","file":"src\\components\\Title.js","line":25,"description":"Rotation of title text","itemtype":"property","name":"rotation","type":"Number","default":"(set based on position)","class":"Title"},{"id":"Title-textAlign","file":"src\\components\\Title.js","line":43,"description":"Horizontal text-alignment of title","itemtype":"property","name":"textAlign","type":"String","default":"\"center\"","class":"Title"},{"id":"Title-anchor","file":"src\\components\\Title.js","line":57,"description":"text-anchor for title (start, middle, or end)\n(default set by textAlign)","itemtype":"property","name":"anchor","type":"String","default":"\"middle\"","class":"Title"},{"id":"Title-verticalAlign","file":"src\\components\\Title.js","line":78,"description":"Vertical aligment for title (top, middle, bottom)","itemtype":"property","name":"verticalAlign","type":"String","default":"\"middle\"","class":"Title"},{"id":"Title-style","file":"src\\components\\Title.js","line":92,"description":"Style object containing styles for title","itemtype":"property","name":"style","type":"Object","default":"{}","class":"Title"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\components\\Title.js","line":6,"id":"Title"},"extensions":{"name":"extensions","shortname":"extensions","classitems":[{"id":"extensions-xy","file":"src\\extensions\\xy.js","line":4,"description":"XY extension\nGenerate d3.chart.multi options for XY charts","itemtype":"method","name":"xy","params":[{"name":"options","description":"","type":"Object","props":[{"name":"charts","description":"","type":"Object","optional":true},{"name":"axes","description":"","type":"Object","optional":true},{"name":"title","description":"","type":"String|Object","optional":true},{"name":"legend","description":"","type":"Boolean|Object","optional":true}]}],"class":"extensions","code":"xy(options)"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","id":"extensions"},"Base":{"name":"Base","shortname":"Base","classitems":[{"id":"Base-data","file":"src\\Base.js","line":22,"description":"Store fully-transformed data for direct access from the chart","itemtype":"property","name":"data","type":"Any","class":"Base"},{"id":"Base-options","file":"src\\Base.js","line":30,"description":"Overall options for chart/component, automatically setting any matching properties.","example":["\n```js\nvar property = d3.compose.helpers.property;\n\nd3.chart('Base').extend('HasProperties', {\n  initialize: function(options) {\n    // Automatically set options\n    this.options(options || {});\n  },\n  a: property('a'),\n  b: property('b', {\n    set: function(value) {\n      return {\n        override: value + '!'\n      };\n    }\n  })\n});\n\nvar instance = d3.select('#chart')\n  .chart('HasProperties', {\n    a: 123,\n    b: 'Howdy',\n    c: true\n  });\n\n// Equivalent to:\n// d3.select(...)\n//   .chart('HasProperties')\n//   .options({...});\n\nconsole.log(instance.a()); // -> 123\nconsole.log(instance.b()); // -> Howdy!\nconsole.log(instance.options().c); // -> true\n```"],"itemtype":"property","name":"options","type":"Object","class":"Base"},{"id":"Base-width","file":"src\\Base.js","line":81,"description":"Get width of `this.base`.\n(Does not include `set` for setting width of `this.base`)","itemtype":"method","name":"width","return":{"description":"","type":"Number"},"class":"Base"},{"id":"Base-height","file":"src\\Base.js","line":92,"description":"Get height of `this.base`.\n(Does not include `set` for setting height of `this.base`)","itemtype":"method","name":"height","return":{"description":"","type":"Number"},"class":"Base"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\Base.js","line":5,"description":"Shared functionality between all charts and components.\n\n- Set properties automatically from `options`, \n- Store fully transformed data\n- Adds `\"before:draw\"` and `\"draw\"` events\n- Standard `width` and `height` calculations","id":"Base"},"Chart":{"name":"Chart","shortname":"Chart","classitems":[{"id":"Chart-z_index","file":"src\\Chart.js","line":43,"description":"Default z-index for chart\n(Components are 50 by default, so Chart = 100 is above component by default)","example":["\n```js\nd3.chart('Chart').extend('BelowComponentLayers', {\n  // ...\n}, {\n  z_index: 40\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"100","class":"Chart"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\Chart.js","line":3,"description":"Common base for creating charts.\nStandard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\n\n### Extending\n\nTo take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\nand automatically setting properties from `options`, use `d3.compose.helpers.di`\nand `d3.compose.helpers.property` when creating your chart.","example":["\n```js\nvar helpers = d3.compose.helpers;\n\nd3.chart('Chart').extend('Pie', {\n  initialize: function() {\n    // same as d3.chart\n  },\n  transform: function(data) {\n    // same as d3.chart\n  },\n\n  color: helpers.di(function(chart, d, i) {\n    // \"di\" function with parent chart injected (\"this\" = element)\n  }),\n\n  centered: helpers.property('centered', {\n    default_value: true\n    // can be automatically set from options object\n  })\n});\n```"],"extends":"Base","id":"Chart"},"Component":{"name":"Component","shortname":"Component","classitems":[{"id":"Component-position","file":"src\\Component.js","line":49,"description":"Component's position relative to chart\n(top, right, bottom, left)","itemtype":"property","name":"position","type":"String","default":"'top'","class":"Component"},{"id":"Component-width","file":"src\\Component.js","line":64,"description":"Get/set the width of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"width","type":"Number","default":"(actual width)","class":"Component"},{"id":"Component-height","file":"src\\Component.js","line":78,"description":"Get/set the height of the component (in pixels)\n(used in layout calculations)","itemtype":"property","name":"height","type":"Number","default":"(actual height)","class":"Component"},{"id":"Component-margins","file":"src\\Component.js","line":92,"description":"Margins (in pixels) around component","itemtype":"property","name":"margins","type":"Object","default":"{top: 0, right: 0, bottom: 0, left: 0}","class":"Component"},{"id":"Component-skip_layout","file":"src\\Component.js","line":108,"description":"Skip component during layout calculations and positioning\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('NotLaidOut', {\n  skip_layout: true\n});\n```"],"itemtype":"attribute","name":"skip_layout","type":"Boolean","default":"false","class":"Component"},{"id":"Component-prepareLayout","file":"src\\Component.js","line":124,"description":"Perform any layout preparation required before getLayout (default is draw)\n(override in prototype of extension)\n\nNote: By default, components are double-drawn; \nfor every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\nThis can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  prepareLayout: function(data) {\n    // default: this.draw(data);\n    // so that getLayout has real dimensions\n\n    // -> custom preparation (if necessary)\n  }\n})\n```"],"itemtype":"method","name":"prepareLayout","params":[{"name":"data","description":"","type":"Any"}],"class":"Component","code":"prepareLayout(data)"},{"id":"Component-getLayout","file":"src\\Component.js","line":150,"description":"Get layout details for use when laying out component\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  getLayout: function(data) {\n    var calculated_width, calculated_height;\n\n    // Perform custom calculations...\n  \n    // Must return position, width, and height\n    return {\n      position: this.position(),\n      width: calculated_width,\n      height: calculated_height\n    };\n  }\n});\n```"],"itemtype":"method","name":"getLayout","params":[{"name":"data","description":"","type":"Any"}],"return":{"description":"position, width, and height for layout","type":"Object"},"class":"Component","code":"getLayout(data)"},{"id":"Component-setLayout","file":"src\\Component.js","line":186,"description":"Set layout of underlying base\n(override in prototype of extension)","example":["\n```js\nd3.chart('Component').extend('Custom', {\n  setLayout: function(x, y, options) {\n    // Set layout of this.base...\n    // (the following is the default implementation)\n    var margins = this.margins();\n\n    this.base\n      .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n    this.height(options && options.height);\n    this.width(options && options.width);\n  }\n});\n```"],"itemtype":"method","name":"setLayout","params":[{"name":"x","description":"position of base top-left","type":"Number"},{"name":"y","description":"position of base top-left","type":"Number"},{"name":"options","description":"","type":"Object","props":[{"name":"height","description":"height of component in layout","type":"Object","optional":true},{"name":"width","description":"width of component in layout","type":"Object","optional":true}]}],"class":"Component","code":"setLayout(x, y, options)"},{"id":"Component-z_index","file":"src\\Component.js","line":220,"description":"Default z-index for component\n(Charts are 100 by default, so Component = 50 is below chart by default)","example":["\n```js\nd3.chart('Component').extend('AboveChartLayers', {\n  // ...\n}, {\n  z_index: 150\n});\n```"],"itemtype":"attribute","name":"z_index","static":1,"type":"Number","default":"50","class":"Component"},{"id":"Component-layer_type","file":"src\\Component.js","line":239,"description":"Set to `'chart'` to use chart layer for component.\n(e.g. Axis uses chart layer to position with charts, but includes layout for ticks)","example":["\n```js\nd3.chart('Component').extend('ChartComponent', {\n  // ...\n}, {\n  layer_type: 'chart'\n});\n```"],"itemtype":"attribute","name":"layer_type","static":1,"type":"String","default":"'component'","class":"Component"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\Component.js","line":5,"description":"Common base for creating components that includes helpers for positioning and layout.\n\n### Extending\n\n`d3.chart('Component')` contains intelligent defaults and there are no required overrides.\nCreate a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n- To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n- To layout a component within the chart, use `skip_layout: false` and the static `layer_type: 'Chart'`","example":["\n```js\nd3.chart('Component').extend('Key', {\n  initialize: function() {\n    this.layer('Key', this.base, {\n      dataBind: function(data) {\n        return this.selectAll('text')\n          .data(data);\n      },\n      insert: function() {\n        return this.append('text');\n      },\n      events: {\n        merge: function() {\n          this.text(this.chart().keyText)\n        }\n      }\n    })\n  },\n\n  keyText: helpers.di(function(chart, d, i) {\n    return d.abbr + ' = ' + d.value;\n  })\n});\n```"],"extends":"Base","id":"Component"},"Compose":{"name":"Compose","shortname":"Compose","classitems":[{"id":"Compose-options","file":"src\\Compose.js","line":69,"description":"Get/set the options `object/function` for the chart that takes `data` and\nreturns `{charts, components}` for composing child charts and components.\nAll values are passed to the corresponding property (`{components}` sets `components` property).","example":["\n```js\n// get\nchart.options();\n\n// set (static)\nchart.options({\n  charts: {},\n  components: {}\n});\n\n// set (dynamic, takes data and returns options)\nchart.options(function(data) {\n  // process data...\n\n  return {\n    charts: {},\n    components: {}\n  };\n});\n\n// Set directly from d3.chart creation\nd3.select('#chart')\n  .chart('Compose', function(data) {\n    // ...\n  });\n```"],"itemtype":"property","name":"options","type":"Function|Object","class":"Compose"},{"id":"Compose-margins","file":"src\\Compose.js","line":123,"description":"Margins between edge of container and components/chart","example":["\n```js\nchart.margins({top: 10, right: 20, bottom: 10, left: 20});\n```"],"itemtype":"property","name":"margins","type":"Object {top, right, bottom, left}","default":"{top: 10, right: 10, bottom: 10, left: 10}","class":"Compose"},{"id":"Compose-width","file":"src\\Compose.js","line":159,"description":"Get/set overall width of chart","itemtype":"property","name":"width","type":"Number","class":"Compose"},{"id":"Compose-height","file":"src\\Compose.js","line":167,"description":"Get/set overall height of chart","itemtype":"property","name":"height","type":"Number","class":"Compose"},{"id":"Compose-charts","file":"src\\Compose.js","line":184,"description":"Set charts from options or get chart instances.\nEach chart should use a unique key so that updates are passed to the existing chart\n(otherwise they are recreated on update).\nThe `type` option must be a registered `d3.chart` and all other options are passed to the chart.","example":["\n```js\nchart.charts({\n  input: {type: 'Bars'}, // options to pass to Bars chart\n  output: {type: 'Lines'} // options to pass to Lines chart\n});\n```"],"itemtype":"property","name":"charts","type":"Object","class":"Compose"},{"id":"Compose-components","file":"src\\Compose.js","line":210,"description":"Set components from options or get components instances.\nEach component should use a unique key so that updates are passed to the existing chart\n(otherwise they are recreated on update).\nThe `type` option must be a registered `d3.chart` and all other options are passed to the component.","example":["\n```js\nchart.components({\n  'axis.y': {type: 'Axis'}, // options to pass to Axis component\n  title: {type: 'Title'} // options to pass to Title component\n})\n```"],"itemtype":"property","name":"components","type":"Object","class":"Compose"},{"id":"Compose-draw","file":"src\\Compose.js","line":236,"description":"Draw chart with given data","example":["\n```js\nvar chart = d3.select('#chart')\n  .chart('Compose', function(data) {\n    // ...\n  });\n\nchart.draw([1, 2, 3]);\n\nchart.draw({values: [1, 2, 3]});\n\nchart.draw([\n  {values: [1, 2, 3]},\n  {values: [4, 5, 6]}\n]);\n```"],"itemtype":"method","name":"draw","params":[{"name":"data","description":"","type":"Any"}],"class":"Compose","code":"draw(data)"},{"id":"Compose-redraw","file":"src\\Compose.js","line":288,"description":"Redraw chart with current data","itemtype":"method","name":"redraw","class":"Compose"}],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"module":"Series","file":"src\\Compose.js","line":5,"description":"d3.compose\nCompose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\nUsing the `options` property, charts and components can be bound to data and customized to create dynamic charts.","example":["\n```js\nvar chart = d3.select('#chart')\n  .chart('Compose', function(data) {\n    // Process data...\n    \n    // Create shared scales\n    var scales = {\n      x: {data: data.input, key: 'x', adjacent: true},\n      y: {data: data.input, key: 'y'},\n      y2: {data: data.output, key: 'y'}\n    };\n\n    return {\n      charts: {\n        input: {\n          type: 'Bars', data: data.input, xScale: scales.x, yScale: scales.y\n        },\n        output: {\n          type: 'Lines', data: data.output, xScale: scales.x, yScale: scales.y2}\n        }\n      },\n      components: {\n        'axis.y': {\n          type: 'Axis', scale: scales.y, position: 'left'\n        },\n        'axis.y2': {\n          type: 'Axis', scale: scales.y2, position: 'right'\n        }\n        title: {\n          type: 'Title', position: 'top', text: 'd3.compose'\n        }\n      }\n    });\n  });\n\nchart.draw({input: [...], output: [...]});\n```"],"params":[{"name":"options","description":"","type":"Function|Object","optional":true}],"id":"Compose"}}}