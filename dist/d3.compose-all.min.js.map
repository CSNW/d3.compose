{"version":3,"sources":["d3.compose-all.min.js","d3.compose-all.js","c:/dev/d3.compose/src/mixins/standard-layer.js","c:/dev/d3.compose/src/utils.js","c:/dev/d3.compose/src/helpers/property.js","c:/dev/d3.compose/src/helpers/mixin.js","c:/dev/d3.compose/src/helpers/stack.js","c:/dev/d3.compose/src/helpers/create-scale.js","c:/dev/d3.compose/src/helpers/dimensions.js","c:/dev/d3.compose/src/helpers.js","c:/dev/d3.compose/src/Base.js","c:/dev/d3.compose/src/mixins/hover.js","c:/dev/d3.compose/src/components/Text.js","c:/dev/d3.compose/src/components/Title.js","c:/dev/d3.compose/src/components/AxisTitle.js","c:/dev/d3.compose/src/layout.js","c:/dev/d3.compose/src/Compose.js","c:/dev/d3.compose/src/mixins/transition.js","c:/dev/d3.compose/src/mixins/xy.js","c:/dev/d3.compose/src/Component.js","c:/dev/d3.compose/src/mixins/labels.js","c:/dev/d3.compose/src/mixins/xy-inverted.js","c:/dev/d3.compose/src/mixins/xy-values.js","c:/dev/d3.compose/src/mixins/series.js","c:/dev/d3.compose/src/mixins.js","c:/dev/d3.compose/src/components/Gridlines.js","c:/dev/d3.compose/src/components/Legend.js","c:/dev/d3.compose/src/components/InsetLegend.js","c:/dev/d3.compose/src/components/Axis.js","c:/dev/d3.compose/src/Chart.js","c:/dev/d3.compose/src/charts/Labels.js","c:/dev/d3.compose/src/charts/HoverLabels.js","c:/dev/d3.compose/src/charts/Bars.js","c:/dev/d3.compose/src/charts/HorizontalBars.js","c:/dev/d3.compose/src/charts/StackedBars.js","c:/dev/d3.compose/src/charts/HorizontalStackedBars.js","c:/dev/d3.compose/src/charts/Lines.js","c:/dev/d3.compose/src/Overlay.js","c:/dev/d3.compose/d3.compose-all.js"],"names":["global","factory","exports","module","require","define","amd","d3c","d3","this","createLayer","chart","type","name","selection","layer","series","events","forEach","event","method","split","map","str","charAt","toUpperCase","slice","join","dataBind","data","onDataBind","insert","onInsert","_extend","target","extensions","undefined_only","i","length","key","contains","arr","item","indexOf","compact","filter","difference","a","b","value","defaults","call","arguments","extend","flatten","reduce","memo","concat","find","fn","context","first","n","Array","prototype","isBoolean","obj","isObject","isNumber","toString","isString","isUndefined","objectEach","keys","Object","objectFind","pluck","objs","uniq","result","push","inherits","Child","Parent","create","constructor","enumerable","writeable","configurable","setPrototypeOf","__proto__","valueOrDefault","default_value","property","options","console","warn","id","unique_index","get","properties","isFunction","set","validate","Error","JSON","stringify","previous","response","override","after","__properties","is_property","set_from_options","mixin","mixins","initializes","transforms","mixed","mix","initialize","args","apply","init","transform","trans","bind","stack","padding","direction","origin","min_height","min_width","elements","attr","d","next_position","element_dimensions","getBBox","spacing_width","max","width","spacing_height","height","x","y","translate","createScale","scale","time","linear","domain","setDomain","centered","adjacent","addCentered","addPadding","getValue","isSeriesData","values","min_value","min","original","series_count","series_index","range_band","rangeBand","isFinite","original_range","range","rangeBands","dimensions","client","clientDimensions","attrDimensions","isSVG","bbox","bboxDimensions","element","node","client_dimensions","clientWidth","clientHeight","window","getComputedStyle","styles","parseFloat","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","ex","nodeName","rotate","degrees","center","rotation","alignText","line_height","offset","element_style","css_font_size","css_line_height","isNaN","css_adjustment","height_adjustment","first_item","isArray","getMax","series_data","extent","series_max","Infinity","getMin","series_min","style","keyValues","getMargins","margins","default_margins","top","right","bottom","left","di","callback","wrapped","j","undefined","_is_di","bindDi","diFn","bindAllDi","getParentData","_parent_data","parent","parentNode","select","createHelper","Base","base","_layers","_attached","_events","getPoints","getPoint","sort","meta","getClosestPoints","points","position","tolerance","getDistance","Math","sqrt","pow","setDistance","point","distance","closePoints","sortPoints","by_distance","updateActive","active","closest","container","active_keys","closest_keys","trigger","textOptions","default_options","text","defaultMargins","default_margin","margins_by_position","title","axisTitle","extractLayout","prepareComponent","component","row_index","col_index","getId","setPosition","layered_index","extractData","_charts","_components","items","layout","charts","components","found","row","row_components","row_layout","_layered","chart_ids","chart_index","unshift","calculateLayout","demux","overall_layout","skip_layout","getLayout","applyLayout","chart_position","setLayout","part","index","parts","previousPart","layered","findById","StandardLayer","standardLayer","standardSeriesLayer","onEnter","onUpdate","onMerge","onExit","Int8Array","utils","helpers","Transition","delay","duration","ease","setupTransition","XY","on","setScales","normalizeData","xScale","setXScaleRange","getDefaultXScale","yScale","setYScaleRange","getDefaultYScale","xKey","yKey","xValue","seriesIndex","yValue","x0","y0","x_scale","y_scale","Chart","draw","attachment","unlayer","attach","once","off","isProperty","unset","proto_props","static_props","hasOwnProperty","Component","prepareLayout","actual_dimensions","z_index","layer_type","Hover","onMouseEnter","onMouseMove","onMouseLeave","seriesData","mouseEnterPoint","mouseLeavePoint","HoverPoints","update","hoverTolerance","Labels","attachLabels","labels","LabelsClass","append","_labels","proxyLabelMethods","display","LabelsXY","XYInverted","XYValues","adjacentWidth","seriesCount","layeredWidth","itemWidth","Series","seriesKey","seriesValues","seriesClass","itemStyle","seriesLayer","selectAll","enter","exit","remove","Mixed","Gridlines","orientation","ticks","tickValues","drawLine","x1","x2","y1","y2","chartPosition","hide","tick_values","ticks_args","each","onMergeTransition","gridlines","default_legend_margins","Legend","legend_base","classed","swatchDimensions","stackDirection","direction_by_position","combined_data","chart_id","find_chart","exclude_from_legend","chart_data","legend_data","getLegendData","itemKey","itemText","swatchClass","createSwatch","swatches","groups","_itemDetails","swatch","sizes","size","class","legend","default","swatch_dimensions","registerSwatch","types","InsetLegend","translation","relative_to","relative_to_x","relative_to_y","insetLegend","Text","textAlign","anchor","verticalAlign","transformation","middle","Title","rotate_by_position","AxisTitle","Axis","axis","svg","_layout_axis","axis_base","_layout_base","attachGridlines","orient","tickSize","innerTickSize","outerTickSize","tickPadding","tickFormat","_setupAxis","onUpdateTransition","label_overhang","_getLabelOverhang","gridlinesOptions","createGridlines","gridline_options","gridlines_options","_gridlines","array_extensions","overhangs","format","y_value","alignment","labelText","label","__original_y","labelClass","insertLabels","mergeLabels","layoutLabels","transitionLabels","getOptions","label_position","label_options","_prepareLabel","_calculateLayout","_handleCollisions","_setLayout","bg","text_bounds","text_y_adjustment","checkForOverlap","labelA","labelB","getEdges","contained_LR","contained_TB","overlap_LR","overlap_TB","groupLabels","group","updateGroupPositions","addLabelToGroup","originalY","reset","sortY","byY","reverse","overlap","prev","compareSeries","compareLabel","HoverLabels","onMouseEnterPoint","onMouseLeavePoint","findLabelForPoint","hoverLabels","Bars","offset_axis","getOffsetAxis","barHeight","abs","barOffset","barWidth","barX","barY","bar0","barClass","axis_thickness","parseInt","onExitTransition","bars","HorizontalBars","horizontalBars","StackedBars","grouped","x_key","y_key","pos","neg","__previous","stackedBars","HorizontalStackedBars","horizontalStackedBars","Lines","lines","interpolate","createLine","lineKey","line","lineData","Overlay","hidden","-webkit-transform","-ms-transform","styleToString","getAbsolutePosition","show","container_position","responsive","container_dimensions","chart_width","chart_height","width_ratio","height_ratio","default_compose_margins","Compose","tagName","attachHoverListeners","rawData","_width","_height","viewBox","preserveAspectRatio","containerStyle","aspect_ratio","padding-top","baseStyle","chart_options","_attachItems","component_options","config","_prepareConfig","_setDimensions","redraw","createChartLayer","createComponentLayer","createOverlayLayer","_positionChartLayers","_extractLayout","positionLayers","inside","mouse","document","documentElement","bounds","translateToXY","move","leave","coordinates","chart_x","chart_y","getBounds","scroll_y","scrollY","scrollTop","getBoundingClientRect","was_inside","is_inside","detach","_positionComponents","_positionByZIndex","remove_ids","remove_id","changed_position","Item","layer_options","overlay","setZIndex","zIndex","sortZIndex","getLayer","layers","appendChild","compose","VERSION"],"mappings":"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","file":"d3.compose-all.min.js","sourcesContent":[null,"/*!\n * d3.compose - Compose complex, data-driven visualizations from reusable charts and components with d3\n * v0.15.10 - https://github.com/CSNW/d3.compose - license: MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3')) :\n  typeof define === 'function' && define.amd ? define(['d3'], factory) :\n  global.d3c = factory(global.d3);\n}(this, function (d3) { 'use strict';\n\n  d3 = 'default' in d3 ? d3['default'] : d3;\n\n  /**\n    Mixin to create standard layer to make extending charts straightforward.\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n      initialize: function() {\n        this.standardLayer('main', this.base.append('g'))\n        // dataBind, insert, events are defined on prototype\n      },\n\n      onDataBind: function(selection, data) {\n        // ...\n      },\n      onInsert: function(selection) {\n        // ...\n      },\n      onEnter: function(selection) {\n        // ...\n      },\n      onUpdateTransition: function(selection) {\n        // ...\n      },\n      // all d3.chart events are available: onMerge, onExit, ...\n    }));\n    ```\n    @class StandardLayer\n    @namespace mixins\n  */\n  var StandardLayer = {\n    /**\n      extension of `layer()` that uses standard methods on prototype for extensibility.\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n        initialize: function() {\n          this.standardLayer('circles', this.base.append('g'));\n        }\n\n        // onDataBind, onInsert, etc. work with \"circles\" layer\n      }));\n      ```\n      @method standardLayer\n      @param {String} name\n      @param {d3.selection} selection\n    */\n    standardLayer: function standardLayer(name, selection) {\n      return createLayer(this, 'layer', name, selection);\n    },\n\n    /**\n      extension of `seriesLayer()` that uses standard methods on prototype for extensibility.\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n        initialize: function() {\n          this.standardSeriesLayer('circles', this.base.append('g'));\n        },\n\n        // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n      }));\n      ```\n      @method standardSeriesLayer\n      @param {String} name\n      @param {d3.selection} selection\n    */\n    standardSeriesLayer: function standardSeriesLayer(name, selection) {\n      return createLayer(this, 'series', name, selection);\n    },\n\n    /**\n      Called for standard layer's `dataBind`\n\n      @method onDataBind\n      @param {d3.selection} selection\n      @param {Any} data\n      @return {d3.selection}\n    */\n    onDataBind: function onDataBind(/* selection, data */) {},\n\n    /**\n      Called for standard layer's `insert`\n\n      @method onInsert\n      @param {d3.selection} selection\n      @return {d3.selection}\n    */\n    onInsert: function onInsert(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['enter']`\n\n      @method onEnter\n      @param {d3.selection} selection\n    */\n    onEnter: function onEnter(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['enter:transition']`\n\n      @method onEnterTransition\n      @param {d3.selection} selection\n    */\n    // onEnterTransition: function onEnterTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['update']`\n\n      @method onUpdate\n      @param {d3.selection} selection\n    */\n    onUpdate: function onUpdate(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['update']`\n\n      @method onUpdateTransition\n      @param {d3.selection} selection\n    */\n    // onUpdateTransition: function onUpdateTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['merge']`\n\n      @method onMerge\n      @param {d3.selection} selection\n    */\n    onMerge: function onMerge(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['merge:transition']`\n\n      @method onMergeTransition\n      @param {d3.selection} selection\n    */\n    // onMergeTransition: function onMergeTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['exit']`\n\n      @method onExit\n      @param {d3.selection} selection\n    */\n    onExit: function onExit(/* selection */) {}\n\n    /**\n      Call for standard layer's `events['exit:transition']`\n\n      @method onExitTransition\n      @param {d3.selection} selection\n    */\n    // onExitTransition: function onExitTransition(selection) {},\n  };\n\n  function createLayer(chart, type, name, selection) {\n    var layer = {\n      layer: 'layer',\n      series: 'seriesLayer'\n    }[type];\n\n    if (layer && chart[layer]) {\n      var events = {};\n      [\n        'enter',\n        'enter:transition',\n        'update',\n        'update:transition',\n        'merge',\n        'merge:transition',\n        'exit',\n        'exit:transition'\n      ].forEach(function(event) {\n        var method = 'on' + event.split(':').map(function capitalize(str) {\n          return str.charAt(0).toUpperCase() + str.slice(1);\n        }).join('');\n\n        // Only create events if chart method exists as empty transition events can cause unforeseen issues\n        if (chart[method]) {\n          events[event] = function() {\n            this.chart()[method](this);\n          };\n        }\n      });\n\n      return chart[layer](name, selection, {\n        dataBind: function(data) {\n          return this.chart().onDataBind(this, data);\n        },\n        insert: function() {\n          return this.chart().onInsert(this);\n        },\n        events: events\n      });\n    }\n  }\n\n  // Many utils inlined from Underscore.js\n  // (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\n  var slice = Array.prototype.slice;\n  var toString = Object.prototype.toString;\n\n  function _extend(target, extensions, undefined_only) {\n    for (var i = 0, length = extensions.length; i < length; i++) {\n      for (var key in extensions[i]) {\n        if (!undefined_only || target[key] === void 0)\n          target[key] = extensions[i][key];\n      }\n    }\n\n    return target;\n  }\n\n  function contains(arr, item) {\n    return arr.indexOf(item) >= 0;\n  }\n\n  function compact(arr) {\n    return arr.filter(function(item) {\n      return item;\n    });\n  }\n\n  function difference(a, b) {\n    return a.filter(function(value) {\n      return b.indexOf(value) < 0;\n    });\n  }\n\n  function defaults(target) {\n    return _extend(target, slice.call(arguments, 1), true);\n  }\n\n  function extend(target) {\n    return _extend(target, slice.call(arguments, 1));\n  }\n\n  function flatten(arr) {\n    // Assumes all items in arr are arrays and only flattens one level\n    return arr.reduce(function(memo, item) {\n      return memo.concat(item);\n    }, []);\n  }\n\n  function find(arr, fn, context) {\n    if (!arr) return;\n    for (var i = 0, length = arr.length; i < length; i++) {\n      if (fn.call(context, arr[i], i, arr))\n        return arr[i];\n    }\n  }\n\n  function first(arr, n) {\n    if (arr == null) return void 0;\n    if (n == null) return arr[0];\n    return Array.prototype.slice.call(arr, 0, n);\n  }\n\n  function isBoolean(obj) {\n    return obj === true || obj === false;\n  }\n  function isObject(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n  function isNumber(obj) {\n    return toString.call(obj) === '[object Number]';\n  }\n  function isString(obj) {\n    return toString.call(obj) === '[object String]';\n  }\n  function isUndefined(obj) {\n    return obj === void 0;\n  }\n\n  var isFunction = function(obj) {\n    return toString.call(obj) === '[object Function]';\n  };\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  function objectEach(obj, fn, context) {\n    if (!obj) return;\n    var keys = Object.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      fn.call(context, obj[keys[i]], keys[i], obj);\n    }\n  }\n\n  function objectFind(obj, fn, context) {\n    if (!obj) return;\n    var keys = Object.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      if (fn.call(context, obj[keys[i]], keys[i], obj))\n        return obj[keys[i]];\n    }\n  }\n\n  function pluck(objs, key) {\n    if (!objs) return [];\n    return objs.map(function(obj) {\n      return obj[key];\n    });\n  }\n\n  function uniq(arr) {\n    var result = [];\n    for (var i = 0, length = arr.length; i < length; i++) {\n      if (result.indexOf(arr[i]) < 0)\n        result.push(arr[i]);\n    }\n    return result;\n  }\n\n  function inherits(Child, Parent) {\n    Child.prototype = Object.create(Parent.prototype, {\n      constructor: {\n        value: Child,\n        enumerable: false,\n        writeable: true,\n        configurable: true\n      }\n    });\n\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(Child, Parent);\n    }\n    else {\n      Child.__proto__ = Parent; //eslint-disable-line no-proto\n\n      // __proto__ isn't supported in IE,\n      // use one-time copy of static properties to approximate\n      defaults(Child, Parent);\n    }\n  }\n\n  // If value isn't `undefined`, return `value`, otherwise use `default_value`\n  //\n  // @method valueOrDefault\n  // @param {Any} [value]\n  // @param {Any} default_value\n  // @return {Any}\n  function valueOrDefault(value, default_value) {\n    return !isUndefined(value) ? value : default_value;\n  }\n\n  var utils = {\n    slice: slice,\n    toString: toString,\n    contains: contains,\n    compact: compact,\n    difference: difference,\n    defaults: defaults,\n    extend: extend,\n    flatten: flatten,\n    find: find,\n    first: first,\n    isBoolean: isBoolean,\n    isFunction: isFunction,\n    isObject: isObject,\n    isNumber: isNumber,\n    isString: isString,\n    isUndefined: isUndefined,\n    objectEach: objectEach,\n    objectFind: objectFind,\n    pluck: pluck,\n    uniq: uniq,\n    inherits: inherits,\n    valueOrDefault: valueOrDefault\n  };\n\n  var unique_index = 0;\n\n  /**\n    Helper for creating properties for charts/components\n\n    @example\n    ```javascript\n    var Custom = d3.chart('Chart').extend('Custom', {\n      // Create property that's stored internally as 'simple'\n      simple: property()\n    });\n    var custom; // = new Custom(...);\n\n    // set\n    custom.simple('Howdy');\n\n    // get\n    console.log(custom.simple()); // -> 'Howdy'\n\n    // Advanced\n    // --------\n    // Default values:\n    Custom.prototype.message = property({\n      default_value: 'Howdy!'\n    });\n\n    console.log(custom.message()); // -> 'Howdy!'\n    custom.message('Goodbye');\n    console.log(custom.message()); // -> 'Goodbye'\n\n    // Set to undefined to reset to default value\n    custom.message(undefined);\n    console.log(custom.message()); // -> 'Howdy!'\n\n    // Computed default value:\n    Custom.property.computed = property({\n      default_value: function() {\n        // \"this\" = Custom instance\n        return this.message();\n      }\n    });\n\n    // Function default value:\n    // For function default_values, wrap in function to differentiate from computed\n    Custom.property.fn = property({\n      default_value: function() {\n        return function defaultFn() {};\n      }\n      // The following would be incorrectly evaluated\n      // default_value: function defaultFn() {}\n    })\n\n    // Custom getter:\n    Custom.prototype.exclaimed = property({\n      get: function(value) {\n        // Value is the underlying set value\n        return value + '!';\n      }\n    });\n\n    custom.exclaimed('Howdy');\n    console.log(custom.exclaimed()); // -> 'Howdy!'\n\n    // Custom setter:\n    Custom.prototype.feeling = property({\n      set: function(value, previous) {\n        if (value == 'Hate') {\n          // To override value, return Object with override specified\n          return {\n            override: 'Love',\n\n            // To do something after override, use after callback\n            after: function() {\n              console.log('After: ' + this.feeling()); // -> 'After: Love'\n            }\n          };\n        }\n      }\n\n      custom.feeling('Hate'); // -> 'After: Love'\n      console.log(custom.feeling()); // -> 'Love'\n    });\n    ```\n    @method property\n    @for helpers\n    @param {Object} [options]\n    @param {Any} [options.default_value] default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.\n    @param {Function} [options.get] `function(value) {return ...}` getter, where `value` is the stored value and return desired value\n    @param {Function} [options.set] `function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set\n    @param {Object} [options.context=this] context to evaluate get/set/after functions\n    @return {Function} `()`: get, `(value)`: set\n  */\n  function property(options) {\n    // DEPRECATED: name as first argument\n    if (arguments.length == 2) {\n      if (typeof console != 'undefined' && console.warn)\n        console.warn('DEPRECATED - name argument for property is no longer supported will be removed in the next version of d3.compose');\n      options = arguments[1];\n    }\n\n    options = options || {};\n    var id = 'property_' + unique_index++;\n\n    var property = function(value) {//eslint-disable-line no-shadow\n      var properties = this.__properties = this.__properties || {};\n      var context = valueOrDefault(property.context, this);\n\n      if (arguments.length)\n        return set.call(this);\n      else\n        return get.call(this);\n\n      function get() {\n        value = properties[id];\n\n        if (isUndefined(value)) {\n          // Use default value and unwrap if it's a function\n          value = property.default_value;\n          if (isFunction(value))\n            value = value.call(context);\n        }\n\n        return isFunction(options.get) ? options.get.call(context, value) : value;\n      }\n\n      function set() {\n        // Validate\n        if (isFunction(options.validate) && !isUndefined(value) && !options.validate.call(context, value))\n          throw new Error('Invalid value for property: ' + JSON.stringify(value));\n\n        var previous = properties[id];\n        properties[id] = value;\n\n        if (isFunction(options.set) && !isUndefined(value)) {\n          var response = options.set.call(context, value, previous);\n\n          if (response && 'override' in response)\n            properties[id] = response.override;\n          if (response && isFunction(response.after))\n            response.after.call(context, properties[id]);\n        }\n\n        return this;\n      }\n    };\n\n    // For checking if function is a property\n    property.is_property = true;\n    property.id = id;\n    property.set_from_options = valueOrDefault(options.set_from_options, true);\n    property.default_value = options.default_value;\n    property.context = options.context;\n    property.options = options;\n\n    return property;\n  }\n\n  /**\n    Combine mixins with Parent super class for extension\n\n    @example\n    ```js\n    var a = {transform: function() {}, a: 1};\n    var b = {initialize: function() {}, b: 2};\n    var c = {c: 3};\n\n    var Custom = mixin(Chart, a, b, c).extend({\n      initialize: function(options) {\n        this._super.initialize.call(this, options);\n        // d\n      },\n      transform: function(data) {\n        data = this._super.transform.call(this, data);\n        // d\n      }\n    });\n\n    // initialize: Chart, b, d\n    // transform: Chart, a, d\n    ```\n    @method mixin\n    @for helpers\n    @param {Function} Parent\n    @param {...Object} ...mixins\n    @return {Function}\n  */\n  function mixin(Parent/*, ...mixins*/) {\n    var mixins = slice.call(arguments, 1);\n    var initializes = [];\n    var transforms = [];\n    var mixed = {};\n\n    mixins.forEach(function(mix) {\n      objectEach(mix, function(value, key) {\n        if (key == 'initialize')\n          initializes.push(value);\n        else if (key == 'transform')\n          transforms.push(value);\n        else\n          mixed[key] = value;\n      });\n    });\n\n    if (initializes.length) {\n      mixed.initialize = function initialize() {\n        var args = slice.call(arguments);\n        Parent.prototype.initialize.apply(this, args);\n        initializes.forEach(function(init) {\n          init.apply(this, args);\n        }, this);\n      };\n    }\n\n    if (transforms.length) {\n      mixed.transform = function transform(data) {\n        data = Parent.prototype.transform.call(this, data);\n        return transforms.reduce(function(memo, trans) {\n          return trans.call(this, memo);\n        }.bind(this), data);\n      };\n    }\n\n    return Parent.extend(mixed);\n  }\n\n  /**\r\n    Stack given array of elements vertically or horizontally\r\n\r\n    @example\r\n    ```js\r\n    // Stack all text elements vertically, from the top, with 0px padding\r\n    d3.selectAll('text').call(helpers.stack())\r\n\r\n    // Stack all text elements horizontally, from the right, with 5px padding\r\n    d3.selectAll('text').call(helpers.stack({\r\n      direction: 'horizontal',\r\n      origin: 'right',\r\n      padding: 5\r\n    }));\r\n    ```\r\n    @method stack\r\n    @for helpers\r\n    @param {Object} [options]\r\n    @param {String} [options.direction=vertical] `\"vertical\"` or `\"horizontal\"`\r\n    @param {String} [options.origin] `\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)\r\n    @param {Number} [options.padding=0] padding (in px) between elements\r\n    @param {Number} [options.min_height=0] minimum spacing height (for vertical stacking)\r\n    @param {Number} [options.min_width=0]  minimum spacing width (for horizontal stacking)\r\n    @return {Function}\r\n  */\r\n  function stack(options) {\r\n    options = extend({\r\n      direction: 'vertical',\r\n      origin: 'top',\r\n      padding: 0,\r\n      min_height: 0,\r\n      min_width: 0\r\n    }, options);\r\n\r\n    // Ensure valid origin based on direction\r\n    if (options.direction == 'horizontal' && !(options.origin == 'left' || options.origin == 'right'))\r\n      options.origin = 'left';\r\n    else if (options.direction == 'vertical' && !(options.origin == 'top' || options.origin == 'bottom'))\r\n      options.origin = 'top';\r\n\r\n    function padding(i) {\r\n      return i > 0 && options.padding ? options.padding : 0;\r\n    }\r\n\r\n    return function(elements) {\r\n      if (elements && elements.attr) {\r\n        var previous = 0;\r\n\r\n        elements.attr('transform', function(d, i) {\r\n          var element_dimensions = this.getBBox();\r\n          var spacing_width = d3.max([element_dimensions.width, options.min_width]);\r\n          var spacing_height = d3.max([element_dimensions.height, options.min_height]);\r\n          var x = 0;\r\n          var y = 0;\r\n          var next_position;\r\n\r\n          if (options.direction == 'horizontal') {\r\n            next_position = previous + spacing_width + padding(i);\r\n\r\n            if (options.origin == 'left')\r\n              x = previous + padding(i);\r\n            else\r\n              x = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n          else {\r\n            next_position = previous + spacing_height + padding(i);\r\n\r\n            if (options.origin == 'top')\r\n              y = previous + padding(i);\r\n            else\r\n              y = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n\r\n          return translate(x, y);\r\n        });\r\n      }\r\n    };\r\n  }\n\n  /**\n    Create scale from options\n\n    @example\n    ```javascript\n    // Simple type, range, and domain\n    var scale = createScale({\n      type: 'linear',\n      domain: [0, 100],\n      range: [0, 500]\n    });\n\n    // Calculate domain for data\n    var scale = createScale({\n      type: 'log',\n      data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\n      key: 'y'\n    });\n\n    // Scale is passed through\n    var original = d3.scale.linear();\n    var scale = createScale(original);\n    scale === original;\n\n    // Set other properties by passing in \"arguments\" array\n    var scale = createScale({\n      type: 'ordinal',\n      domain: ['a', 'b', 'c', 'd', 'e'],\n      rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\n    });\n\n    // Use ordinal + adjacent for bar charts\n    var scale = createScale({\n      type: 'ordinal',\n      adjacent: true,\n      domain: ['a', 'b', 'c'],\n      series: 2 // Series count is required for adjacent if data isn't given\n    })\n    ```\n    @method createScale\n    @for helpers\n    @param {Object|Function} options (passing in `Function` returns original function with no changes)\n    @param {String} [options.type='linear'] Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`\n    @param {Array} [options.domain] Domain for scale\n    @param {Array} [options.range] Range for scale\n    @param {Any} [options.data] Used to dynamically set domain (with given value or key)\n    @param {Function} [options.value] \"di\"-function for getting value for data\n    @param {String} [options.key] Data key to extract value\n    @param {Boolean} [options.centered] For \"ordinal\" scales, use centered x-values\n    @param {Boolean} [options.adjacent] For \"ordinal\" + centered, set x-values for different series next to each other\n\n    - Requires series-index as second argument to scale, otherwise centered x-value is used\n    - Requires \"data\" or \"series\" options to determine number of series\n    @param {Number} [options.series] Used with \"adjacent\" if no \"data\" is given to set series count\n    @param {Number} [options.padding=0.1] For \"ordinal\" scales, set padding between different x-values\n    @param {Array...} [options....] Set any other scale properties with array of arguments to pass to property\n    @return {d3.Scale}\n  */\n  function createScale(options) {\n    options = options || {};\n\n    // If function, scale was passed in as options\n    if (isFunction(options))\n      return options;\n\n    // Create scale (using d3.time.scale() if type is 'time')\n    var scale;\n    if (options.type == 'time')\n      scale = d3.time.scale();\n    else if (d3.scale[options.type])\n      scale = d3.scale[options.type]();\n    else\n      scale = d3.scale.linear();\n\n    objectEach(options, function(value, key) {\n      if (scale[key]) {\n        // If option is standard property (domain or range), pass in directly\n        // otherwise, pass in as arguments\n        // (don't pass through internal options)\n        if (key == 'range' || key == 'domain')\n          scale[key](value);\n        else if (!contains(['type', 'data', 'value', 'key', 'centered', 'adjacent', 'series', 'padding'], key))\n          scale[key].apply(scale, value);\n      }\n    });\n\n    if (!options.domain && options.data && (options.key || options.value))\n      scale = setDomain(scale, options);\n\n    // Add centered and adjacent extensions to ordinal\n    // (centered by default for ordinal)\n    var centered = options.centered || (options.type == 'ordinal' && options.centered == null);\n    if (options.type == 'ordinal' && (centered || options.adjacent))\n      scale = addCentered(scale, options);\n\n    // Add padding extension to ordinal\n    if (options.type == 'ordinal' && (options.padding != null || centered || options.adjacent))\n      scale = addPadding(scale, options);\n\n    return scale;\n  }\n\n  function setDomain(scale, options) {\n    // Use value \"di\" or create for key\n    var getValue = options.value || function(d) {\n      return d[options.key];\n    };\n\n    // Enforce series data\n    var data = options.data;\n    if (!isSeriesData(data))\n      data = [{values: data}];\n\n    var domain;\n    if (options.type == 'ordinal') {\n      // Domain for ordinal is array of unique values\n      domain = uniq(flatten(data.map(function(series) {\n        if (series && series.values)\n          return series.values.map(getValue);\n      })));\n    }\n    else {\n      var min_value = min(data, getValue);\n\n      domain = [\n        min_value < 0 ? min_value : 0,\n        max(data, getValue)\n      ];\n    }\n\n    scale.domain(domain);\n    return scale;\n  }\n\n  function addCentered(original, options) {\n    // Get series count for adjacent\n    var series_count = options.series || (!isSeriesData(options.data) ? 1 : options.data.length);\n\n    // TODO Look into removing closure\n    var scale = (function(original, options, series_count) {//eslint-disable-line no-shadow\n      var context = function(value, series_index) {\n        var width = context.width();\n\n        if (!options.adjacent)\n          series_index = 0;\n\n        return original(value) + (0.5 * width) + (width * (series_index || 0));\n      };\n      extend(context, original, {\n        width: function() {\n          var range_band = context.rangeBand && context.rangeBand();\n          var width = isFinite(range_band) ? range_band : 0;\n\n          if (options.adjacent)\n            width = width / series_count;\n\n          return width;\n        }\n      });\n\n      // TODO test copy() behavior\n\n      return context;\n    })(original, options, series_count);\n\n    return scale;\n  }\n\n  function addPadding(scale, options) {\n    var padding = options.padding != null ? options.padding : 0.1;\n\n    var original_range = scale.range;\n    scale.range = function(range) {\n      if (!arguments.length) return original_range();\n\n      scale.rangeBands(\n        range,\n        padding,\n        padding / 2\n      );\n    };\n\n    if (options.range)\n      scale.range(options.range);\n\n    // TODO test copy() behavior\n    return scale;\n  }\n\n  /**\n    Helper for robustly determining width/height of given selector.\n    Checks dimensions from css, attributes, and bounding box.\n\n    @method dimensions\n    @for helpers\n    @param {d3.Selection} selection\n    @return {Object} `{width, height}`\n  */\n  function dimensions(selection) {\n    // 1. Get width/height set via css (only valid for svg and some other elements)\n    var client = clientDimensions(selection);\n\n    if (client.width && client.height)\n      return client;\n\n    // 2. Get width/height set via attribute\n    var attr = attrDimensions(selection);\n\n    if (isSVG(selection)) {\n      return {\n        width: client.width != null ? client.width : attr.width || 0,\n        height: client.height != null ? client.height : attr.height || 0\n      };\n    }\n    else {\n      var bbox = bboxDimensions(selection);\n\n      // Size set by css -> client (only valid for svg and some other elements)\n      // Size set by svg -> attr override or bounding_box\n      // -> Take maximum\n      return {\n        width: d3.max([client.width, attr.width || bbox.width]) || 0,\n        height: d3.max([client.height, attr.height || bbox.height]) || 0\n      };\n    }\n  }\n\n  function clientDimensions(selection) {\n    var element = selection.node();\n\n    var client_dimensions = {\n      width: element && element.clientWidth,\n      height: element && element.clientHeight\n    };\n\n    // Issue: Firefox does not correctly calculate clientWidth/clientHeight for svg\n    //        calculate from css\n    //        http://stackoverflow.com/questions/13122790/how-to-get-svg-element-dimensions-in-firefox\n    //        Note: This makes assumptions about the box model in use and that width/height are not percent values\n    if (isSVG(selection) && (!element.clientWidth || !element.clientHeight) && typeof window !== 'undefined' && window.getComputedStyle) {\n      var styles = window.getComputedStyle(element);\n      client_dimensions.height = parseFloat(styles.height) - parseFloat(styles.borderTopWidth) - parseFloat(styles.borderBottomWidth);\n      client_dimensions.width = parseFloat(styles.width) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\n    }\n\n    return client_dimensions;\n  }\n\n  function attrDimensions(selection) {\n    return {\n      width: selection && selection.attr && parseFloat(selection.attr('width')),\n      height: selection && selection.attr && parseFloat(selection.attr('height'))\n    };\n  }\n\n  function bboxDimensions(selection) {\n    var element = selection.node();\n    var bbox;\n    try {\n      bbox = element && typeof element.getBBox == 'function' && element.getBBox();\n    }\n    catch(ex) {\n      // Firefox throws error when calling getBBox when svg hasn't been displayed\n      // Ignore error and set to empty\n      bbox = {width: 0, height: 0};\n    }\n\n    return bbox;\n  }\n\n  function isSVG(selection) {\n    return selection.node().nodeName == 'svg';\n  }\n\n  /**\n    Translate by (x, y) distance\n\n    @example\n    ```javascript\n    translate(10, 15) == 'translate(10, 15)'\n    translate({x: 10, y: 15}) == 'translate(10, 15)'\n    ```\n    @method translate\n    @param {Number|Object} [x] value or `{x, y}`\n    @param {Number} [y]\n    @return {String}\n  */\n  function translate(x, y) {\n    if (isObject(x)) {\n      y = x.y;\n      x = x.x;\n    }\n\n    return 'translate(' + (x || 0) + ', ' + (y || 0) + ')';\n  }\n\n  /**\n    Rotate by degrees, with optional center\n\n    @method rotate\n    @param {Number} degrees\n    @param {Object} [center = {x: 0, y: 0}]\n    @return {String}\n  */\n  function rotate(degrees, center) {\n    var rotation = 'rotate(' + (degrees || 0);\n    if (center)\n      rotation += ' ' + (center.x || 0) + ',' + (center.y || 0);\n    rotation += ')';\n\n    return rotation;\n  }\n\n  /**\n    Find vertical offset to vertically align text\n    (needed due to lack of `alignment-baseline` support in Firefox)\n\n    @example\n    ```js\n    var label = d3.select('text');\n\n    // Place label vertically so that origin is top-left\n    var offset = alignText(label);\n    label.attr('transform', translate(0, offset));\n\n    // Center label for line-height of 20px\n    var offset = alignText(label, 20);\n    label.attr('transform', translate(0, offset));\n    ```\n    @method alignText\n    @param {element} element\n    @param {Number} [line_height]\n    @return {Number} offset\n  */\n  function alignText(element, line_height) {\n    var offset = 0;\n    try {\n      var height = element.getBBox().height;\n\n      var element_style = window.getComputedStyle(element);\n      var css_font_size = parseFloat(element_style['font-size']);\n      var css_line_height = parseFloat(element_style['line-height']);\n\n      // If line-height: normal, use estimate 1.14em\n      // (actual line-height depends on browser and font)\n      if (isNaN(css_line_height))\n        css_line_height = 1.15 * css_font_size;\n\n      var css_adjustment = -(css_line_height - css_font_size) / 2;\n\n      // Add additional line-height, if specified\n      var height_adjustment = 0;\n      if (line_height && line_height > 0)\n        height_adjustment = (line_height - height) / 2;\n\n      offset = height + (css_adjustment || 0) + (height_adjustment || 0);\n    }\n    catch (ex) {\n      // Errors can occur from getBBox and getComputedStyle\n      // No useful information for offset, do nothing\n    }\n\n    return offset;\n  }\n\n  /**\n    Determine if given data is likely series data\n\n    @method isSeriesData\n    @param {Array} data\n    @return {Boolean}\n  */\n  function isSeriesData(data) {\n    var first_item = first(data);\n    return first_item && isObject(first_item) && Array.isArray(first_item.values);\n  }\n\n  /**\n    Get max for array/series by value di\n\n    @example\n    ```js\n    var data = [\n      {values: [{y: 1}, {y: 2}, {y: 3}]},\n      {values: [{y: 4}, {y: 2}, {y: 0}]}\n    ];\n    max(data, function(d, i) { return d.y; }); // -> 4\n    ```\n    @method max\n    @param {Array} data\n    @param {Function} getValue di function that returns value for given (d, i)\n    @return {Number}\n  */\n  function max(data, getValue) {\n    var getMax = function(series_data) {\n      return series_data && d3.extent(series_data, getValue)[1];\n    };\n\n    if (isSeriesData(data)) {\n      return data.reduce(function(memo, series) {\n        if (series && Array.isArray(series.values)) {\n          var series_max = getMax(series.values);\n          return series_max > memo ? series_max : memo;\n        }\n        else {\n          return memo;\n        }\n      }, -Infinity);\n    }\n    else {\n      return getMax(data);\n    }\n  }\n\n  /**\n    Get min for array/series by value di\n\n    @example\n    ```js\n    var data = [\n      {values: [{x: 1}, {x: 2}, {x: 3}]},\n      {values: [{x: 4}, {x: 2}, {x: 0}]}\n    ];\n    min(data, function(d, i) { return d.x; }); // -> 0\n    ```\n    @method min\n    @param {Array} data\n    @param {Function} getValue di function that returns value for given (d, i)\n    @return {Number}\n  */\n  function min(data, getValue) {\n    var getMin = function(series_data) {\n      return series_data && d3.extent(series_data, getValue)[0];\n    };\n\n    if (isSeriesData(data)) {\n      return data.reduce(function(memo, series) {\n        if (series && Array.isArray(series.values)) {\n          var series_min = getMin(series.values);\n          return series_min < memo ? series_min : memo;\n        }\n        else {\n          return memo;\n        }\n      }, Infinity);\n    }\n    else {\n      return getMin(data);\n    }\n  }\n\n  // TODO Look into converting to d3's internal style handling\n  // Convert key,values to style string\n  //\n  // @example\n  // ```js\n  // style({color: 'red', display: 'block'}) -> color: red; display: block;\n  // ```\n  // @method style\n  // @param {Object} styles\n  // @return {String}\n  function style(styles) {\n    if (!styles)\n      return '';\n\n    var keyValues = [];\n    objectEach(styles, function(value, key) {\n      keyValues.push(key + ': ' + value);\n    });\n    styles = keyValues.join('; ');\n\n    return styles ? styles + ';' : '';\n  }\n\n  /**\n    Get formatted margins for varying input\n\n    @method getMargins\n    @example\n    ```js\n    getMargins(4);\n    // -> {top: 4, right: 4, bottom: 4, left: 4}\n\n    getMargins({top: 20}, {top: 8, bottom: 8});\n    // -> {top: 20, right: 0, bottom: 8, left: 0}\n    ```\n    @param {Number|Object} margins\n    @param {Object} default_margins\n    @return {Object}\n  */\n  function getMargins(margins, default_margins) {\n    if (isNumber(margins))\n      return {top: margins, right: margins, bottom: margins, left: margins};\n    else\n      return defaults({}, margins, default_margins, {top: 0, right: 0, bottom: 0, left: 0});\n  }\n\n  /**\n    Create wrapped `(d, i)` function that adds chart instance as first argument.\n    Wrapped function uses standard d3 arguments and context.\n\n    Note: in order to pass proper context to di-functions called within di-function\n    use `.call(this, d, i)` (where \"this\" is d3 context)\n\n    @example\n    ```javascript\n    d3.chart('Base').extend('Custom', {\n      initialize: function() {\n        this.base.select('point')\n          .attr('cx', this.x);\n        // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\n      },\n\n      x: di(function(chart, d, i) {\n        // \"this\" is standard d3 context: node\n        return chart.xScale()(chart.xValue.call(this, d, i));\n      })\n\n      // xScale, xValue...\n    });\n    ```\n    @method di\n    @param {Function} callback with `(chart, d, i)` arguments\n    @return {Function}\n  */\n  function di(callback) {\n    // Create intermediate wrapping in case it's called without binding\n    var wrapped = function wrapped(d, i, j) {\n      return callback.call(this, undefined, d, i, j);\n    };\n    wrapped._is_di = true;\n    wrapped.original = callback;\n\n    return wrapped;\n  }\n\n  function bindDi(diFn, chart) {\n    return function wrapped(d, i, j) {\n      return (diFn.original || diFn).call(this, chart, d, i, j);\n    };\n  }\n\n  // Bind all di-functions found in chart\n  function bindAllDi(chart) {\n    for (var key in chart) {\n      if (chart[key] && chart[key]._is_di)\n        chart[key] = bindDi(chart[key], chart);\n    }\n  }\n\n\n  /**\n    Get parent data for element (used to get parent series for data point)\n\n    @example\n    ```js\n    var data = [{\n      name: 'Input',\n      values: [1, 2, 3]\n    }];\n\n    d3.selectAll('g')\n      .data(data)\n      .enter().append('g')\n        .selectAll('text')\n          .data(function(d) { return d.values; })\n          .enter().append('text')\n            .text(function(d) {\n              var series_data = getParentData(this);\n              return series_data.name + ': ' + d;\n            });\n\n    // Input: 1, Input: 2, Input: 3\n    ```\n    @method getParentData\n    @param {Element} element\n    @return {Any}\n  */\n  function getParentData(element) {\n    // @internal Shortcut if element + parentData needs to be mocked\n    if (element._parent_data)\n      return element._parent_data;\n\n    var parent = element && element.parentNode;\n    if (parent) {\n      var data = d3.select(parent).data();\n      return data && data[0];\n    }\n  }\n\n  function createHelper(type) {\n    return function(id, options) {\n      if (!options) {\n        options = id;\n        id = undefined;\n      }\n\n      return extend({id: id, type: type}, options);\n    };\n  }\n\n  var helpers = {\n    property: property,\n    dimensions: dimensions,\n    translate: translate,\n    rotate: rotate,\n    alignText: alignText,\n    isSeriesData: isSeriesData,\n    max: max,\n    min: min,\n    createScale: createScale,\n    style: style,\n    getMargins: getMargins,\n    stack: stack,\n    di: di,\n    bindDi: bindDi,\n    bindAllDi: bindAllDi,\n    getParentData: getParentData,\n    mixin: mixin,\n    createHelper: createHelper\n  };\n\n  /**\n    Mixin for handling common transition behaviors\n\n    @class Transition\n    @namespace mixins\n  */\n  var Transition = {\n    /**\n      Delay start of transition by specified milliseconds.\n\n      @property delay\n      @type Number|Function\n      @default (use container value, if available)\n    */\n    delay: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.delay();\n      }\n    }),\n\n    /**\n      Transition duration in milliseconds.\n\n      @property duration\n      @type Number|Function\n      @default (use container value, if available)\n    */\n    duration: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.duration();\n      }\n    }),\n\n    /**\n      Transition ease function\n\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n      - Note: arguments to pass to `d3.ease` are not supported\n\n      @property ease\n      @type String|Function\n      @default (use container value, if available)\n    */\n    ease: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.ease();\n      }\n    }),\n\n    /**\n      Setup delay, duration, and ease for transition\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n        initialize: function() {\n          this.layer('circles', this.base, {\n            // ...\n            events: {\n              'merge:transition': function() {\n                // Set delay, duration, and ease from properties\n                this.chart().setupTransition(this);\n              }\n            }\n          });\n        }\n      }));\n      ```\n      @method setupTransition\n      @param {d3.selection} selection\n    */\n    setupTransition: function setupTransition(selection) {\n      var delay = this.delay();\n      var duration = this.duration();\n      var ease = this.ease();\n\n      if (!isUndefined(delay))\n        selection.delay(delay);\n      if (!isUndefined(duration))\n        selection.duration(duration);\n      if (!isUndefined(ease))\n        selection.ease(ease);\n    }\n  };\n\n  /**\n    Mixin for handling XY data\n\n    @class XY\n    @namespace mixins\n  */\n  var XY = {\n    initialize: function() {\n      // Set scale ranges once chart is ready to be rendered\n      this.on('before:draw', this.setScales.bind(this));\n    },\n\n    transform: function(data) {\n      data = data || [];\n\n      // Transform series data from values to x,y\n      if (isSeriesData(data)) {\n        data = data.map(function(series) {\n          return extend({}, series, {\n            values: series.values.map(normalizeData)\n          });\n        });\n      }\n      else if (Array.isArray(data)) {\n        data = data.map(normalizeData);\n      }\n\n      return data;\n\n      function normalizeData(point, index) {\n        if (!isObject(point))\n          point = {x: index, y: point};\n        else if (!Array.isArray(point) && isUndefined(point.x))\n          point.x = index;\n\n        return point;\n      }\n    },\n\n    /**\n      Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)\n\n      @property xScale\n      @type Object|d3.scale\n    */\n    xScale: property({\n      set: function(value) {\n        var scale = createScale(value);\n        this.setXScaleRange(scale);\n\n        return {\n          override: scale\n        };\n      },\n      get: function(scale) {\n        if (!scale) {\n          scale = this.getDefaultXScale();\n          this.setXScaleRange(scale);\n        }\n\n        return scale;\n      }\n    }),\n\n    /**\n      Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)\n\n      @property xScale\n      @type Object|d3.scale\n    */\n    yScale: property({\n      set: function(value) {\n        var scale = createScale(value);\n        this.setYScaleRange(scale);\n\n        return {\n          override: scale\n        };\n      },\n      get: function(scale) {\n        if (!scale) {\n          scale = this.getDefaultYScale();\n          this.setYScaleRange(scale);\n        }\n\n        return scale;\n      }\n    }),\n\n    /**\n      Key on data object for x-value\n\n      @property xKey\n      @type String\n      @default 'x'\n    */\n    xKey: property({\n      default_value: 'x'\n    }),\n\n    /**\n      Key on data object for y-value\n\n      @property yKey\n      @type String\n      @default 'y'\n    */\n    yKey: property({\n      default_value: 'y'\n    }),\n\n    /**\n      Get scaled x-value for given data-point\n\n      @method x\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    x: di(function(chart, d, i) {\n      var value = chart.xValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.xScale()(value, series_index));\n    }),\n\n    /**\n      Get scaled y-value for given data-point\n\n      @method y\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    y: di(function(chart, d, i) {\n      var value = chart.yValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.yScale()(value, series_index));\n    }),\n\n    /**\n      Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.\n\n      @method key\n      @param {Any} d\n      @param {Number} i\n      @return {Any}\n    */\n    key: di(function(chart, d, i) {\n      return valueOrDefault(d.key, chart.xValue.call(this, d, i));\n    }),\n\n    /**\n      Get scaled `x = 0` value\n\n      @method x0\n      @return {Number}\n    */\n    x0: function() {\n      return parseFloat(this.xScale()(0));\n    },\n\n    /**\n      Get scaled `y = 0` value\n\n      @method x0\n      @return {Number}\n    */\n    y0: function() {\n      return parseFloat(this.yScale()(0));\n    },\n\n    /**\n      Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.\n\n      @example\n      ```js\n      xValue({x: 10, y: 20}); // -> 10\n      xValue([10, 20]); // -> 10\n      ```\n      @method xValue\n      @param {Any} d\n      @return {Any}\n    */\n    xValue: di(function(chart, d) {\n      var key = chart.xKey();\n      if (d)\n        return key in d ? d[key] : d[0];\n    }),\n\n    /**\n      Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.\n\n      @example\n      ```js\n      yValue({x: 10, y: 20}); // -> 20\n      yValue([10, 20]); // -> 20\n      ```\n      @method yValue\n      @param {Any} d\n      @return {Any}\n    */\n    yValue: di(function(chart, d) {\n      var key = chart.yKey();\n      if (d)\n        return key in d ? d[key] : d[1];\n    }),\n\n    /**\n      Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)\n\n      @method setScales\n    */\n    setScales: function() {\n      this.setXScaleRange(this.xScale());\n      this.setYScaleRange(this.yScale());\n    },\n\n    /**\n      Set range (0, width) for given x-scale\n\n      @method setXScaleRange\n      @param {d3.scale} x_scale\n    */\n    setXScaleRange: function(x_scale) {\n      x_scale.range([0, this.width()]);\n    },\n\n    /**\n      Set range(height, 0) for given y-scale\n\n      @method setYScaleRange\n      @param {d3.scale} y_scale\n    */\n    setYScaleRange: function(y_scale) {\n      y_scale.range([this.height(), 0]);\n    },\n\n    /**\n      Get default x-scale: `{data: this.data(), key: 'x'}`\n\n      @method getDefaultXScale\n      @return {d3.scale}\n    */\n    getDefaultXScale: function() {\n      return createScale({\n        data: this.data(),\n        key: 'x'\n      });\n    },\n\n    /**\n      Get default y-scale: `{data: this.data(), key: 'y'}`\n\n      @method getDefaultYScale\n      @return {d3.scale}\n    */\n    getDefaultYScale: function() {\n      return createScale({\n        data: this.data(),\n        key: 'y'\n      });\n    }\n  };\n\n  var Chart = d3.chart();\r\n\r\n  // TEMP Clear namespace from mixins\r\n  /**\r\n    @namespace\r\n  */\r\n\r\n  /**\r\n    Shared functionality between all charts and components.\r\n\r\n    - Set properties automatically from `options`,\r\n    - Store fully transformed data\r\n    - Adds `\"before:draw\"` and `\"draw\"` events\r\n    - Standard `width` and `height` calculations\r\n\r\n    @class Base\r\n  */\r\n  function Base(selection, options) {\r\n    // d3.chart() constructor without transform and initialize cascade\r\n    this.base = selection;\r\n    this._layers = {};\r\n    this._attached = {};\r\n    this._events = {};\r\n\r\n    // Bind all di-functions to this chart\r\n    bindAllDi(this);\r\n\r\n    // Set options (and properties with set_from_options)\r\n    if (options)\r\n      this.options(options);\r\n\r\n    // Initialize Chart (relies on explicitly calling super in initialize)\r\n    this.initialize(options);\r\n  }\r\n\r\n  inherits(Base, Chart);\r\n\r\n  extend(Base.prototype, {\r\n    initialize: function() {},\r\n    transform: function(data) {\r\n      return data;\r\n    },\r\n    demux: function(name, data) { return data; },\r\n\r\n    // Add events to draw: \"before:draw\" and \"draw\"\r\n    draw: function(data) {\r\n      // Transform data (relies on explicitly calling super in transform)\r\n      data = this.transform(data);\r\n\r\n      // Store fully-transformed data for reference\r\n      this.data(data);\r\n\r\n      this.trigger('before:draw', data);\r\n\r\n      objectEach(this._layers, function(layer) {\r\n        layer.draw(data);\r\n      });\r\n      objectEach(this._attached, function(attachment, name) {\r\n        attachment.draw(this.demux(name, data));\r\n      }, this);\r\n\r\n      this.trigger('draw', data);\r\n    },\r\n\r\n    // Explicitly load d3.chart prototype\r\n    layer: Chart.prototype.layer,\r\n    unlayer: Chart.prototype.unlayer,\r\n    attach: Chart.prototype.attach,\r\n    on: Chart.prototype.on,\r\n    once: Chart.prototype.once,\r\n    off: Chart.prototype.off,\r\n    trigger: Chart.prototype.trigger,\r\n\r\n    /**\r\n      Store fully-transformed data for direct access from the chart\r\n\r\n      @property data\r\n      @type Any\r\n    */\r\n    data: property(),\r\n\r\n    /**\r\n      Overall options for chart/component, automatically setting any matching properties.\r\n\r\n      @example\r\n      ```js\r\n      var property = d3.compose.helpers.property;\r\n\r\n      d3.chart('Base').extend('HasProperties', {\r\n        a: property(),\r\n        b: property({\r\n          set: function(value) {\r\n            return {\r\n              override: value + '!'\r\n            };\r\n          }\r\n        })\r\n      });\r\n\r\n      var instance = d3.select('#chart')\r\n        .chart('HasProperties', {\r\n          a: 123,\r\n          b: 'Howdy',\r\n          c: true\r\n        });\r\n\r\n      // Equivalent to:\r\n      // d3.select(...)\r\n      //   .chart('HasProperties')\r\n      //   .options({...});\r\n\r\n      console.log(instance.a()); // -> 123\r\n      console.log(instance.b()); // -> Howdy!\r\n      console.log(instance.options().c); // -> true\r\n      ```\r\n      @property options\r\n      @type Object\r\n    */\r\n    options: property({\r\n      default_value: {},\r\n      set: function(options, previous) {\r\n        // Clear all unset options, except for data and options\r\n        if (previous) {\r\n          var unset = difference(Object.keys(previous), Object.keys(options));\r\n          unset.forEach(function(key) {\r\n            if (key != 'data' && key != 'options' && isProperty(this, key))\r\n              this[key](undefined);\r\n          }, this);\r\n        }\r\n\r\n        objectEach(options, function setFromOptions(value, key) {\r\n          if (isProperty(this, key))\r\n            this[key](value);\r\n        }, this);\r\n\r\n        function isProperty(chart, key) {\r\n          return chart[key] && chart[key].is_property && chart[key].set_from_options;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get width of `this.base`.\r\n      (Does not include `set` for setting width of `this.base`)\r\n\r\n      @method width\r\n      @return {Number}\r\n    */\r\n    width: function width() {\r\n      return dimensions(this.base).width;\r\n    },\r\n\r\n    /**\r\n      Get height of `this.base`.\r\n      (Does not include `set` for setting height of `this.base`)\r\n\r\n      @method height\r\n      @return {Number}\r\n    */\r\n    height: function height() {\r\n      return dimensions(this.base).height;\r\n    }\r\n  });\r\n\r\n  Base.extend = function(proto_props, static_props) {\r\n    // name may be first parameter for d3.chart usage\r\n    var name;\r\n    if (isString(proto_props)) {\r\n      name = proto_props;\r\n      proto_props = static_props;\r\n      static_props = arguments[2];\r\n    }\r\n\r\n    var Parent = this;\r\n    var Child;\r\n\r\n    if (proto_props && proto_props.hasOwnProperty('constructor')) {\r\n      Child = proto_props.constructor;\r\n\r\n      // inherits sets constructor, remove from proto_props\r\n      proto_props = extend({}, proto_props);\r\n      delete proto_props.constructor;\r\n    }\r\n    else {\r\n      Child = function() { return Parent.apply(this, arguments); };\r\n    }\r\n\r\n    inherits(Child, Parent);\r\n    if (static_props)\r\n      extend(Child, static_props);\r\n    if (proto_props)\r\n      extend(Child.prototype, proto_props);\r\n\r\n    // If name is given, register with d3.chart\r\n    if (name)\r\n      Chart[name] = Child;\r\n\r\n    return Child;\r\n  };\n\n  /**\r\n    Common base for creating components that includes helpers for positioning and layout.\r\n\r\n    ### Extending\r\n\r\n    `d3.chart('Component')` contains intelligent defaults and there are no required overrides.\r\n    Create a component just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\r\n    - To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('Key', {\r\n      initialize: function() {\r\n        this.layer('Key', this.base, {\r\n          dataBind: function(data) {\r\n            return this.selectAll('text')\r\n              .data(data);\r\n          },\r\n          insert: function() {\r\n            return this.append('text');\r\n          },\r\n          events: {\r\n            merge: function() {\r\n              this.text(this.chart().keyText)\r\n            }\r\n          }\r\n        })\r\n      },\r\n\r\n      keyText: helpers.di(function(chart, d, i) {\r\n        return d.abbr + ' = ' + d.value;\r\n      })\r\n    });\r\n    ```\r\n    @class Component\r\n    @extends Base\r\n  */\r\n  var Component = Base.extend({\r\n    /**\r\n      Component's position relative to chart\r\n      (top, right, bottom, left)\r\n\r\n      @property position\r\n      @type String\r\n      @default 'top'\r\n    */\r\n    position: property({\r\n      default_value: 'top',\r\n      validate: function(value) {\r\n        return contains(['top', 'right', 'bottom', 'left'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the width of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property width\r\n      @type Number\r\n      @default (actual width)\r\n    */\r\n    width: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).width;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the height of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property height\r\n      @type Number\r\n      @default (actual height)\r\n    */\r\n    height: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).height;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Margins (in pixels) around component\r\n\r\n      @property margins\r\n      @type Object\r\n      @default {top: 0, right: 0, bottom: 0, left: 0}\r\n    */\r\n    margins: property({\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values)\r\n        };\r\n      },\r\n      default_value: getMargins()\r\n    }),\r\n\r\n    /**\r\n      Center the component vertically/horizontally (depending on position)\r\n\r\n      @property centered\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    centered: property({\r\n      default_value: false\r\n    }),\r\n\r\n    /**\r\n      Skip component during layout calculations and positioning\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('NotLaidOut', {\r\n        skip_layout: true\r\n      });\r\n      ```\r\n      @attribute skip_layout\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    skip_layout: false,\r\n\r\n    /**\r\n      Perform any layout preparation required before getLayout (default is draw)\r\n      (override in prototype of extension)\r\n\r\n      Note: By default, components are double-drawn;\r\n      for every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\r\n      This can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        prepareLayout: function(data) {\r\n          // default: this.draw(data);\r\n          // so that getLayout has real dimensions\r\n\r\n          // -> custom preparation (if necessary)\r\n        }\r\n      })\r\n      ```\r\n      @method prepareLayout\r\n      @param {Any} data\r\n    */\r\n    prepareLayout: function(data) {\r\n      this.draw(data);\r\n    },\r\n\r\n    /**\r\n      Get layout details for use when laying out component\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        getLayout: function(data) {\r\n          var calculated_width, calculated_height;\r\n\r\n          // Perform custom calculations...\r\n\r\n          // Must return position, width, and height\r\n          return {\r\n            position: this.position(),\r\n            width: calculated_width,\r\n            height: calculated_height\r\n          };\r\n        }\r\n      });\r\n      ```\r\n      @method getLayout\r\n      @param {Any} data\r\n      @return {Object} position, width, and height for layout\r\n    */\r\n    getLayout: function(data) {\r\n      this.prepareLayout(data);\r\n\r\n      var margins = this.margins();\r\n      return {\r\n        position: this.position(),\r\n        width: this.width() + margins.left + margins.right,\r\n        height: this.height() + margins.top + margins.bottom\r\n      };\r\n    },\r\n\r\n    /**\r\n      Set layout of underlying base\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        setLayout: function(x, y, options) {\r\n          // Set layout of this.base...\r\n          // (the following is the default implementation)\r\n          var margins = this.margins();\r\n\r\n          // (handle this.centered())\r\n\r\n          this.base\r\n            .attr('transform', helpers.translate(x + margins.left, y + margins.top));\r\n          this.height(options && options.height);\r\n          this.width(options && options.width);\r\n        }\r\n      });\r\n      ```\r\n      @method setLayout\r\n      @param {Number} x position of base top-left\r\n      @param {Number} y position of base top-left\r\n      @param {Object} options\r\n        @param {Object} [options.height] height of component in layout\r\n        @param {Object} [options.width] width of component in layout\r\n    */\r\n    setLayout: function(x, y, options) {\r\n      var margins = this.margins();\r\n\r\n      if (this.centered()) {\r\n        var actual_dimensions = dimensions(this.base);\r\n        if ('height' in options)\r\n          y += (options.height - actual_dimensions.height) / 2;\r\n        else\r\n          y += margins.top;\r\n\r\n        if ('width' in options)\r\n          x += (options.width - actual_dimensions.width) / 2;\r\n        else\r\n          x += margins.left;\r\n      }\r\n      else {\r\n        x += margins.left;\r\n        y += margins.top;\r\n      }\r\n\r\n      this.base.attr('transform', translate(x, y));\r\n      this.height(options && options.height);\r\n      this.width(options && options.width);\r\n    }\r\n  }, {\r\n    /**\r\n      Default z-index for component\r\n      (Charts are 100 by default, so Component = 50 is below chart by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('AboveChartLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 150\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 50\r\n    */\r\n    z_index: 50,\r\n\r\n    /**\r\n      Set to `'chart'` to use chart layer for component.\r\n      (e.g. Axis uses chart layer to position with charts, but includes layout for ticks)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('ChartComponent', {\r\n        // ...\r\n      }, {\r\n        layer_type: 'chart'\r\n      });\r\n      ```\r\n      @attribute layer_type\r\n      @static\r\n      @type String\r\n      @default 'component'\r\n    */\r\n    layer_type: 'component'\r\n  });\n\n  /**\n    Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\n    and `getPoint` helper for adding helpful meta information to raw data point.\n\n    @class Hover\n    @namespace mixins\n  */\n  var Hover = {\n    initialize: function() {\n      this.on('attach', function() {\n        this.container.on('mouseenter', this.onMouseEnter.bind(this));\n        this.container.on('mousemove', this.onMouseMove.bind(this));\n        this.container.on('mouseleave', this.onMouseLeave.bind(this));\n      }.bind(this));\n    },\n\n    /**\n      Get point information for given data-point\n\n      @method getPoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n      @return {key, series, d, meta {chart, i, j, x, y}}\n    */\n    getPoint: di(function(chart, d, i, j) {\n      var key = chart.key && chart.key.call(this, d, i, j);\n      var series = chart.seriesData && chart.seriesData.call(this, d, i, j) || {};\n\n      return {\n        key: (series.key || j) + '.' + (key || i),\n        series: series,\n        d: d,\n        meta: {\n          chart: chart,\n          i: i,\n          j: j,\n          x: chart.x && chart.x.call(this, d, i, j),\n          y: chart.y && chart.y.call(this, d, i, j)\n        }\n      };\n    }),\n\n    /**\n      Call to trigger mouseenter:point when mouse enters data-point\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n        initialize: function() {\n          this.layer('bars', this.base, {\n            // dataBind...\n            insert: function() {\n              // Want to trigger enter/leave point\n              // when mouse enter/leaves bar (rect)\n              var chart = this.chart();\n              return this.append('rect')\n                .on('mouseenter', chart.mouseEnterPoint)\n                .on('mouseleave', chart.mouseLeavePoint);\n            }\n            // events...\n          })\n        }\n      }));\n      ```\n      @method mouseEnterPoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n    */\n    mouseEnterPoint: di(function(chart, d, i, j) {\n      chart.container.trigger('mouseenter:point', chart.getPoint.call(this, d, i, j));\n    }),\n\n    /**\n      Call to trigger mouseleave:point when mouse leaves data-point\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n        initialize: function() {\n          this.layer('bars', this.base, {\n            // dataBind...\n            insert: function() {\n              // Want to trigger enter/leave point\n              // when mouse enter/leaves bar (rect)\n              var chart = this.chart();\n              return this.append('rect')\n                .on('mouseenter', chart.mouseEnterPoint)\n                .on('mouseleave', chart.mouseLeavePoint);\n            }\n            // events...\n          })\n        }\n      }));\n      ```\n      @method mouseleavePoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n    */\n    mouseLeavePoint: di(function(chart, d, i, j) {\n      chart.container.trigger('mouseleave:point', chart.getPoint.call(this, d, i, j));\n    }),\n\n    /**\n      (Override) Called when mouse enters container\n\n      @method onMouseEnter\n      @param {Object} position (chart and container {x,y} position of mouse)\n      @param {Object} position.chart {x, y} position relative to chart origin\n      @param {Object} position.container {x, y} position relative to container origin\n    */\n    onMouseEnter: function(/* position */) {},\n\n    /**\n      (Override) Called when mouse moves within container\n\n      @method onMouseMove\n      @param {Object} position (chart and container {x,y} position of mouse)\n      @param {Object} position.chart {x, y} position relative to chart origin\n      @param {Object} position.container {x, y} position relative to container origin\n    */\n    onMouseMove: function(/* position */) {},\n\n    /**\n      (Override) Called when mouse leaves container\n\n      @method onMouseLeave\n    */\n    onMouseLeave: function() {}\n  };\n\n  /**\n    Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.\n\n    @class HoverPoints\n    @namespace mixins\n  */\n  var HoverPoints = {\n    initialize: function() {\n      var points, tolerance, active;\n\n      this.on('draw', function() {\n        // Clear cache on draw\n        points = null;\n      });\n\n      this.on('attach', function() {\n        var update = function update(position) {\n          var closest = [];\n          if (position)\n            closest = getClosestPoints(points, position.chart, tolerance);\n\n          updateActive(active, closest, this.container);\n          active = closest;\n        }.bind(this);\n\n        this.container.on('mouseenter', function(position) {\n          if (!points)\n            points = getPoints(this, this.data());\n\n          tolerance = this.hoverTolerance();\n          update(position);\n        }.bind(this));\n\n        this.container.on('mousemove', update);\n        this.container.on('mouseleave', update);\n      }.bind(this));\n    },\n\n    /**\n      Hover tolerance (in px) for calculating close points\n\n      @property hoverTolerance\n      @type Number\n      @default Infinity\n    */\n    hoverTolerance: property({\n      default_value: Infinity\n    })\n  };\n\n  function getPoints(chart, data) {\n    if (data) {\n      if (!isSeriesData(data))\n        data = [{values: data}];\n\n      return data.map(function(series, j) {\n        return series.values.map(function(d, i) {\n          return chart.getPoint.call({_parent_data: series}, d, i, j);\n        }).sort(function(a, b) {\n          // Sort by x\n          return a.meta.x - b.meta.x;\n        });\n      });\n    }\n  }\n\n  function getClosestPoints(points, position, tolerance) {\n    if (!points)\n      return [];\n\n    return compact(points.map(function(series) {\n      function setDistance(point) {\n        point.distance = getDistance(point.meta, position);\n        return point;\n      }\n      function closePoints(point) {\n        return point.distance < tolerance;\n      }\n      function sortPoints(a, b) {\n        if (a.distance < b.distance)\n          return -1;\n        else if (a.distance > b.distance)\n          return 1;\n        else\n          return 0;\n      }\n\n      var by_distance = series.map(setDistance).filter(closePoints).sort(sortPoints);\n\n      return by_distance[0];\n    }));\n\n    function getDistance(a, b) {\n      return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n    }\n  }\n\n  function updateActive(active, closest, container) {\n    var active_keys = pluck(active, 'key');\n    var closest_keys = pluck(closest, 'key');\n\n    objectEach(closest, function(point) {\n      if (contains(active_keys, point.key))\n        container.trigger('mousemove:point', point);\n      else\n        container.trigger('mouseenter:point', point);\n    });\n    objectEach(active, function(point) {\n      if (!contains(closest_keys, point.key))\n        container.trigger('mouseleave:point', point);\n    });\n  }\n\n  /**\n    Mixin for handling labels in charts\n\n    @class Labels\n    @namespace mixins\n  */\n  var Labels$1 = {\n    /**\n      Call during chart initialization to add labels to chart\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n        initialize: function() {\n          // this.layer()...\n\n          // Attach labels layer\n          this.attachLabels();\n        }\n      }));\n      ```\n      @method attachLabels\n    */\n    attachLabels: function() {\n      var options = this.labels();\n      options.parent = this;\n\n      var LabelsClass = d3.chart(options.type);\n      var base = this.base.append('g').attr('class', 'chart-labels');\n      var labels = this._labels = new LabelsClass(base, options);\n\n      // Proxy x and y to parent chart\n      this.proxyLabelMethods.forEach(function(method) {\n        labels[method] = this[method];\n      }, this);\n\n      this.on('draw', function(data) {\n        options = this.labels();\n        options.parent = this;\n\n        labels.options(options);\n\n        if (options.display !== false)\n          labels.draw(options.data || data);\n        else\n          labels.draw([]);\n      }.bind(this));\n    },\n\n    /**\n      Options passed to labels chart\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n        // ...\n      }));\n\n      // ...\n\n      chart.labels(true); // -> display labels with defaults\n      chart.labels(false); // -> hide labels\n      chart.labels({offset: 10}); // -> pass options to labels chart\n\n      d3.select('#chart')\n        .chart('Compose', function(data) {\n          return {\n            charts: {\n              custom: {labels: {offset: 10}}\n            }\n          };\n        });\n      ```\n      @property labels\n      @type Object\n    */\n    labels: property({\n      get: function(value) {\n        if (isBoolean(value))\n          value = {display: value};\n        else if (!value)\n          value = {display: false};\n\n        return defaults({}, value, {\n          type: 'Labels'\n        });\n      }\n    }),\n\n    // Array of methods to proxy on labels chart\n    proxyLabelMethods: []\n  };\n\n  /**\n    Mixin for handling labels in XY charts\n    (proxies `x` and `y` to properly place labels for XY charts)\n\n    @class LabelsXY\n    @namespace mixins\n    @extends Labels\n  */\n  var LabelsXY = extend({}, Labels$1, {\n    proxyLabelMethods: ['x', 'y']\n  });\n\n  /**\n    Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right\n\n    @class XYInverted\n    @namespace mixins\n  */\n  var XYInverted = {\n    /**\n      Get x-value for plotting (scaled y-value)\n\n      @method x\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    x: di(function(chart, d, i) {\n      var value = chart.yValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.yScale()(value, series_index));\n    }),\n\n    /**\n      Get y-value for plotting (scaled x-value)\n\n      @method y\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    y: di(function(chart, d, i) {\n      var value = chart.xValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.xScale()(value, series_index));\n    }),\n\n    /**\n      Get scaled y = 0 value (along x-axis)\n\n      @method x0\n      @return {Number}\n    */\n    x0: function() {\n      return parseFloat(this.yScale()(0));\n    },\n\n    /**\n      Get scaled x = 0 value (along y-axis)\n\n      @method x0\n      @return {Number}\n    */\n    y0: function() {\n      return parseFloat(this.xScale()(0));\n    },\n\n    /**\n      Set range (height, 0) for given x-scale\n\n      @method setXScaleRange\n      @param {d3.scale} x_scale\n    */\n    setXScaleRange: function(x_scale) {\n      x_scale.range([this.height(), 0]);\n    },\n\n    /**\n      Set range (0, width) for given y-scale\n\n      @method setYScaleRange\n      @param {d3.scale} y_scale\n    */\n    setYScaleRange: function(y_scale) {\n      y_scale.range([0, this.width()]);\n    }\n  };\n\n  /**\n    Mixin for charts of centered key,value data (x: index, y: value, key)\n\n    @class XYValues\n    @namespace mixins\n  */\n  var XYValues = {\n    /**\n      Determine width of data-point when displayed adjacent\n\n      @method adjacentWidth\n      @return {Number}\n    */\n    adjacentWidth: function() {\n      var series_count = this.seriesCount ? this.seriesCount() : 1;\n      return this.layeredWidth() / series_count;\n    },\n\n    /**\n      Determine layered width (width of group for adjacent)\n\n      @method layeredWidth\n      @return {Number}\n    */\n    layeredWidth: function() {\n      var range_band = this.xScale() && this.xScale().rangeBand && this.xScale().rangeBand();\n      var width = isFinite(range_band) ? range_band : 0;\n\n      return width;\n    },\n\n    /**\n      Determine item width based on series display type (adjacent or layered)\n\n      @method itemWidth\n      @return {Number}\n    */\n    itemWidth: function() {\n      var scale = this.xScale();\n      return scale && scale.width ? scale.width() : this.layeredWidth();\n    },\n\n    // Override default x-scale to use ordinal type\n    /**\n      Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`\n\n      @method getDefaultYScale\n      @return {d3.scale}\n    */\n    getDefaultXScale: function() {\n      return createScale({\n        type: 'ordinal',\n        data: this.data(),\n        key: 'x',\n        centered: true\n      });\n    }\n  };\n\n  /**\n    Mixin for handling series data\n\n    @class Series\n    @namespace mixins\n  */\n  var Series = {\n    /**\n      Get key for given series data\n\n      @method seriesKey\n      @param {Any} d Series object with `key`\n      @return {Any}\n    */\n    seriesKey: di(function(chart, d) {\n      return d.key;\n    }),\n\n    /**\n      Get values for given series data\n\n      @method seriesValues\n      @param {Any} d Series object with `values` array\n      @return {Array}\n    */\n    seriesValues: di(function(chart, d, i) {\n      // Store seriesIndex on series\n      d.seriesIndex = i;\n      return d.values;\n    }),\n\n    /**\n      Get class for given series data\n\n      @method seriesClass\n      @param {Any} d\n      @param {Number} i\n      @return {String}\n    */\n    seriesClass: di(function(chart, d, i) {\n      return 'chart-series chart-index-' + i + (d['class'] ? ' ' + d['class'] : '');\n    }),\n\n    /**\n      Get index for given data-point of series\n\n      @method seriesIndex\n      @param {Any} d\n      @param {Number} i\n    */\n    seriesIndex: di(function(chart, d, i) {\n      var series = chart.seriesData.call(this, d, i);\n      return series && series.seriesIndex || 0;\n    }),\n\n    /**\n      Get parent series data for given data-point\n\n      @method seriesData\n      @return {Any}\n    */\n    seriesData: di(function() {\n      return getParentData(this);\n    }),\n\n    /**\n      (di) Get style given series data or data-point\n      (Uses \"style\" object on `d`, if defined)\n\n      @method itemStyle\n      @param {Any} d\n      @param {Number} [i]\n      @param {Number} [j]\n      @return {String}\n    */\n    itemStyle: di(function(chart, d) {\n      return style(d.style) || null;\n    }),\n\n    /**\n      Get series count for chart\n\n      @method seriesCount\n      @return {Number}\n    */\n    seriesCount: function() {\n      var data = this.data();\n      return (data && isSeriesData(data)) ? data.length : 1;\n    },\n\n    /**\n      Extension of layer() that handles data-binding and layering for series data.\n\n      - Updates `dataBind` method to access underlying series values\n      - Creates group layer for each series in chart\n      - Should be used just like layer()\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n        initialize: function() {\n          this.seriesLayer('Circles', this.base, {\n            // Create group for each series on this.base\n            // and calls the following for each series item\n            // (entire layer is called twice: series-1 and series-2)\n\n            dataBind: function(data) {\n              // 1. data = [1, 2, 3]\n              // 2. data = [4, 5, 6]\n            },\n            insert: function() {\n              // Same as chart.layer\n              // (where \"this\" is series group layer)\n            },\n            events: {\n              // Same as chart.layer\n            }\n          });\n        }\n      }));\n\n      // ...\n\n      chart.draw([\n        {key: 'series-1', values: [1, 2, 3]},\n        {key: 'series-2', values: [4, 5, 6]}\n      ]);\n      ```\n      @method seriesLayer\n      @param {String} name\n      @param {Selection} selection\n      @param {Object} options (`dataBind` and `insert` required)\n      @return {d3.chart.layer}\n    */\n    seriesLayer: function(name, selection, options) {\n      if (options && options.dataBind) {\n        var dataBind = options.dataBind;\n\n        options.dataBind = function(data) {\n          var chart = this.chart();\n          var series = this.selectAll('g')\n            .data(data, chart.seriesKey);\n\n          series.enter()\n            .append('g');\n\n          series\n            .attr('class', chart.seriesClass)\n            .attr('style', chart.itemStyle);\n\n          // TODO Exit layer items then exit series layer\n          series.exit()\n            .remove();\n\n          series.chart = function() { return chart; };\n\n          return dataBind.call(series, chart.seriesValues);\n        };\n      }\n\n      return d3.chart().prototype.layer.call(this, name, selection, options);\n    },\n\n    // Ensure data is in series form\n    transform: function(data) {\n      return !isSeriesData(data) ? [{values: data}] : data;\n    }\n  };\n\n  var mixins = {\n    Series: Series,\n    XY: XY,\n    XYValues: XYValues,\n    XYInverted: XYInverted,\n    Labels: Labels$1,\n    LabelsXY: LabelsXY,\n    Hover: Hover,\n    HoverPoints: HoverPoints,\n    Transition: Transition,\n    StandardLayer: StandardLayer\n  };\n\n  /**\r\n    Gridlines component that draws major ticks for chart\r\n\r\n    Uses d3.axis extensions for ticks:\r\n\r\n    - `ticks`\r\n    - `tickValues`\r\n\r\n    ### Extending\r\n\r\n    To extend the `Gridlines` component, the following methods are available\r\n\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart').chart('Compose', function(data) {\r\n      var scales = {\r\n        x: {data: data, key: 'x'},\r\n        y: {data: data, key: 'y'}\r\n      };\r\n\r\n      var vertical = d3c.gridlines({\r\n        scale: scales.x,\r\n        orientation: 'vertical'\r\n      });\r\n      var horizontal = d3c.gridlines({\r\n        scale: scales.y,\r\n        orientation: 'horizontal'\r\n      });\r\n\r\n      return [\r\n        vertical,\r\n        horizontal\r\n      ];\r\n    });\r\n    ```\r\n    @class Gridlines\r\n  */\r\n  var Mixed$7 = mixin(Component, XY, Transition, StandardLayer);\r\n  var Gridlines = Mixed$7.extend({\r\n    initialize: function(options) {\r\n      Mixed$7.prototype.initialize.call(this, options);\r\n\r\n      // Proxy attach to parent for width/height\r\n      var parent = this.options().parent;\r\n      if (parent) {\r\n        this.parent = parent;\r\n\r\n        if (parent.container) {\r\n          this.container = parent.container;\r\n          this.trigger('attach');\r\n        }\r\n        else {\r\n          parent.on('attach', function() {\r\n            this.container = parent.container;\r\n            this.trigger('attach');\r\n          }.bind(this));\r\n        }\r\n      }\r\n\r\n      // Use standard layer for extensibility\r\n      this.standardLayer('Gridlines', this.base.append('g').attr('class', 'chart-gridlines'));\r\n    },\r\n\r\n    /**\r\n      Use horizontal, vertical gridlines\r\n\r\n      @property orientation\r\n      @type String\r\n      @default horizontal\r\n    */\r\n    orientation: property({\r\n      default_value: 'horizontal',\r\n      validate: function(value) {\r\n        return contains(['horizontal', 'vertical'], value);\r\n      },\r\n      set: function() {\r\n        // Update scale -> xScale/yScale when position changes\r\n        if (this.scale())\r\n          this.scale(this.scale());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Scale to use for gridlines.\r\n      Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used.\r\n\r\n      @example\r\n      ```js\r\n      // Set with d3.scale directly\r\n      gridlines.scale(d3.scale());\r\n\r\n      // or with Object passed to helpers.createScale\r\n      gridlines.scale({data: data, key: 'x'});\r\n      ```\r\n      @property scale\r\n      @type Object|d3.scale\r\n    */\r\n    scale: property({\r\n      set: function(value) {\r\n        if (this.orientation() == 'vertical') {\r\n          this.xScale(value);\r\n          value = this.xScale();\r\n        }\r\n        else {\r\n          this.yScale(value);\r\n          value = this.yScale();\r\n        }\r\n\r\n        return {\r\n          override: value\r\n        };\r\n      }\r\n    }),\r\n\r\n    // d3.axis extensions\r\n    ticks: property({\r\n      default_value: [10]\r\n    }),\r\n    tickValues: property(),\r\n\r\n    drawLine: di(function(chart, d) {\r\n      var x1, x2, y1, y2;\r\n      if (chart.orientation() == 'vertical') {\r\n        x1 = x2 = chart.xScale()(d);\r\n        y1 = 0;\r\n        y2 = chart.height();\r\n      }\r\n      else {\r\n        x1 = 0;\r\n        x2 = chart.width();\r\n        y1 = y2 = chart.yScale()(d);\r\n      }\r\n\r\n      d3.select(this)\r\n        .attr('x1', x1)\r\n        .attr('x2', x2)\r\n        .attr('y1', y1)\r\n        .attr('y2', y2);\r\n    }),\r\n\r\n    width: function width() {\r\n      // Use container's explicit chart width rather than component width (if available)\r\n      return this.container ? this.container.chartPosition().width : dimensions(this.base).width;\r\n    },\r\n    height: function height() {\r\n      // Use container's explicit chart height rather than component width (if available)\r\n      return this.container ? this.container.chartPosition().height : dimensions(this.base).width;\r\n    },\r\n\r\n    onDataBind: function onDataBind(selection, data) {\r\n      // [false] is given for display: false when attached from Axis\r\n      var hide = data && data[0] && data[0].y === false;\r\n\r\n      var tick_values = this.tickValues();\r\n      if (tick_values == null && !hide) {\r\n        // Get tick values from scale\r\n        var scale = this.orientation() == 'vertical' ? this.xScale() : this.yScale();\r\n        var ticks_args = this.ticks();\r\n\r\n        if (!ticks_args)\r\n          ticks_args = [10];\r\n        if (!Array.isArray(ticks_args))\r\n          ticks_args = [ticks_args];\r\n\r\n        tick_values = scale.ticks ? scale.ticks.apply(scale, ticks_args) : scale.domain();\r\n      }\r\n\r\n      return selection.selectAll('line').data(hide ? [] : tick_values);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('line')\r\n        .attr('class', 'chart-gridline');\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('opacity', 0)\r\n        .each(this.drawLine);\r\n    },\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      selection.attr('opacity', 1);\r\n    },\r\n    onExit: function onExit(selection) {\r\n      selection.remove();\r\n    },\r\n\r\n    skip_layout: true\r\n  }, {\r\n    layer_type: 'chart',\r\n    z_index: 55\r\n  });\r\n\r\n  var gridlines = createHelper('Gridlines');\n\n  var default_legend_margins = {top: 8, right: 8, bottom: 8, left: 8};\r\n\r\n  /**\r\n    Legend component that can automatically pull chart and series information from d3.compose\r\n\r\n    Notes:\r\n\r\n    - To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\r\n    - To exclude a series from the legend, use `exclude_from_legend = true` in series object\r\n    - To add swatch for custom chart, use `Legend.registerSwatch()`\r\n\r\n    ### Extending\r\n\r\n    To extend the `Legend` component, the following methods are available:\r\n\r\n    - `itemKey`\r\n    - `itemText`\r\n    - `swatchClass`\r\n    - `createSwatch`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var input = [{key: 'input', name: 'Input', values: data.input}];\r\n        var output = [\r\n          {key: 'output1', name: 'Output 1', values: data.output1},\r\n          {key: 'output2', name: 'Output 2', values: data.output2}\r\n        ];\r\n\r\n        var charts = [\r\n          d3c.lines('a', {data: input}), // ...\r\n          d3c.bars('b', {data: output}) // ...\r\n        ];\r\n        var legend = d3c.legend({charts: ['a', 'b']});\r\n\r\n        return [\r\n          [d3c.layered(charts), legend]\r\n        ];\r\n      });\r\n\r\n    // -> automatically creates legend from series data for 'a' and 'b'\r\n    //    (Lines Swatch) Input\r\n    //    (Bars Swatch) Output 1\r\n    //    (Bars Swatch) Output 2\r\n\r\n    // or, manually set data for legend\r\n    return [\r\n      d3c.legend({\r\n        data: [\r\n          {type: 'Lines', text: 'Input', class: 'series-index-0'},\r\n          {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\r\n          {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\r\n        ]\r\n      })\r\n    };\r\n    ```\r\n    @class Legend\r\n    @extends Component, StandardLayer\r\n  */\r\n  var Mixed$6 = mixin(Component, StandardLayer);\r\n  var Legend = Mixed$6.extend({\r\n    initialize: function(options) {\r\n      Mixed$6.prototype.initialize.call(this, options);\r\n      this.legend_base = this.base.append('g').classed('chart-legend', true);\r\n      this.standardLayer('Legend', this.legend_base);\r\n    },\r\n\r\n    /**\r\n      Array of chart keys from container to display in legend\r\n\r\n      @example\r\n      ```js\r\n      d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var charts = [\r\n          {id: 'a'},\r\n          {id: 'b'},\r\n          {id: 'c'}\r\n        ];\r\n        var legend = d3c.legend({charts: ['a', 'c']});\r\n\r\n        return [\r\n          [d3c.layered(charts), legend]\r\n        ];\r\n      });\r\n      ```\r\n      @property charts\r\n      @type Array\r\n    */\r\n    charts: property(),\r\n\r\n    /**\r\n      Dimensions of \"swatch\" in px\r\n\r\n      @property swatchDimensions\r\n      @type Object\r\n      @default {width: 20, height: 20}\r\n    */\r\n    swatchDimensions: property({\r\n      default_value: {width: 20, height: 20}\r\n    }),\r\n\r\n    /**\r\n      Margins (in pixels) around legend\r\n\r\n      @property margins\r\n      @type Object\r\n      @default {top: 8, right: 8, bottom: 8, left: 8}\r\n    */\r\n    margins: property({\r\n      default_value: default_legend_margins,\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values, default_legend_margins)\r\n        };\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\r\n      (Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")\r\n\r\n      @property stackDirection\r\n      @type String\r\n      @default (based on position)\r\n    */\r\n    stackDirection: property({\r\n      validate: function(value) {\r\n        return contains(['vertical', 'horizontal'], value);\r\n      },\r\n      default_value: function() {\r\n        var direction_by_position = {\r\n          top: 'horizontal',\r\n          right: 'vertical',\r\n          bottom: 'horizontal',\r\n          left: 'vertical'\r\n        };\r\n        return direction_by_position[this.position()];\r\n      }\r\n    }),\r\n\r\n    transform: function(data) {\r\n      if (this.charts()) {\r\n        // Pull legend data from charts\r\n        var charts = this.container.charts();\r\n        data = this.charts().reduce(function(combined_data, chart_id) {\r\n          var chart = find(charts, function(find_chart) { return find_chart.id == chart_id; });\r\n\r\n          // Check for exclude from legend option\r\n          if (!chart || chart.exclude_from_legend || chart.options().exclude_from_legend)\r\n            return combined_data;\r\n\r\n          var chart_data = this.container.demux(chart_id, this.container.data());\r\n          if (!isSeriesData(chart_data))\r\n            chart_data = [chart_data];\r\n\r\n          var legend_data = chart_data.reduce(function(memo, series, index) {\r\n            // Check for exclude from legend option on series\r\n            if (series && !series.exclude_from_legend) {\r\n              memo.push(this.getLegendData(chart, series, index));\r\n            }\r\n\r\n            return memo;\r\n          }.bind(this), []);\r\n\r\n          return combined_data.concat(legend_data);\r\n        }.bind(this), []);\r\n      }\r\n\r\n      return data;\r\n    },\r\n\r\n    // Key for legend item (default is key from data)\r\n    itemKey: di(function(chart, d) {\r\n      return d.key;\r\n    }),\r\n\r\n    // Text for legend item (default is text from data)\r\n    itemText: di(function(chart, d) {\r\n      return d.text;\r\n    }),\r\n\r\n    // Class to apply to swatch (default is class from data)\r\n    swatchClass: di(function(chart, d) {\r\n      return compact(['chart-legend-swatch', d['class']]).join(' ');\r\n    }),\r\n\r\n    // Create swatch (using registered swatches based on type from data)\r\n    createSwatch: di(function(chart, d, i) {\r\n      var selection = d3.select(this);\r\n\r\n      // Clear existing swatch\r\n      selection.selectAll('*').remove();\r\n      selection\r\n        .attr('class', chart.swatchClass);\r\n\r\n      var swatches = Legend.swatches;\r\n      if (!swatches)\r\n        return;\r\n\r\n      if (d && d.type && swatches[d.type])\r\n        swatches[d.type].call(selection, chart, d, i);\r\n      else if (swatches['default'])\r\n        swatches['default'].call(selection, chart, d, i);\r\n    }),\r\n\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('.chart-legend-group')\r\n        .data(data, this.itemKey);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      var groups = selection.append('g')\r\n        .attr('class', 'chart-legend-group')\r\n        .style('pointer-events', 'all')\r\n        .on('mouseenter', function(d, i) {\r\n          this.container.trigger('mouseenter:legend', this._itemDetails(d, i));\r\n        }.bind(this))\r\n        .on('mousemove', function(d, i) {\r\n          this.container.trigger('mousemove:legend', this._itemDetails(d, i));\r\n        }.bind(this))\r\n        .on('mouseleave', function(d, i) {\r\n          this.container.trigger('mouseleave:legend', this._itemDetails(d, i));\r\n        }.bind(this));\r\n\r\n      groups.append('g')\r\n        .attr('width', this.swatchDimensions().width)\r\n        .attr('height', this.swatchDimensions().height)\r\n        .attr('class', 'chart-legend-swatch');\r\n      groups.append('text')\r\n        .attr('class', 'chart-legend-label');\r\n\r\n      groups.append('rect')\r\n        .attr('class', 'chart-legend-hover')\r\n        .style('visibility', 'hidden');\r\n\r\n      return groups;\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      var swatch = this.swatchDimensions();\r\n\r\n      selection.select('.chart-legend-swatch').each(this.createSwatch);\r\n\r\n      selection.select('.chart-legend-label')\r\n        .text(this.itemText)\r\n        .each(function() {\r\n          // Vertically center text\r\n          var offset = alignText(this, swatch.height);\r\n          d3.select(this)\r\n            .attr('transform', translate(swatch.width + 5, offset));\r\n        });\r\n\r\n      // Position groups after positioning everything inside\r\n      selection.call(stack({\r\n        direction: this.stackDirection(),\r\n        origin: 'top',\r\n        padding: 5,\r\n        min_height: swatch.height,\r\n        min_width: swatch.width\r\n      }));\r\n\r\n      // Position hover listeners\r\n      var sizes = [];\r\n      selection.each(function() {\r\n        sizes.push(this.getBBox());\r\n      });\r\n      selection.select('.chart-legend-hover').each(function(d, i) {\r\n        var size = sizes[i];\r\n        var transform = null;\r\n\r\n        if (size.height > swatch.height) {\r\n          var offset = (size.height - swatch.height) / 2;\r\n          transform = translate(0, -offset);\r\n        }\r\n\r\n        d3.select(this)\r\n          .attr('width', size.width)\r\n          .attr('height', size.height)\r\n          .attr('transform', transform);\r\n      });\r\n    },\r\n    onExit: function onExit(selection) {\r\n      selection.remove();\r\n    },\r\n\r\n    getLegendData: function getLegendData(chart, series, series_index) {\r\n      return {\r\n        text: series.name || 'Series ' + (series_index + 1),\r\n        key: chart.id + '.' + (series.key || series_index),\r\n        type: chart.type,\r\n        'class': compact([\r\n          'chart-series',\r\n          'chart-index-' + series_index,\r\n          chart.options()['class'],\r\n          series['class']\r\n        ]).join(' ')\r\n      };\r\n    },\r\n\r\n    _itemDetails: function _itemDetails(d, i) {\r\n      return {\r\n        legend: this,\r\n        d: d,\r\n        i: i\r\n      };\r\n    }\r\n  }, {\r\n    z_index: 200,\r\n    swatches: {\r\n      'default': function(chart) {\r\n        var swatch_dimensions = chart.swatchDimensions();\r\n\r\n        this.append('circle')\r\n          .attr('cx', swatch_dimensions.width / 2)\r\n          .attr('cy', swatch_dimensions.height / 2)\r\n          .attr('r', d3.min([swatch_dimensions.width, swatch_dimensions.height]) / 2)\r\n          .attr('class', 'chart-swatch');\r\n      }\r\n    },\r\n\r\n    /**\r\n      Register a swatch create function for the given chart type\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\r\n        var dimensions = chart.swatchDimensions();\r\n\r\n        return this.append('line')\r\n          .attr('x1', 0).attr('y1', dimensions.height / 2)\r\n          .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\r\n          .attr('class', 'chart-line');\r\n      });\r\n      ```\r\n      @method registerSwatch\r\n      @static\r\n      @param {Array|String} types Chart type(s)\r\n      @param {Function} create \"di\" function that inserts swatch\r\n    */\r\n    registerSwatch: function(types, create) {\r\n      if (!Array.isArray(types))\r\n        types = [types];\r\n\r\n      types.forEach(function(type) {\r\n        this.swatches[type] = create;\r\n      }, this);\r\n    }\r\n  });\r\n\r\n  // Create line swatch for Line and LineValues\r\n  Legend.registerSwatch(['Lines'], function(chart) {\r\n    var swatch_dimensions = chart.swatchDimensions();\r\n\r\n    return this.append('line')\r\n      .attr('x1', 0).attr('y1', swatch_dimensions.height / 2)\r\n      .attr('x2', swatch_dimensions.width).attr('y2', swatch_dimensions.height / 2)\r\n      .attr('class', 'chart-line');\r\n  });\r\n\r\n  // Create bars swatch for Bars and StackedBars\r\n  Legend.registerSwatch(['Bars', 'StackedBars', 'HorizontalBars', 'HorizontalStackedBars'], function(chart) {\r\n    var swatch_dimensions = chart.swatchDimensions();\r\n\r\n    return this.append('rect')\r\n      .attr('x', 0).attr('y', 0)\r\n      .attr('width', swatch_dimensions.width).attr('height', swatch_dimensions.height)\r\n      .attr('class', 'chart-bar');\r\n  });\r\n\r\n  var legend = createHelper('Legend');\n\n  /**\r\n    Legend positioned within chart bounds.\r\n\r\n    @class InsetLegend\r\n    @extends Legend\r\n  */\r\n  var InsetLegend = Legend.extend({\r\n    initialize: function(options) {\r\n      Legend.prototype.initialize.call(this, options);\r\n      this.on('draw', function() {\r\n        // Position legend on draw\r\n        // (Need actual width/height for relative_to)\r\n        var translation = this.translation();\r\n        this.legend_base.attr('transform', translate(translation.x, translation.y));\r\n      }.bind(this));\r\n    },\r\n\r\n    /**\r\n      Position legend within chart layer `{x, y, relative_to}`\r\n      Use `relative_to` to use x,y values relative to x-y origin\r\n      (e.g. `\"left-top\"` is default)\r\n\r\n      @example\r\n      ```js\r\n      d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          return {\r\n            components: {\r\n              legend: {\r\n                type: 'InsetLegend',\r\n                // Position legend 10px away from right-bottom corner of chart\r\n                translation: {x: 10, y: 10, relative_to: 'right-bottom'}\r\n              }\r\n            }\r\n          }\r\n        });\r\n      ```\r\n      @property translation\r\n      @type Object {x,y}\r\n      @default {x: 10, y: 10, relative_to: 'left-top'}\r\n    */\r\n    translation: property({\r\n      default_value: {x: 10, y: 0, relative_to: 'left-top'},\r\n      get: function(value) {\r\n        var x = value.x || 0;\r\n        var y = value.y || 0;\r\n        var relative_to_x = (value.relative_to && value.relative_to.split('-')[0]) || 'left';\r\n        var relative_to_y = (value.relative_to && value.relative_to.split('-')[1]) || 'top';\r\n\r\n        if (relative_to_x === 'right') {\r\n          x = this.width() - dimensions(this.legend_base).width - x;\r\n        }\r\n        if (relative_to_y === 'bottom') {\r\n          y = this.height() - dimensions(this.legend_base).height - y;\r\n        }\r\n\r\n        return {\r\n          x: x,\r\n          y: y\r\n        };\r\n      }\r\n    }),\r\n\r\n    skip_layout: true\r\n  }, {\r\n    layer_type: 'chart'\r\n  });\r\n\r\n  var insetLegend = createHelper('InsetLegend');\n\n  /**\r\n    Add text to a chart.\r\n\r\n    ### Extending\r\n\r\n    To extend the `Text` component, the following methods are available:\r\n\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        return {\r\n          components: {\r\n            title: {\r\n              type: 'Text',\r\n              position: 'top'\r\n              text: 'Main Title',\r\n              textAlign: 'left',\r\n              'class': 'title'\r\n            },\r\n            notes: {\r\n              type: 'Text',\r\n              position: 'bottom',\r\n              text: 'Notes',\r\n              'class': 'notes'\r\n            }\r\n          }\r\n        };\r\n      });\r\n    ```\r\n    @class Text\r\n    @extends Component, StandardLayer\r\n  */\r\n  var Mixed$4 = mixin(Component, StandardLayer);\r\n  var Text = Mixed$4.extend({\r\n    initialize: function(options) {\r\n      Mixed$4.prototype.initialize.call(this, options);\r\n\r\n      // Use standard layer for extensibility\r\n      this.standardLayer('Text', this.base.append('g').classed('chart-text', true));\r\n    },\r\n\r\n    /**\r\n      Text to display\r\n\r\n      @property text\r\n      @type String\r\n    */\r\n    text: property(),\r\n\r\n    /**\r\n      Rotation of text\r\n\r\n      @property rotation\r\n      @type Number\r\n      @default 0\r\n    */\r\n    rotation: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)\r\n\r\n      @property textAlign\r\n      @type String\r\n      @default \"center\"\r\n    */\r\n    textAlign: property({\r\n      default_value: 'center',\r\n      validate: function(value) {\r\n        return contains(['left', 'center', 'right'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)\r\n\r\n      @property anchor\r\n      @type String\r\n      @default (set by `textAlign`)\r\n    */\r\n    anchor: property({\r\n      default_value: function() {\r\n        return {\r\n          left: 'start',\r\n          center: 'middle',\r\n          right: 'end'\r\n        }[this.textAlign()];\r\n      },\r\n      validate: function(value) {\r\n        return contains(['start', 'middle', 'end', 'inherit'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)\r\n\r\n      @property verticalAlign\r\n      @type String\r\n      @default \"middle\"\r\n    */\r\n    verticalAlign: property({\r\n      default_value: 'middle',\r\n      validate: function(value) {\r\n        return contains(['top', 'middle', 'bottom'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Style object containing styles for text\r\n\r\n      @property style\r\n      @type Object\r\n      @default {}\r\n    */\r\n    style: property({\r\n      default_value: {},\r\n      get: function(value) {\r\n        return style(value) || null;\r\n      }\r\n    }),\r\n\r\n    onDataBind: function onDataBind(selection) {\r\n      return selection.selectAll('text')\r\n        .data([0]);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('text');\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('transform', this.transformation())\r\n        .attr('style', this.style())\r\n        .attr('text-anchor', this.anchor())\r\n        .attr('class', this.options()['class'])\r\n        .text(this.text());\r\n    },\r\n\r\n    transformation: function() {\r\n      var x = {\r\n        left: 0,\r\n        center: this.width() / 2,\r\n        right: this.width()\r\n      }[this.textAlign()];\r\n      var y = {\r\n        top: 0,\r\n        middle: this.height() / 2,\r\n        bottom: this.height()\r\n      }[this.verticalAlign()];\r\n\r\n      var translation = translate(x, y);\r\n      var rotation = rotate(this.rotation());\r\n\r\n      return translation + ' ' + rotation;\r\n    }\r\n  }, {\r\n    z_index: 70\r\n  });\r\n\r\n  function textOptions(id, options, default_options) {\r\n    if (!options) {\r\n      options = id;\r\n      id = undefined;\r\n    }\r\n    if (isString(options))\r\n      options = {text: options};\r\n\r\n    return extend({id: id}, default_options, options);\r\n  }\r\n\r\n  function text(id, options) {\r\n    return textOptions(id, options, {type: 'Text'});\r\n  }\n\n  /**\r\n    Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)\r\n\r\n    @class Title\r\n    @extends Text\r\n  */\r\n  var Title = Text.extend({\r\n    initialize: function(options) {\r\n      Text.prototype.initialize.call(this, options);\r\n      this.base.select('.chart-text').classed('chart-title', true);\r\n    },\r\n\r\n    /**\r\n      Margins (in pixels) around Title\r\n\r\n      @property margins\r\n      @type Object\r\n      @default (set based on `position`)\r\n    */\r\n    margins: property({\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values, defaultMargins(this.position()))\r\n        };\r\n      },\r\n      default_value: function() {\r\n        return defaultMargins(this.position());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).\r\n\r\n      @property rotation\r\n      @type Number\r\n      @default (set based on `position`)\r\n    */\r\n    rotation: property({\r\n      default_value: function() {\r\n        var rotate_by_position = {\r\n          right: 90,\r\n          left: -90\r\n        };\r\n\r\n        return rotate_by_position[this.position()] || 0;\r\n      }\r\n    })\r\n  });\r\n\r\n  function defaultMargins(position) {\r\n    var default_margin = 8;\r\n    var margins_by_position = {\r\n      top: {top: default_margin, bottom: default_margin},\r\n      right: {right: default_margin, left: default_margin},\r\n      bottom: {top: default_margin, bottom: default_margin},\r\n      left: {right: default_margin, left: default_margin}\r\n    };\r\n    return getMargins(margins_by_position[position]);\r\n  }\r\n\r\n  function title(id, options) {\r\n    return textOptions(id, options, {type: 'Title'});\r\n  }\n\n  /**\r\n    Axis title component that extends Title with defaults (styling)\r\n\r\n    @class AxisTitle\r\n    @extends Title\r\n  */\r\n  var AxisTitle = Title.extend({\r\n    initialize: function(options) {\r\n      Title.prototype.initialize.call(this, options);\r\n      this.base.select('.chart-text')\r\n        .classed('chart-title', false)\r\n        .classed('chart-axis-title', true);\r\n    },\r\n\r\n    /**\r\n      Margins (in pixels) around axis title\r\n\r\n      @property margins\r\n      @type Object\r\n      @default (set based on `position`)\r\n    */\r\n    margins: property({\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values, defaultMargins$1(this.position()))\r\n        };\r\n      },\r\n      default_value: function() {\r\n        return defaultMargins$1(this.position());\r\n      }\r\n    })\r\n  });\r\n\r\n  function defaultMargins$1(position) {\r\n    var default_margin = 8;\r\n    var margins_by_position = {\r\n      top: {top: default_margin / 2, bottom: default_margin},\r\n      right: {left: default_margin / 2, right: default_margin},\r\n      bottom: {bottom: default_margin / 2, top: default_margin},\r\n      left: {right: default_margin / 2, left: default_margin}\r\n    };\r\n\r\n    return getMargins(margins_by_position[position]);\r\n  }\r\n\r\n  function axisTitle(id, options) {\r\n    return textOptions(id, options, {type: 'AxisTitle'});\r\n  }\n\n  /**\r\n    Axis component for XY data (wraps `d3.axis`).\r\n\r\n    Available d3.axis extensions:\r\n\r\n    - `ticks`\r\n    - `tickValues`\r\n    - `tickSize`\r\n    - `innerTickSize`\r\n    - `outerTickSize`\r\n    - `tickPadding`\r\n    - `tickFormat`\r\n\r\n    ### Extending\r\n\r\n    To extend the `Axis` component, the following methods are available:\r\n\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var scales = {\r\n          x: {data: data, key: 'x'},\r\n          y: {data: data, key: 'y'}\r\n        };\r\n\r\n        var charts = [];\r\n        var xAxis = d3c.axis({scale: scales.x});\r\n        var yAxis = d3c.axis({scale: scales.y});\r\n\r\n        return [\r\n          // Display y-axis to left of charts\r\n          [yAxis, d3c.layered(charts)],\r\n\r\n          // Display x-axis below charts\r\n          xAxis\r\n        ];\r\n      });\r\n    ```\r\n    @class Axis\r\n    @extends Component, XY, Transition, StandardLayer\r\n  */\r\n  var Mixed$5 = mixin(Component, XY, Transition, StandardLayer);\r\n  var Axis = Mixed$5.extend({\r\n    initialize: function(options) {\r\n      Mixed$5.prototype.initialize.call(this, options);\r\n\r\n      // Create two axes (so that layout and transitions work)\r\n      // 1. Display and transitions\r\n      // 2. Layout (draw to get width, but separate so that transitions aren't affected)\r\n      this.axis = d3.svg.axis();\r\n      this._layout_axis = d3.svg.axis();\r\n\r\n      this.axis_base = this.base.append('g').attr('class', 'chart-axis');\r\n      this._layout_base = this.base.append('g')\r\n        .attr('class', 'chart-axis chart-layout')\r\n        .append('g')\r\n          .style('display', 'none');\r\n\r\n      // Use standard layer for extensibility\r\n      this.standardLayer('Axis', this.axis_base);\r\n\r\n      // Setup gridlines\r\n      this.attachGridlines();\r\n    },\r\n\r\n    /**\r\n      Scale to pass to d3.axis\r\n\r\n      - If `xScale`/`yScale` are given, `scale` is set automatically based on `position`.\r\n      - Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used\r\n\r\n      @example\r\n      ```js\r\n      // Set with d3.scale directly\r\n      axis.scale(d3.scale());\r\n\r\n      // or with Object passed helpers.createScale\r\n      axis.scale({data: data, key: 'x'});\r\n\r\n      // For x0/y0 position, both xScale and yScale needed\r\n      // (scale is automatically set by position)\r\n      axis.xScale({domain: [0, 100]});\r\n      axis.yScale({domain: [0, 10]});\r\n      axis.position('y0');\r\n\r\n      // -> axis.scale() -> axis.xScale by default\r\n      ```\r\n      @property scale\r\n      @type Object|d3.scale\r\n    */\r\n    scale: property({\r\n      set: function(value) {\r\n        if (this.orientation() == 'vertical') {\r\n          this.yScale(value);\r\n          value = this.yScale();\r\n        }\r\n        else {\r\n          this.xScale(value);\r\n          value = this.xScale();\r\n        }\r\n\r\n        return {\r\n          override: value\r\n        };\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Position axis relative to chart\r\n      (top, right, bottom, left)\r\n\r\n      Note: x0 and y0 are currently disabled for more testing\r\n\r\n      @property position\r\n      @type String\r\n      @default bottom\r\n    */\r\n    position: property({\r\n      default_value: 'bottom',\r\n      validate: function(value) {\r\n        return contains(['top', 'right', 'bottom', 'left'], value);\r\n      },\r\n      set: function() {\r\n        // Update scale -> xScale/yScale when position changes\r\n        if (this.scale())\r\n          this.scale(this.scale());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      {x,y} translation of axis relative to chart\r\n      (set by default based on position)\r\n\r\n      @property translation\r\n      @type Object\r\n      @default (set based on position)\r\n    */\r\n    translation: property({\r\n      default_value: function() {\r\n        switch (this.position()) {\r\n          case 'top':\r\n            return {x: 0, y: 0};\r\n          case 'right':\r\n            return {x: this.width(), y: 0};\r\n          case 'bottom':\r\n            return {x: 0, y: this.height()};\r\n          case 'left':\r\n            return {x: 0, y: 0};\r\n          case 'x0':\r\n            return {x: this.x0(), y: 0};\r\n          case 'y0':\r\n            return {x: 0, y: this.y0()};\r\n        }\r\n      },\r\n      get: function(value) {\r\n        return translate(value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Axis orient for ticks\r\n      (set by default based on position)\r\n\r\n      @property orient\r\n      @type String\r\n      @default (set based on position)\r\n    */\r\n    orient: property({\r\n      default_value: function() {\r\n        var orient = this.position();\r\n\r\n        if (orient == 'x0')\r\n          orient = 'left';\r\n        else if (orient == 'y0')\r\n          orient = 'bottom';\r\n\r\n        return orient;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Axis orientation (vertical or horizonal)\r\n\r\n      @property orientation\r\n      @type String\r\n      @default (set based on position)\r\n    */\r\n    orientation: property({\r\n      validate: function(value) {\r\n        return contains(['horizontal', 'vertical'], value);\r\n      },\r\n      default_value: function() {\r\n        return {\r\n          top: 'horizontal',\r\n          right: 'vertical',\r\n          bottom: 'horizontal',\r\n          left: 'vertical',\r\n          x0: 'vertical',\r\n          y0: 'horizontal'\r\n        }[this.position()];\r\n      },\r\n      set: function() {\r\n        // Update scale -> xScale/yScale when orientation changes\r\n        if (this.scale())\r\n          this.scale(this.scale());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Attach gridlines for axis\r\n      (`true` to show with default options, `{...}` to pass options to `Gridlines`)\r\n\r\n      @property gridlines\r\n      @type Boolean|Object\r\n      @default false\r\n    */\r\n    gridlines: property({\r\n      get: function(value) {\r\n        if (isBoolean(value))\r\n          value = {display: value};\r\n        else if (!value)\r\n          value = {display: false};\r\n\r\n        return value;\r\n      }\r\n    }),\r\n\r\n    // d3.axis extensions\r\n    ticks: property(),\r\n    tickValues: property(),\r\n    tickSize: property(),\r\n    innerTickSize: property(),\r\n    outerTickSize: property(),\r\n    tickPadding: property(),\r\n    tickFormat: property(),\r\n\r\n    onDataBind: function onDataBind(selection) {\r\n      // Setup axis (scale and properties)\r\n      this._setupAxis(this.axis);\r\n\r\n      // Force addition of just one axis with dummy data array\r\n      // (Axis will be drawn using underlying chart scales)\r\n      return selection.selectAll('g').data([0]);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('g');\r\n    },\r\n    onEnter: function onEnter(selection) {\r\n      // Render axis\r\n      selection.call(this.axis);\r\n    },\r\n    onMerge: function onUpdate(selection) {\r\n      // Position axis\r\n      selection.attr('transform', this.translation());\r\n    },\r\n    onUpdateTransition: function onUpdateTransition(selection) {\r\n      // Render axis (with transition)\r\n      this.setupTransition(selection);\r\n\r\n      selection.call(this.axis);\r\n    },\r\n    onExit: function onExit(selection) {\r\n      selection.selectAll('g').remove();\r\n    },\r\n\r\n    getLayout: function() {\r\n      // Draw layout axis\r\n      this.setScales();\r\n      this._setupAxis(this._layout_axis);\r\n      this._layout_base.call(this._layout_axis);\r\n\r\n      // Calculate layout\r\n      // (make layout axis visible for width calculations in Firefox)\r\n      this._layout_base.style('display', 'block');\r\n\r\n      var label_overhang = this._getLabelOverhang();\r\n\r\n      this._layout_base.style('display', 'none');\r\n\r\n      return {\r\n        position: this.position(),\r\n        width: label_overhang.width,\r\n        height: label_overhang.height\r\n      };\r\n    },\r\n    setLayout: function() {\r\n      // Axis is positioned as chart layer, so don't set layout\r\n      return;\r\n    },\r\n\r\n    attachGridlines: function() {\r\n      var gridlines_options = gridlinesOptions(this);\r\n      var gridlines = this._gridlines = gridlines_options.display && createGridlines(this, gridlines_options);\r\n\r\n      this.on('draw', function() {\r\n        gridlines_options = gridlinesOptions(this);\r\n\r\n        if (gridlines)\r\n          gridlines.options(gridlines_options);\r\n        else if (gridlines_options.display)\r\n          gridlines = this._gridlines = createGridlines(this, gridlines_options);\r\n\r\n        if (gridlines && gridlines_options.display)\r\n          gridlines.draw();\r\n        else if (gridlines)\r\n          gridlines.draw([false]);\r\n      }.bind(this));\r\n\r\n      function gridlinesOptions(axis) {\r\n        return defaults({}, axis.gridlines(), {\r\n          parent: axis,\r\n          xScale: axis.xScale(),\r\n          yScale: axis.yScale(),\r\n          ticks: axis.ticks(),\r\n          tickValues: axis.tickValues(),\r\n          orientation: axis.orientation() == 'horizontal' ? 'vertical' : 'horizontal'\r\n        });\r\n      }\r\n\r\n      function createGridlines(axis, gridline_options) {\r\n        var base = axis.base.append('g').attr('class', 'chart-axis-gridlines');\r\n        return new Gridlines(base, gridline_options);\r\n      }\r\n    },\r\n\r\n    _setupAxis: function(axis) {\r\n      // Setup axis\r\n      if (this.orientation() == 'vertical')\r\n        axis.scale(this.yScale());\r\n      else\r\n        axis.scale(this.xScale());\r\n\r\n      var extensions = ['orient', 'ticks', 'tickValues', 'tickSize', 'innerTickSize', 'outerTickSize', 'tickPadding', 'tickFormat'];\r\n      var array_extensions = ['tickValues'];\r\n      extensions.forEach(function(key) {\r\n        var value = this[key] && this[key]();\r\n        if (!isUndefined(value)) {\r\n          // If value is array, treat as arguments array\r\n          // otherwise, pass in directly\r\n          if (Array.isArray(value) && !contains(array_extensions, key))\r\n            axis[key].apply(axis, value);\r\n          else\r\n            axis[key](value);\r\n        }\r\n      }, this);\r\n    },\r\n\r\n    _getLabelOverhang: function() {\r\n      // TODO Look into overhang relative to chartBase (for x0, y0)\r\n      var overhangs = {width: [0], height: [0]};\r\n      var orientation = this.orientation();\r\n\r\n      this._layout_base.selectAll('g').each(function() {\r\n        try {\r\n          // There are cases where getBBox may throw\r\n          // (e.g. not currently displayed in Firefox)\r\n          var bbox = this.getBBox();\r\n\r\n          if (orientation == 'horizontal')\r\n            overhangs.height.push(bbox.height);\r\n          else\r\n            overhangs.width.push(bbox.width);\r\n        }\r\n        catch (ex) {\r\n          // Ignore error\r\n        }\r\n      });\r\n\r\n      return {\r\n        width: d3.max(overhangs.width),\r\n        height: d3.max(overhangs.height)\r\n      };\r\n    }\r\n  }, {\r\n    layer_type: 'chart',\r\n    z_index: 60\r\n  });\r\n\r\n  var axis = createHelper('Axis');\n\n  /**\r\n    Common base for creating charts.\r\n    Standard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\r\n\r\n    ### Extending\r\n\r\n    To take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\r\n    and automatically setting properties from `options`, use `d3.compose.helpers.di`\r\n    and `d3.compose.helpers.property` when creating your chart.\r\n\r\n    @example\r\n    ```js\r\n    var helpers = d3.compose.helpers;\r\n\r\n    d3.chart('Chart').extend('Pie', {\r\n      initialize: function() {\r\n        // same as d3.chart\r\n      },\r\n      transform: function(data) {\r\n        // same as d3.chart\r\n      },\r\n\r\n      color: helpers.di(function(chart, d, i) {\r\n        // \"di\" function with parent chart injected (\"this\" = element)\r\n      }),\r\n\r\n      centered: helpers.property({\r\n        default_value: true\r\n        // can be automatically set from options object\r\n      })\r\n    });\r\n    ```\r\n    @class Chart\r\n    @extends Base\r\n  */\r\n  var Chart$1 = Base.extend({}, {\r\n    /**\r\n      Default z-index for chart\r\n      (Components are 50 by default, so Chart = 100 is above component by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('BelowComponentLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 40\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 100\r\n    */\r\n    z_index: 100,\r\n    layer_type: 'chart'\r\n  });\n\n  /**\r\n    Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\r\n\r\n    ### Extending\r\n\r\n    To extend the `Labels` chart, the following methods are available:\r\n\r\n    - `insertLabels`\r\n    - `mergeLabels`\r\n    - `layoutLabels`\r\n    - `transitionLabels`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    View the `Labels.js` source for the default implementation and more information on these methods.\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      return {\r\n        charts: {\r\n          input: {\r\n            type: 'Lines',\r\n            data: data.input,\r\n            // xScale, yScale, other properties...\r\n\r\n            // Show labels with default properties\r\n            labels: true\r\n          },\r\n          output: {\r\n            type: 'Bars',\r\n            data: data.output,\r\n            // xScale, yScale, other properties...\r\n\r\n            // Pass options to labels\r\n            labels: {\r\n              offset: 2,\r\n              position: 'top',\r\n              style: {\r\n                'font-size': '14px'\r\n              },\r\n              format: d3.format(',0d')\r\n            }\r\n          },\r\n          labels: {\r\n            type: 'Labels',\r\n            data: data.labels,\r\n\r\n            // xScale, yScale, other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    chart.draw({\r\n      input: [1, 2, 3],\r\n      output: [10, 20, 30],\r\n      labels: [\r\n        {x: 0, y: 0},\r\n        {x: 0, y: 30, label: 'Override (y by default)'},\r\n        {x: 2, y: 0},\r\n        {x: 2, y: 30}\r\n      ]\r\n    });\r\n    ```\r\n    @class Labels\r\n    @extends Chart, Series, XY, Hover, Transition, StandardLayer\r\n  */\r\n  var Mixed$2 = mixin(Chart$1, Series, XY, Hover, Transition, StandardLayer);\r\n  var Labels = Mixed$2.extend({\r\n    initialize: function(options) {\r\n      Mixed$2.prototype.initialize.call(this, options);\r\n\r\n      // Proxy attach to parent for hover\r\n      var parent = this.options().parent;\r\n      if (parent) {\r\n        this.parent = parent;\r\n        parent.on('attach', function() {\r\n          this.container = parent.container;\r\n          this.trigger('attach');\r\n        }.bind(this));\r\n      }\r\n\r\n      // Use StandardLayer for extensibility\r\n      this.standardSeriesLayer('Labels', this.base);\r\n    },\r\n\r\n    transform: function(data) {\r\n      data = Mixed$2.prototype.transform.call(this, data);\r\n\r\n      if (!isSeriesData(data))\r\n        data = [{key: 'labels', name: 'Labels', values: data}];\r\n\r\n      // TODO Use ticks / domain from xScale\r\n      // ticks = scale.ticks ? scale.ticks.apply(scale, [10]) : scale.domain()\r\n      return data;\r\n    },\r\n\r\n    /**\r\n      Formatting function or string (string is passed to `d3.format`) for label values\r\n\r\n      @property format\r\n      @type String|Function\r\n    */\r\n    format: property({\r\n      set: function(value) {\r\n        if (isString(value)) {\r\n          return {\r\n            override: d3.format(value)\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Label position relative to data point\r\n      (top, right, bottom, or left)\r\n\r\n      Additionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\r\n      where `a` and `b` are `top`, `right`, `bottom`, or `left`\r\n\r\n      For more advanced positioning, a \"di\" function can be specified to set position per label\r\n\r\n      @example\r\n      ```js\r\n      labels.position('top'); // top for all values\r\n      labels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\r\n      labels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\r\n      ```\r\n      @property position\r\n      @type String|Function\r\n      @default top|bottom\r\n    */\r\n    position: property({\r\n      default_value: 'top|bottom',\r\n      get: function(value) {\r\n        if (isString(value) && value.indexOf('|') >= 0) {\r\n          var chart = this;\r\n          var parts = value.split('|');\r\n          return function(d, i, j) {\r\n            var y_value = chart.yValue.call(this, d, i, j);\r\n            return y_value >= 0 ? parts[0] : parts[1];\r\n          };\r\n        }\r\n        else {\r\n          return value;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Offset between data point and label\r\n      (if `Number` is given, offset is set based on position)\r\n\r\n      @property offset\r\n      @type Number|Object\r\n      @default 0\r\n    */\r\n    offset: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Padding between text and label background\r\n\r\n      @property padding\r\n      @type Number\r\n      @default 1\r\n    */\r\n    padding: property({default_value: 1}),\r\n\r\n    /**\r\n      Define text anchor (start, middle, or end)\r\n\r\n      (set by default based on label position)\r\n\r\n      @property anchor\r\n      @type String\r\n      @default middle\r\n    */\r\n    anchor: property({\r\n      validate: function(value) {\r\n        return contains(['start', 'middle', 'end'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Define text-alignment (top, middle, or bottom)\r\n\r\n      (set by default based on label position)\r\n\r\n      @property alignment\r\n      @type String\r\n      @default middle\r\n    */\r\n    alignment: property({\r\n      validate: function(value) {\r\n        return contains(['top', 'middle', 'bottom'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get label text for data-point (uses \"label\" property or y-value)\r\n\r\n      @method labelText\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {String}\r\n    */\r\n    labelText: di(function(chart, d, i) {\r\n      var value = valueOrDefault(d.label, valueOrDefault(d.__original_y, chart.yValue.call(this, d, i)));\r\n      var format = chart.format();\r\n\r\n      return format ? format(value) : value;\r\n    }),\r\n\r\n    /**\r\n      Get class for label group\r\n\r\n      @method labelClass\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {String}\r\n    */\r\n    labelClass: di(function(chart, d) {\r\n      return 'chart-label' + (d['class'] ? ' ' + d['class'] : '');\r\n    }),\r\n\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('g')\r\n        .data(data, this.key);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('g')\r\n        .call(this.insertLabels);\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      selection.attr('class', this.labelClass);\r\n\r\n      this.mergeLabels(selection);\r\n      this.layoutLabels(selection);\r\n    },\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      // Transition labels into position\r\n      this.setupTransition(selection);\r\n      this.transitionLabels(selection);\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    insertLabels: function(selection) {\r\n      selection.append('rect')\r\n        .attr('class', 'chart-label-bg');\r\n      selection.append('text')\r\n        .attr('class', 'chart-label-text');\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    mergeLabels: function(selection) {\r\n      selection.selectAll('text')\r\n        .text(this.labelText);\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    layoutLabels: function(selection) {\r\n      // Calculate layout\r\n      var chart = this;\r\n      var labels = [];\r\n      var position = chart.position();\r\n      var values = {\r\n        offset: chart.offset(),\r\n        padding: chart.padding(),\r\n        anchor: chart.anchor(),\r\n        alignment: chart.alignment()\r\n      };\r\n\r\n      var options;\r\n      if (isString(position))\r\n        options = getOptions();\r\n\r\n      selection.each(function(d, i, j) {\r\n        if (!labels[j])\r\n          labels[j] = [];\r\n\r\n        // Store values for label and calculate layout\r\n        var label = chart._prepareLabel(chart, this, d, i, j);\r\n        labels[j].push(label);\r\n\r\n        var label_options = options || getOptions.call(chart, this, d, i, j);\r\n\r\n        chart._calculateLayout(chart, label_options, label);\r\n      });\r\n\r\n      // Collision detection\r\n      this._handleCollisions(chart, labels);\r\n\r\n      // Layout labels\r\n      labels.forEach(function(series) {\r\n        series.forEach(function(label) {\r\n          this._setLayout(chart, label);\r\n        }, this);\r\n      }, this);\r\n\r\n      function getOptions(element, d, i, j) {\r\n        var label_options = extend({}, values);\r\n        var label_position;\r\n\r\n        if (isFunction(position))\r\n          label_position = position.call(element, d, i, j);\r\n        else\r\n          label_position = position;\r\n\r\n        if (isNumber(label_options.offset)) {\r\n          var offset = {\r\n            top: {x: 0, y: -label_options.offset},\r\n            right: {x: label_options.offset, y: 0},\r\n            bottom: {x: 0, y: label_options.offset},\r\n            left: {x: -label_options.offset, y: 0}\r\n          }[label_position];\r\n\r\n          if (!offset)\r\n            offset = {x: 0, y: 0};\r\n\r\n          label_options.offset = offset;\r\n        }\r\n        if (isUndefined(label_options.anchor)) {\r\n          label_options.anchor = {\r\n            top: 'middle',\r\n            right: 'start',\r\n            bottom: 'middle',\r\n            left: 'end'\r\n          }[label_position];\r\n        }\r\n        if (isUndefined(label_options.alignment)) {\r\n          label_options.alignment = {\r\n            top: 'bottom',\r\n            right: 'middle',\r\n            bottom: 'top',\r\n            left: 'middle'\r\n          }[label_position];\r\n        }\r\n        return label_options;\r\n      }\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    transitionLabels: function(selection) {\r\n      selection.attr('opacity', 1);\r\n    },\r\n\r\n    //\r\n    // Internal\r\n    //\r\n\r\n    _prepareLabel: function(chart, element, d, i) {\r\n      var selection = d3.select(element);\r\n      var text = selection.select('text');\r\n      var bg = selection.select('rect');\r\n\r\n      return {\r\n        x: chart.x.call(element, d, i),\r\n        y: chart.y.call(element, d, i),\r\n        element: element,\r\n        selection: selection,\r\n        text: {\r\n          element: text.node(),\r\n          selection: text\r\n        },\r\n        bg: {\r\n          element: bg.node(),\r\n          selection: bg\r\n        }\r\n      };\r\n    },\r\n\r\n    _calculateLayout: function(chart, options, label) {\r\n      var text_bounds = label.text.element.getBBox();\r\n\r\n      // Need to adjust text for line-height\r\n      var text_y_adjustment = alignText(label.text.element);\r\n\r\n      // Position background\r\n      var layout = label.bg.layout = {\r\n        x: options.offset.x,\r\n        y: options.offset.y,\r\n        width: text_bounds.width + (2 * options.padding),\r\n        height: text_bounds.height + (2 * options.padding)\r\n      };\r\n\r\n      // Set width / height of label\r\n      label.width = layout.width;\r\n      label.height = layout.height;\r\n\r\n      if (options.anchor == 'end')\r\n        label.x -= layout.width;\r\n      else if (options.anchor == 'middle')\r\n        label.x -= (layout.width / 2);\r\n\r\n      if (options.alignment == 'bottom')\r\n        label.y -= layout.height;\r\n      else if (options.alignment == 'middle')\r\n        label.y -= (layout.height / 2);\r\n\r\n      // Center text in background\r\n      label.text.layout = {\r\n        x: layout.x + (layout.width / 2) - (text_bounds.width / 2),\r\n        y: layout.y + (layout.height / 2) - (text_bounds.height / 2) + text_y_adjustment\r\n      };\r\n    },\r\n\r\n    _handleCollisions: function(chart, labels) {\r\n      labels.forEach(function(series, seriesIndex) {\r\n        // Check through remaining series for collisions\r\n        labels.slice(seriesIndex + 1).forEach(function(compareSeries) {\r\n          compareSeries.forEach(function(compareLabel) {\r\n            series.forEach(function(label) {\r\n              if (checkForOverlap(label, compareLabel))\r\n                groupLabels(label, compareLabel);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      function checkForOverlap(labelA, labelB) {\r\n        var a = getEdges(labelA);\r\n        var b = getEdges(labelB);\r\n\r\n        var contained_LR = (b.left < a.left && b.right > a.right);\r\n        var contained_TB = (b.bottom < a.bottom && b.top > a.top);\r\n        var overlap_LR = (b.left >= a.left && b.left < a.right) || (b.right > a.left && b.right <= a.right) || contained_LR;\r\n        var overlap_TB = (b.top >= a.top && b.top < a.bottom) || (b.bottom > a.top && b.bottom <= a.bottom) || contained_TB;\r\n\r\n        return overlap_LR && overlap_TB;\r\n\r\n        function getEdges(label) {\r\n          return {\r\n            left: label.x,\r\n            right: label.x + label.width,\r\n            top: label.y,\r\n            bottom: label.y + label.height\r\n          };\r\n        }\r\n      }\r\n\r\n      function groupLabels(labelA, labelB) {\r\n        if (labelA.group && labelB.group) {\r\n          // Move labelB group labels into labelA group\r\n          objectEach(labelB.group.labels, function(label) {\r\n            labelA.group.labels.push(label);\r\n            label.group = labelA.group;\r\n          });\r\n\r\n          updateGroupPositions(labelA.group);\r\n        }\r\n        else if (labelA.group) {\r\n          addLabelToGroup(labelB, labelA.group);\r\n        }\r\n        else if (labelB.group) {\r\n          addLabelToGroup(labelA, labelB.group);\r\n        }\r\n        else {\r\n          var group = {labels: []};\r\n          addLabelToGroup(labelA, group);\r\n          addLabelToGroup(labelB, group);\r\n        }\r\n      }\r\n\r\n      function addLabelToGroup(label, group) {\r\n        group.labels.push(label);\r\n        label.group = group;\r\n        label.originalY = label.y;\r\n\r\n        updateGroupPositions(group);\r\n      }\r\n\r\n      function updateGroupPositions(group) {\r\n        function reset(label) {\r\n          // Reset to original y\r\n          label.y = label.originalY;\r\n          return label;\r\n        }\r\n        function sortY(a, b) {\r\n          if (a.y < b.y)\r\n            return -1;\r\n          else if (a.y > b.y)\r\n            return 1;\r\n          else\r\n            return 0;\r\n        }\r\n\r\n        var byY = group.labels.map(reset).sort(sortY).reverse();\r\n\r\n        byY.forEach(function(label, index) {\r\n          var prev = first(byY, index);\r\n          var overlap;\r\n\r\n          for (var i = prev.length - 1; i >= 0; i--) {\r\n            if (checkForOverlap(label, prev[i])) {\r\n              overlap = prev[i];\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (overlap)\r\n            label.y = overlap.y - label.height;\r\n        });\r\n      }\r\n    },\r\n\r\n    _setLayout: function(chart, label) {\r\n      label.bg.selection\r\n        .attr('transform', translate(label.bg.layout.x, label.bg.layout.y))\r\n        .attr('width', label.bg.layout.width)\r\n        .attr('height', label.bg.layout.height);\r\n\r\n      label.text.selection\r\n        .attr('transform', translate(label.text.layout.x, label.text.layout.y));\r\n\r\n      // Position label and set opacity to fade-in\r\n      label.selection\r\n        .attr('transform', translate(label.x, label.y))\r\n        .attr('opacity', 0);\r\n    }\r\n  }, {\r\n    z_index: 150\r\n  });\r\n\r\n  var labels = createHelper('Labels');\n\n  /**\r\n    (in-progress)\r\n\r\n    @class HoverLabels\r\n  */\r\n  var Mixed$3 = mixin(Labels, Hover);\r\n  var HoverLabels = Mixed$3.extend({\r\n    initialize: function(options) {\r\n      Mixed$3.prototype.initialize.call(this, options);\r\n      this.on('attach', function() {\r\n        this.container.on('mouseenter:point', this.onMouseEnterPoint.bind(this));\r\n        this.container.on('mouseleave:point', this.onMouseLeavePoint.bind(this));\r\n      }.bind(this));\r\n    },\r\n\r\n    /**\r\n      Maximum distance to find active points\r\n\r\n      @property hoverTolerance\r\n      @type Number\r\n      @default Infinity\r\n    */\r\n    hoverTolerance: property({\r\n      set: function(value) {\r\n        // Pass through hover tolerance to parent (if present)\r\n        if (this.parent && this.parent.hoverTolerance)\r\n          this.parent.hoverTolerance(value);\r\n      },\r\n      default_value: Infinity\r\n    }),\r\n\r\n    // Don't fade in labels, hidden until hover\r\n    transitionLabels: function() {},\r\n\r\n    onMouseEnterPoint: function(point) {\r\n      var label = this.findLabelForPoint(point);\r\n      if (label)\r\n        d3.select(label).attr('opacity', 1);\r\n    },\r\n    onMouseLeavePoint: function(point) {\r\n      var label = this.findLabelForPoint(point);\r\n      if (label)\r\n        d3.select(label).attr('opacity', 0);\r\n    },\r\n\r\n    findLabelForPoint: function(point) {\r\n      var labels = this.base.selectAll('g.chart-series').selectAll('g');\r\n      var chart = this;\r\n      var label;\r\n\r\n      labels.each(function(d, i, j) {\r\n        var series = chart.seriesData.call(this, d, i, j);\r\n        if (d === point.d && series === point.series)\r\n          label = this;\r\n      });\r\n\r\n      return label;\r\n    }\r\n  });\r\n\r\n  var hoverLabels = createHelper('HoverLabels');\n\n  /**\r\n    Bars chart with centered or adjacent display for single or series data.\r\n\r\n    To display bars for different series next to each other (adjacent),\r\n    use the `adjacent` option when creating the `xScale` (see example below).\r\n\r\n    ### Extending\r\n\r\n    To extend the `Bars` chart, the following methods are available:\r\n\r\n    - `barHeight`\r\n    - `barWidth`\r\n    - `barX`\r\n    - `barY`\r\n    - `barClass`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'Bars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class Bars\r\n    @extends Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer\r\n  */\r\n\r\n  var Mixed$1 = mixin(Chart$1, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer);\r\n  var Bars = Mixed$1.extend({\r\n    initialize: function(options) {\r\n      Mixed$1.prototype.initialize.call(this, options);\r\n\r\n      this.on('before:draw', function() {\r\n        this.offset_axis = this.getOffsetAxis();\r\n      }.bind(this));\r\n\r\n      // Use standard series layer for extensibility\r\n      // (dataBind, insert, and events defined in prototype)\r\n      this.standardSeriesLayer('Bars', this.base.append('g').classed('chart-bars', true));\r\n      this.attachLabels();\r\n    },\r\n\r\n    barHeight: di(function(chart, d, i) {\r\n      var height = Math.abs(chart.y0() - chart.y.call(this, d, i)) - chart.barOffset();\r\n      return height > 0 ? height : 0;\r\n    }),\r\n    barWidth: di(function(chart) {\r\n      return chart.itemWidth();\r\n    }),\r\n    barX: di(function(chart, d, i) {\r\n      return chart.x.call(this, d, i) - chart.itemWidth() / 2;\r\n    }),\r\n    barY: di(function(chart, d, i) {\r\n      var y = chart.y.call(this, d, i);\r\n      var y0 = chart.y0();\r\n\r\n      return y < y0 ? y : y0 + chart.barOffset();\r\n    }),\r\n    bar0: di(function(chart, d, i) {\r\n      var y0 = chart.y0();\r\n      var offset = chart.barOffset();\r\n      return chart.y.call(this, d, i) <= y0 ? y0 - offset : y0 + offset;\r\n    }),\r\n    barClass: di(function(chart, d) {\r\n      return 'chart-bar' + (d['class'] ? ' ' + d['class'] : '');\r\n    }),\r\n\r\n    // Shift bars slightly to account for axis thickness\r\n    barOffset: function barOffset() {\r\n      if (this.offset_axis) {\r\n        var axis_thickness = parseInt(this.offset_axis.base.select('.domain').style('stroke-width')) || 0;\r\n        return axis_thickness / 2;\r\n      }\r\n      else {\r\n        return 0;\r\n      }\r\n    },\r\n\r\n    getOffsetAxis: function getOffsetAxis() {\r\n      var components = this.container && this.container.components();\r\n      return objectFind(components, function(component) {\r\n        if (component.type == 'Axis' && component.position() == 'bottom')\r\n          return component;\r\n      });\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('rect')\r\n        .data(data, this.key);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('rect')\r\n        .on('mouseenter', this.mouseEnterPoint)\r\n        .on('mouseleave', this.mouseLeavePoint);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onEnter: function onEnter(selection) {\r\n      selection\r\n        .attr('y', this.bar0)\r\n        .attr('height', 0);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('class', this.barClass)\r\n        .attr('style', this.itemStyle)\r\n        .attr('x', this.barX)\r\n        .attr('width', this.barWidth);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('y', this.barY)\r\n        .attr('height', this.barHeight);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onExitTransition: function onExitTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('y', this.bar0)\r\n        .attr('height', 0)\r\n        .remove();\r\n    }\r\n  });\r\n\r\n  var bars = createHelper('Bars');\n\n  /**\r\n    Bars chart with bars that group from left-to-right\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'HorizontalBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class HorizontalBars\r\n    @extends Bars, XYInverted\r\n  */\r\n  var HorizontalBars = mixin(Bars, XYInverted).extend({\r\n    barX: di(function(chart, d, i) {\r\n      var x = chart.x.call(this, d, i);\r\n      var x0 = chart.x0();\r\n\r\n      return x < x0 ? x : x0 + chart.barOffset();\r\n    }),\r\n    barY: di(function(chart, d, i) {\r\n      return chart.y.call(this, d, i) - chart.itemWidth() / 2;\r\n    }),\r\n    barWidth: di(function(chart, d, i) {\r\n      var width = Math.abs(chart.x0() - chart.x.call(this, d, i)) - chart.barOffset();\r\n      return width > 0 ? width : 0;\r\n    }),\r\n    barHeight: di(function(chart) {\r\n      return chart.itemWidth();\r\n    }),\r\n    bar0: di(function(chart, d, i) {\r\n      var x0 = chart.x0();\r\n      var offset = chart.barOffset();\r\n      return chart.x.call(this, d, i) >= x0 ? x0 + offset : x0 - offset;\r\n    }),\r\n\r\n    getOffsetAxis: function getOffsetAxis() {\r\n      var components = this.container && this.container.components();\r\n      return objectFind(components, function(component) {\r\n        if (component.type == 'Axis' && component.position() == 'left')\r\n          return component;\r\n      });\r\n    },\r\n\r\n    onEnter: function onEnter(selection) {\r\n      selection\r\n        .attr('x', this.bar0)\r\n        .attr('width', 0);\r\n    },\r\n\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('class', this.barClass)\r\n        .attr('style', this.itemStyle)\r\n        .attr('y', this.barY)\r\n        .attr('height', this.barHeight);\r\n    },\r\n\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('x', this.barX)\r\n        .attr('width', this.barWidth);\r\n    },\r\n\r\n    onExitTransition: function onExitTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('x', this.bar0)\r\n        .attr('width', 0)\r\n        .remove();\r\n    }\r\n  });\r\n\r\n  var horizontalBars = createHelper('HorizontalBars');\n\n  /**\r\n    Bars chart with values stacked on top of each other\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          stacked_output: {\r\n            type: 'StackedBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class StackedBars\r\n    @extends Bars\r\n  */\r\n  var StackedBars = Bars.extend({\r\n    transform: function(data) {\r\n      data = Bars.prototype.transform.call(this, data);\r\n\r\n      var grouped = {};\r\n      var x_key = this.xKey();\r\n      var y_key = this.yKey();\r\n      data = data.map(function(series) {\r\n        series = extend({}, series);\r\n        series.values = series.values.map(function(value) {\r\n          value = extend({}, value);\r\n          var x = value[x_key];\r\n          var y = value.__original_y = value[y_key];\r\n\r\n          if (!grouped[x])\r\n            grouped[x] = {pos: 0, neg: 0};\r\n\r\n          if (y >= 0) {\r\n            value.__previous = grouped[x].pos;\r\n            grouped[x].pos = value[y_key] = grouped[x].pos + y;\r\n          }\r\n          else {\r\n            value.__previous = grouped[x].neg;\r\n            grouped[x].neg = value[y_key] = grouped[x].neg + y;\r\n          }\r\n\r\n          return value;\r\n        }, this);\r\n\r\n        return series;\r\n      }, this);\r\n\r\n      return data;\r\n    },\r\n\r\n    barHeight: di(function(chart, d, i) {\r\n      var height = Math.abs(chart.yScale()(d.__previous) - chart.y.call(this, d, i));\r\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n      return height > 0 ? height - offset : 0;\r\n    })\r\n  });\r\n\r\n  var stackedBars = createHelper('StackedBars');\n\n  /**\r\n    Horizontal Stacked Bars\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'HorizontalStackedBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class HorizontalStackedBars\r\n    @extends HorizontalBars\r\n  */\r\n  var HorizontalStackedBars = HorizontalBars.extend({\r\n    transform: function(data) {\r\n      data = StackedBars.prototype.transform.call(this, data);\r\n      data = HorizontalBars.prototype.transform.call(this, data);\r\n      return data;\r\n    },\r\n\r\n    barWidth: di(function(chart, d, i) {\r\n      var width = Math.abs(chart.yScale()(d.__previous) - chart.x.call(this, d, i));\r\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n      return width > 0 ? width - offset : 0;\r\n    }),\r\n    barX: di(function(chart, d, i) {\r\n      var x = chart.x.call(this, d, i);\r\n      var x0 = chart.yScale()(d.__previous);\r\n\r\n      return x < x0 ? x : x0 + chart.barOffset();\r\n    })\r\n  });\r\n\r\n  var horizontalStackedBars = createHelper('HorizontalStackedBars');\n\n  /**\r\n    Create an XY Lines chart with single or series data.\r\n\r\n    ### Extending\r\n\r\n    Great care has been taken in making the standard charts in d3.compose extensible.\r\n    To extend the `Lines` chart, the following methods are available:\r\n\r\n    - `createLine`\r\n    - `lineKey`\r\n    - `lineData`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    View the `Lines.js` source for the default implementation and more information on these methods.\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      return {\r\n        charts: {\r\n          input: {\r\n            type: 'Lines'\r\n            data: data.input,\r\n            // xScale: ...,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([1, 2, 3]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\r\n      {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\r\n    ]);\r\n    ```\r\n    @class Lines\r\n    @extends Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer\r\n  */\r\n  var Mixed = mixin(Chart$1, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer);\r\n  var Lines = Mixed.extend({\r\n    initialize: function(options) {\r\n      Mixed.prototype.initialize.call(this, options);\r\n\r\n      this.lines = {};\r\n\r\n      // Use standard series layer for extensibility\r\n      // (dataBind, insert, and events defined in prototype)\r\n      this.standardSeriesLayer('Lines', this.base.append('g').classed('chart-lines', true));\r\n\r\n      this.attachLabels();\r\n    },\r\n\r\n    /**\r\n      Set interpolation mode for line\r\n\r\n      - See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\r\n      - Set to `null` or `'linear'` for no interpolation\r\n\r\n      @property interpolate\r\n      @type String\r\n      @default monotone\r\n    */\r\n    interpolate: property({\r\n      default_value: 'monotone'\r\n    }),\r\n\r\n    // Create line on insert (keyed by series/index)\r\n    createLine: di(function(chart, d, i, j) {\r\n      var key = chart.lineKey.call(this, d, i, j);\r\n      var line = chart.lines[key] = d3.svg.line()\r\n        .x(chart.x)\r\n        .y(chart.y);\r\n\r\n      var interpolate = d.interpolate || chart.interpolate();\r\n      if (interpolate)\r\n        line.interpolate(interpolate);\r\n    }),\r\n\r\n    // Get key for line (from series key or index)\r\n    lineKey: di(function(chart, d, i, j) {\r\n      var key = chart.seriesKey(chart.seriesData.call(this, d, i, j));\r\n      return key != null ? key : chart.seriesIndex.call(this, d, i, j);\r\n    }),\r\n\r\n    // Get data for line\r\n    lineData: di(function(chart, d, i, j) {\r\n      var key = chart.lineKey.call(this, d, i, j);\r\n      if (chart.lines[key])\r\n        return chart.lines[key](d);\r\n    }),\r\n\r\n    // Override StandardLayer\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('path')\r\n        .data(function(d, i, j) {\r\n          return [data.call(selection, d, i, j)];\r\n        });\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('path')\r\n        .classed('chart-line', true)\r\n        .each(this.createLine);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('d', this.lineData)\r\n        .attr('style', this.itemStyle);\r\n    }\r\n  });\r\n\r\n  var lines = createHelper('Lines');\n\n  /*\n    Extract layout from the given options\n\n    @param {Array} options\n    @return {Object} {data, items, layout}\n  */\n  function extractLayout(options) {\n    if (!options)\n      return;\n\n    var data = {\n      _charts: {},\n      _components: {}\n    };\n    var items = {};\n    var layout = [];\n    var charts = [];\n    var components = [];\n\n    // TEMP Idenfify charts from layered,\n    // eventually no distinction between charts and components\n    var found = {\n      row: false,\n      charts: false\n    };\n\n    // Components are added from inside-out\n    // so for position: top, position: left, use unshift\n    options.forEach(function(row, row_index) {\n      var row_components = [];\n\n      if (!Array.isArray(row))\n        row = [row];\n      if (row.length > 1)\n        found.row = true;\n\n      var row_layout = row.map(function(item, col_index) {\n        if (!item)\n          return;\n\n        if (item._layered) {\n          // Charts\n          found.charts = found.row = true;\n          var chart_ids = [];\n\n          item.items.forEach(function(chart, chart_index) {\n            if (!chart)\n              return;\n\n            chart = defaults({}, chart, {id: getId(row_index, col_index, chart_index)});\n\n            chart_ids.push(chart.id);\n            charts.push(chart);\n            items[chart.id] = chart;\n          });\n\n          return chart_ids;\n        }\n\n        var component = prepareComponent(item, row_index, col_index);\n        items[component.id] = component;\n\n        if (row.length > 1) {\n          if (!found.charts) {\n            // Left\n            setPosition(component, 'left');\n            row_components.unshift(component);\n          }\n          else {\n            // Right\n            setPosition(component, 'right');\n            row_components.push(component);\n          }\n        }\n        else {\n          if (!found.row) {\n            // Top\n            setPosition(component, 'top');\n            components.unshift(component);\n          }\n          else {\n            // Bottom\n            setPosition(component, 'bottom');\n            components.push(component);\n          }\n        }\n\n        return component.id;\n      });\n\n      if (row_components.length)\n        components = components.concat(row_components);\n\n      layout.push(row_layout);\n    });\n\n    charts.forEach(extractData('_charts'));\n    components.forEach(extractData('_components'));\n\n    return {\n      data: data,\n      items: items,\n      layout: layout,\n\n      charts: charts,\n      components: components\n    };\n\n    function prepareComponent(component, row_index, col_index) {\n      return defaults({}, component, {id: getId(row_index, col_index)});\n    }\n    function setPosition(component, position) {\n      if (component && isFunction(component.position))\n        component.position(position);\n      else\n        component.position = position;\n    }\n    function getId(row_index, col_index, layered_index) {\n      var id = 'item-' + (row_index + 1) + '-' + (col_index + 1);\n      if (layered_index != null)\n        id += '-' + (layered_index + 1);\n\n      return id;\n    }\n\n    function extractData(type) {\n      return function(item) {\n        if (item.data && !isFunction(item.data)) {\n          data[type][item.id] = item.data;\n          data[item.id] = item.data;\n          delete item.data;\n        }\n      };\n    }\n  }\n\n  /*\n    Calculate component and chart coordinates for given layout\n  */\n  function calculateLayout(components, data, demux) {\n    var overall_layout = {top: [], right: [], bottom: [], left: []};\n    components.forEach(function(component) {\n      if (component.skip_layout || !component.getLayout)\n        return;\n\n      var layout = component.getLayout(demux(component.id, data));\n      var position = layout && layout.position;\n\n      if (!contains(['top', 'right', 'bottom', 'left'], position))\n        return;\n\n      overall_layout[position].push({\n        offset: position == 'top' || position == 'bottom' ? layout.height : layout.width,\n        component: component\n      });\n    });\n\n    return overall_layout;\n  }\n\n  /*\n    Apply calculated layout to charts and components\n  */\n  function applyLayout(layout, chart_position, width, height) {\n    layout.top.reduce(function(previous, part) {\n      var y = previous - part.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, chart_position.top);\n\n    layout.right.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var x = previous + previousPart.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, width - chart_position.right);\n\n    layout.bottom.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var y = previous + previousPart.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, height - chart_position.bottom);\n\n    layout.left.reduce(function(previous, part) {\n      var x = previous - part.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, chart_position.left);\n\n    function setLayout(component, x, y, options) {\n      if (component && isFunction(component.setLayout))\n        component.setLayout(x, y, options);\n    }\n  }\n\n  /**\r\n    Common base for creating overlays that includes helpers for positioning and show/hide.\r\n\r\n    ### Extending\r\n\r\n    Create an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust positioning, override `position`\r\n    - To adjust show/hide behavior, override `show`/`hide`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Overlay').extend('ClosestPoints', {\r\n      // TODO\r\n    });\r\n    ```\r\n    @class Overlay\r\n    @extends Component\r\n  */\r\n  var Overlay = Component.extend({\r\n    initialize: function(options) {\r\n      Component.prototype.initialize.call(this, options);\r\n      this.base.attr('style', this.style());\r\n    },\r\n    skip_layout: true,\r\n\r\n    /**\r\n      Overlay's top-left x-position in px from left\r\n\r\n      @property x\r\n      @type Number\r\n      @default 0\r\n    */\r\n    x: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Overlay's top-left y-position in px from top\r\n\r\n      @property y\r\n      @type Number\r\n      @default 0\r\n    */\r\n    y: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Whether overlay is currently hidden\r\n\r\n      @property hidden\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    hidden: property({\r\n      default_value: true\r\n    }),\r\n\r\n    /**\r\n      Overlays base styling\r\n      (default includes position and hidden)\r\n\r\n      @property style\r\n      @type String\r\n      @default set from x, y, and hidden\r\n    */\r\n    style: property({\r\n      default_value: function() {\r\n        var transform = translate(this.x() + 'px', this.y() + 'px');\r\n        var styles = {\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          '-webkit-transform': transform,\r\n          '-ms-transform': transform,\r\n          transform: transform\r\n        };\r\n\r\n        if (this.hidden())\r\n          styles.display = 'none';\r\n\r\n        return style(styles);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Position overlay layer at given x,y coordinates\r\n\r\n      @example\r\n      ```js\r\n      // Absolute, x: 100, y: 50\r\n      overlay.position(100, 50);\r\n      overlay.position({x: 100, y: 50});\r\n\r\n      // Relative-to-chart, x: 50, y: 40\r\n      overlay.position({chart: {x: 50, y: 40}});\r\n\r\n      // Relative-to-container, x: 75, y: 50\r\n      overlay.position({container: {x: 75, y: 50}});\r\n      ```\r\n      @method position\r\n      @param {Object|Number} position {x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left\r\n      @param {Number} [y] in px from top\r\n    */\r\n    // TODO This conflicts with component.position(), might need a rename\r\n    position: function(position, y) {\r\n      if (arguments.length > 1) {\r\n        position = {\r\n          x: position,\r\n          y: y\r\n        };\r\n      }\r\n      else {\r\n        if ('container' in position) {\r\n          position = this.getAbsolutePosition(position.container);\r\n        }\r\n        else if ('chart' in position) {\r\n          if (this.container) {\r\n            var chart = this.container.chartPosition();\r\n            position = this.getAbsolutePosition({\r\n              x: position.chart.x + chart.left,\r\n              y: position.chart.y + chart.top\r\n            });\r\n          }\r\n          else {\r\n            position = this.getAbsolutePosition(position.chart);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.x(position.x).y(position.y);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Show overlay (with `display: block`)\r\n\r\n      @method show\r\n    */\r\n    show: function() {\r\n      this.hidden(false);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Hide overlay (with `display: none`)\r\n\r\n      @method hide\r\n    */\r\n    hide: function() {\r\n      this.hidden(true);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Get absolute position from container position\r\n      (needed since container position uses viewBox and needs to be scaled to absolute position)\r\n\r\n      @method getAbsolutePosition\r\n      @param {Object} container_position ({x, y})\r\n      @return {Object} absolute {x, y} relative to container div\r\n    */\r\n    getAbsolutePosition: function(container_position) {\r\n      var container = this.container && this.container.container;\r\n\r\n      if (container && this.container.responsive()) {\r\n        var container_dimensions = dimensions(container);\r\n        var chart_width = this.container.width();\r\n        var chart_height = this.container.height();\r\n        var width_ratio = container_dimensions.width / chart_width;\r\n        var height_ratio = container_dimensions.height / chart_height;\r\n\r\n        return {\r\n          x: width_ratio * container_position.x,\r\n          y: height_ratio * container_position.y\r\n        };\r\n      }\r\n      else {\r\n        // Not attached so can't get actual dimensions\r\n        // fallback to container position\r\n        return container_position;\r\n      }\r\n    }\r\n  }, {\r\n    layer_type: 'overlay'\r\n  });\n\n  var default_compose_margins = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n  /**\r\n    Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\r\n    Using the `options` property, charts and components can be bound to data and customized to create dynamic charts.\r\n\r\n    @example\r\n    ```html\r\n    <div id=\"#chart\"></div>\r\n    ```\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Process data...\r\n\r\n      // Create shared scales\r\n      var scales = {\r\n        x: {data: data.input, key: 'x', adjacent: true},\r\n        y: {data: data.input, key: 'y'},\r\n        y2: {data: data.output, key: 'y'}\r\n      };\r\n\r\n      // Setup charts and components\r\n      var charts = [\r\n        d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\r\n        d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\r\n      ];\r\n\r\n      var title = d3c.title('d3.compose');\r\n      var xAxis = d3c.axis('xAxis', {scale: scales.x});\r\n      var yAxis = d3c.axis('yAxis', {scale: scales.y});\r\n      var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\r\n\r\n      // Layout charts and components\r\n      return [\r\n        title,\r\n        [yAxis, d3c.layered(charts), y2Axis],\r\n        xAxis\r\n      ];;\r\n    });\r\n\r\n    chart.draw({input: [...], output: [...]});\r\n    ```\r\n    @class Compose\r\n    @extends Base\r\n  */\r\n  var Compose = Base.extend({\r\n    initialize: function(options) {\r\n      Base.prototype.initialize.call(this, options);\r\n\r\n      // Responsive svg based on the following approach (embedded + padding hack)\r\n      // http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/\r\n      // (not enabled if selection is svg)\r\n      if (this.base.node().tagName != 'svg') {\r\n        this.container = this.base.append('div')\r\n          .attr('class', 'chart-compose-container');\r\n\r\n        this.base = this.container.append('svg')\r\n          .attr('xlmns', 'http://www.w3.org/2000/svg')\r\n          .attr('version', '1.1')\r\n          .attr('class', 'chart-compose');\r\n      }\r\n      else {\r\n        this.base.classed('chart-compose', true);\r\n      }\r\n\r\n      this.attachHoverListeners();\r\n    },\r\n\r\n    transform: function(data) {\r\n      // Save raw data for redraw\r\n      this.rawData(data);\r\n      return Base.prototype.transform.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Get/set the options `object/function` for the chart that takes `data` and\r\n      returns `[...layout]` for composing child charts and components.\r\n\r\n      @example\r\n      ```js\r\n      // get\r\n      chart.options();\r\n\r\n      // set (static)\r\n      chart.options([\r\n        // ...\r\n      ]);\r\n\r\n      // set (dynamic, takes data and returns options)\r\n      chart.options(function(data) {\r\n        // process data...\r\n\r\n        return [\r\n          // ...\r\n        ];\r\n      });\r\n\r\n      // Set directly from d3.chart creation\r\n      d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n      ```\r\n      @property options\r\n      @type Function|Object\r\n    */\r\n    options: property({\r\n      default_value: function() { return function() {}; },\r\n      set: function(options) {\r\n        // If options is plain object,\r\n        // return from generic options function\r\n        if (!isFunction(options)) {\r\n          return {\r\n            override: function() {\r\n              return options;\r\n            }\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Store raw data for container before it has been transformed\r\n    rawData: property(),\r\n\r\n    /**\r\n      Margins between edge of container and components/chart\r\n\r\n      @example\r\n      ```js\r\n      chart.margins({top: 10, right: 20, bottom: 10, left: 20});\r\n      ```\r\n      @property margins\r\n      @type Object {top, right, bottom, left}\r\n      @default {top: 10, right: 10, bottom: 10, left: 10}\r\n    */\r\n    margins: property({\r\n      default_value: default_compose_margins,\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values, default_compose_margins)\r\n        };\r\n      }\r\n    }),\r\n\r\n    // Chart position\r\n    chartPosition: property({\r\n      default_value: {top: 0, right: 0, bottom: 0, left: 0},\r\n      set: function(values) {\r\n        return {\r\n          override: defaults({}, values, {top: 0, right: 0, bottom: 0, left: 0})\r\n        };\r\n      },\r\n      get: function(values) {\r\n        values.width = this._width() - values.right - values.left;\r\n        values.height = this._height() - values.bottom - values.top;\r\n\r\n        return values;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set overall width of chart\r\n\r\n      @property width\r\n      @type Number\r\n    */\r\n    width: property({\r\n      default_value: null\r\n    }),\r\n\r\n    /**\r\n      Get/set overall height of chart\r\n\r\n      @property height\r\n      @type Number\r\n    */\r\n    height: property({\r\n      default_value: null\r\n    }),\r\n\r\n    _width: function() {\r\n      var width = this.width();\r\n      return width != null ? width : Base.prototype.width.call(this);\r\n    },\r\n    _height: function() {\r\n      var height = this.height();\r\n      return height != null ? height : Base.prototype.height.call(this);\r\n    },\r\n\r\n    /**\r\n      Enable responsive container + viewBox so that chart scales to fill width\r\n      (only works if selection is not an svg)\r\n\r\n      @property responsive\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    responsive: property({\r\n      default_value: true\r\n    }),\r\n\r\n    // Set svg viewBox attribute\r\n    viewBox: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.width() && this.height())\r\n          return '0 0 ' + this.width() + ' ' + this.height();\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set svg preserveAspectRatio attribute\r\n    preserveAspectRatio: property({\r\n      default_value: function() {\r\n        if (this.responsive())\r\n          return 'xMidYMid meet';\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set container style\r\n    containerStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive()) {\r\n          var aspect_ratio = 1;\r\n          if (this.width() && this.height())\r\n            aspect_ratio = this.height() / this.width();\r\n\r\n          return style({\r\n            width: '100%',\r\n            height: 0,\r\n            'padding-top': (aspect_ratio * 100) + '%',\r\n            position: 'relative'\r\n          });\r\n        }\r\n        else {\r\n          return style({position: 'relative'});\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Set base style\r\n    baseStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.container) {\r\n          return style({\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0\r\n          });\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Set charts from options or get chart instances.\r\n      Each chart should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the chart.\r\n\r\n      @example\r\n      ```js\r\n      chart.charts([\r\n        {id: 'input', type: 'Bars'}, // options to pass to Bars chart\r\n        {id: 'output', type: 'Lines'} // options to pass to Lines chart\r\n      ]);\r\n      ```\r\n      @property charts\r\n      @type Array\r\n    */\r\n    charts: property({\r\n      set: function(chart_options, charts) {\r\n        // Store actual charts rather than options\r\n        return {\r\n          override: this._attachItems(chart_options, charts, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Set components from options or get components instances.\r\n      Each component should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the component.\r\n\r\n      @example\r\n      ```js\r\n      chart.components([\r\n        {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\r\n        {id: 'title', type: 'Title'} // options to pass to Title component\r\n      ])\r\n      ```\r\n      @property components\r\n      @type Array\r\n    */\r\n    components: property({\r\n      set: function(component_options, components) {\r\n        // Store actual components rather than options\r\n        return {\r\n          override: this._attachItems(component_options, components, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Delay start of transition by specified milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property delay\r\n      @type Number|Function\r\n      @default d3 default: 0\r\n    */\r\n    delay: property(),\r\n\r\n    /**\r\n      Transition duration in milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property duration\r\n      @type Number|Function\r\n      @default d3 default: 250ms\r\n    */\r\n    duration: property(),\r\n\r\n    /**\r\n      Transition ease function.\r\n      (applied to all charts and components as default)\r\n\r\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\r\n      - Note: arguments to pass to `d3.ease` are not supported\r\n\r\n      @property ease\r\n      @type String|Function\r\n      @default d3 default: 'cubic-in-out'\r\n    */\r\n    ease: property(),\r\n\r\n    /**\r\n      Draw chart with given data\r\n\r\n      @example\r\n      ```js\r\n      var chart = d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n\r\n      chart.draw([1, 2, 3]);\r\n\r\n      chart.draw({values: [1, 2, 3]});\r\n\r\n      chart.draw([\r\n        {values: [1, 2, 3]},\r\n        {values: [4, 5, 6]}\r\n      ]);\r\n      ```\r\n      @method draw\r\n      @param {Any} data\r\n    */\r\n    draw: function(data) {\r\n      var config = this._prepareConfig(this.options(), data);\r\n      if (!config)\r\n        config = {data: {_charts: {}, _components: {}}, layout: [], charts: [], components: []};\r\n\r\n      // Set charts and components from config\r\n      this.charts(config.charts);\r\n      this.components(config.components);\r\n\r\n      // Add config data\r\n      data = {\r\n        original: data,\r\n        config: config.data\r\n      };\r\n      this.data(data);\r\n\r\n      this._setDimensions();\r\n\r\n      // Layout components\r\n      this.layout(config.layout, data);\r\n\r\n      // Full draw now that everything has been laid out\r\n      d3.chart().prototype.draw.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Redraw chart with current data\r\n\r\n      @method redraw\r\n    */\r\n    redraw: function() {\r\n      if (this.rawData())\r\n        this.draw(this.rawData().original);\r\n    },\r\n\r\n    demux: function(name, data) {\r\n      if (!data || !data.config || !data.original)\r\n        return data;\r\n\r\n      if (findById(this.charts(), name) && data.config._charts[name])\r\n        return data.config._charts[name];\r\n      else if (findById(this.components(), name) && data.config._components[name])\r\n        return data.config._components[name];\r\n      else\r\n        return data.original;\r\n    },\r\n\r\n    // Create chart layer (for laying out charts)\r\n    createChartLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create component layer\r\n    createComponentLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-component-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create overlay layer\r\n    createOverlayLayer: function() {\r\n      if (!this.container)\r\n        throw new Error('Cannot create overlay layer if original selection \"d3.select(...).chart(\\'Compose\\')\" is an svg. Use a div instead for responsive and overlay support.');\r\n\r\n      return this.container.append('div')\r\n        .attr('class', 'chart-overlay-layer');\r\n    },\r\n\r\n    // Layout components and charts for given data\r\n    layout: function(layout, data) {\r\n      // 1. Place chart layers\r\n      this._positionChartLayers();\r\n\r\n      // 2. Extract layout from components\r\n      layout = this._extractLayout(data);\r\n\r\n      // 3. Set chart position from layout\r\n      var chart_position = extend({}, this.margins());\r\n      objectEach(layout, function(parts, key) {\r\n        parts.forEach(function(part) {\r\n          chart_position[key] += part.offset || 0;\r\n        });\r\n      });\r\n      this.chartPosition(chart_position);\r\n\r\n      // 4. Position layers with layout\r\n      this.positionLayers(layout);\r\n    },\r\n\r\n    attachHoverListeners: function() {\r\n      // For responsive, listen on container div and calculate enter/exit for base from bounding rectangle\r\n      // For non-responsive, bounding rectangle is container so calculations still apply\r\n\r\n      var trigger = this.trigger.bind(this);\r\n      var chartPosition = this.chartPosition.bind(this);\r\n      var container = this.container || this.base;\r\n      var base = this.base.node();\r\n      var chart_position, bounds, was_inside;\r\n\r\n      container.on('mouseenter', function() {\r\n        // Calculate chart position and bounds on enter and cache during move\r\n        chart_position = chartPosition();\r\n        bounds = getBounds();\r\n\r\n        was_inside = inside(bounds);\r\n        if (was_inside)\r\n          enter();\r\n      });\r\n      container.on('mousemove', function() {\r\n        // Mousemove may fire before mouseenter in IE\r\n        if (!chart_position || !bounds) {\r\n          chart_position = chartPosition();\r\n          bounds = getBounds();\r\n        }\r\n\r\n        var is_inside = inside(bounds);\r\n        if (was_inside && is_inside)\r\n          move();\r\n        else if (was_inside)\r\n          leave();\r\n        else if (is_inside)\r\n          enter();\r\n\r\n        was_inside = is_inside;\r\n      });\r\n      container.on('mouseleave', function() {\r\n        if (was_inside) {\r\n          was_inside = false;\r\n          leave();\r\n        }\r\n      });\r\n\r\n      function inside() {\r\n        var mouse = d3.mouse(document.documentElement);\r\n        return mouse[0] >= bounds.left && mouse[0] <= bounds.right && mouse[1] >= bounds.top && mouse[1] <= bounds.bottom;\r\n      }\r\n      function enter() {\r\n        trigger('mouseenter', translateToXY(d3.mouse(base)));\r\n      }\r\n      function move() {\r\n        trigger('mousemove', translateToXY(d3.mouse(base)));\r\n      }\r\n      function leave() {\r\n        trigger('mouseleave');\r\n      }\r\n\r\n      function translateToXY(coordinates) {\r\n        var x = coordinates[0];\r\n        var y = coordinates[1];\r\n        var chart_x = x - chart_position.left;\r\n        var chart_y = y - chart_position.top;\r\n\r\n        // Set at chart bounds if outside of chart\r\n        if (x > (chart_position.left + chart_position.width))\r\n          chart_x = chart_position.width;\r\n        else if (x < chart_position.left)\r\n          chart_x = 0;\r\n\r\n        if (y > (chart_position.top + chart_position.height))\r\n          chart_y = chart_position.height;\r\n        else if (y < chart_position.top)\r\n          chart_y = 0;\r\n\r\n        return {\r\n          container: {x: x, y: y},\r\n          chart: {x: chart_x, y: chart_y}\r\n        };\r\n      }\r\n\r\n      function getBounds() {\r\n        var scroll_y = 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;\r\n\r\n        bounds = extend({}, base.getBoundingClientRect());\r\n        bounds.top += scroll_y;\r\n        bounds.bottom += scroll_y;\r\n\r\n        return bounds;\r\n      }\r\n    },\r\n\r\n    // Attach chart/component child item with id\r\n    attach: function(id, item) {\r\n      item.id = id;\r\n      item.base.attr('data-id', id);\r\n      item.container = this;\r\n\r\n      Base.prototype.attach.call(this, id, item);\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('attach');\r\n    },\r\n\r\n    // Detach chart/component child item by id\r\n    detach: function(id, item) {\r\n      item.base.remove();\r\n\r\n      delete this._attached[id];\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('detach');\r\n    },\r\n\r\n    // Position chart and component layers\r\n    positionLayers: function(layout) {\r\n      this._positionChartLayers();\r\n      this._positionComponents(layout);\r\n      this._positionByZIndex();\r\n    },\r\n\r\n    //\r\n    // Internal\r\n    //\r\n\r\n    _setDimensions: function() {\r\n      // Set container and svg dimensions\r\n      // (if original selection is svg, no container and skip responsiveness)\r\n      if (this.container) {\r\n        this.container\r\n          .attr('style', this.containerStyle());\r\n      }\r\n\r\n      this.base\r\n        .attr('viewBox', this.viewBox())\r\n        .attr('preserveAspectRatio', this.preserveAspectRatio())\r\n        .attr('style', this.baseStyle())\r\n        .attr('width', this.responsive() ? null : this.width())\r\n        .attr('height', this.responsive() ? null : this.height());\r\n    },\r\n\r\n    _attachItems: function(items, container, context) {\r\n      items = items || [];\r\n      container = container || [];\r\n\r\n      // Remove charts that are no longer needed\r\n      var remove_ids = difference(pluck(container, 'id'), pluck(items, 'id'));\r\n      remove_ids.forEach(function(remove_id) {\r\n        context.detach(remove_id, findById(container, remove_id));\r\n      });\r\n\r\n      // Create or update charts\r\n      return items.map(function(options) {\r\n        // TODO May not have id, might need to auto-generate\r\n        // (might be during another step)\r\n        var id = options.id;\r\n        var item = findById(container, id);\r\n\r\n        if (options instanceof d3.chart()) {\r\n          // If chart instance, replace with instance\r\n          if (item)\r\n            context.detach(id, item);\r\n\r\n          context.attach(id, options);\r\n          return options;\r\n        }\r\n        else {\r\n          // TEMP Changing position has nasty side effects, disable for now\r\n          var changed_position = item && !(item instanceof Overlay) && item.position && options.position && item.position() != options.position;\r\n\r\n          if (item && (item.type != options.type || changed_position)) {\r\n            // If chart type has changed, detach and re-create\r\n            context.detach(id, item);\r\n            item = undefined;\r\n          }\r\n\r\n          if (!item) {\r\n            var Item = d3.chart(options.type);\r\n\r\n            if (!Item)\r\n              throw new Error('No registered d3.chart found for ' + options.type);\r\n\r\n            var layer_options = {z_index: Item.z_index || 0};\r\n            var createLayer = {\r\n              'chart': 'createChartLayer',\r\n              'component': 'createComponentLayer',\r\n              'overlay': 'createOverlayLayer'\r\n            }[Item.layer_type];\r\n\r\n            if (!createLayer)\r\n              throw new Error('Unrecognized layer type \"' + Item.layer_type + '\" for ' + options.type);\r\n\r\n            var base = context[createLayer](layer_options);\r\n\r\n            item = new Item(base, options);\r\n            item.type = options.type;\r\n\r\n            context.attach(id, item);\r\n          }\r\n          else {\r\n            item.options(options);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      });\r\n    },\r\n\r\n    _prepareConfig: function(options, data) {\r\n      return extractLayout(options(data));\r\n    },\r\n\r\n    _positionChartLayers: function() {\r\n      var position = this.chartPosition();\r\n      this.base.selectAll('.chart-layer')\r\n        .attr('transform', translate(position.left, position.top))\r\n        .attr('width', position.width)\r\n        .attr('height', position.height);\r\n    },\r\n\r\n    _positionComponents: function(layout) {\r\n      var chart_position = this.chartPosition();\r\n      var width = this._width();\r\n      var height = this._height();\r\n\r\n      applyLayout(layout, chart_position, width, height);\r\n    },\r\n\r\n    _positionByZIndex: function() {\r\n      var layers = this.base.selectAll('.chart-layer, .chart-component-layer')[0];\r\n\r\n      // Sort by z-index\r\n      function setZIndex(layer) {\r\n        return {\r\n          layer: layer,\r\n          zIndex: parseInt(d3.select(layer).attr('data-zIndex')) || 0\r\n        };\r\n      }\r\n      function sortZIndex(a, b) {\r\n        if (a.zIndex < b.zIndex)\r\n          return -1;\r\n        else if (a.zIndex > b.zIndex)\r\n          return 1;\r\n        else\r\n          return 0;\r\n      }\r\n      function getLayer(wrapped) {\r\n        return wrapped.layer;\r\n      }\r\n\r\n      layers = layers.map(setZIndex).sort(sortZIndex).map(getLayer);\r\n\r\n      // Move layers to z-index order\r\n      layers.forEach(function(layer) {\r\n        if (layer && layer.parentNode && layer.parentNode.appendChild)\r\n          layer.parentNode.appendChild(layer);\r\n      });\r\n    },\r\n\r\n    _extractLayout: function(data) {\r\n      return calculateLayout(this.components(), data, this.demux.bind(this));\r\n    }\r\n  });\r\n\r\n  // TODO Find better place for this\r\n  function layered(items) {\r\n    if (!Array.isArray(items))\r\n      items = Array.prototype.slice.call(arguments);\r\n\r\n    return {_layered: true, items: items};\r\n  }\r\n\r\n  function findById(items, id) {\r\n    return find(items, function(item) {\r\n      return item.id == id;\r\n    });\r\n  }\n\n  // Export charts/components to d3.chart\r\n  utils.extend(d3.chart(), {\r\n    Base: Base,\r\n    Chart: Chart$1,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose,\r\n    Lines: Lines,\r\n    Bars: Bars,\r\n    StackedBars: StackedBars,\r\n    HorizontalBars: HorizontalBars,\r\n    HorizontalStackedBars: HorizontalStackedBars,\r\n    Labels: Labels,\r\n    HoverLabels: HoverLabels,\r\n    Text: Text,\r\n    Title: Title,\r\n    Axis: Axis,\r\n    AxisTitle: AxisTitle,\r\n    Legend: Legend,\r\n    InsetLegend: InsetLegend,\r\n    Gridlines: Gridlines\r\n  });\r\n\r\n  var d3c = d3.compose = {\r\n    VERSION: '0.15.10',\r\n    utils: utils,\r\n    helpers: helpers,\r\n    Base: Base,\r\n    Chart: Chart$1,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose,\r\n    layered: layered,\r\n\r\n    mixins: mixins,\r\n\r\n    Lines: Lines,\r\n    lines: lines,\r\n    Bars: Bars,\r\n    bars: bars,\r\n    StackedBars: StackedBars,\r\n    stackedBars: stackedBars,\r\n    HorizontalBars: HorizontalBars,\r\n    horizontalBars: horizontalBars,\r\n    HorizontalStackedBars: HorizontalStackedBars,\r\n    horizontalStackedBars: horizontalStackedBars,\r\n    Labels: Labels,\r\n    labels: labels,\r\n    HoverLabels: HoverLabels,\r\n    hoverLabels: hoverLabels,\r\n\r\n    Text: Text,\r\n    text: text,\r\n    Title: Title,\r\n    title: title,\r\n    Axis: Axis,\r\n    axis: axis,\r\n    AxisTitle: AxisTitle,\r\n    axisTitle: axisTitle,\r\n    Legend: Legend,\r\n    legend: legend,\r\n    InsetLegend: InsetLegend,\r\n    insetLegend: insetLegend,\r\n    Gridlines: Gridlines,\r\n    gridlines: gridlines\r\n  };\n\n  return d3c;\n\n}));","/**\n  Mixin to create standard layer to make extending charts straightforward.\n\n  @example\n  ```js\n  d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n    initialize: function() {\n      this.standardLayer('main', this.base.append('g'))\n      // dataBind, insert, events are defined on prototype\n    },\n\n    onDataBind: function(selection, data) {\n      // ...\n    },\n    onInsert: function(selection) {\n      // ...\n    },\n    onEnter: function(selection) {\n      // ...\n    },\n    onUpdateTransition: function(selection) {\n      // ...\n    },\n    // all d3.chart events are available: onMerge, onExit, ...\n  }));\n  ```\n  @class StandardLayer\n  @namespace mixins\n*/\nvar StandardLayer = {\n  /**\n    extension of `layer()` that uses standard methods on prototype for extensibility.\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n      initialize: function() {\n        this.standardLayer('circles', this.base.append('g'));\n      }\n\n      // onDataBind, onInsert, etc. work with \"circles\" layer\n    }));\n    ```\n    @method standardLayer\n    @param {String} name\n    @param {d3.selection} selection\n  */\n  standardLayer: function standardLayer(name, selection) {\n    return createLayer(this, 'layer', name, selection);\n  },\n\n  /**\n    extension of `seriesLayer()` that uses standard methods on prototype for extensibility.\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n      initialize: function() {\n        this.standardSeriesLayer('circles', this.base.append('g'));\n      },\n\n      // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n    }));\n    ```\n    @method standardSeriesLayer\n    @param {String} name\n    @param {d3.selection} selection\n  */\n  standardSeriesLayer: function standardSeriesLayer(name, selection) {\n    return createLayer(this, 'series', name, selection);\n  },\n\n  /**\n    Called for standard layer's `dataBind`\n\n    @method onDataBind\n    @param {d3.selection} selection\n    @param {Any} data\n    @return {d3.selection}\n  */\n  onDataBind: function onDataBind(/* selection, data */) {},\n\n  /**\n    Called for standard layer's `insert`\n\n    @method onInsert\n    @param {d3.selection} selection\n    @return {d3.selection}\n  */\n  onInsert: function onInsert(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['enter']`\n\n    @method onEnter\n    @param {d3.selection} selection\n  */\n  onEnter: function onEnter(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['enter:transition']`\n\n    @method onEnterTransition\n    @param {d3.selection} selection\n  */\n  // onEnterTransition: function onEnterTransition(selection) {},\n\n  /**\n    Call for standard layer's `events['update']`\n\n    @method onUpdate\n    @param {d3.selection} selection\n  */\n  onUpdate: function onUpdate(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['update']`\n\n    @method onUpdateTransition\n    @param {d3.selection} selection\n  */\n  // onUpdateTransition: function onUpdateTransition(selection) {},\n\n  /**\n    Call for standard layer's `events['merge']`\n\n    @method onMerge\n    @param {d3.selection} selection\n  */\n  onMerge: function onMerge(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['merge:transition']`\n\n    @method onMergeTransition\n    @param {d3.selection} selection\n  */\n  // onMergeTransition: function onMergeTransition(selection) {},\n\n  /**\n    Call for standard layer's `events['exit']`\n\n    @method onExit\n    @param {d3.selection} selection\n  */\n  onExit: function onExit(/* selection */) {}\n\n  /**\n    Call for standard layer's `events['exit:transition']`\n\n    @method onExitTransition\n    @param {d3.selection} selection\n  */\n  // onExitTransition: function onExitTransition(selection) {},\n};\n\nfunction createLayer(chart, type, name, selection) {\n  var layer = {\n    layer: 'layer',\n    series: 'seriesLayer'\n  }[type];\n\n  if (layer && chart[layer]) {\n    var events = {};\n    [\n      'enter',\n      'enter:transition',\n      'update',\n      'update:transition',\n      'merge',\n      'merge:transition',\n      'exit',\n      'exit:transition'\n    ].forEach(function(event) {\n      var method = 'on' + event.split(':').map(function capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n      }).join('');\n\n      // Only create events if chart method exists as empty transition events can cause unforeseen issues\n      if (chart[method]) {\n        events[event] = function() {\n          this.chart()[method](this);\n        };\n      }\n    });\n\n    return chart[layer](name, selection, {\n      dataBind: function(data) {\n        return this.chart().onDataBind(this, data);\n      },\n      insert: function() {\n        return this.chart().onInsert(this);\n      },\n      events: events\n    });\n  }\n}\n\nexport default StandardLayer;\n","// Many utils inlined from Underscore.js\n// (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\nexport var slice = Array.prototype.slice;\nexport var toString = Object.prototype.toString;\n\nfunction _extend(target, extensions, undefined_only) {\n  for (var i = 0, length = extensions.length; i < length; i++) {\n    for (var key in extensions[i]) {\n      if (!undefined_only || target[key] === void 0)\n        target[key] = extensions[i][key];\n    }\n  }\n\n  return target;\n}\n\nexport function contains(arr, item) {\n  return arr.indexOf(item) >= 0;\n}\n\nexport function compact(arr) {\n  return arr.filter(function(item) {\n    return item;\n  });\n}\n\nexport function difference(a, b) {\n  return a.filter(function(value) {\n    return b.indexOf(value) < 0;\n  });\n}\n\nexport function defaults(target) {\n  return _extend(target, slice.call(arguments, 1), true);\n}\n\nexport function extend(target) {\n  return _extend(target, slice.call(arguments, 1));\n}\n\nexport function flatten(arr) {\n  // Assumes all items in arr are arrays and only flattens one level\n  return arr.reduce(function(memo, item) {\n    return memo.concat(item);\n  }, []);\n}\n\nexport function find(arr, fn, context) {\n  if (!arr) return;\n  for (var i = 0, length = arr.length; i < length; i++) {\n    if (fn.call(context, arr[i], i, arr))\n      return arr[i];\n  }\n}\n\nexport function first(arr, n) {\n  if (arr == null) return void 0;\n  if (n == null) return arr[0];\n  return Array.prototype.slice.call(arr, 0, n);\n}\n\nexport function isBoolean(obj) {\n  return obj === true || obj === false;\n}\nexport function isObject(obj) {\n  var type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n}\nexport function isNumber(obj) {\n  return toString.call(obj) === '[object Number]';\n}\nexport function isString(obj) {\n  return toString.call(obj) === '[object String]';\n}\nexport function isUndefined(obj) {\n  return obj === void 0;\n}\n\nexport var isFunction = function(obj) {\n  return toString.call(obj) === '[object Function]';\n};\nif (typeof /./ != 'function' && typeof Int8Array != 'object') {\n  isFunction = function(obj) {\n    return typeof obj == 'function' || false;\n  };\n}\n\nexport function objectEach(obj, fn, context) {\n  if (!obj) return;\n  var keys = Object.keys(obj);\n  for (var i = 0, length = keys.length; i < length; i++) {\n    fn.call(context, obj[keys[i]], keys[i], obj);\n  }\n}\n\nexport function objectFind(obj, fn, context) {\n  if (!obj) return;\n  var keys = Object.keys(obj);\n  for (var i = 0, length = keys.length; i < length; i++) {\n    if (fn.call(context, obj[keys[i]], keys[i], obj))\n      return obj[keys[i]];\n  }\n}\n\nexport function pluck(objs, key) {\n  if (!objs) return [];\n  return objs.map(function(obj) {\n    return obj[key];\n  });\n}\n\nexport function uniq(arr) {\n  var result = [];\n  for (var i = 0, length = arr.length; i < length; i++) {\n    if (result.indexOf(arr[i]) < 0)\n      result.push(arr[i]);\n  }\n  return result;\n}\n\nexport function inherits(Child, Parent) {\n  Child.prototype = Object.create(Parent.prototype, {\n    constructor: {\n      value: Child,\n      enumerable: false,\n      writeable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(Child, Parent);\n  }\n  else {\n    Child.__proto__ = Parent; //eslint-disable-line no-proto\n\n    // __proto__ isn't supported in IE,\n    // use one-time copy of static properties to approximate\n    defaults(Child, Parent);\n  }\n}\n\n// If value isn't `undefined`, return `value`, otherwise use `default_value`\n//\n// @method valueOrDefault\n// @param {Any} [value]\n// @param {Any} default_value\n// @return {Any}\nexport function valueOrDefault(value, default_value) {\n  return !isUndefined(value) ? value : default_value;\n}\n\nvar utils = {\n  slice: slice,\n  toString: toString,\n  contains: contains,\n  compact: compact,\n  difference: difference,\n  defaults: defaults,\n  extend: extend,\n  flatten: flatten,\n  find: find,\n  first: first,\n  isBoolean: isBoolean,\n  isFunction: isFunction,\n  isObject: isObject,\n  isNumber: isNumber,\n  isString: isString,\n  isUndefined: isUndefined,\n  objectEach: objectEach,\n  objectFind: objectFind,\n  pluck: pluck,\n  uniq: uniq,\n  inherits: inherits,\n  valueOrDefault: valueOrDefault\n};\nexport default utils;\n","import {\n  isFunction,\n  isUndefined,\n  valueOrDefault\n} from '../utils';\nvar unique_index = 0;\n\n/**\n  Helper for creating properties for charts/components\n\n  @example\n  ```javascript\n  var Custom = d3.chart('Chart').extend('Custom', {\n    // Create property that's stored internally as 'simple'\n    simple: property()\n  });\n  var custom; // = new Custom(...);\n\n  // set\n  custom.simple('Howdy');\n\n  // get\n  console.log(custom.simple()); // -> 'Howdy'\n\n  // Advanced\n  // --------\n  // Default values:\n  Custom.prototype.message = property({\n    default_value: 'Howdy!'\n  });\n\n  console.log(custom.message()); // -> 'Howdy!'\n  custom.message('Goodbye');\n  console.log(custom.message()); // -> 'Goodbye'\n\n  // Set to undefined to reset to default value\n  custom.message(undefined);\n  console.log(custom.message()); // -> 'Howdy!'\n\n  // Computed default value:\n  Custom.property.computed = property({\n    default_value: function() {\n      // \"this\" = Custom instance\n      return this.message();\n    }\n  });\n\n  // Function default value:\n  // For function default_values, wrap in function to differentiate from computed\n  Custom.property.fn = property({\n    default_value: function() {\n      return function defaultFn() {};\n    }\n    // The following would be incorrectly evaluated\n    // default_value: function defaultFn() {}\n  })\n\n  // Custom getter:\n  Custom.prototype.exclaimed = property({\n    get: function(value) {\n      // Value is the underlying set value\n      return value + '!';\n    }\n  });\n\n  custom.exclaimed('Howdy');\n  console.log(custom.exclaimed()); // -> 'Howdy!'\n\n  // Custom setter:\n  Custom.prototype.feeling = property({\n    set: function(value, previous) {\n      if (value == 'Hate') {\n        // To override value, return Object with override specified\n        return {\n          override: 'Love',\n\n          // To do something after override, use after callback\n          after: function() {\n            console.log('After: ' + this.feeling()); // -> 'After: Love'\n          }\n        };\n      }\n    }\n\n    custom.feeling('Hate'); // -> 'After: Love'\n    console.log(custom.feeling()); // -> 'Love'\n  });\n  ```\n  @method property\n  @for helpers\n  @param {Object} [options]\n  @param {Any} [options.default_value] default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.\n  @param {Function} [options.get] `function(value) {return ...}` getter, where `value` is the stored value and return desired value\n  @param {Function} [options.set] `function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set\n  @param {Object} [options.context=this] context to evaluate get/set/after functions\n  @return {Function} `()`: get, `(value)`: set\n*/\nexport default function property(options) {\n  // DEPRECATED: name as first argument\n  if (arguments.length == 2) {\n    if (typeof console != 'undefined' && console.warn)\n      console.warn('DEPRECATED - name argument for property is no longer supported will be removed in the next version of d3.compose');\n    options = arguments[1];\n  }\n\n  options = options || {};\n  var id = 'property_' + unique_index++;\n\n  var property = function(value) {//eslint-disable-line no-shadow\n    var properties = this.__properties = this.__properties || {};\n    var context = valueOrDefault(property.context, this);\n\n    if (arguments.length)\n      return set.call(this);\n    else\n      return get.call(this);\n\n    function get() {\n      value = properties[id];\n\n      if (isUndefined(value)) {\n        // Use default value and unwrap if it's a function\n        value = property.default_value;\n        if (isFunction(value))\n          value = value.call(context);\n      }\n\n      return isFunction(options.get) ? options.get.call(context, value) : value;\n    }\n\n    function set() {\n      // Validate\n      if (isFunction(options.validate) && !isUndefined(value) && !options.validate.call(context, value))\n        throw new Error('Invalid value for property: ' + JSON.stringify(value));\n\n      var previous = properties[id];\n      properties[id] = value;\n\n      if (isFunction(options.set) && !isUndefined(value)) {\n        var response = options.set.call(context, value, previous);\n\n        if (response && 'override' in response)\n          properties[id] = response.override;\n        if (response && isFunction(response.after))\n          response.after.call(context, properties[id]);\n      }\n\n      return this;\n    }\n  };\n\n  // For checking if function is a property\n  property.is_property = true;\n  property.id = id;\n  property.set_from_options = valueOrDefault(options.set_from_options, true);\n  property.default_value = options.default_value;\n  property.context = options.context;\n  property.options = options;\n\n  return property;\n}\n","import {\n  objectEach,\n  slice\n} from '../utils';\n\n/**\n  Combine mixins with Parent super class for extension\n\n  @example\n  ```js\n  var a = {transform: function() {}, a: 1};\n  var b = {initialize: function() {}, b: 2};\n  var c = {c: 3};\n\n  var Custom = mixin(Chart, a, b, c).extend({\n    initialize: function(options) {\n      this._super.initialize.call(this, options);\n      // d\n    },\n    transform: function(data) {\n      data = this._super.transform.call(this, data);\n      // d\n    }\n  });\n\n  // initialize: Chart, b, d\n  // transform: Chart, a, d\n  ```\n  @method mixin\n  @for helpers\n  @param {Function} Parent\n  @param {...Object} ...mixins\n  @return {Function}\n*/\nexport default function mixin(Parent/*, ...mixins*/) {\n  var mixins = slice.call(arguments, 1);\n  var initializes = [];\n  var transforms = [];\n  var mixed = {};\n\n  mixins.forEach(function(mix) {\n    objectEach(mix, function(value, key) {\n      if (key == 'initialize')\n        initializes.push(value);\n      else if (key == 'transform')\n        transforms.push(value);\n      else\n        mixed[key] = value;\n    });\n  });\n\n  if (initializes.length) {\n    mixed.initialize = function initialize() {\n      var args = slice.call(arguments);\n      Parent.prototype.initialize.apply(this, args);\n      initializes.forEach(function(init) {\n        init.apply(this, args);\n      }, this);\n    };\n  }\n\n  if (transforms.length) {\n    mixed.transform = function transform(data) {\n      data = Parent.prototype.transform.call(this, data);\n      return transforms.reduce(function(memo, trans) {\n        return trans.call(this, memo);\n      }.bind(this), data);\n    };\n  }\n\n  return Parent.extend(mixed);\n}\n","import d3 from 'd3';\r\nimport { extend } from '../utils';\r\nimport { translate } from '../helpers';\r\n\r\n/**\r\n  Stack given array of elements vertically or horizontally\r\n\r\n  @example\r\n  ```js\r\n  // Stack all text elements vertically, from the top, with 0px padding\r\n  d3.selectAll('text').call(helpers.stack())\r\n\r\n  // Stack all text elements horizontally, from the right, with 5px padding\r\n  d3.selectAll('text').call(helpers.stack({\r\n    direction: 'horizontal',\r\n    origin: 'right',\r\n    padding: 5\r\n  }));\r\n  ```\r\n  @method stack\r\n  @for helpers\r\n  @param {Object} [options]\r\n  @param {String} [options.direction=vertical] `\"vertical\"` or `\"horizontal\"`\r\n  @param {String} [options.origin] `\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)\r\n  @param {Number} [options.padding=0] padding (in px) between elements\r\n  @param {Number} [options.min_height=0] minimum spacing height (for vertical stacking)\r\n  @param {Number} [options.min_width=0]  minimum spacing width (for horizontal stacking)\r\n  @return {Function}\r\n*/\r\nexport default function stack(options) {\r\n  options = extend({\r\n    direction: 'vertical',\r\n    origin: 'top',\r\n    padding: 0,\r\n    min_height: 0,\r\n    min_width: 0\r\n  }, options);\r\n\r\n  // Ensure valid origin based on direction\r\n  if (options.direction == 'horizontal' && !(options.origin == 'left' || options.origin == 'right'))\r\n    options.origin = 'left';\r\n  else if (options.direction == 'vertical' && !(options.origin == 'top' || options.origin == 'bottom'))\r\n    options.origin = 'top';\r\n\r\n  function padding(i) {\r\n    return i > 0 && options.padding ? options.padding : 0;\r\n  }\r\n\r\n  return function(elements) {\r\n    if (elements && elements.attr) {\r\n      var previous = 0;\r\n\r\n      elements.attr('transform', function(d, i) {\r\n        var element_dimensions = this.getBBox();\r\n        var spacing_width = d3.max([element_dimensions.width, options.min_width]);\r\n        var spacing_height = d3.max([element_dimensions.height, options.min_height]);\r\n        var x = 0;\r\n        var y = 0;\r\n        var next_position;\r\n\r\n        if (options.direction == 'horizontal') {\r\n          next_position = previous + spacing_width + padding(i);\r\n\r\n          if (options.origin == 'left')\r\n            x = previous + padding(i);\r\n          else\r\n            x = next_position;\r\n\r\n          previous = next_position;\r\n        }\r\n        else {\r\n          next_position = previous + spacing_height + padding(i);\r\n\r\n          if (options.origin == 'top')\r\n            y = previous + padding(i);\r\n          else\r\n            y = next_position;\r\n\r\n          previous = next_position;\r\n        }\r\n\r\n        return translate(x, y);\r\n      });\r\n    }\r\n  };\r\n}\r\n","import d3 from 'd3';\nimport {\n  isFunction,\n  extend,\n  objectEach,\n  uniq,\n  contains,\n  flatten\n} from '../utils';\nimport {\n  min,\n  max,\n  isSeriesData\n} from '../helpers';\n\n/**\n  Create scale from options\n\n  @example\n  ```javascript\n  // Simple type, range, and domain\n  var scale = createScale({\n    type: 'linear',\n    domain: [0, 100],\n    range: [0, 500]\n  });\n\n  // Calculate domain for data\n  var scale = createScale({\n    type: 'log',\n    data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\n    key: 'y'\n  });\n\n  // Scale is passed through\n  var original = d3.scale.linear();\n  var scale = createScale(original);\n  scale === original;\n\n  // Set other properties by passing in \"arguments\" array\n  var scale = createScale({\n    type: 'ordinal',\n    domain: ['a', 'b', 'c', 'd', 'e'],\n    rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\n  });\n\n  // Use ordinal + adjacent for bar charts\n  var scale = createScale({\n    type: 'ordinal',\n    adjacent: true,\n    domain: ['a', 'b', 'c'],\n    series: 2 // Series count is required for adjacent if data isn't given\n  })\n  ```\n  @method createScale\n  @for helpers\n  @param {Object|Function} options (passing in `Function` returns original function with no changes)\n  @param {String} [options.type='linear'] Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`\n  @param {Array} [options.domain] Domain for scale\n  @param {Array} [options.range] Range for scale\n  @param {Any} [options.data] Used to dynamically set domain (with given value or key)\n  @param {Function} [options.value] \"di\"-function for getting value for data\n  @param {String} [options.key] Data key to extract value\n  @param {Boolean} [options.centered] For \"ordinal\" scales, use centered x-values\n  @param {Boolean} [options.adjacent] For \"ordinal\" + centered, set x-values for different series next to each other\n\n  - Requires series-index as second argument to scale, otherwise centered x-value is used\n  - Requires \"data\" or \"series\" options to determine number of series\n  @param {Number} [options.series] Used with \"adjacent\" if no \"data\" is given to set series count\n  @param {Number} [options.padding=0.1] For \"ordinal\" scales, set padding between different x-values\n  @param {Array...} [options....] Set any other scale properties with array of arguments to pass to property\n  @return {d3.Scale}\n*/\nexport default function createScale(options) {\n  options = options || {};\n\n  // If function, scale was passed in as options\n  if (isFunction(options))\n    return options;\n\n  // Create scale (using d3.time.scale() if type is 'time')\n  var scale;\n  if (options.type == 'time')\n    scale = d3.time.scale();\n  else if (d3.scale[options.type])\n    scale = d3.scale[options.type]();\n  else\n    scale = d3.scale.linear();\n\n  objectEach(options, function(value, key) {\n    if (scale[key]) {\n      // If option is standard property (domain or range), pass in directly\n      // otherwise, pass in as arguments\n      // (don't pass through internal options)\n      if (key == 'range' || key == 'domain')\n        scale[key](value);\n      else if (!contains(['type', 'data', 'value', 'key', 'centered', 'adjacent', 'series', 'padding'], key))\n        scale[key].apply(scale, value);\n    }\n  });\n\n  if (!options.domain && options.data && (options.key || options.value))\n    scale = setDomain(scale, options);\n\n  // Add centered and adjacent extensions to ordinal\n  // (centered by default for ordinal)\n  var centered = options.centered || (options.type == 'ordinal' && options.centered == null);\n  if (options.type == 'ordinal' && (centered || options.adjacent))\n    scale = addCentered(scale, options);\n\n  // Add padding extension to ordinal\n  if (options.type == 'ordinal' && (options.padding != null || centered || options.adjacent))\n    scale = addPadding(scale, options);\n\n  return scale;\n}\n\nfunction setDomain(scale, options) {\n  // Use value \"di\" or create for key\n  var getValue = options.value || function(d) {\n    return d[options.key];\n  };\n\n  // Enforce series data\n  var data = options.data;\n  if (!isSeriesData(data))\n    data = [{values: data}];\n\n  var domain;\n  if (options.type == 'ordinal') {\n    // Domain for ordinal is array of unique values\n    domain = uniq(flatten(data.map(function(series) {\n      if (series && series.values)\n        return series.values.map(getValue);\n    })));\n  }\n  else {\n    var min_value = min(data, getValue);\n\n    domain = [\n      min_value < 0 ? min_value : 0,\n      max(data, getValue)\n    ];\n  }\n\n  scale.domain(domain);\n  return scale;\n}\n\nfunction addCentered(original, options) {\n  // Get series count for adjacent\n  var series_count = options.series || (!isSeriesData(options.data) ? 1 : options.data.length);\n\n  // TODO Look into removing closure\n  var scale = (function(original, options, series_count) {//eslint-disable-line no-shadow\n    var context = function(value, series_index) {\n      var width = context.width();\n\n      if (!options.adjacent)\n        series_index = 0;\n\n      return original(value) + (0.5 * width) + (width * (series_index || 0));\n    };\n    extend(context, original, {\n      width: function() {\n        var range_band = context.rangeBand && context.rangeBand();\n        var width = isFinite(range_band) ? range_band : 0;\n\n        if (options.adjacent)\n          width = width / series_count;\n\n        return width;\n      }\n    });\n\n    // TODO test copy() behavior\n\n    return context;\n  })(original, options, series_count);\n\n  return scale;\n}\n\nfunction addPadding(scale, options) {\n  var padding = options.padding != null ? options.padding : 0.1;\n\n  var original_range = scale.range;\n  scale.range = function(range) {\n    if (!arguments.length) return original_range();\n\n    scale.rangeBands(\n      range,\n      padding,\n      padding / 2\n    );\n  };\n\n  if (options.range)\n    scale.range(options.range);\n\n  // TODO test copy() behavior\n  return scale;\n}\n","import d3 from 'd3';\n\n/**\n  Helper for robustly determining width/height of given selector.\n  Checks dimensions from css, attributes, and bounding box.\n\n  @method dimensions\n  @for helpers\n  @param {d3.Selection} selection\n  @return {Object} `{width, height}`\n*/\nexport default function dimensions(selection) {\n  // 1. Get width/height set via css (only valid for svg and some other elements)\n  var client = clientDimensions(selection);\n\n  if (client.width && client.height)\n    return client;\n\n  // 2. Get width/height set via attribute\n  var attr = attrDimensions(selection);\n\n  if (isSVG(selection)) {\n    return {\n      width: client.width != null ? client.width : attr.width || 0,\n      height: client.height != null ? client.height : attr.height || 0\n    };\n  }\n  else {\n    var bbox = bboxDimensions(selection);\n\n    // Size set by css -> client (only valid for svg and some other elements)\n    // Size set by svg -> attr override or bounding_box\n    // -> Take maximum\n    return {\n      width: d3.max([client.width, attr.width || bbox.width]) || 0,\n      height: d3.max([client.height, attr.height || bbox.height]) || 0\n    };\n  }\n}\n\nfunction clientDimensions(selection) {\n  var element = selection.node();\n\n  var client_dimensions = {\n    width: element && element.clientWidth,\n    height: element && element.clientHeight\n  };\n\n  // Issue: Firefox does not correctly calculate clientWidth/clientHeight for svg\n  //        calculate from css\n  //        http://stackoverflow.com/questions/13122790/how-to-get-svg-element-dimensions-in-firefox\n  //        Note: This makes assumptions about the box model in use and that width/height are not percent values\n  if (isSVG(selection) && (!element.clientWidth || !element.clientHeight) && typeof window !== 'undefined' && window.getComputedStyle) {\n    var styles = window.getComputedStyle(element);\n    client_dimensions.height = parseFloat(styles.height) - parseFloat(styles.borderTopWidth) - parseFloat(styles.borderBottomWidth);\n    client_dimensions.width = parseFloat(styles.width) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\n  }\n\n  return client_dimensions;\n}\n\nfunction attrDimensions(selection) {\n  return {\n    width: selection && selection.attr && parseFloat(selection.attr('width')),\n    height: selection && selection.attr && parseFloat(selection.attr('height'))\n  };\n}\n\nfunction bboxDimensions(selection) {\n  var element = selection.node();\n  var bbox;\n  try {\n    bbox = element && typeof element.getBBox == 'function' && element.getBBox();\n  }\n  catch(ex) {\n    // Firefox throws error when calling getBBox when svg hasn't been displayed\n    // Ignore error and set to empty\n    bbox = {width: 0, height: 0};\n  }\n\n  return bbox;\n}\n\nfunction isSVG(selection) {\n  return selection.node().nodeName == 'svg';\n}\n","import d3 from 'd3';\nimport {\n  defaults,\n  extend,\n  first,\n  isNumber,\n  isObject,\n  objectEach\n} from './utils';\n\n/**\n  `d3.compose.helpers` includes general purpose helpers that are used throughout d3.compose.\n  Includes convenience functions for create charts/components (`property`, `di`, and `mixin`),\n  helpful calculations (`dimensions`, `max`, and `min`) and other common behavior.\n\n  @class helpers\n*/\n\nimport property from './helpers/property';\nimport dimensions from './helpers/dimensions';\nimport createScale from './helpers/create-scale';\nimport mixin from './helpers/mixin';\nimport stack from './helpers/stack';\n\n/**\n  Translate by (x, y) distance\n\n  @example\n  ```javascript\n  translate(10, 15) == 'translate(10, 15)'\n  translate({x: 10, y: 15}) == 'translate(10, 15)'\n  ```\n  @method translate\n  @param {Number|Object} [x] value or `{x, y}`\n  @param {Number} [y]\n  @return {String}\n*/\nexport function translate(x, y) {\n  if (isObject(x)) {\n    y = x.y;\n    x = x.x;\n  }\n\n  return 'translate(' + (x || 0) + ', ' + (y || 0) + ')';\n}\n\n/**\n  Rotate by degrees, with optional center\n\n  @method rotate\n  @param {Number} degrees\n  @param {Object} [center = {x: 0, y: 0}]\n  @return {String}\n*/\nexport function rotate(degrees, center) {\n  var rotation = 'rotate(' + (degrees || 0);\n  if (center)\n    rotation += ' ' + (center.x || 0) + ',' + (center.y || 0);\n  rotation += ')';\n\n  return rotation;\n}\n\n/**\n  Find vertical offset to vertically align text\n  (needed due to lack of `alignment-baseline` support in Firefox)\n\n  @example\n  ```js\n  var label = d3.select('text');\n\n  // Place label vertically so that origin is top-left\n  var offset = alignText(label);\n  label.attr('transform', translate(0, offset));\n\n  // Center label for line-height of 20px\n  var offset = alignText(label, 20);\n  label.attr('transform', translate(0, offset));\n  ```\n  @method alignText\n  @param {element} element\n  @param {Number} [line_height]\n  @return {Number} offset\n*/\nexport function alignText(element, line_height) {\n  var offset = 0;\n  try {\n    var height = element.getBBox().height;\n\n    var element_style = window.getComputedStyle(element);\n    var css_font_size = parseFloat(element_style['font-size']);\n    var css_line_height = parseFloat(element_style['line-height']);\n\n    // If line-height: normal, use estimate 1.14em\n    // (actual line-height depends on browser and font)\n    if (isNaN(css_line_height))\n      css_line_height = 1.15 * css_font_size;\n\n    var css_adjustment = -(css_line_height - css_font_size) / 2;\n\n    // Add additional line-height, if specified\n    var height_adjustment = 0;\n    if (line_height && line_height > 0)\n      height_adjustment = (line_height - height) / 2;\n\n    offset = height + (css_adjustment || 0) + (height_adjustment || 0);\n  }\n  catch (ex) {\n    // Errors can occur from getBBox and getComputedStyle\n    // No useful information for offset, do nothing\n  }\n\n  return offset;\n}\n\n/**\n  Determine if given data is likely series data\n\n  @method isSeriesData\n  @param {Array} data\n  @return {Boolean}\n*/\nexport function isSeriesData(data) {\n  var first_item = first(data);\n  return first_item && isObject(first_item) && Array.isArray(first_item.values);\n}\n\n/**\n  Get max for array/series by value di\n\n  @example\n  ```js\n  var data = [\n    {values: [{y: 1}, {y: 2}, {y: 3}]},\n    {values: [{y: 4}, {y: 2}, {y: 0}]}\n  ];\n  max(data, function(d, i) { return d.y; }); // -> 4\n  ```\n  @method max\n  @param {Array} data\n  @param {Function} getValue di function that returns value for given (d, i)\n  @return {Number}\n*/\nexport function max(data, getValue) {\n  var getMax = function(series_data) {\n    return series_data && d3.extent(series_data, getValue)[1];\n  };\n\n  if (isSeriesData(data)) {\n    return data.reduce(function(memo, series) {\n      if (series && Array.isArray(series.values)) {\n        var series_max = getMax(series.values);\n        return series_max > memo ? series_max : memo;\n      }\n      else {\n        return memo;\n      }\n    }, -Infinity);\n  }\n  else {\n    return getMax(data);\n  }\n}\n\n/**\n  Get min for array/series by value di\n\n  @example\n  ```js\n  var data = [\n    {values: [{x: 1}, {x: 2}, {x: 3}]},\n    {values: [{x: 4}, {x: 2}, {x: 0}]}\n  ];\n  min(data, function(d, i) { return d.x; }); // -> 0\n  ```\n  @method min\n  @param {Array} data\n  @param {Function} getValue di function that returns value for given (d, i)\n  @return {Number}\n*/\nexport function min(data, getValue) {\n  var getMin = function(series_data) {\n    return series_data && d3.extent(series_data, getValue)[0];\n  };\n\n  if (isSeriesData(data)) {\n    return data.reduce(function(memo, series) {\n      if (series && Array.isArray(series.values)) {\n        var series_min = getMin(series.values);\n        return series_min < memo ? series_min : memo;\n      }\n      else {\n        return memo;\n      }\n    }, Infinity);\n  }\n  else {\n    return getMin(data);\n  }\n}\n\n// TODO Look into converting to d3's internal style handling\n// Convert key,values to style string\n//\n// @example\n// ```js\n// style({color: 'red', display: 'block'}) -> color: red; display: block;\n// ```\n// @method style\n// @param {Object} styles\n// @return {String}\nexport function style(styles) {\n  if (!styles)\n    return '';\n\n  var keyValues = [];\n  objectEach(styles, function(value, key) {\n    keyValues.push(key + ': ' + value);\n  });\n  styles = keyValues.join('; ');\n\n  return styles ? styles + ';' : '';\n}\n\n/**\n  Get formatted margins for varying input\n\n  @method getMargins\n  @example\n  ```js\n  getMargins(4);\n  // -> {top: 4, right: 4, bottom: 4, left: 4}\n\n  getMargins({top: 20}, {top: 8, bottom: 8});\n  // -> {top: 20, right: 0, bottom: 8, left: 0}\n  ```\n  @param {Number|Object} margins\n  @param {Object} default_margins\n  @return {Object}\n*/\nexport function getMargins(margins, default_margins) {\n  if (isNumber(margins))\n    return {top: margins, right: margins, bottom: margins, left: margins};\n  else\n    return defaults({}, margins, default_margins, {top: 0, right: 0, bottom: 0, left: 0});\n}\n\n/**\n  Create wrapped `(d, i)` function that adds chart instance as first argument.\n  Wrapped function uses standard d3 arguments and context.\n\n  Note: in order to pass proper context to di-functions called within di-function\n  use `.call(this, d, i)` (where \"this\" is d3 context)\n\n  @example\n  ```javascript\n  d3.chart('Base').extend('Custom', {\n    initialize: function() {\n      this.base.select('point')\n        .attr('cx', this.x);\n      // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\n    },\n\n    x: di(function(chart, d, i) {\n      // \"this\" is standard d3 context: node\n      return chart.xScale()(chart.xValue.call(this, d, i));\n    })\n\n    // xScale, xValue...\n  });\n  ```\n  @method di\n  @param {Function} callback with `(chart, d, i)` arguments\n  @return {Function}\n*/\nexport function di(callback) {\n  // Create intermediate wrapping in case it's called without binding\n  var wrapped = function wrapped(d, i, j) {\n    return callback.call(this, undefined, d, i, j);\n  };\n  wrapped._is_di = true;\n  wrapped.original = callback;\n\n  return wrapped;\n}\n\nexport function bindDi(diFn, chart) {\n  return function wrapped(d, i, j) {\n    return (diFn.original || diFn).call(this, chart, d, i, j);\n  };\n}\n\n// Bind all di-functions found in chart\nexport function bindAllDi(chart) {\n  for (var key in chart) {\n    if (chart[key] && chart[key]._is_di)\n      chart[key] = bindDi(chart[key], chart);\n  }\n}\n\n\n/**\n  Get parent data for element (used to get parent series for data point)\n\n  @example\n  ```js\n  var data = [{\n    name: 'Input',\n    values: [1, 2, 3]\n  }];\n\n  d3.selectAll('g')\n    .data(data)\n    .enter().append('g')\n      .selectAll('text')\n        .data(function(d) { return d.values; })\n        .enter().append('text')\n          .text(function(d) {\n            var series_data = getParentData(this);\n            return series_data.name + ': ' + d;\n          });\n\n  // Input: 1, Input: 2, Input: 3\n  ```\n  @method getParentData\n  @param {Element} element\n  @return {Any}\n*/\nexport function getParentData(element) {\n  // @internal Shortcut if element + parentData needs to be mocked\n  if (element._parent_data)\n    return element._parent_data;\n\n  var parent = element && element.parentNode;\n  if (parent) {\n    var data = d3.select(parent).data();\n    return data && data[0];\n  }\n}\n\nexport function createHelper(type) {\n  return function(id, options) {\n    if (!options) {\n      options = id;\n      id = undefined;\n    }\n\n    return extend({id: id, type: type}, options);\n  };\n}\n\nvar helpers = {\n  property: property,\n  dimensions: dimensions,\n  translate: translate,\n  rotate: rotate,\n  alignText: alignText,\n  isSeriesData: isSeriesData,\n  max: max,\n  min: min,\n  createScale: createScale,\n  style: style,\n  getMargins: getMargins,\n  stack: stack,\n  di: di,\n  bindDi: bindDi,\n  bindAllDi: bindAllDi,\n  getParentData: getParentData,\n  mixin: mixin,\n  createHelper: createHelper\n};\n\nexport {\n  helpers as default,\n  property,\n  dimensions,\n  createScale,\n  mixin,\n  stack\n};\n","import d3 from 'd3';\r\nimport {\r\n  difference,\r\n  extend,\r\n  inherits,\r\n  isString,\r\n  objectEach\r\n} from './utils';\r\nimport {\r\n  property,\r\n  bindAllDi,\r\n  dimensions\r\n} from './helpers';\r\nvar Chart = d3.chart();\r\n\r\n// TEMP Clear namespace from mixins\r\n/**\r\n  @namespace\r\n*/\r\n\r\n/**\r\n  Shared functionality between all charts and components.\r\n\r\n  - Set properties automatically from `options`,\r\n  - Store fully transformed data\r\n  - Adds `\"before:draw\"` and `\"draw\"` events\r\n  - Standard `width` and `height` calculations\r\n\r\n  @class Base\r\n*/\r\nfunction Base(selection, options) {\r\n  // d3.chart() constructor without transform and initialize cascade\r\n  this.base = selection;\r\n  this._layers = {};\r\n  this._attached = {};\r\n  this._events = {};\r\n\r\n  // Bind all di-functions to this chart\r\n  bindAllDi(this);\r\n\r\n  // Set options (and properties with set_from_options)\r\n  if (options)\r\n    this.options(options);\r\n\r\n  // Initialize Chart (relies on explicitly calling super in initialize)\r\n  this.initialize(options);\r\n}\r\n\r\ninherits(Base, Chart);\r\n\r\nextend(Base.prototype, {\r\n  initialize: function() {},\r\n  transform: function(data) {\r\n    return data;\r\n  },\r\n  demux: function(name, data) { return data; },\r\n\r\n  // Add events to draw: \"before:draw\" and \"draw\"\r\n  draw: function(data) {\r\n    // Transform data (relies on explicitly calling super in transform)\r\n    data = this.transform(data);\r\n\r\n    // Store fully-transformed data for reference\r\n    this.data(data);\r\n\r\n    this.trigger('before:draw', data);\r\n\r\n    objectEach(this._layers, function(layer) {\r\n      layer.draw(data);\r\n    });\r\n    objectEach(this._attached, function(attachment, name) {\r\n      attachment.draw(this.demux(name, data));\r\n    }, this);\r\n\r\n    this.trigger('draw', data);\r\n  },\r\n\r\n  // Explicitly load d3.chart prototype\r\n  layer: Chart.prototype.layer,\r\n  unlayer: Chart.prototype.unlayer,\r\n  attach: Chart.prototype.attach,\r\n  on: Chart.prototype.on,\r\n  once: Chart.prototype.once,\r\n  off: Chart.prototype.off,\r\n  trigger: Chart.prototype.trigger,\r\n\r\n  /**\r\n    Store fully-transformed data for direct access from the chart\r\n\r\n    @property data\r\n    @type Any\r\n  */\r\n  data: property(),\r\n\r\n  /**\r\n    Overall options for chart/component, automatically setting any matching properties.\r\n\r\n    @example\r\n    ```js\r\n    var property = d3.compose.helpers.property;\r\n\r\n    d3.chart('Base').extend('HasProperties', {\r\n      a: property(),\r\n      b: property({\r\n        set: function(value) {\r\n          return {\r\n            override: value + '!'\r\n          };\r\n        }\r\n      })\r\n    });\r\n\r\n    var instance = d3.select('#chart')\r\n      .chart('HasProperties', {\r\n        a: 123,\r\n        b: 'Howdy',\r\n        c: true\r\n      });\r\n\r\n    // Equivalent to:\r\n    // d3.select(...)\r\n    //   .chart('HasProperties')\r\n    //   .options({...});\r\n\r\n    console.log(instance.a()); // -> 123\r\n    console.log(instance.b()); // -> Howdy!\r\n    console.log(instance.options().c); // -> true\r\n    ```\r\n    @property options\r\n    @type Object\r\n  */\r\n  options: property({\r\n    default_value: {},\r\n    set: function(options, previous) {\r\n      // Clear all unset options, except for data and options\r\n      if (previous) {\r\n        var unset = difference(Object.keys(previous), Object.keys(options));\r\n        unset.forEach(function(key) {\r\n          if (key != 'data' && key != 'options' && isProperty(this, key))\r\n            this[key](undefined);\r\n        }, this);\r\n      }\r\n\r\n      objectEach(options, function setFromOptions(value, key) {\r\n        if (isProperty(this, key))\r\n          this[key](value);\r\n      }, this);\r\n\r\n      function isProperty(chart, key) {\r\n        return chart[key] && chart[key].is_property && chart[key].set_from_options;\r\n      }\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Get width of `this.base`.\r\n    (Does not include `set` for setting width of `this.base`)\r\n\r\n    @method width\r\n    @return {Number}\r\n  */\r\n  width: function width() {\r\n    return dimensions(this.base).width;\r\n  },\r\n\r\n  /**\r\n    Get height of `this.base`.\r\n    (Does not include `set` for setting height of `this.base`)\r\n\r\n    @method height\r\n    @return {Number}\r\n  */\r\n  height: function height() {\r\n    return dimensions(this.base).height;\r\n  }\r\n});\r\n\r\nBase.extend = function(proto_props, static_props) {\r\n  // name may be first parameter for d3.chart usage\r\n  var name;\r\n  if (isString(proto_props)) {\r\n    name = proto_props;\r\n    proto_props = static_props;\r\n    static_props = arguments[2];\r\n  }\r\n\r\n  var Parent = this;\r\n  var Child;\r\n\r\n  if (proto_props && proto_props.hasOwnProperty('constructor')) {\r\n    Child = proto_props.constructor;\r\n\r\n    // inherits sets constructor, remove from proto_props\r\n    proto_props = extend({}, proto_props);\r\n    delete proto_props.constructor;\r\n  }\r\n  else {\r\n    Child = function() { return Parent.apply(this, arguments); };\r\n  }\r\n\r\n  inherits(Child, Parent);\r\n  if (static_props)\r\n    extend(Child, static_props);\r\n  if (proto_props)\r\n    extend(Child.prototype, proto_props);\r\n\r\n  // If name is given, register with d3.chart\r\n  if (name)\r\n    Chart[name] = Child;\r\n\r\n  return Child;\r\n};\r\n\r\nexport default Base;\r\n","import {\n  property,\n  isSeriesData,\n  di\n} from '../helpers';\nimport {\n  compact,\n  pluck,\n  objectEach,\n  contains\n} from '../utils';\n\n/**\n  Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\n  and `getPoint` helper for adding helpful meta information to raw data point.\n\n  @class Hover\n  @namespace mixins\n*/\nvar Hover = {\n  initialize: function() {\n    this.on('attach', function() {\n      this.container.on('mouseenter', this.onMouseEnter.bind(this));\n      this.container.on('mousemove', this.onMouseMove.bind(this));\n      this.container.on('mouseleave', this.onMouseLeave.bind(this));\n    }.bind(this));\n  },\n\n  /**\n    Get point information for given data-point\n\n    @method getPoint\n    @param {Any} d\n    @param {Number} i\n    @param {Number} j\n    @return {key, series, d, meta {chart, i, j, x, y}}\n  */\n  getPoint: di(function(chart, d, i, j) {\n    var key = chart.key && chart.key.call(this, d, i, j);\n    var series = chart.seriesData && chart.seriesData.call(this, d, i, j) || {};\n\n    return {\n      key: (series.key || j) + '.' + (key || i),\n      series: series,\n      d: d,\n      meta: {\n        chart: chart,\n        i: i,\n        j: j,\n        x: chart.x && chart.x.call(this, d, i, j),\n        y: chart.y && chart.y.call(this, d, i, j)\n      }\n    };\n  }),\n\n  /**\n    Call to trigger mouseenter:point when mouse enters data-point\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n      initialize: function() {\n        this.layer('bars', this.base, {\n          // dataBind...\n          insert: function() {\n            // Want to trigger enter/leave point\n            // when mouse enter/leaves bar (rect)\n            var chart = this.chart();\n            return this.append('rect')\n              .on('mouseenter', chart.mouseEnterPoint)\n              .on('mouseleave', chart.mouseLeavePoint);\n          }\n          // events...\n        })\n      }\n    }));\n    ```\n    @method mouseEnterPoint\n    @param {Any} d\n    @param {Number} i\n    @param {Number} j\n  */\n  mouseEnterPoint: di(function(chart, d, i, j) {\n    chart.container.trigger('mouseenter:point', chart.getPoint.call(this, d, i, j));\n  }),\n\n  /**\n    Call to trigger mouseleave:point when mouse leaves data-point\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n      initialize: function() {\n        this.layer('bars', this.base, {\n          // dataBind...\n          insert: function() {\n            // Want to trigger enter/leave point\n            // when mouse enter/leaves bar (rect)\n            var chart = this.chart();\n            return this.append('rect')\n              .on('mouseenter', chart.mouseEnterPoint)\n              .on('mouseleave', chart.mouseLeavePoint);\n          }\n          // events...\n        })\n      }\n    }));\n    ```\n    @method mouseleavePoint\n    @param {Any} d\n    @param {Number} i\n    @param {Number} j\n  */\n  mouseLeavePoint: di(function(chart, d, i, j) {\n    chart.container.trigger('mouseleave:point', chart.getPoint.call(this, d, i, j));\n  }),\n\n  /**\n    (Override) Called when mouse enters container\n\n    @method onMouseEnter\n    @param {Object} position (chart and container {x,y} position of mouse)\n    @param {Object} position.chart {x, y} position relative to chart origin\n    @param {Object} position.container {x, y} position relative to container origin\n  */\n  onMouseEnter: function(/* position */) {},\n\n  /**\n    (Override) Called when mouse moves within container\n\n    @method onMouseMove\n    @param {Object} position (chart and container {x,y} position of mouse)\n    @param {Object} position.chart {x, y} position relative to chart origin\n    @param {Object} position.container {x, y} position relative to container origin\n  */\n  onMouseMove: function(/* position */) {},\n\n  /**\n    (Override) Called when mouse leaves container\n\n    @method onMouseLeave\n  */\n  onMouseLeave: function() {}\n};\n\n/**\n  Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.\n\n  @class HoverPoints\n  @namespace mixins\n*/\nvar HoverPoints = {\n  initialize: function() {\n    var points, tolerance, active;\n\n    this.on('draw', function() {\n      // Clear cache on draw\n      points = null;\n    });\n\n    this.on('attach', function() {\n      var update = function update(position) {\n        var closest = [];\n        if (position)\n          closest = getClosestPoints(points, position.chart, tolerance);\n\n        updateActive(active, closest, this.container);\n        active = closest;\n      }.bind(this);\n\n      this.container.on('mouseenter', function(position) {\n        if (!points)\n          points = getPoints(this, this.data());\n\n        tolerance = this.hoverTolerance();\n        update(position);\n      }.bind(this));\n\n      this.container.on('mousemove', update);\n      this.container.on('mouseleave', update);\n    }.bind(this));\n  },\n\n  /**\n    Hover tolerance (in px) for calculating close points\n\n    @property hoverTolerance\n    @type Number\n    @default Infinity\n  */\n  hoverTolerance: property({\n    default_value: Infinity\n  })\n};\n\nfunction getPoints(chart, data) {\n  if (data) {\n    if (!isSeriesData(data))\n      data = [{values: data}];\n\n    return data.map(function(series, j) {\n      return series.values.map(function(d, i) {\n        return chart.getPoint.call({_parent_data: series}, d, i, j);\n      }).sort(function(a, b) {\n        // Sort by x\n        return a.meta.x - b.meta.x;\n      });\n    });\n  }\n}\n\nfunction getClosestPoints(points, position, tolerance) {\n  if (!points)\n    return [];\n\n  return compact(points.map(function(series) {\n    function setDistance(point) {\n      point.distance = getDistance(point.meta, position);\n      return point;\n    }\n    function closePoints(point) {\n      return point.distance < tolerance;\n    }\n    function sortPoints(a, b) {\n      if (a.distance < b.distance)\n        return -1;\n      else if (a.distance > b.distance)\n        return 1;\n      else\n        return 0;\n    }\n\n    var by_distance = series.map(setDistance).filter(closePoints).sort(sortPoints);\n\n    return by_distance[0];\n  }));\n\n  function getDistance(a, b) {\n    return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n  }\n}\n\nfunction updateActive(active, closest, container) {\n  var active_keys = pluck(active, 'key');\n  var closest_keys = pluck(closest, 'key');\n\n  objectEach(closest, function(point) {\n    if (contains(active_keys, point.key))\n      container.trigger('mousemove:point', point);\n    else\n      container.trigger('mouseenter:point', point);\n  });\n  objectEach(active, function(point) {\n    if (!contains(closest_keys, point.key))\n      container.trigger('mouseleave:point', point);\n  });\n}\n\nexport {\n  Hover as default,\n  HoverPoints\n};\n","import {\r\n  contains,\r\n  extend,\r\n  isString\r\n} from '../utils';\r\nimport {\r\n  property,\r\n  style,\r\n  translate,\r\n  rotate,\r\n  mixin\r\n} from '../helpers';\r\nimport { StandardLayer } from '../mixins';\r\nimport Component from '../Component';\r\n\r\n/**\r\n  Add text to a chart.\r\n\r\n  ### Extending\r\n\r\n  To extend the `Text` component, the following methods are available:\r\n\r\n  - `onDataBind`\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  @example\r\n  ```js\r\n  d3.select('#chart')\r\n    .chart('Compose', function(data) {\r\n      return {\r\n        components: {\r\n          title: {\r\n            type: 'Text',\r\n            position: 'top'\r\n            text: 'Main Title',\r\n            textAlign: 'left',\r\n            'class': 'title'\r\n          },\r\n          notes: {\r\n            type: 'Text',\r\n            position: 'bottom',\r\n            text: 'Notes',\r\n            'class': 'notes'\r\n          }\r\n        }\r\n      };\r\n    });\r\n  ```\r\n  @class Text\r\n  @extends Component, StandardLayer\r\n*/\r\nvar Mixed = mixin(Component, StandardLayer);\r\nvar Text = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n\r\n    // Use standard layer for extensibility\r\n    this.standardLayer('Text', this.base.append('g').classed('chart-text', true));\r\n  },\r\n\r\n  /**\r\n    Text to display\r\n\r\n    @property text\r\n    @type String\r\n  */\r\n  text: property(),\r\n\r\n  /**\r\n    Rotation of text\r\n\r\n    @property rotation\r\n    @type Number\r\n    @default 0\r\n  */\r\n  rotation: property({\r\n    default_value: 0\r\n  }),\r\n\r\n  /**\r\n    Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)\r\n\r\n    @property textAlign\r\n    @type String\r\n    @default \"center\"\r\n  */\r\n  textAlign: property({\r\n    default_value: 'center',\r\n    validate: function(value) {\r\n      return contains(['left', 'center', 'right'], value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)\r\n\r\n    @property anchor\r\n    @type String\r\n    @default (set by `textAlign`)\r\n  */\r\n  anchor: property({\r\n    default_value: function() {\r\n      return {\r\n        left: 'start',\r\n        center: 'middle',\r\n        right: 'end'\r\n      }[this.textAlign()];\r\n    },\r\n    validate: function(value) {\r\n      return contains(['start', 'middle', 'end', 'inherit'], value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)\r\n\r\n    @property verticalAlign\r\n    @type String\r\n    @default \"middle\"\r\n  */\r\n  verticalAlign: property({\r\n    default_value: 'middle',\r\n    validate: function(value) {\r\n      return contains(['top', 'middle', 'bottom'], value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Style object containing styles for text\r\n\r\n    @property style\r\n    @type Object\r\n    @default {}\r\n  */\r\n  style: property({\r\n    default_value: {},\r\n    get: function(value) {\r\n      return style(value) || null;\r\n    }\r\n  }),\r\n\r\n  onDataBind: function onDataBind(selection) {\r\n    return selection.selectAll('text')\r\n      .data([0]);\r\n  },\r\n  onInsert: function onInsert(selection) {\r\n    return selection.append('text');\r\n  },\r\n  onMerge: function onMerge(selection) {\r\n    selection\r\n      .attr('transform', this.transformation())\r\n      .attr('style', this.style())\r\n      .attr('text-anchor', this.anchor())\r\n      .attr('class', this.options()['class'])\r\n      .text(this.text());\r\n  },\r\n\r\n  transformation: function() {\r\n    var x = {\r\n      left: 0,\r\n      center: this.width() / 2,\r\n      right: this.width()\r\n    }[this.textAlign()];\r\n    var y = {\r\n      top: 0,\r\n      middle: this.height() / 2,\r\n      bottom: this.height()\r\n    }[this.verticalAlign()];\r\n\r\n    var translation = translate(x, y);\r\n    var rotation = rotate(this.rotation());\r\n\r\n    return translation + ' ' + rotation;\r\n  }\r\n}, {\r\n  z_index: 70\r\n});\r\n\r\nfunction textOptions(id, options, default_options) {\r\n  if (!options) {\r\n    options = id;\r\n    id = undefined;\r\n  }\r\n  if (isString(options))\r\n    options = {text: options};\r\n\r\n  return extend({id: id}, default_options, options);\r\n}\r\n\r\nfunction text(id, options) {\r\n  return textOptions(id, options, {type: 'Text'});\r\n}\r\n\r\nexport {\r\n  Text as default,\r\n  text,\r\n  textOptions\r\n};\r\n","import {\r\n  getMargins,\r\n  property\r\n} from '../helpers';\r\nimport Text, { textOptions } from './Text';\r\n\r\n/**\r\n  Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)\r\n\r\n  @class Title\r\n  @extends Text\r\n*/\r\nvar Title = Text.extend({\r\n  initialize: function(options) {\r\n    Text.prototype.initialize.call(this, options);\r\n    this.base.select('.chart-text').classed('chart-title', true);\r\n  },\r\n\r\n  /**\r\n    Margins (in pixels) around Title\r\n\r\n    @property margins\r\n    @type Object\r\n    @default (set based on `position`)\r\n  */\r\n  margins: property({\r\n    set: function(values) {\r\n      return {\r\n        override: getMargins(values, defaultMargins(this.position()))\r\n      };\r\n    },\r\n    default_value: function() {\r\n      return defaultMargins(this.position());\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).\r\n\r\n    @property rotation\r\n    @type Number\r\n    @default (set based on `position`)\r\n  */\r\n  rotation: property({\r\n    default_value: function() {\r\n      var rotate_by_position = {\r\n        right: 90,\r\n        left: -90\r\n      };\r\n\r\n      return rotate_by_position[this.position()] || 0;\r\n    }\r\n  })\r\n});\r\n\r\nfunction defaultMargins(position) {\r\n  var default_margin = 8;\r\n  var margins_by_position = {\r\n    top: {top: default_margin, bottom: default_margin},\r\n    right: {right: default_margin, left: default_margin},\r\n    bottom: {top: default_margin, bottom: default_margin},\r\n    left: {right: default_margin, left: default_margin}\r\n  };\r\n  return getMargins(margins_by_position[position]);\r\n}\r\n\r\nfunction title(id, options) {\r\n  return textOptions(id, options, {type: 'Title'});\r\n}\r\n\r\nexport {\r\n  Title as default,\r\n  title\r\n};\r\n","import {\r\n  getMargins,\r\n  property\r\n} from '../helpers';\r\nimport { textOptions } from './Text';\r\nimport Title from './Title';\r\n\r\n/**\r\n  Axis title component that extends Title with defaults (styling)\r\n\r\n  @class AxisTitle\r\n  @extends Title\r\n*/\r\nvar AxisTitle = Title.extend({\r\n  initialize: function(options) {\r\n    Title.prototype.initialize.call(this, options);\r\n    this.base.select('.chart-text')\r\n      .classed('chart-title', false)\r\n      .classed('chart-axis-title', true);\r\n  },\r\n\r\n  /**\r\n    Margins (in pixels) around axis title\r\n\r\n    @property margins\r\n    @type Object\r\n    @default (set based on `position`)\r\n  */\r\n  margins: property({\r\n    set: function(values) {\r\n      return {\r\n        override: getMargins(values, defaultMargins(this.position()))\r\n      };\r\n    },\r\n    default_value: function() {\r\n      return defaultMargins(this.position());\r\n    }\r\n  })\r\n});\r\n\r\nfunction defaultMargins(position) {\r\n  var default_margin = 8;\r\n  var margins_by_position = {\r\n    top: {top: default_margin / 2, bottom: default_margin},\r\n    right: {left: default_margin / 2, right: default_margin},\r\n    bottom: {bottom: default_margin / 2, top: default_margin},\r\n    left: {right: default_margin / 2, left: default_margin}\r\n  };\r\n\r\n  return getMargins(margins_by_position[position]);\r\n}\r\n\r\nfunction axisTitle(id, options) {\r\n  return textOptions(id, options, {type: 'AxisTitle'});\r\n}\r\n\r\nexport {\r\n  AxisTitle as default,\r\n  axisTitle\r\n};\r\n","import {\n  contains,\n  defaults,\n  isFunction\n} from './utils';\n\n/*\n  Extract layout from the given options\n\n  @param {Array} options\n  @return {Object} {data, items, layout}\n*/\nexport function extractLayout(options) {\n  if (!options)\n    return;\n\n  var data = {\n    _charts: {},\n    _components: {}\n  };\n  var items = {};\n  var layout = [];\n  var charts = [];\n  var components = [];\n\n  // TEMP Idenfify charts from layered,\n  // eventually no distinction between charts and components\n  var found = {\n    row: false,\n    charts: false\n  };\n\n  // Components are added from inside-out\n  // so for position: top, position: left, use unshift\n  options.forEach(function(row, row_index) {\n    var row_components = [];\n\n    if (!Array.isArray(row))\n      row = [row];\n    if (row.length > 1)\n      found.row = true;\n\n    var row_layout = row.map(function(item, col_index) {\n      if (!item)\n        return;\n\n      if (item._layered) {\n        // Charts\n        found.charts = found.row = true;\n        var chart_ids = [];\n\n        item.items.forEach(function(chart, chart_index) {\n          if (!chart)\n            return;\n\n          chart = defaults({}, chart, {id: getId(row_index, col_index, chart_index)});\n\n          chart_ids.push(chart.id);\n          charts.push(chart);\n          items[chart.id] = chart;\n        });\n\n        return chart_ids;\n      }\n\n      var component = prepareComponent(item, row_index, col_index);\n      items[component.id] = component;\n\n      if (row.length > 1) {\n        if (!found.charts) {\n          // Left\n          setPosition(component, 'left');\n          row_components.unshift(component);\n        }\n        else {\n          // Right\n          setPosition(component, 'right');\n          row_components.push(component);\n        }\n      }\n      else {\n        if (!found.row) {\n          // Top\n          setPosition(component, 'top');\n          components.unshift(component);\n        }\n        else {\n          // Bottom\n          setPosition(component, 'bottom');\n          components.push(component);\n        }\n      }\n\n      return component.id;\n    });\n\n    if (row_components.length)\n      components = components.concat(row_components);\n\n    layout.push(row_layout);\n  });\n\n  charts.forEach(extractData('_charts'));\n  components.forEach(extractData('_components'));\n\n  return {\n    data: data,\n    items: items,\n    layout: layout,\n\n    charts: charts,\n    components: components\n  };\n\n  function prepareComponent(component, row_index, col_index) {\n    return defaults({}, component, {id: getId(row_index, col_index)});\n  }\n  function setPosition(component, position) {\n    if (component && isFunction(component.position))\n      component.position(position);\n    else\n      component.position = position;\n  }\n  function getId(row_index, col_index, layered_index) {\n    var id = 'item-' + (row_index + 1) + '-' + (col_index + 1);\n    if (layered_index != null)\n      id += '-' + (layered_index + 1);\n\n    return id;\n  }\n\n  function extractData(type) {\n    return function(item) {\n      if (item.data && !isFunction(item.data)) {\n        data[type][item.id] = item.data;\n        data[item.id] = item.data;\n        delete item.data;\n      }\n    };\n  }\n}\n\n/*\n  Calculate component and chart coordinates for given layout\n*/\nexport function calculateLayout(components, data, demux) {\n  var overall_layout = {top: [], right: [], bottom: [], left: []};\n  components.forEach(function(component) {\n    if (component.skip_layout || !component.getLayout)\n      return;\n\n    var layout = component.getLayout(demux(component.id, data));\n    var position = layout && layout.position;\n\n    if (!contains(['top', 'right', 'bottom', 'left'], position))\n      return;\n\n    overall_layout[position].push({\n      offset: position == 'top' || position == 'bottom' ? layout.height : layout.width,\n      component: component\n    });\n  });\n\n  return overall_layout;\n}\n\n/*\n  Apply calculated layout to charts and components\n*/\nexport function applyLayout(layout, chart_position, width, height) {\n  layout.top.reduce(function(previous, part) {\n    var y = previous - part.offset;\n    setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n    return y;\n  }, chart_position.top);\n\n  layout.right.reduce(function(previous, part, index, parts) {\n    var previousPart = parts[index - 1] || {offset: 0};\n    var x = previous + previousPart.offset;\n    setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n    return x;\n  }, width - chart_position.right);\n\n  layout.bottom.reduce(function(previous, part, index, parts) {\n    var previousPart = parts[index - 1] || {offset: 0};\n    var y = previous + previousPart.offset;\n    setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n    return y;\n  }, height - chart_position.bottom);\n\n  layout.left.reduce(function(previous, part) {\n    var x = previous - part.offset;\n    setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n    return x;\n  }, chart_position.left);\n\n  function setLayout(component, x, y, options) {\n    if (component && isFunction(component.setLayout))\n      component.setLayout(x, y, options);\n  }\n}\n","import d3 from 'd3';\r\nimport {\r\n  isFunction,\r\n  find,\r\n  defaults,\r\n  extend,\r\n  objectEach,\r\n  difference,\r\n  pluck\r\n} from './utils';\r\nimport {\r\n  getMargins,\r\n  property,\r\n  style,\r\n  translate\r\n} from './helpers';\r\nimport {\r\n  extractLayout,\r\n  calculateLayout,\r\n  applyLayout\r\n} from './layout';\r\nimport Base from './Base';\r\nimport Overlay from './Overlay';\r\nvar default_compose_margins = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n/**\r\n  Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\r\n  Using the `options` property, charts and components can be bound to data and customized to create dynamic charts.\r\n\r\n  @example\r\n  ```html\r\n  <div id=\"#chart\"></div>\r\n  ```\r\n  ```js\r\n  var chart = d3.select('#chart').chart('Compose', function(data) {\r\n    // Process data...\r\n\r\n    // Create shared scales\r\n    var scales = {\r\n      x: {data: data.input, key: 'x', adjacent: true},\r\n      y: {data: data.input, key: 'y'},\r\n      y2: {data: data.output, key: 'y'}\r\n    };\r\n\r\n    // Setup charts and components\r\n    var charts = [\r\n      d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\r\n      d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\r\n    ];\r\n\r\n    var title = d3c.title('d3.compose');\r\n    var xAxis = d3c.axis('xAxis', {scale: scales.x});\r\n    var yAxis = d3c.axis('yAxis', {scale: scales.y});\r\n    var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\r\n\r\n    // Layout charts and components\r\n    return [\r\n      title,\r\n      [yAxis, d3c.layered(charts), y2Axis],\r\n      xAxis\r\n    ];;\r\n  });\r\n\r\n  chart.draw({input: [...], output: [...]});\r\n  ```\r\n  @class Compose\r\n  @extends Base\r\n*/\r\nvar Compose = Base.extend({\r\n  initialize: function(options) {\r\n    Base.prototype.initialize.call(this, options);\r\n\r\n    // Responsive svg based on the following approach (embedded + padding hack)\r\n    // http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/\r\n    // (not enabled if selection is svg)\r\n    if (this.base.node().tagName != 'svg') {\r\n      this.container = this.base.append('div')\r\n        .attr('class', 'chart-compose-container');\r\n\r\n      this.base = this.container.append('svg')\r\n        .attr('xlmns', 'http://www.w3.org/2000/svg')\r\n        .attr('version', '1.1')\r\n        .attr('class', 'chart-compose');\r\n    }\r\n    else {\r\n      this.base.classed('chart-compose', true);\r\n    }\r\n\r\n    this.attachHoverListeners();\r\n  },\r\n\r\n  transform: function(data) {\r\n    // Save raw data for redraw\r\n    this.rawData(data);\r\n    return Base.prototype.transform.call(this, data);\r\n  },\r\n\r\n  /**\r\n    Get/set the options `object/function` for the chart that takes `data` and\r\n    returns `[...layout]` for composing child charts and components.\r\n\r\n    @example\r\n    ```js\r\n    // get\r\n    chart.options();\r\n\r\n    // set (static)\r\n    chart.options([\r\n      // ...\r\n    ]);\r\n\r\n    // set (dynamic, takes data and returns options)\r\n    chart.options(function(data) {\r\n      // process data...\r\n\r\n      return [\r\n        // ...\r\n      ];\r\n    });\r\n\r\n    // Set directly from d3.chart creation\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        // ...\r\n      });\r\n    ```\r\n    @property options\r\n    @type Function|Object\r\n  */\r\n  options: property({\r\n    default_value: function() { return function() {}; },\r\n    set: function(options) {\r\n      // If options is plain object,\r\n      // return from generic options function\r\n      if (!isFunction(options)) {\r\n        return {\r\n          override: function() {\r\n            return options;\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }),\r\n\r\n  // Store raw data for container before it has been transformed\r\n  rawData: property(),\r\n\r\n  /**\r\n    Margins between edge of container and components/chart\r\n\r\n    @example\r\n    ```js\r\n    chart.margins({top: 10, right: 20, bottom: 10, left: 20});\r\n    ```\r\n    @property margins\r\n    @type Object {top, right, bottom, left}\r\n    @default {top: 10, right: 10, bottom: 10, left: 10}\r\n  */\r\n  margins: property({\r\n    default_value: default_compose_margins,\r\n    set: function(values) {\r\n      return {\r\n        override: getMargins(values, default_compose_margins)\r\n      };\r\n    }\r\n  }),\r\n\r\n  // Chart position\r\n  chartPosition: property({\r\n    default_value: {top: 0, right: 0, bottom: 0, left: 0},\r\n    set: function(values) {\r\n      return {\r\n        override: defaults({}, values, {top: 0, right: 0, bottom: 0, left: 0})\r\n      };\r\n    },\r\n    get: function(values) {\r\n      values.width = this._width() - values.right - values.left;\r\n      values.height = this._height() - values.bottom - values.top;\r\n\r\n      return values;\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Get/set overall width of chart\r\n\r\n    @property width\r\n    @type Number\r\n  */\r\n  width: property({\r\n    default_value: null\r\n  }),\r\n\r\n  /**\r\n    Get/set overall height of chart\r\n\r\n    @property height\r\n    @type Number\r\n  */\r\n  height: property({\r\n    default_value: null\r\n  }),\r\n\r\n  _width: function() {\r\n    var width = this.width();\r\n    return width != null ? width : Base.prototype.width.call(this);\r\n  },\r\n  _height: function() {\r\n    var height = this.height();\r\n    return height != null ? height : Base.prototype.height.call(this);\r\n  },\r\n\r\n  /**\r\n    Enable responsive container + viewBox so that chart scales to fill width\r\n    (only works if selection is not an svg)\r\n\r\n    @property responsive\r\n    @type Boolean\r\n    @default true\r\n  */\r\n  responsive: property({\r\n    default_value: true\r\n  }),\r\n\r\n  // Set svg viewBox attribute\r\n  viewBox: property({\r\n    default_value: function() {\r\n      if (this.responsive() && this.width() && this.height())\r\n        return '0 0 ' + this.width() + ' ' + this.height();\r\n      else\r\n        return null;\r\n    }\r\n  }),\r\n\r\n  // Set svg preserveAspectRatio attribute\r\n  preserveAspectRatio: property({\r\n    default_value: function() {\r\n      if (this.responsive())\r\n        return 'xMidYMid meet';\r\n      else\r\n        return null;\r\n    }\r\n  }),\r\n\r\n  // Set container style\r\n  containerStyle: property({\r\n    default_value: function() {\r\n      if (this.responsive()) {\r\n        var aspect_ratio = 1;\r\n        if (this.width() && this.height())\r\n          aspect_ratio = this.height() / this.width();\r\n\r\n        return style({\r\n          width: '100%',\r\n          height: 0,\r\n          'padding-top': (aspect_ratio * 100) + '%',\r\n          position: 'relative'\r\n        });\r\n      }\r\n      else {\r\n        return style({position: 'relative'});\r\n      }\r\n    }\r\n  }),\r\n\r\n  // Set base style\r\n  baseStyle: property({\r\n    default_value: function() {\r\n      if (this.responsive() && this.container) {\r\n        return style({\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0\r\n        });\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Set charts from options or get chart instances.\r\n    Each chart should use a unique key so that updates are passed to the existing chart\r\n    (otherwise they are recreated on update).\r\n    The `type` option must be a registered `d3.chart` and all other options are passed to the chart.\r\n\r\n    @example\r\n    ```js\r\n    chart.charts([\r\n      {id: 'input', type: 'Bars'}, // options to pass to Bars chart\r\n      {id: 'output', type: 'Lines'} // options to pass to Lines chart\r\n    ]);\r\n    ```\r\n    @property charts\r\n    @type Array\r\n  */\r\n  charts: property({\r\n    set: function(chart_options, charts) {\r\n      // Store actual charts rather than options\r\n      return {\r\n        override: this._attachItems(chart_options, charts, this)\r\n      };\r\n    },\r\n    default_value: []\r\n  }),\r\n\r\n  /**\r\n    Set components from options or get components instances.\r\n    Each component should use a unique key so that updates are passed to the existing chart\r\n    (otherwise they are recreated on update).\r\n    The `type` option must be a registered `d3.chart` and all other options are passed to the component.\r\n\r\n    @example\r\n    ```js\r\n    chart.components([\r\n      {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\r\n      {id: 'title', type: 'Title'} // options to pass to Title component\r\n    ])\r\n    ```\r\n    @property components\r\n    @type Array\r\n  */\r\n  components: property({\r\n    set: function(component_options, components) {\r\n      // Store actual components rather than options\r\n      return {\r\n        override: this._attachItems(component_options, components, this)\r\n      };\r\n    },\r\n    default_value: []\r\n  }),\r\n\r\n  /**\r\n    Delay start of transition by specified milliseconds.\r\n    (applied to all charts and components as default)\r\n\r\n    @property delay\r\n    @type Number|Function\r\n    @default d3 default: 0\r\n  */\r\n  delay: property(),\r\n\r\n  /**\r\n    Transition duration in milliseconds.\r\n    (applied to all charts and components as default)\r\n\r\n    @property duration\r\n    @type Number|Function\r\n    @default d3 default: 250ms\r\n  */\r\n  duration: property(),\r\n\r\n  /**\r\n    Transition ease function.\r\n    (applied to all charts and components as default)\r\n\r\n    - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\r\n    - Note: arguments to pass to `d3.ease` are not supported\r\n\r\n    @property ease\r\n    @type String|Function\r\n    @default d3 default: 'cubic-in-out'\r\n  */\r\n  ease: property(),\r\n\r\n  /**\r\n    Draw chart with given data\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        // ...\r\n      });\r\n\r\n    chart.draw([1, 2, 3]);\r\n\r\n    chart.draw({values: [1, 2, 3]});\r\n\r\n    chart.draw([\r\n      {values: [1, 2, 3]},\r\n      {values: [4, 5, 6]}\r\n    ]);\r\n    ```\r\n    @method draw\r\n    @param {Any} data\r\n  */\r\n  draw: function(data) {\r\n    var config = this._prepareConfig(this.options(), data);\r\n    if (!config)\r\n      config = {data: {_charts: {}, _components: {}}, layout: [], charts: [], components: []};\r\n\r\n    // Set charts and components from config\r\n    this.charts(config.charts);\r\n    this.components(config.components);\r\n\r\n    // Add config data\r\n    data = {\r\n      original: data,\r\n      config: config.data\r\n    };\r\n    this.data(data);\r\n\r\n    this._setDimensions();\r\n\r\n    // Layout components\r\n    this.layout(config.layout, data);\r\n\r\n    // Full draw now that everything has been laid out\r\n    d3.chart().prototype.draw.call(this, data);\r\n  },\r\n\r\n  /**\r\n    Redraw chart with current data\r\n\r\n    @method redraw\r\n  */\r\n  redraw: function() {\r\n    if (this.rawData())\r\n      this.draw(this.rawData().original);\r\n  },\r\n\r\n  demux: function(name, data) {\r\n    if (!data || !data.config || !data.original)\r\n      return data;\r\n\r\n    if (findById(this.charts(), name) && data.config._charts[name])\r\n      return data.config._charts[name];\r\n    else if (findById(this.components(), name) && data.config._components[name])\r\n      return data.config._components[name];\r\n    else\r\n      return data.original;\r\n  },\r\n\r\n  // Create chart layer (for laying out charts)\r\n  createChartLayer: function(options) {\r\n    return this.base.append('g')\r\n      .attr('class', 'chart-layer')\r\n      .attr('data-zIndex', options && options.z_index);\r\n  },\r\n\r\n  // Create component layer\r\n  createComponentLayer: function(options) {\r\n    return this.base.append('g')\r\n      .attr('class', 'chart-component-layer')\r\n      .attr('data-zIndex', options && options.z_index);\r\n  },\r\n\r\n  // Create overlay layer\r\n  createOverlayLayer: function() {\r\n    if (!this.container)\r\n      throw new Error('Cannot create overlay layer if original selection \"d3.select(...).chart(\\'Compose\\')\" is an svg. Use a div instead for responsive and overlay support.');\r\n\r\n    return this.container.append('div')\r\n      .attr('class', 'chart-overlay-layer');\r\n  },\r\n\r\n  // Layout components and charts for given data\r\n  layout: function(layout, data) {\r\n    // 1. Place chart layers\r\n    this._positionChartLayers();\r\n\r\n    // 2. Extract layout from components\r\n    layout = this._extractLayout(data);\r\n\r\n    // 3. Set chart position from layout\r\n    var chart_position = extend({}, this.margins());\r\n    objectEach(layout, function(parts, key) {\r\n      parts.forEach(function(part) {\r\n        chart_position[key] += part.offset || 0;\r\n      });\r\n    });\r\n    this.chartPosition(chart_position);\r\n\r\n    // 4. Position layers with layout\r\n    this.positionLayers(layout);\r\n  },\r\n\r\n  attachHoverListeners: function() {\r\n    // For responsive, listen on container div and calculate enter/exit for base from bounding rectangle\r\n    // For non-responsive, bounding rectangle is container so calculations still apply\r\n\r\n    var trigger = this.trigger.bind(this);\r\n    var chartPosition = this.chartPosition.bind(this);\r\n    var container = this.container || this.base;\r\n    var base = this.base.node();\r\n    var chart_position, bounds, was_inside;\r\n\r\n    container.on('mouseenter', function() {\r\n      // Calculate chart position and bounds on enter and cache during move\r\n      chart_position = chartPosition();\r\n      bounds = getBounds();\r\n\r\n      was_inside = inside(bounds);\r\n      if (was_inside)\r\n        enter();\r\n    });\r\n    container.on('mousemove', function() {\r\n      // Mousemove may fire before mouseenter in IE\r\n      if (!chart_position || !bounds) {\r\n        chart_position = chartPosition();\r\n        bounds = getBounds();\r\n      }\r\n\r\n      var is_inside = inside(bounds);\r\n      if (was_inside && is_inside)\r\n        move();\r\n      else if (was_inside)\r\n        leave();\r\n      else if (is_inside)\r\n        enter();\r\n\r\n      was_inside = is_inside;\r\n    });\r\n    container.on('mouseleave', function() {\r\n      if (was_inside) {\r\n        was_inside = false;\r\n        leave();\r\n      }\r\n    });\r\n\r\n    function inside() {\r\n      var mouse = d3.mouse(document.documentElement);\r\n      return mouse[0] >= bounds.left && mouse[0] <= bounds.right && mouse[1] >= bounds.top && mouse[1] <= bounds.bottom;\r\n    }\r\n    function enter() {\r\n      trigger('mouseenter', translateToXY(d3.mouse(base)));\r\n    }\r\n    function move() {\r\n      trigger('mousemove', translateToXY(d3.mouse(base)));\r\n    }\r\n    function leave() {\r\n      trigger('mouseleave');\r\n    }\r\n\r\n    function translateToXY(coordinates) {\r\n      var x = coordinates[0];\r\n      var y = coordinates[1];\r\n      var chart_x = x - chart_position.left;\r\n      var chart_y = y - chart_position.top;\r\n\r\n      // Set at chart bounds if outside of chart\r\n      if (x > (chart_position.left + chart_position.width))\r\n        chart_x = chart_position.width;\r\n      else if (x < chart_position.left)\r\n        chart_x = 0;\r\n\r\n      if (y > (chart_position.top + chart_position.height))\r\n        chart_y = chart_position.height;\r\n      else if (y < chart_position.top)\r\n        chart_y = 0;\r\n\r\n      return {\r\n        container: {x: x, y: y},\r\n        chart: {x: chart_x, y: chart_y}\r\n      };\r\n    }\r\n\r\n    function getBounds() {\r\n      var scroll_y = 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;\r\n\r\n      bounds = extend({}, base.getBoundingClientRect());\r\n      bounds.top += scroll_y;\r\n      bounds.bottom += scroll_y;\r\n\r\n      return bounds;\r\n    }\r\n  },\r\n\r\n  // Attach chart/component child item with id\r\n  attach: function(id, item) {\r\n    item.id = id;\r\n    item.base.attr('data-id', id);\r\n    item.container = this;\r\n\r\n    Base.prototype.attach.call(this, id, item);\r\n\r\n    if (item && isFunction(item.trigger))\r\n      item.trigger('attach');\r\n  },\r\n\r\n  // Detach chart/component child item by id\r\n  detach: function(id, item) {\r\n    item.base.remove();\r\n\r\n    delete this._attached[id];\r\n\r\n    if (item && isFunction(item.trigger))\r\n      item.trigger('detach');\r\n  },\r\n\r\n  // Position chart and component layers\r\n  positionLayers: function(layout) {\r\n    this._positionChartLayers();\r\n    this._positionComponents(layout);\r\n    this._positionByZIndex();\r\n  },\r\n\r\n  //\r\n  // Internal\r\n  //\r\n\r\n  _setDimensions: function() {\r\n    // Set container and svg dimensions\r\n    // (if original selection is svg, no container and skip responsiveness)\r\n    if (this.container) {\r\n      this.container\r\n        .attr('style', this.containerStyle());\r\n    }\r\n\r\n    this.base\r\n      .attr('viewBox', this.viewBox())\r\n      .attr('preserveAspectRatio', this.preserveAspectRatio())\r\n      .attr('style', this.baseStyle())\r\n      .attr('width', this.responsive() ? null : this.width())\r\n      .attr('height', this.responsive() ? null : this.height());\r\n  },\r\n\r\n  _attachItems: function(items, container, context) {\r\n    items = items || [];\r\n    container = container || [];\r\n\r\n    // Remove charts that are no longer needed\r\n    var remove_ids = difference(pluck(container, 'id'), pluck(items, 'id'));\r\n    remove_ids.forEach(function(remove_id) {\r\n      context.detach(remove_id, findById(container, remove_id));\r\n    });\r\n\r\n    // Create or update charts\r\n    return items.map(function(options) {\r\n      // TODO May not have id, might need to auto-generate\r\n      // (might be during another step)\r\n      var id = options.id;\r\n      var item = findById(container, id);\r\n\r\n      if (options instanceof d3.chart()) {\r\n        // If chart instance, replace with instance\r\n        if (item)\r\n          context.detach(id, item);\r\n\r\n        context.attach(id, options);\r\n        return options;\r\n      }\r\n      else {\r\n        // TEMP Changing position has nasty side effects, disable for now\r\n        var changed_position = item && !(item instanceof Overlay) && item.position && options.position && item.position() != options.position;\r\n\r\n        if (item && (item.type != options.type || changed_position)) {\r\n          // If chart type has changed, detach and re-create\r\n          context.detach(id, item);\r\n          item = undefined;\r\n        }\r\n\r\n        if (!item) {\r\n          var Item = d3.chart(options.type);\r\n\r\n          if (!Item)\r\n            throw new Error('No registered d3.chart found for ' + options.type);\r\n\r\n          var layer_options = {z_index: Item.z_index || 0};\r\n          var createLayer = {\r\n            'chart': 'createChartLayer',\r\n            'component': 'createComponentLayer',\r\n            'overlay': 'createOverlayLayer'\r\n          }[Item.layer_type];\r\n\r\n          if (!createLayer)\r\n            throw new Error('Unrecognized layer type \"' + Item.layer_type + '\" for ' + options.type);\r\n\r\n          var base = context[createLayer](layer_options);\r\n\r\n          item = new Item(base, options);\r\n          item.type = options.type;\r\n\r\n          context.attach(id, item);\r\n        }\r\n        else {\r\n          item.options(options);\r\n        }\r\n\r\n        return item;\r\n      }\r\n    });\r\n  },\r\n\r\n  _prepareConfig: function(options, data) {\r\n    return extractLayout(options(data));\r\n  },\r\n\r\n  _positionChartLayers: function() {\r\n    var position = this.chartPosition();\r\n    this.base.selectAll('.chart-layer')\r\n      .attr('transform', translate(position.left, position.top))\r\n      .attr('width', position.width)\r\n      .attr('height', position.height);\r\n  },\r\n\r\n  _positionComponents: function(layout) {\r\n    var chart_position = this.chartPosition();\r\n    var width = this._width();\r\n    var height = this._height();\r\n\r\n    applyLayout(layout, chart_position, width, height);\r\n  },\r\n\r\n  _positionByZIndex: function() {\r\n    var layers = this.base.selectAll('.chart-layer, .chart-component-layer')[0];\r\n\r\n    // Sort by z-index\r\n    function setZIndex(layer) {\r\n      return {\r\n        layer: layer,\r\n        zIndex: parseInt(d3.select(layer).attr('data-zIndex')) || 0\r\n      };\r\n    }\r\n    function sortZIndex(a, b) {\r\n      if (a.zIndex < b.zIndex)\r\n        return -1;\r\n      else if (a.zIndex > b.zIndex)\r\n        return 1;\r\n      else\r\n        return 0;\r\n    }\r\n    function getLayer(wrapped) {\r\n      return wrapped.layer;\r\n    }\r\n\r\n    layers = layers.map(setZIndex).sort(sortZIndex).map(getLayer);\r\n\r\n    // Move layers to z-index order\r\n    layers.forEach(function(layer) {\r\n      if (layer && layer.parentNode && layer.parentNode.appendChild)\r\n        layer.parentNode.appendChild(layer);\r\n    });\r\n  },\r\n\r\n  _extractLayout: function(data) {\r\n    return calculateLayout(this.components(), data, this.demux.bind(this));\r\n  }\r\n});\r\n\r\n// TODO Find better place for this\r\nfunction layered(items) {\r\n  if (!Array.isArray(items))\r\n    items = Array.prototype.slice.call(arguments);\r\n\r\n  return {_layered: true, items: items};\r\n}\r\n\r\nfunction findById(items, id) {\r\n  return find(items, function(item) {\r\n    return item.id == id;\r\n  });\r\n}\r\n\r\nexport {\r\n  Compose as default,\r\n  layered\r\n};\r\n","import {\n  property\n} from '../helpers';\nimport {\n  isUndefined\n} from '../utils';\n\n/**\n  Mixin for handling common transition behaviors\n\n  @class Transition\n  @namespace mixins\n*/\nvar Transition = {\n  /**\n    Delay start of transition by specified milliseconds.\n\n    @property delay\n    @type Number|Function\n    @default (use container value, if available)\n  */\n  delay: property({\n    default_value: function() {\n      return this.container && this.container.delay && this.container.delay();\n    }\n  }),\n\n  /**\n    Transition duration in milliseconds.\n\n    @property duration\n    @type Number|Function\n    @default (use container value, if available)\n  */\n  duration: property({\n    default_value: function() {\n      return this.container && this.container.delay && this.container.duration();\n    }\n  }),\n\n  /**\n    Transition ease function\n\n    - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n    - Note: arguments to pass to `d3.ease` are not supported\n\n    @property ease\n    @type String|Function\n    @default (use container value, if available)\n  */\n  ease: property({\n    default_value: function() {\n      return this.container && this.container.delay && this.container.ease();\n    }\n  }),\n\n  /**\n    Setup delay, duration, and ease for transition\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n      initialize: function() {\n        this.layer('circles', this.base, {\n          // ...\n          events: {\n            'merge:transition': function() {\n              // Set delay, duration, and ease from properties\n              this.chart().setupTransition(this);\n            }\n          }\n        });\n      }\n    }));\n    ```\n    @method setupTransition\n    @param {d3.selection} selection\n  */\n  setupTransition: function setupTransition(selection) {\n    var delay = this.delay();\n    var duration = this.duration();\n    var ease = this.ease();\n\n    if (!isUndefined(delay))\n      selection.delay(delay);\n    if (!isUndefined(duration))\n      selection.duration(duration);\n    if (!isUndefined(ease))\n      selection.ease(ease);\n  }\n};\n\nexport default Transition;\n","import {\n  extend,\n  isUndefined,\n  isObject,\n  valueOrDefault\n} from '../utils';\nimport {\n  property,\n  isSeriesData,\n  createScale,\n  di\n} from '../helpers';\n\n/**\n  Mixin for handling XY data\n\n  @class XY\n  @namespace mixins\n*/\nvar XY = {\n  initialize: function() {\n    // Set scale ranges once chart is ready to be rendered\n    this.on('before:draw', this.setScales.bind(this));\n  },\n\n  transform: function(data) {\n    data = data || [];\n\n    // Transform series data from values to x,y\n    if (isSeriesData(data)) {\n      data = data.map(function(series) {\n        return extend({}, series, {\n          values: series.values.map(normalizeData)\n        });\n      });\n    }\n    else if (Array.isArray(data)) {\n      data = data.map(normalizeData);\n    }\n\n    return data;\n\n    function normalizeData(point, index) {\n      if (!isObject(point))\n        point = {x: index, y: point};\n      else if (!Array.isArray(point) && isUndefined(point.x))\n        point.x = index;\n\n      return point;\n    }\n  },\n\n  /**\n    Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)\n\n    @property xScale\n    @type Object|d3.scale\n  */\n  xScale: property({\n    set: function(value) {\n      var scale = createScale(value);\n      this.setXScaleRange(scale);\n\n      return {\n        override: scale\n      };\n    },\n    get: function(scale) {\n      if (!scale) {\n        scale = this.getDefaultXScale();\n        this.setXScaleRange(scale);\n      }\n\n      return scale;\n    }\n  }),\n\n  /**\n    Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)\n\n    @property xScale\n    @type Object|d3.scale\n  */\n  yScale: property({\n    set: function(value) {\n      var scale = createScale(value);\n      this.setYScaleRange(scale);\n\n      return {\n        override: scale\n      };\n    },\n    get: function(scale) {\n      if (!scale) {\n        scale = this.getDefaultYScale();\n        this.setYScaleRange(scale);\n      }\n\n      return scale;\n    }\n  }),\n\n  /**\n    Key on data object for x-value\n\n    @property xKey\n    @type String\n    @default 'x'\n  */\n  xKey: property({\n    default_value: 'x'\n  }),\n\n  /**\n    Key on data object for y-value\n\n    @property yKey\n    @type String\n    @default 'y'\n  */\n  yKey: property({\n    default_value: 'y'\n  }),\n\n  /**\n    Get scaled x-value for given data-point\n\n    @method x\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  x: di(function(chart, d, i) {\n    var value = chart.xValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.xScale()(value, series_index));\n  }),\n\n  /**\n    Get scaled y-value for given data-point\n\n    @method y\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  y: di(function(chart, d, i) {\n    var value = chart.yValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.yScale()(value, series_index));\n  }),\n\n  /**\n    Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.\n\n    @method key\n    @param {Any} d\n    @param {Number} i\n    @return {Any}\n  */\n  key: di(function(chart, d, i) {\n    return valueOrDefault(d.key, chart.xValue.call(this, d, i));\n  }),\n\n  /**\n    Get scaled `x = 0` value\n\n    @method x0\n    @return {Number}\n  */\n  x0: function() {\n    return parseFloat(this.xScale()(0));\n  },\n\n  /**\n    Get scaled `y = 0` value\n\n    @method x0\n    @return {Number}\n  */\n  y0: function() {\n    return parseFloat(this.yScale()(0));\n  },\n\n  /**\n    Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.\n\n    @example\n    ```js\n    xValue({x: 10, y: 20}); // -> 10\n    xValue([10, 20]); // -> 10\n    ```\n    @method xValue\n    @param {Any} d\n    @return {Any}\n  */\n  xValue: di(function(chart, d) {\n    var key = chart.xKey();\n    if (d)\n      return key in d ? d[key] : d[0];\n  }),\n\n  /**\n    Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.\n\n    @example\n    ```js\n    yValue({x: 10, y: 20}); // -> 20\n    yValue([10, 20]); // -> 20\n    ```\n    @method yValue\n    @param {Any} d\n    @return {Any}\n  */\n  yValue: di(function(chart, d) {\n    var key = chart.yKey();\n    if (d)\n      return key in d ? d[key] : d[1];\n  }),\n\n  /**\n    Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)\n\n    @method setScales\n  */\n  setScales: function() {\n    this.setXScaleRange(this.xScale());\n    this.setYScaleRange(this.yScale());\n  },\n\n  /**\n    Set range (0, width) for given x-scale\n\n    @method setXScaleRange\n    @param {d3.scale} x_scale\n  */\n  setXScaleRange: function(x_scale) {\n    x_scale.range([0, this.width()]);\n  },\n\n  /**\n    Set range(height, 0) for given y-scale\n\n    @method setYScaleRange\n    @param {d3.scale} y_scale\n  */\n  setYScaleRange: function(y_scale) {\n    y_scale.range([this.height(), 0]);\n  },\n\n  /**\n    Get default x-scale: `{data: this.data(), key: 'x'}`\n\n    @method getDefaultXScale\n    @return {d3.scale}\n  */\n  getDefaultXScale: function() {\n    return createScale({\n      data: this.data(),\n      key: 'x'\n    });\n  },\n\n  /**\n    Get default y-scale: `{data: this.data(), key: 'y'}`\n\n    @method getDefaultYScale\n    @return {d3.scale}\n  */\n  getDefaultYScale: function() {\n    return createScale({\n      data: this.data(),\n      key: 'y'\n    });\n  }\n};\n\nexport default XY;\n","import { contains } from './utils';\r\nimport {\r\n  dimensions,\r\n  getMargins,\r\n  property,\r\n  translate\r\n} from './helpers';\r\nimport Base from './Base';\r\n\r\n/**\r\n  Common base for creating components that includes helpers for positioning and layout.\r\n\r\n  ### Extending\r\n\r\n  `d3.chart('Component')` contains intelligent defaults and there are no required overrides.\r\n  Create a component just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n  - To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\r\n  - To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`\r\n\r\n  @example\r\n  ```js\r\n  d3.chart('Component').extend('Key', {\r\n    initialize: function() {\r\n      this.layer('Key', this.base, {\r\n        dataBind: function(data) {\r\n          return this.selectAll('text')\r\n            .data(data);\r\n        },\r\n        insert: function() {\r\n          return this.append('text');\r\n        },\r\n        events: {\r\n          merge: function() {\r\n            this.text(this.chart().keyText)\r\n          }\r\n        }\r\n      })\r\n    },\r\n\r\n    keyText: helpers.di(function(chart, d, i) {\r\n      return d.abbr + ' = ' + d.value;\r\n    })\r\n  });\r\n  ```\r\n  @class Component\r\n  @extends Base\r\n*/\r\nvar Component = Base.extend({\r\n  /**\r\n    Component's position relative to chart\r\n    (top, right, bottom, left)\r\n\r\n    @property position\r\n    @type String\r\n    @default 'top'\r\n  */\r\n  position: property({\r\n    default_value: 'top',\r\n    validate: function(value) {\r\n      return contains(['top', 'right', 'bottom', 'left'], value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Get/set the width of the component (in pixels)\r\n    (used in layout calculations)\r\n\r\n    @property width\r\n    @type Number\r\n    @default (actual width)\r\n  */\r\n  width: property({\r\n    default_value: function() {\r\n      return dimensions(this.base).width;\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Get/set the height of the component (in pixels)\r\n    (used in layout calculations)\r\n\r\n    @property height\r\n    @type Number\r\n    @default (actual height)\r\n  */\r\n  height: property({\r\n    default_value: function() {\r\n      return dimensions(this.base).height;\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Margins (in pixels) around component\r\n\r\n    @property margins\r\n    @type Object\r\n    @default {top: 0, right: 0, bottom: 0, left: 0}\r\n  */\r\n  margins: property({\r\n    set: function(values) {\r\n      return {\r\n        override: getMargins(values)\r\n      };\r\n    },\r\n    default_value: getMargins()\r\n  }),\r\n\r\n  /**\r\n    Center the component vertically/horizontally (depending on position)\r\n\r\n    @property centered\r\n    @type Boolean\r\n    @default false\r\n  */\r\n  centered: property({\r\n    default_value: false\r\n  }),\r\n\r\n  /**\r\n    Skip component during layout calculations and positioning\r\n    (override in prototype of extension)\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('NotLaidOut', {\r\n      skip_layout: true\r\n    });\r\n    ```\r\n    @attribute skip_layout\r\n    @type Boolean\r\n    @default false\r\n  */\r\n  skip_layout: false,\r\n\r\n  /**\r\n    Perform any layout preparation required before getLayout (default is draw)\r\n    (override in prototype of extension)\r\n\r\n    Note: By default, components are double-drawn;\r\n    for every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\r\n    This can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('Custom', {\r\n      prepareLayout: function(data) {\r\n        // default: this.draw(data);\r\n        // so that getLayout has real dimensions\r\n\r\n        // -> custom preparation (if necessary)\r\n      }\r\n    })\r\n    ```\r\n    @method prepareLayout\r\n    @param {Any} data\r\n  */\r\n  prepareLayout: function(data) {\r\n    this.draw(data);\r\n  },\r\n\r\n  /**\r\n    Get layout details for use when laying out component\r\n    (override in prototype of extension)\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('Custom', {\r\n      getLayout: function(data) {\r\n        var calculated_width, calculated_height;\r\n\r\n        // Perform custom calculations...\r\n\r\n        // Must return position, width, and height\r\n        return {\r\n          position: this.position(),\r\n          width: calculated_width,\r\n          height: calculated_height\r\n        };\r\n      }\r\n    });\r\n    ```\r\n    @method getLayout\r\n    @param {Any} data\r\n    @return {Object} position, width, and height for layout\r\n  */\r\n  getLayout: function(data) {\r\n    this.prepareLayout(data);\r\n\r\n    var margins = this.margins();\r\n    return {\r\n      position: this.position(),\r\n      width: this.width() + margins.left + margins.right,\r\n      height: this.height() + margins.top + margins.bottom\r\n    };\r\n  },\r\n\r\n  /**\r\n    Set layout of underlying base\r\n    (override in prototype of extension)\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('Custom', {\r\n      setLayout: function(x, y, options) {\r\n        // Set layout of this.base...\r\n        // (the following is the default implementation)\r\n        var margins = this.margins();\r\n\r\n        // (handle this.centered())\r\n\r\n        this.base\r\n          .attr('transform', helpers.translate(x + margins.left, y + margins.top));\r\n        this.height(options && options.height);\r\n        this.width(options && options.width);\r\n      }\r\n    });\r\n    ```\r\n    @method setLayout\r\n    @param {Number} x position of base top-left\r\n    @param {Number} y position of base top-left\r\n    @param {Object} options\r\n      @param {Object} [options.height] height of component in layout\r\n      @param {Object} [options.width] width of component in layout\r\n  */\r\n  setLayout: function(x, y, options) {\r\n    var margins = this.margins();\r\n\r\n    if (this.centered()) {\r\n      var actual_dimensions = dimensions(this.base);\r\n      if ('height' in options)\r\n        y += (options.height - actual_dimensions.height) / 2;\r\n      else\r\n        y += margins.top;\r\n\r\n      if ('width' in options)\r\n        x += (options.width - actual_dimensions.width) / 2;\r\n      else\r\n        x += margins.left;\r\n    }\r\n    else {\r\n      x += margins.left;\r\n      y += margins.top;\r\n    }\r\n\r\n    this.base.attr('transform', translate(x, y));\r\n    this.height(options && options.height);\r\n    this.width(options && options.width);\r\n  }\r\n}, {\r\n  /**\r\n    Default z-index for component\r\n    (Charts are 100 by default, so Component = 50 is below chart by default)\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('AboveChartLayers', {\r\n      // ...\r\n    }, {\r\n      z_index: 150\r\n    });\r\n    ```\r\n    @attribute z_index\r\n    @static\r\n    @type Number\r\n    @default 50\r\n  */\r\n  z_index: 50,\r\n\r\n  /**\r\n    Set to `'chart'` to use chart layer for component.\r\n    (e.g. Axis uses chart layer to position with charts, but includes layout for ticks)\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('ChartComponent', {\r\n      // ...\r\n    }, {\r\n      layer_type: 'chart'\r\n    });\r\n    ```\r\n    @attribute layer_type\r\n    @static\r\n    @type String\r\n    @default 'component'\r\n  */\r\n  layer_type: 'component'\r\n});\r\n\r\nexport default Component;\r\n","import d3 from 'd3';\nimport { property } from '../helpers';\nimport {\n  extend,\n  defaults,\n  isBoolean\n} from '../utils';\n\n/**\n  Mixin for handling labels in charts\n\n  @class Labels\n  @namespace mixins\n*/\nvar Labels = {\n  /**\n    Call during chart initialization to add labels to chart\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n      initialize: function() {\n        // this.layer()...\n\n        // Attach labels layer\n        this.attachLabels();\n      }\n    }));\n    ```\n    @method attachLabels\n  */\n  attachLabels: function() {\n    var options = this.labels();\n    options.parent = this;\n\n    var LabelsClass = d3.chart(options.type);\n    var base = this.base.append('g').attr('class', 'chart-labels');\n    var labels = this._labels = new LabelsClass(base, options);\n\n    // Proxy x and y to parent chart\n    this.proxyLabelMethods.forEach(function(method) {\n      labels[method] = this[method];\n    }, this);\n\n    this.on('draw', function(data) {\n      options = this.labels();\n      options.parent = this;\n\n      labels.options(options);\n\n      if (options.display !== false)\n        labels.draw(options.data || data);\n      else\n        labels.draw([]);\n    }.bind(this));\n  },\n\n  /**\n    Options passed to labels chart\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n      // ...\n    }));\n\n    // ...\n\n    chart.labels(true); // -> display labels with defaults\n    chart.labels(false); // -> hide labels\n    chart.labels({offset: 10}); // -> pass options to labels chart\n\n    d3.select('#chart')\n      .chart('Compose', function(data) {\n        return {\n          charts: {\n            custom: {labels: {offset: 10}}\n          }\n        };\n      });\n    ```\n    @property labels\n    @type Object\n  */\n  labels: property({\n    get: function(value) {\n      if (isBoolean(value))\n        value = {display: value};\n      else if (!value)\n        value = {display: false};\n\n      return defaults({}, value, {\n        type: 'Labels'\n      });\n    }\n  }),\n\n  // Array of methods to proxy on labels chart\n  proxyLabelMethods: []\n};\n\n/**\n  Mixin for handling labels in XY charts\n  (proxies `x` and `y` to properly place labels for XY charts)\n\n  @class LabelsXY\n  @namespace mixins\n  @extends Labels\n*/\nvar LabelsXY = extend({}, Labels, {\n  proxyLabelMethods: ['x', 'y']\n});\n\nexport {\n  Labels as default,\n  LabelsXY\n};\n","import { di } from '../helpers';\n\n/**\n  Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right\n\n  @class XYInverted\n  @namespace mixins\n*/\nvar XYInverted = {\n  /**\n    Get x-value for plotting (scaled y-value)\n\n    @method x\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  x: di(function(chart, d, i) {\n    var value = chart.yValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.yScale()(value, series_index));\n  }),\n\n  /**\n    Get y-value for plotting (scaled x-value)\n\n    @method y\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  y: di(function(chart, d, i) {\n    var value = chart.xValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.xScale()(value, series_index));\n  }),\n\n  /**\n    Get scaled y = 0 value (along x-axis)\n\n    @method x0\n    @return {Number}\n  */\n  x0: function() {\n    return parseFloat(this.yScale()(0));\n  },\n\n  /**\n    Get scaled x = 0 value (along y-axis)\n\n    @method x0\n    @return {Number}\n  */\n  y0: function() {\n    return parseFloat(this.xScale()(0));\n  },\n\n  /**\n    Set range (height, 0) for given x-scale\n\n    @method setXScaleRange\n    @param {d3.scale} x_scale\n  */\n  setXScaleRange: function(x_scale) {\n    x_scale.range([this.height(), 0]);\n  },\n\n  /**\n    Set range (0, width) for given y-scale\n\n    @method setYScaleRange\n    @param {d3.scale} y_scale\n  */\n  setYScaleRange: function(y_scale) {\n    y_scale.range([0, this.width()]);\n  }\n};\n\nexport default XYInverted;\n","import { createScale } from '../helpers';\n\n/**\n  Mixin for charts of centered key,value data (x: index, y: value, key)\n\n  @class XYValues\n  @namespace mixins\n*/\nvar XYValues = {\n  /**\n    Determine width of data-point when displayed adjacent\n\n    @method adjacentWidth\n    @return {Number}\n  */\n  adjacentWidth: function() {\n    var series_count = this.seriesCount ? this.seriesCount() : 1;\n    return this.layeredWidth() / series_count;\n  },\n\n  /**\n    Determine layered width (width of group for adjacent)\n\n    @method layeredWidth\n    @return {Number}\n  */\n  layeredWidth: function() {\n    var range_band = this.xScale() && this.xScale().rangeBand && this.xScale().rangeBand();\n    var width = isFinite(range_band) ? range_band : 0;\n\n    return width;\n  },\n\n  /**\n    Determine item width based on series display type (adjacent or layered)\n\n    @method itemWidth\n    @return {Number}\n  */\n  itemWidth: function() {\n    var scale = this.xScale();\n    return scale && scale.width ? scale.width() : this.layeredWidth();\n  },\n\n  // Override default x-scale to use ordinal type\n  /**\n    Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`\n\n    @method getDefaultYScale\n    @return {d3.scale}\n  */\n  getDefaultXScale: function() {\n    return createScale({\n      type: 'ordinal',\n      data: this.data(),\n      key: 'x',\n      centered: true\n    });\n  }\n};\n\nexport default XYValues;\n","import d3 from 'd3';\nimport {\n  getParentData,\n  style,\n  isSeriesData,\n  di\n} from '../helpers';\n\n/**\n  Mixin for handling series data\n\n  @class Series\n  @namespace mixins\n*/\nvar Series = {\n  /**\n    Get key for given series data\n\n    @method seriesKey\n    @param {Any} d Series object with `key`\n    @return {Any}\n  */\n  seriesKey: di(function(chart, d) {\n    return d.key;\n  }),\n\n  /**\n    Get values for given series data\n\n    @method seriesValues\n    @param {Any} d Series object with `values` array\n    @return {Array}\n  */\n  seriesValues: di(function(chart, d, i) {\n    // Store seriesIndex on series\n    d.seriesIndex = i;\n    return d.values;\n  }),\n\n  /**\n    Get class for given series data\n\n    @method seriesClass\n    @param {Any} d\n    @param {Number} i\n    @return {String}\n  */\n  seriesClass: di(function(chart, d, i) {\n    return 'chart-series chart-index-' + i + (d['class'] ? ' ' + d['class'] : '');\n  }),\n\n  /**\n    Get index for given data-point of series\n\n    @method seriesIndex\n    @param {Any} d\n    @param {Number} i\n  */\n  seriesIndex: di(function(chart, d, i) {\n    var series = chart.seriesData.call(this, d, i);\n    return series && series.seriesIndex || 0;\n  }),\n\n  /**\n    Get parent series data for given data-point\n\n    @method seriesData\n    @return {Any}\n  */\n  seriesData: di(function() {\n    return getParentData(this);\n  }),\n\n  /**\n    (di) Get style given series data or data-point\n    (Uses \"style\" object on `d`, if defined)\n\n    @method itemStyle\n    @param {Any} d\n    @param {Number} [i]\n    @param {Number} [j]\n    @return {String}\n  */\n  itemStyle: di(function(chart, d) {\n    return style(d.style) || null;\n  }),\n\n  /**\n    Get series count for chart\n\n    @method seriesCount\n    @return {Number}\n  */\n  seriesCount: function() {\n    var data = this.data();\n    return (data && isSeriesData(data)) ? data.length : 1;\n  },\n\n  /**\n    Extension of layer() that handles data-binding and layering for series data.\n\n    - Updates `dataBind` method to access underlying series values\n    - Creates group layer for each series in chart\n    - Should be used just like layer()\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n      initialize: function() {\n        this.seriesLayer('Circles', this.base, {\n          // Create group for each series on this.base\n          // and calls the following for each series item\n          // (entire layer is called twice: series-1 and series-2)\n\n          dataBind: function(data) {\n            // 1. data = [1, 2, 3]\n            // 2. data = [4, 5, 6]\n          },\n          insert: function() {\n            // Same as chart.layer\n            // (where \"this\" is series group layer)\n          },\n          events: {\n            // Same as chart.layer\n          }\n        });\n      }\n    }));\n\n    // ...\n\n    chart.draw([\n      {key: 'series-1', values: [1, 2, 3]},\n      {key: 'series-2', values: [4, 5, 6]}\n    ]);\n    ```\n    @method seriesLayer\n    @param {String} name\n    @param {Selection} selection\n    @param {Object} options (`dataBind` and `insert` required)\n    @return {d3.chart.layer}\n  */\n  seriesLayer: function(name, selection, options) {\n    if (options && options.dataBind) {\n      var dataBind = options.dataBind;\n\n      options.dataBind = function(data) {\n        var chart = this.chart();\n        var series = this.selectAll('g')\n          .data(data, chart.seriesKey);\n\n        series.enter()\n          .append('g');\n\n        series\n          .attr('class', chart.seriesClass)\n          .attr('style', chart.itemStyle);\n\n        // TODO Exit layer items then exit series layer\n        series.exit()\n          .remove();\n\n        series.chart = function() { return chart; };\n\n        return dataBind.call(series, chart.seriesValues);\n      };\n    }\n\n    return d3.chart().prototype.layer.call(this, name, selection, options);\n  },\n\n  // Ensure data is in series form\n  transform: function(data) {\n    return !isSeriesData(data) ? [{values: data}] : data;\n  }\n};\n\nexport default Series;\n","import Series from './mixins/series';\nimport XY from './mixins/xy';\nimport XYValues from './mixins/xy-values';\nimport XYInverted from './mixins/xy-inverted';\nimport Labels, { LabelsXY } from './mixins/labels';\nimport Hover, { HoverPoints } from './mixins/hover';\nimport Transition from './mixins/transition';\nimport StandardLayer from './mixins/standard-layer';\n\nvar mixins = {\n  Series: Series,\n  XY: XY,\n  XYValues: XYValues,\n  XYInverted: XYInverted,\n  Labels: Labels,\n  LabelsXY: LabelsXY,\n  Hover: Hover,\n  HoverPoints: HoverPoints,\n  Transition: Transition,\n  StandardLayer: StandardLayer\n};\n\nexport {\n  mixins as default,\n  Series,\n  XY,\n  XYValues,\n  XYInverted,\n  Labels,\n  LabelsXY,\n  Hover,\n  HoverPoints,\n  Transition,\n  StandardLayer\n};\n","import d3 from 'd3';\r\nimport { contains } from '../utils';\r\nimport {\r\n  createHelper,\r\n  di,\r\n  dimensions,\r\n  mixin,\r\n  property\r\n} from '../helpers';\r\nimport {\r\n  XY,\r\n  Transition,\r\n  StandardLayer\r\n} from '../mixins';\r\nimport Component from '../Component';\r\n\r\n/**\r\n  Gridlines component that draws major ticks for chart\r\n\r\n  Uses d3.axis extensions for ticks:\r\n\r\n  - `ticks`\r\n  - `tickValues`\r\n\r\n  ### Extending\r\n\r\n  To extend the `Gridlines` component, the following methods are available\r\n\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  @example\r\n  ```js\r\n  d3.select('#chart').chart('Compose', function(data) {\r\n    var scales = {\r\n      x: {data: data, key: 'x'},\r\n      y: {data: data, key: 'y'}\r\n    };\r\n\r\n    var vertical = d3c.gridlines({\r\n      scale: scales.x,\r\n      orientation: 'vertical'\r\n    });\r\n    var horizontal = d3c.gridlines({\r\n      scale: scales.y,\r\n      orientation: 'horizontal'\r\n    });\r\n\r\n    return [\r\n      vertical,\r\n      horizontal\r\n    ];\r\n  });\r\n  ```\r\n  @class Gridlines\r\n*/\r\nvar Mixed = mixin(Component, XY, Transition, StandardLayer);\r\nvar Gridlines = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n\r\n    // Proxy attach to parent for width/height\r\n    var parent = this.options().parent;\r\n    if (parent) {\r\n      this.parent = parent;\r\n\r\n      if (parent.container) {\r\n        this.container = parent.container;\r\n        this.trigger('attach');\r\n      }\r\n      else {\r\n        parent.on('attach', function() {\r\n          this.container = parent.container;\r\n          this.trigger('attach');\r\n        }.bind(this));\r\n      }\r\n    }\r\n\r\n    // Use standard layer for extensibility\r\n    this.standardLayer('Gridlines', this.base.append('g').attr('class', 'chart-gridlines'));\r\n  },\r\n\r\n  /**\r\n    Use horizontal, vertical gridlines\r\n\r\n    @property orientation\r\n    @type String\r\n    @default horizontal\r\n  */\r\n  orientation: property({\r\n    default_value: 'horizontal',\r\n    validate: function(value) {\r\n      return contains(['horizontal', 'vertical'], value);\r\n    },\r\n    set: function() {\r\n      // Update scale -> xScale/yScale when position changes\r\n      if (this.scale())\r\n        this.scale(this.scale());\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Scale to use for gridlines.\r\n    Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used.\r\n\r\n    @example\r\n    ```js\r\n    // Set with d3.scale directly\r\n    gridlines.scale(d3.scale());\r\n\r\n    // or with Object passed to helpers.createScale\r\n    gridlines.scale({data: data, key: 'x'});\r\n    ```\r\n    @property scale\r\n    @type Object|d3.scale\r\n  */\r\n  scale: property({\r\n    set: function(value) {\r\n      if (this.orientation() == 'vertical') {\r\n        this.xScale(value);\r\n        value = this.xScale();\r\n      }\r\n      else {\r\n        this.yScale(value);\r\n        value = this.yScale();\r\n      }\r\n\r\n      return {\r\n        override: value\r\n      };\r\n    }\r\n  }),\r\n\r\n  // d3.axis extensions\r\n  ticks: property({\r\n    default_value: [10]\r\n  }),\r\n  tickValues: property(),\r\n\r\n  drawLine: di(function(chart, d) {\r\n    var x1, x2, y1, y2;\r\n    if (chart.orientation() == 'vertical') {\r\n      x1 = x2 = chart.xScale()(d);\r\n      y1 = 0;\r\n      y2 = chart.height();\r\n    }\r\n    else {\r\n      x1 = 0;\r\n      x2 = chart.width();\r\n      y1 = y2 = chart.yScale()(d);\r\n    }\r\n\r\n    d3.select(this)\r\n      .attr('x1', x1)\r\n      .attr('x2', x2)\r\n      .attr('y1', y1)\r\n      .attr('y2', y2);\r\n  }),\r\n\r\n  width: function width() {\r\n    // Use container's explicit chart width rather than component width (if available)\r\n    return this.container ? this.container.chartPosition().width : dimensions(this.base).width;\r\n  },\r\n  height: function height() {\r\n    // Use container's explicit chart height rather than component width (if available)\r\n    return this.container ? this.container.chartPosition().height : dimensions(this.base).width;\r\n  },\r\n\r\n  onDataBind: function onDataBind(selection, data) {\r\n    // [false] is given for display: false when attached from Axis\r\n    var hide = data && data[0] && data[0].y === false;\r\n\r\n    var tick_values = this.tickValues();\r\n    if (tick_values == null && !hide) {\r\n      // Get tick values from scale\r\n      var scale = this.orientation() == 'vertical' ? this.xScale() : this.yScale();\r\n      var ticks_args = this.ticks();\r\n\r\n      if (!ticks_args)\r\n        ticks_args = [10];\r\n      if (!Array.isArray(ticks_args))\r\n        ticks_args = [ticks_args];\r\n\r\n      tick_values = scale.ticks ? scale.ticks.apply(scale, ticks_args) : scale.domain();\r\n    }\r\n\r\n    return selection.selectAll('line').data(hide ? [] : tick_values);\r\n  },\r\n  onInsert: function onInsert(selection) {\r\n    return selection.append('line')\r\n      .attr('class', 'chart-gridline');\r\n  },\r\n  onMerge: function onMerge(selection) {\r\n    selection\r\n      .attr('opacity', 0)\r\n      .each(this.drawLine);\r\n  },\r\n  onMergeTransition: function onMergeTransition(selection) {\r\n    selection.attr('opacity', 1);\r\n  },\r\n  onExit: function onExit(selection) {\r\n    selection.remove();\r\n  },\r\n\r\n  skip_layout: true\r\n}, {\r\n  layer_type: 'chart',\r\n  z_index: 55\r\n});\r\n\r\nvar gridlines = createHelper('Gridlines');\r\n\r\nexport {\r\n  Gridlines as default,\r\n  gridlines\r\n};\r\n","import d3 from 'd3';\r\nimport {\r\n  compact,\r\n  contains,\r\n  find\r\n} from '../utils';\r\nimport {\r\n  alignText,\r\n  createHelper,\r\n  di,\r\n  getMargins,\r\n  isSeriesData,\r\n  mixin,\r\n  property,\r\n  stack,\r\n  translate\r\n} from '../helpers';\r\nimport { StandardLayer } from '../mixins';\r\nimport Component from '../Component';\r\nvar default_legend_margins = {top: 8, right: 8, bottom: 8, left: 8};\r\n\r\n/**\r\n  Legend component that can automatically pull chart and series information from d3.compose\r\n\r\n  Notes:\r\n\r\n  - To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\r\n  - To exclude a series from the legend, use `exclude_from_legend = true` in series object\r\n  - To add swatch for custom chart, use `Legend.registerSwatch()`\r\n\r\n  ### Extending\r\n\r\n  To extend the `Legend` component, the following methods are available:\r\n\r\n  - `itemKey`\r\n  - `itemText`\r\n  - `swatchClass`\r\n  - `createSwatch`\r\n  - `onDataBind`\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  @example\r\n  ```js\r\n  d3.select('#chart')\r\n    .chart('Compose', function(data) {\r\n      var input = [{key: 'input', name: 'Input', values: data.input}];\r\n      var output = [\r\n        {key: 'output1', name: 'Output 1', values: data.output1},\r\n        {key: 'output2', name: 'Output 2', values: data.output2}\r\n      ];\r\n\r\n      var charts = [\r\n        d3c.lines('a', {data: input}), // ...\r\n        d3c.bars('b', {data: output}) // ...\r\n      ];\r\n      var legend = d3c.legend({charts: ['a', 'b']});\r\n\r\n      return [\r\n        [d3c.layered(charts), legend]\r\n      ];\r\n    });\r\n\r\n  // -> automatically creates legend from series data for 'a' and 'b'\r\n  //    (Lines Swatch) Input\r\n  //    (Bars Swatch) Output 1\r\n  //    (Bars Swatch) Output 2\r\n\r\n  // or, manually set data for legend\r\n  return [\r\n    d3c.legend({\r\n      data: [\r\n        {type: 'Lines', text: 'Input', class: 'series-index-0'},\r\n        {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\r\n        {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\r\n      ]\r\n    })\r\n  };\r\n  ```\r\n  @class Legend\r\n  @extends Component, StandardLayer\r\n*/\r\nvar Mixed = mixin(Component, StandardLayer);\r\nvar Legend = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n    this.legend_base = this.base.append('g').classed('chart-legend', true);\r\n    this.standardLayer('Legend', this.legend_base);\r\n  },\r\n\r\n  /**\r\n    Array of chart keys from container to display in legend\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n    .chart('Compose', function(data) {\r\n      var charts = [\r\n        {id: 'a'},\r\n        {id: 'b'},\r\n        {id: 'c'}\r\n      ];\r\n      var legend = d3c.legend({charts: ['a', 'c']});\r\n\r\n      return [\r\n        [d3c.layered(charts), legend]\r\n      ];\r\n    });\r\n    ```\r\n    @property charts\r\n    @type Array\r\n  */\r\n  charts: property(),\r\n\r\n  /**\r\n    Dimensions of \"swatch\" in px\r\n\r\n    @property swatchDimensions\r\n    @type Object\r\n    @default {width: 20, height: 20}\r\n  */\r\n  swatchDimensions: property({\r\n    default_value: {width: 20, height: 20}\r\n  }),\r\n\r\n  /**\r\n    Margins (in pixels) around legend\r\n\r\n    @property margins\r\n    @type Object\r\n    @default {top: 8, right: 8, bottom: 8, left: 8}\r\n  */\r\n  margins: property({\r\n    default_value: default_legend_margins,\r\n    set: function(values) {\r\n      return {\r\n        override: getMargins(values, default_legend_margins)\r\n      };\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\r\n    (Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")\r\n\r\n    @property stackDirection\r\n    @type String\r\n    @default (based on position)\r\n  */\r\n  stackDirection: property({\r\n    validate: function(value) {\r\n      return contains(['vertical', 'horizontal'], value);\r\n    },\r\n    default_value: function() {\r\n      var direction_by_position = {\r\n        top: 'horizontal',\r\n        right: 'vertical',\r\n        bottom: 'horizontal',\r\n        left: 'vertical'\r\n      };\r\n      return direction_by_position[this.position()];\r\n    }\r\n  }),\r\n\r\n  transform: function(data) {\r\n    if (this.charts()) {\r\n      // Pull legend data from charts\r\n      var charts = this.container.charts();\r\n      data = this.charts().reduce(function(combined_data, chart_id) {\r\n        var chart = find(charts, function(find_chart) { return find_chart.id == chart_id; });\r\n\r\n        // Check for exclude from legend option\r\n        if (!chart || chart.exclude_from_legend || chart.options().exclude_from_legend)\r\n          return combined_data;\r\n\r\n        var chart_data = this.container.demux(chart_id, this.container.data());\r\n        if (!isSeriesData(chart_data))\r\n          chart_data = [chart_data];\r\n\r\n        var legend_data = chart_data.reduce(function(memo, series, index) {\r\n          // Check for exclude from legend option on series\r\n          if (series && !series.exclude_from_legend) {\r\n            memo.push(this.getLegendData(chart, series, index));\r\n          }\r\n\r\n          return memo;\r\n        }.bind(this), []);\r\n\r\n        return combined_data.concat(legend_data);\r\n      }.bind(this), []);\r\n    }\r\n\r\n    return data;\r\n  },\r\n\r\n  // Key for legend item (default is key from data)\r\n  itemKey: di(function(chart, d) {\r\n    return d.key;\r\n  }),\r\n\r\n  // Text for legend item (default is text from data)\r\n  itemText: di(function(chart, d) {\r\n    return d.text;\r\n  }),\r\n\r\n  // Class to apply to swatch (default is class from data)\r\n  swatchClass: di(function(chart, d) {\r\n    return compact(['chart-legend-swatch', d['class']]).join(' ');\r\n  }),\r\n\r\n  // Create swatch (using registered swatches based on type from data)\r\n  createSwatch: di(function(chart, d, i) {\r\n    var selection = d3.select(this);\r\n\r\n    // Clear existing swatch\r\n    selection.selectAll('*').remove();\r\n    selection\r\n      .attr('class', chart.swatchClass);\r\n\r\n    var swatches = Legend.swatches;\r\n    if (!swatches)\r\n      return;\r\n\r\n    if (d && d.type && swatches[d.type])\r\n      swatches[d.type].call(selection, chart, d, i);\r\n    else if (swatches['default'])\r\n      swatches['default'].call(selection, chart, d, i);\r\n  }),\r\n\r\n  onDataBind: function onDataBind(selection, data) {\r\n    return selection.selectAll('.chart-legend-group')\r\n      .data(data, this.itemKey);\r\n  },\r\n  onInsert: function onInsert(selection) {\r\n    var groups = selection.append('g')\r\n      .attr('class', 'chart-legend-group')\r\n      .style('pointer-events', 'all')\r\n      .on('mouseenter', function(d, i) {\r\n        this.container.trigger('mouseenter:legend', this._itemDetails(d, i));\r\n      }.bind(this))\r\n      .on('mousemove', function(d, i) {\r\n        this.container.trigger('mousemove:legend', this._itemDetails(d, i));\r\n      }.bind(this))\r\n      .on('mouseleave', function(d, i) {\r\n        this.container.trigger('mouseleave:legend', this._itemDetails(d, i));\r\n      }.bind(this));\r\n\r\n    groups.append('g')\r\n      .attr('width', this.swatchDimensions().width)\r\n      .attr('height', this.swatchDimensions().height)\r\n      .attr('class', 'chart-legend-swatch');\r\n    groups.append('text')\r\n      .attr('class', 'chart-legend-label');\r\n\r\n    groups.append('rect')\r\n      .attr('class', 'chart-legend-hover')\r\n      .style('visibility', 'hidden');\r\n\r\n    return groups;\r\n  },\r\n  onMerge: function onMerge(selection) {\r\n    var swatch = this.swatchDimensions();\r\n\r\n    selection.select('.chart-legend-swatch').each(this.createSwatch);\r\n\r\n    selection.select('.chart-legend-label')\r\n      .text(this.itemText)\r\n      .each(function() {\r\n        // Vertically center text\r\n        var offset = alignText(this, swatch.height);\r\n        d3.select(this)\r\n          .attr('transform', translate(swatch.width + 5, offset));\r\n      });\r\n\r\n    // Position groups after positioning everything inside\r\n    selection.call(stack({\r\n      direction: this.stackDirection(),\r\n      origin: 'top',\r\n      padding: 5,\r\n      min_height: swatch.height,\r\n      min_width: swatch.width\r\n    }));\r\n\r\n    // Position hover listeners\r\n    var sizes = [];\r\n    selection.each(function() {\r\n      sizes.push(this.getBBox());\r\n    });\r\n    selection.select('.chart-legend-hover').each(function(d, i) {\r\n      var size = sizes[i];\r\n      var transform = null;\r\n\r\n      if (size.height > swatch.height) {\r\n        var offset = (size.height - swatch.height) / 2;\r\n        transform = translate(0, -offset);\r\n      }\r\n\r\n      d3.select(this)\r\n        .attr('width', size.width)\r\n        .attr('height', size.height)\r\n        .attr('transform', transform);\r\n    });\r\n  },\r\n  onExit: function onExit(selection) {\r\n    selection.remove();\r\n  },\r\n\r\n  getLegendData: function getLegendData(chart, series, series_index) {\r\n    return {\r\n      text: series.name || 'Series ' + (series_index + 1),\r\n      key: chart.id + '.' + (series.key || series_index),\r\n      type: chart.type,\r\n      'class': compact([\r\n        'chart-series',\r\n        'chart-index-' + series_index,\r\n        chart.options()['class'],\r\n        series['class']\r\n      ]).join(' ')\r\n    };\r\n  },\r\n\r\n  _itemDetails: function _itemDetails(d, i) {\r\n    return {\r\n      legend: this,\r\n      d: d,\r\n      i: i\r\n    };\r\n  }\r\n}, {\r\n  z_index: 200,\r\n  swatches: {\r\n    'default': function(chart) {\r\n      var swatch_dimensions = chart.swatchDimensions();\r\n\r\n      this.append('circle')\r\n        .attr('cx', swatch_dimensions.width / 2)\r\n        .attr('cy', swatch_dimensions.height / 2)\r\n        .attr('r', d3.min([swatch_dimensions.width, swatch_dimensions.height]) / 2)\r\n        .attr('class', 'chart-swatch');\r\n    }\r\n  },\r\n\r\n  /**\r\n    Register a swatch create function for the given chart type\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\r\n      var dimensions = chart.swatchDimensions();\r\n\r\n      return this.append('line')\r\n        .attr('x1', 0).attr('y1', dimensions.height / 2)\r\n        .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\r\n        .attr('class', 'chart-line');\r\n    });\r\n    ```\r\n    @method registerSwatch\r\n    @static\r\n    @param {Array|String} types Chart type(s)\r\n    @param {Function} create \"di\" function that inserts swatch\r\n  */\r\n  registerSwatch: function(types, create) {\r\n    if (!Array.isArray(types))\r\n      types = [types];\r\n\r\n    types.forEach(function(type) {\r\n      this.swatches[type] = create;\r\n    }, this);\r\n  }\r\n});\r\n\r\n// Create line swatch for Line and LineValues\r\nLegend.registerSwatch(['Lines'], function(chart) {\r\n  var swatch_dimensions = chart.swatchDimensions();\r\n\r\n  return this.append('line')\r\n    .attr('x1', 0).attr('y1', swatch_dimensions.height / 2)\r\n    .attr('x2', swatch_dimensions.width).attr('y2', swatch_dimensions.height / 2)\r\n    .attr('class', 'chart-line');\r\n});\r\n\r\n// Create bars swatch for Bars and StackedBars\r\nLegend.registerSwatch(['Bars', 'StackedBars', 'HorizontalBars', 'HorizontalStackedBars'], function(chart) {\r\n  var swatch_dimensions = chart.swatchDimensions();\r\n\r\n  return this.append('rect')\r\n    .attr('x', 0).attr('y', 0)\r\n    .attr('width', swatch_dimensions.width).attr('height', swatch_dimensions.height)\r\n    .attr('class', 'chart-bar');\r\n});\r\n\r\nvar legend = createHelper('Legend');\r\n\r\nexport {\r\n  Legend as default,\r\n  legend\r\n};\r\n","import {\r\n  property,\r\n  dimensions,\r\n  translate,\r\n  createHelper\r\n} from '../helpers';\r\nimport Legend from './Legend';\r\n\r\n/**\r\n  Legend positioned within chart bounds.\r\n\r\n  @class InsetLegend\r\n  @extends Legend\r\n*/\r\nvar InsetLegend = Legend.extend({\r\n  initialize: function(options) {\r\n    Legend.prototype.initialize.call(this, options);\r\n    this.on('draw', function() {\r\n      // Position legend on draw\r\n      // (Need actual width/height for relative_to)\r\n      var translation = this.translation();\r\n      this.legend_base.attr('transform', translate(translation.x, translation.y));\r\n    }.bind(this));\r\n  },\r\n\r\n  /**\r\n    Position legend within chart layer `{x, y, relative_to}`\r\n    Use `relative_to` to use x,y values relative to x-y origin\r\n    (e.g. `\"left-top\"` is default)\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        return {\r\n          components: {\r\n            legend: {\r\n              type: 'InsetLegend',\r\n              // Position legend 10px away from right-bottom corner of chart\r\n              translation: {x: 10, y: 10, relative_to: 'right-bottom'}\r\n            }\r\n          }\r\n        }\r\n      });\r\n    ```\r\n    @property translation\r\n    @type Object {x,y}\r\n    @default {x: 10, y: 10, relative_to: 'left-top'}\r\n  */\r\n  translation: property({\r\n    default_value: {x: 10, y: 0, relative_to: 'left-top'},\r\n    get: function(value) {\r\n      var x = value.x || 0;\r\n      var y = value.y || 0;\r\n      var relative_to_x = (value.relative_to && value.relative_to.split('-')[0]) || 'left';\r\n      var relative_to_y = (value.relative_to && value.relative_to.split('-')[1]) || 'top';\r\n\r\n      if (relative_to_x === 'right') {\r\n        x = this.width() - dimensions(this.legend_base).width - x;\r\n      }\r\n      if (relative_to_y === 'bottom') {\r\n        y = this.height() - dimensions(this.legend_base).height - y;\r\n      }\r\n\r\n      return {\r\n        x: x,\r\n        y: y\r\n      };\r\n    }\r\n  }),\r\n\r\n  skip_layout: true\r\n}, {\r\n  layer_type: 'chart'\r\n});\r\n\r\nvar insetLegend = createHelper('InsetLegend');\r\n\r\nexport {\r\n  InsetLegend as default,\r\n  insetLegend\r\n};\r\n","import d3 from 'd3';\r\nimport {\r\n  contains,\r\n  defaults,\r\n  isBoolean,\r\n  isUndefined\r\n} from '../utils';\r\nimport {\r\n  property,\r\n  translate,\r\n  mixin,\r\n  createHelper\r\n} from '../helpers';\r\nimport {\r\n  XY,\r\n  Transition,\r\n  StandardLayer\r\n} from '../mixins';\r\nimport Component from '../Component';\r\nimport Gridlines from './Gridlines';\r\n\r\n/**\r\n  Axis component for XY data (wraps `d3.axis`).\r\n\r\n  Available d3.axis extensions:\r\n\r\n  - `ticks`\r\n  - `tickValues`\r\n  - `tickSize`\r\n  - `innerTickSize`\r\n  - `outerTickSize`\r\n  - `tickPadding`\r\n  - `tickFormat`\r\n\r\n  ### Extending\r\n\r\n  To extend the `Axis` component, the following methods are available:\r\n\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  @example\r\n  ```js\r\n  d3.select('#chart')\r\n    .chart('Compose', function(data) {\r\n      var scales = {\r\n        x: {data: data, key: 'x'},\r\n        y: {data: data, key: 'y'}\r\n      };\r\n\r\n      var charts = [];\r\n      var xAxis = d3c.axis({scale: scales.x});\r\n      var yAxis = d3c.axis({scale: scales.y});\r\n\r\n      return [\r\n        // Display y-axis to left of charts\r\n        [yAxis, d3c.layered(charts)],\r\n\r\n        // Display x-axis below charts\r\n        xAxis\r\n      ];\r\n    });\r\n  ```\r\n  @class Axis\r\n  @extends Component, XY, Transition, StandardLayer\r\n*/\r\nvar Mixed = mixin(Component, XY, Transition, StandardLayer);\r\nvar Axis = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n\r\n    // Create two axes (so that layout and transitions work)\r\n    // 1. Display and transitions\r\n    // 2. Layout (draw to get width, but separate so that transitions aren't affected)\r\n    this.axis = d3.svg.axis();\r\n    this._layout_axis = d3.svg.axis();\r\n\r\n    this.axis_base = this.base.append('g').attr('class', 'chart-axis');\r\n    this._layout_base = this.base.append('g')\r\n      .attr('class', 'chart-axis chart-layout')\r\n      .append('g')\r\n        .style('display', 'none');\r\n\r\n    // Use standard layer for extensibility\r\n    this.standardLayer('Axis', this.axis_base);\r\n\r\n    // Setup gridlines\r\n    this.attachGridlines();\r\n  },\r\n\r\n  /**\r\n    Scale to pass to d3.axis\r\n\r\n    - If `xScale`/`yScale` are given, `scale` is set automatically based on `position`.\r\n    - Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used\r\n\r\n    @example\r\n    ```js\r\n    // Set with d3.scale directly\r\n    axis.scale(d3.scale());\r\n\r\n    // or with Object passed helpers.createScale\r\n    axis.scale({data: data, key: 'x'});\r\n\r\n    // For x0/y0 position, both xScale and yScale needed\r\n    // (scale is automatically set by position)\r\n    axis.xScale({domain: [0, 100]});\r\n    axis.yScale({domain: [0, 10]});\r\n    axis.position('y0');\r\n\r\n    // -> axis.scale() -> axis.xScale by default\r\n    ```\r\n    @property scale\r\n    @type Object|d3.scale\r\n  */\r\n  scale: property({\r\n    set: function(value) {\r\n      if (this.orientation() == 'vertical') {\r\n        this.yScale(value);\r\n        value = this.yScale();\r\n      }\r\n      else {\r\n        this.xScale(value);\r\n        value = this.xScale();\r\n      }\r\n\r\n      return {\r\n        override: value\r\n      };\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Position axis relative to chart\r\n    (top, right, bottom, left)\r\n\r\n    Note: x0 and y0 are currently disabled for more testing\r\n\r\n    @property position\r\n    @type String\r\n    @default bottom\r\n  */\r\n  position: property({\r\n    default_value: 'bottom',\r\n    validate: function(value) {\r\n      return contains(['top', 'right', 'bottom', 'left'], value);\r\n    },\r\n    set: function() {\r\n      // Update scale -> xScale/yScale when position changes\r\n      if (this.scale())\r\n        this.scale(this.scale());\r\n    }\r\n  }),\r\n\r\n  /**\r\n    {x,y} translation of axis relative to chart\r\n    (set by default based on position)\r\n\r\n    @property translation\r\n    @type Object\r\n    @default (set based on position)\r\n  */\r\n  translation: property({\r\n    default_value: function() {\r\n      switch (this.position()) {\r\n        case 'top':\r\n          return {x: 0, y: 0};\r\n        case 'right':\r\n          return {x: this.width(), y: 0};\r\n        case 'bottom':\r\n          return {x: 0, y: this.height()};\r\n        case 'left':\r\n          return {x: 0, y: 0};\r\n        case 'x0':\r\n          return {x: this.x0(), y: 0};\r\n        case 'y0':\r\n          return {x: 0, y: this.y0()};\r\n      }\r\n    },\r\n    get: function(value) {\r\n      return translate(value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Axis orient for ticks\r\n    (set by default based on position)\r\n\r\n    @property orient\r\n    @type String\r\n    @default (set based on position)\r\n  */\r\n  orient: property({\r\n    default_value: function() {\r\n      var orient = this.position();\r\n\r\n      if (orient == 'x0')\r\n        orient = 'left';\r\n      else if (orient == 'y0')\r\n        orient = 'bottom';\r\n\r\n      return orient;\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Axis orientation (vertical or horizonal)\r\n\r\n    @property orientation\r\n    @type String\r\n    @default (set based on position)\r\n  */\r\n  orientation: property({\r\n    validate: function(value) {\r\n      return contains(['horizontal', 'vertical'], value);\r\n    },\r\n    default_value: function() {\r\n      return {\r\n        top: 'horizontal',\r\n        right: 'vertical',\r\n        bottom: 'horizontal',\r\n        left: 'vertical',\r\n        x0: 'vertical',\r\n        y0: 'horizontal'\r\n      }[this.position()];\r\n    },\r\n    set: function() {\r\n      // Update scale -> xScale/yScale when orientation changes\r\n      if (this.scale())\r\n        this.scale(this.scale());\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Attach gridlines for axis\r\n    (`true` to show with default options, `{...}` to pass options to `Gridlines`)\r\n\r\n    @property gridlines\r\n    @type Boolean|Object\r\n    @default false\r\n  */\r\n  gridlines: property({\r\n    get: function(value) {\r\n      if (isBoolean(value))\r\n        value = {display: value};\r\n      else if (!value)\r\n        value = {display: false};\r\n\r\n      return value;\r\n    }\r\n  }),\r\n\r\n  // d3.axis extensions\r\n  ticks: property(),\r\n  tickValues: property(),\r\n  tickSize: property(),\r\n  innerTickSize: property(),\r\n  outerTickSize: property(),\r\n  tickPadding: property(),\r\n  tickFormat: property(),\r\n\r\n  onDataBind: function onDataBind(selection) {\r\n    // Setup axis (scale and properties)\r\n    this._setupAxis(this.axis);\r\n\r\n    // Force addition of just one axis with dummy data array\r\n    // (Axis will be drawn using underlying chart scales)\r\n    return selection.selectAll('g').data([0]);\r\n  },\r\n  onInsert: function onInsert(selection) {\r\n    return selection.append('g');\r\n  },\r\n  onEnter: function onEnter(selection) {\r\n    // Render axis\r\n    selection.call(this.axis);\r\n  },\r\n  onMerge: function onUpdate(selection) {\r\n    // Position axis\r\n    selection.attr('transform', this.translation());\r\n  },\r\n  onUpdateTransition: function onUpdateTransition(selection) {\r\n    // Render axis (with transition)\r\n    this.setupTransition(selection);\r\n\r\n    selection.call(this.axis);\r\n  },\r\n  onExit: function onExit(selection) {\r\n    selection.selectAll('g').remove();\r\n  },\r\n\r\n  getLayout: function() {\r\n    // Draw layout axis\r\n    this.setScales();\r\n    this._setupAxis(this._layout_axis);\r\n    this._layout_base.call(this._layout_axis);\r\n\r\n    // Calculate layout\r\n    // (make layout axis visible for width calculations in Firefox)\r\n    this._layout_base.style('display', 'block');\r\n\r\n    var label_overhang = this._getLabelOverhang();\r\n\r\n    this._layout_base.style('display', 'none');\r\n\r\n    return {\r\n      position: this.position(),\r\n      width: label_overhang.width,\r\n      height: label_overhang.height\r\n    };\r\n  },\r\n  setLayout: function() {\r\n    // Axis is positioned as chart layer, so don't set layout\r\n    return;\r\n  },\r\n\r\n  attachGridlines: function() {\r\n    var gridlines_options = gridlinesOptions(this);\r\n    var gridlines = this._gridlines = gridlines_options.display && createGridlines(this, gridlines_options);\r\n\r\n    this.on('draw', function() {\r\n      gridlines_options = gridlinesOptions(this);\r\n\r\n      if (gridlines)\r\n        gridlines.options(gridlines_options);\r\n      else if (gridlines_options.display)\r\n        gridlines = this._gridlines = createGridlines(this, gridlines_options);\r\n\r\n      if (gridlines && gridlines_options.display)\r\n        gridlines.draw();\r\n      else if (gridlines)\r\n        gridlines.draw([false]);\r\n    }.bind(this));\r\n\r\n    function gridlinesOptions(axis) {\r\n      return defaults({}, axis.gridlines(), {\r\n        parent: axis,\r\n        xScale: axis.xScale(),\r\n        yScale: axis.yScale(),\r\n        ticks: axis.ticks(),\r\n        tickValues: axis.tickValues(),\r\n        orientation: axis.orientation() == 'horizontal' ? 'vertical' : 'horizontal'\r\n      });\r\n    }\r\n\r\n    function createGridlines(axis, gridline_options) {\r\n      var base = axis.base.append('g').attr('class', 'chart-axis-gridlines');\r\n      return new Gridlines(base, gridline_options);\r\n    }\r\n  },\r\n\r\n  _setupAxis: function(axis) {\r\n    // Setup axis\r\n    if (this.orientation() == 'vertical')\r\n      axis.scale(this.yScale());\r\n    else\r\n      axis.scale(this.xScale());\r\n\r\n    var extensions = ['orient', 'ticks', 'tickValues', 'tickSize', 'innerTickSize', 'outerTickSize', 'tickPadding', 'tickFormat'];\r\n    var array_extensions = ['tickValues'];\r\n    extensions.forEach(function(key) {\r\n      var value = this[key] && this[key]();\r\n      if (!isUndefined(value)) {\r\n        // If value is array, treat as arguments array\r\n        // otherwise, pass in directly\r\n        if (Array.isArray(value) && !contains(array_extensions, key))\r\n          axis[key].apply(axis, value);\r\n        else\r\n          axis[key](value);\r\n      }\r\n    }, this);\r\n  },\r\n\r\n  _getLabelOverhang: function() {\r\n    // TODO Look into overhang relative to chartBase (for x0, y0)\r\n    var overhangs = {width: [0], height: [0]};\r\n    var orientation = this.orientation();\r\n\r\n    this._layout_base.selectAll('g').each(function() {\r\n      try {\r\n        // There are cases where getBBox may throw\r\n        // (e.g. not currently displayed in Firefox)\r\n        var bbox = this.getBBox();\r\n\r\n        if (orientation == 'horizontal')\r\n          overhangs.height.push(bbox.height);\r\n        else\r\n          overhangs.width.push(bbox.width);\r\n      }\r\n      catch (ex) {\r\n        // Ignore error\r\n      }\r\n    });\r\n\r\n    return {\r\n      width: d3.max(overhangs.width),\r\n      height: d3.max(overhangs.height)\r\n    };\r\n  }\r\n}, {\r\n  layer_type: 'chart',\r\n  z_index: 60\r\n});\r\n\r\nvar axis = createHelper('Axis');\r\n\r\nexport {\r\n  Axis as default,\r\n  axis\r\n};\r\n","import Base from './Base';\r\n\r\n/**\r\n  Common base for creating charts.\r\n  Standard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\r\n\r\n  ### Extending\r\n\r\n  To take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\r\n  and automatically setting properties from `options`, use `d3.compose.helpers.di`\r\n  and `d3.compose.helpers.property` when creating your chart.\r\n\r\n  @example\r\n  ```js\r\n  var helpers = d3.compose.helpers;\r\n\r\n  d3.chart('Chart').extend('Pie', {\r\n    initialize: function() {\r\n      // same as d3.chart\r\n    },\r\n    transform: function(data) {\r\n      // same as d3.chart\r\n    },\r\n\r\n    color: helpers.di(function(chart, d, i) {\r\n      // \"di\" function with parent chart injected (\"this\" = element)\r\n    }),\r\n\r\n    centered: helpers.property({\r\n      default_value: true\r\n      // can be automatically set from options object\r\n    })\r\n  });\r\n  ```\r\n  @class Chart\r\n  @extends Base\r\n*/\r\nvar Chart = Base.extend({}, {\r\n  /**\r\n    Default z-index for chart\r\n    (Components are 50 by default, so Chart = 100 is above component by default)\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Chart').extend('BelowComponentLayers', {\r\n      // ...\r\n    }, {\r\n      z_index: 40\r\n    });\r\n    ```\r\n    @attribute z_index\r\n    @static\r\n    @type Number\r\n    @default 100\r\n  */\r\n  z_index: 100,\r\n  layer_type: 'chart'\r\n});\r\n\r\nexport default Chart;\r\n","import d3 from 'd3';\r\nimport {\r\n  contains,\r\n  extend,\r\n  first,\r\n  isFunction,\r\n  isString,\r\n  isNumber,\r\n  isUndefined,\r\n  objectEach,\r\n  valueOrDefault\r\n} from '../utils';\r\nimport {\r\n  property,\r\n  di,\r\n  mixin,\r\n  createHelper,\r\n  isSeriesData,\r\n  translate,\r\n  alignText\r\n} from '../helpers';\r\nimport {\r\n  Series,\r\n  XY,\r\n  Hover,\r\n  Transition,\r\n  StandardLayer\r\n} from '../mixins';\r\nimport Chart from '../Chart';\r\n\r\n/**\r\n  Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\r\n\r\n  ### Extending\r\n\r\n  To extend the `Labels` chart, the following methods are available:\r\n\r\n  - `insertLabels`\r\n  - `mergeLabels`\r\n  - `layoutLabels`\r\n  - `transitionLabels`\r\n  - `onDataBind`\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  View the `Labels.js` source for the default implementation and more information on these methods.\r\n\r\n  @example\r\n  ```js\r\n  var chart = d3.select('#chart').chart('Compose', function(data) {\r\n    return {\r\n      charts: {\r\n        input: {\r\n          type: 'Lines',\r\n          data: data.input,\r\n          // xScale, yScale, other properties...\r\n\r\n          // Show labels with default properties\r\n          labels: true\r\n        },\r\n        output: {\r\n          type: 'Bars',\r\n          data: data.output,\r\n          // xScale, yScale, other properties...\r\n\r\n          // Pass options to labels\r\n          labels: {\r\n            offset: 2,\r\n            position: 'top',\r\n            style: {\r\n              'font-size': '14px'\r\n            },\r\n            format: d3.format(',0d')\r\n          }\r\n        },\r\n        labels: {\r\n          type: 'Labels',\r\n          data: data.labels,\r\n\r\n          // xScale, yScale, other properties...\r\n        }\r\n      }\r\n    };\r\n  });\r\n\r\n  chart.draw({\r\n    input: [1, 2, 3],\r\n    output: [10, 20, 30],\r\n    labels: [\r\n      {x: 0, y: 0},\r\n      {x: 0, y: 30, label: 'Override (y by default)'},\r\n      {x: 2, y: 0},\r\n      {x: 2, y: 30}\r\n    ]\r\n  });\r\n  ```\r\n  @class Labels\r\n  @extends Chart, Series, XY, Hover, Transition, StandardLayer\r\n*/\r\nvar Mixed = mixin(Chart, Series, XY, Hover, Transition, StandardLayer);\r\nvar Labels = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n\r\n    // Proxy attach to parent for hover\r\n    var parent = this.options().parent;\r\n    if (parent) {\r\n      this.parent = parent;\r\n      parent.on('attach', function() {\r\n        this.container = parent.container;\r\n        this.trigger('attach');\r\n      }.bind(this));\r\n    }\r\n\r\n    // Use StandardLayer for extensibility\r\n    this.standardSeriesLayer('Labels', this.base);\r\n  },\r\n\r\n  transform: function(data) {\r\n    data = Mixed.prototype.transform.call(this, data);\r\n\r\n    if (!isSeriesData(data))\r\n      data = [{key: 'labels', name: 'Labels', values: data}];\r\n\r\n    // TODO Use ticks / domain from xScale\r\n    // ticks = scale.ticks ? scale.ticks.apply(scale, [10]) : scale.domain()\r\n    return data;\r\n  },\r\n\r\n  /**\r\n    Formatting function or string (string is passed to `d3.format`) for label values\r\n\r\n    @property format\r\n    @type String|Function\r\n  */\r\n  format: property({\r\n    set: function(value) {\r\n      if (isString(value)) {\r\n        return {\r\n          override: d3.format(value)\r\n        };\r\n      }\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Label position relative to data point\r\n    (top, right, bottom, or left)\r\n\r\n    Additionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\r\n    where `a` and `b` are `top`, `right`, `bottom`, or `left`\r\n\r\n    For more advanced positioning, a \"di\" function can be specified to set position per label\r\n\r\n    @example\r\n    ```js\r\n    labels.position('top'); // top for all values\r\n    labels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\r\n    labels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\r\n    ```\r\n    @property position\r\n    @type String|Function\r\n    @default top|bottom\r\n  */\r\n  position: property({\r\n    default_value: 'top|bottom',\r\n    get: function(value) {\r\n      if (isString(value) && value.indexOf('|') >= 0) {\r\n        var chart = this;\r\n        var parts = value.split('|');\r\n        return function(d, i, j) {\r\n          var y_value = chart.yValue.call(this, d, i, j);\r\n          return y_value >= 0 ? parts[0] : parts[1];\r\n        };\r\n      }\r\n      else {\r\n        return value;\r\n      }\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Offset between data point and label\r\n    (if `Number` is given, offset is set based on position)\r\n\r\n    @property offset\r\n    @type Number|Object\r\n    @default 0\r\n  */\r\n  offset: property({\r\n    default_value: 0\r\n  }),\r\n\r\n  /**\r\n    Padding between text and label background\r\n\r\n    @property padding\r\n    @type Number\r\n    @default 1\r\n  */\r\n  padding: property({default_value: 1}),\r\n\r\n  /**\r\n    Define text anchor (start, middle, or end)\r\n\r\n    (set by default based on label position)\r\n\r\n    @property anchor\r\n    @type String\r\n    @default middle\r\n  */\r\n  anchor: property({\r\n    validate: function(value) {\r\n      return contains(['start', 'middle', 'end'], value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Define text-alignment (top, middle, or bottom)\r\n\r\n    (set by default based on label position)\r\n\r\n    @property alignment\r\n    @type String\r\n    @default middle\r\n  */\r\n  alignment: property({\r\n    validate: function(value) {\r\n      return contains(['top', 'middle', 'bottom'], value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Get label text for data-point (uses \"label\" property or y-value)\r\n\r\n    @method labelText\r\n    @param {Any} d\r\n    @param {Number} i\r\n    @return {String}\r\n  */\r\n  labelText: di(function(chart, d, i) {\r\n    var value = valueOrDefault(d.label, valueOrDefault(d.__original_y, chart.yValue.call(this, d, i)));\r\n    var format = chart.format();\r\n\r\n    return format ? format(value) : value;\r\n  }),\r\n\r\n  /**\r\n    Get class for label group\r\n\r\n    @method labelClass\r\n    @param {Any} d\r\n    @param {Number} i\r\n    @return {String}\r\n  */\r\n  labelClass: di(function(chart, d) {\r\n    return 'chart-label' + (d['class'] ? ' ' + d['class'] : '');\r\n  }),\r\n\r\n  onDataBind: function onDataBind(selection, data) {\r\n    return selection.selectAll('g')\r\n      .data(data, this.key);\r\n  },\r\n  onInsert: function onInsert(selection) {\r\n    return selection.append('g')\r\n      .call(this.insertLabels);\r\n  },\r\n  onMerge: function onMerge(selection) {\r\n    selection.attr('class', this.labelClass);\r\n\r\n    this.mergeLabels(selection);\r\n    this.layoutLabels(selection);\r\n  },\r\n  onMergeTransition: function onMergeTransition(selection) {\r\n    // Transition labels into position\r\n    this.setupTransition(selection);\r\n    this.transitionLabels(selection);\r\n  },\r\n\r\n  // (Override for custom labels)\r\n  insertLabels: function(selection) {\r\n    selection.append('rect')\r\n      .attr('class', 'chart-label-bg');\r\n    selection.append('text')\r\n      .attr('class', 'chart-label-text');\r\n  },\r\n\r\n  // (Override for custom labels)\r\n  mergeLabels: function(selection) {\r\n    selection.selectAll('text')\r\n      .text(this.labelText);\r\n  },\r\n\r\n  // (Override for custom labels)\r\n  layoutLabels: function(selection) {\r\n    // Calculate layout\r\n    var chart = this;\r\n    var labels = [];\r\n    var position = chart.position();\r\n    var values = {\r\n      offset: chart.offset(),\r\n      padding: chart.padding(),\r\n      anchor: chart.anchor(),\r\n      alignment: chart.alignment()\r\n    };\r\n\r\n    var options;\r\n    if (isString(position))\r\n      options = getOptions();\r\n\r\n    selection.each(function(d, i, j) {\r\n      if (!labels[j])\r\n        labels[j] = [];\r\n\r\n      // Store values for label and calculate layout\r\n      var label = chart._prepareLabel(chart, this, d, i, j);\r\n      labels[j].push(label);\r\n\r\n      var label_options = options || getOptions.call(chart, this, d, i, j);\r\n\r\n      chart._calculateLayout(chart, label_options, label);\r\n    });\r\n\r\n    // Collision detection\r\n    this._handleCollisions(chart, labels);\r\n\r\n    // Layout labels\r\n    labels.forEach(function(series) {\r\n      series.forEach(function(label) {\r\n        this._setLayout(chart, label);\r\n      }, this);\r\n    }, this);\r\n\r\n    function getOptions(element, d, i, j) {\r\n      var label_options = extend({}, values);\r\n      var label_position;\r\n\r\n      if (isFunction(position))\r\n        label_position = position.call(element, d, i, j);\r\n      else\r\n        label_position = position;\r\n\r\n      if (isNumber(label_options.offset)) {\r\n        var offset = {\r\n          top: {x: 0, y: -label_options.offset},\r\n          right: {x: label_options.offset, y: 0},\r\n          bottom: {x: 0, y: label_options.offset},\r\n          left: {x: -label_options.offset, y: 0}\r\n        }[label_position];\r\n\r\n        if (!offset)\r\n          offset = {x: 0, y: 0};\r\n\r\n        label_options.offset = offset;\r\n      }\r\n      if (isUndefined(label_options.anchor)) {\r\n        label_options.anchor = {\r\n          top: 'middle',\r\n          right: 'start',\r\n          bottom: 'middle',\r\n          left: 'end'\r\n        }[label_position];\r\n      }\r\n      if (isUndefined(label_options.alignment)) {\r\n        label_options.alignment = {\r\n          top: 'bottom',\r\n          right: 'middle',\r\n          bottom: 'top',\r\n          left: 'middle'\r\n        }[label_position];\r\n      }\r\n      return label_options;\r\n    }\r\n  },\r\n\r\n  // (Override for custom labels)\r\n  transitionLabels: function(selection) {\r\n    selection.attr('opacity', 1);\r\n  },\r\n\r\n  //\r\n  // Internal\r\n  //\r\n\r\n  _prepareLabel: function(chart, element, d, i) {\r\n    var selection = d3.select(element);\r\n    var text = selection.select('text');\r\n    var bg = selection.select('rect');\r\n\r\n    return {\r\n      x: chart.x.call(element, d, i),\r\n      y: chart.y.call(element, d, i),\r\n      element: element,\r\n      selection: selection,\r\n      text: {\r\n        element: text.node(),\r\n        selection: text\r\n      },\r\n      bg: {\r\n        element: bg.node(),\r\n        selection: bg\r\n      }\r\n    };\r\n  },\r\n\r\n  _calculateLayout: function(chart, options, label) {\r\n    var text_bounds = label.text.element.getBBox();\r\n\r\n    // Need to adjust text for line-height\r\n    var text_y_adjustment = alignText(label.text.element);\r\n\r\n    // Position background\r\n    var layout = label.bg.layout = {\r\n      x: options.offset.x,\r\n      y: options.offset.y,\r\n      width: text_bounds.width + (2 * options.padding),\r\n      height: text_bounds.height + (2 * options.padding)\r\n    };\r\n\r\n    // Set width / height of label\r\n    label.width = layout.width;\r\n    label.height = layout.height;\r\n\r\n    if (options.anchor == 'end')\r\n      label.x -= layout.width;\r\n    else if (options.anchor == 'middle')\r\n      label.x -= (layout.width / 2);\r\n\r\n    if (options.alignment == 'bottom')\r\n      label.y -= layout.height;\r\n    else if (options.alignment == 'middle')\r\n      label.y -= (layout.height / 2);\r\n\r\n    // Center text in background\r\n    label.text.layout = {\r\n      x: layout.x + (layout.width / 2) - (text_bounds.width / 2),\r\n      y: layout.y + (layout.height / 2) - (text_bounds.height / 2) + text_y_adjustment\r\n    };\r\n  },\r\n\r\n  _handleCollisions: function(chart, labels) {\r\n    labels.forEach(function(series, seriesIndex) {\r\n      // Check through remaining series for collisions\r\n      labels.slice(seriesIndex + 1).forEach(function(compareSeries) {\r\n        compareSeries.forEach(function(compareLabel) {\r\n          series.forEach(function(label) {\r\n            if (checkForOverlap(label, compareLabel))\r\n              groupLabels(label, compareLabel);\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    function checkForOverlap(labelA, labelB) {\r\n      var a = getEdges(labelA);\r\n      var b = getEdges(labelB);\r\n\r\n      var contained_LR = (b.left < a.left && b.right > a.right);\r\n      var contained_TB = (b.bottom < a.bottom && b.top > a.top);\r\n      var overlap_LR = (b.left >= a.left && b.left < a.right) || (b.right > a.left && b.right <= a.right) || contained_LR;\r\n      var overlap_TB = (b.top >= a.top && b.top < a.bottom) || (b.bottom > a.top && b.bottom <= a.bottom) || contained_TB;\r\n\r\n      return overlap_LR && overlap_TB;\r\n\r\n      function getEdges(label) {\r\n        return {\r\n          left: label.x,\r\n          right: label.x + label.width,\r\n          top: label.y,\r\n          bottom: label.y + label.height\r\n        };\r\n      }\r\n    }\r\n\r\n    function groupLabels(labelA, labelB) {\r\n      if (labelA.group && labelB.group) {\r\n        // Move labelB group labels into labelA group\r\n        objectEach(labelB.group.labels, function(label) {\r\n          labelA.group.labels.push(label);\r\n          label.group = labelA.group;\r\n        });\r\n\r\n        updateGroupPositions(labelA.group);\r\n      }\r\n      else if (labelA.group) {\r\n        addLabelToGroup(labelB, labelA.group);\r\n      }\r\n      else if (labelB.group) {\r\n        addLabelToGroup(labelA, labelB.group);\r\n      }\r\n      else {\r\n        var group = {labels: []};\r\n        addLabelToGroup(labelA, group);\r\n        addLabelToGroup(labelB, group);\r\n      }\r\n    }\r\n\r\n    function addLabelToGroup(label, group) {\r\n      group.labels.push(label);\r\n      label.group = group;\r\n      label.originalY = label.y;\r\n\r\n      updateGroupPositions(group);\r\n    }\r\n\r\n    function updateGroupPositions(group) {\r\n      function reset(label) {\r\n        // Reset to original y\r\n        label.y = label.originalY;\r\n        return label;\r\n      }\r\n      function sortY(a, b) {\r\n        if (a.y < b.y)\r\n          return -1;\r\n        else if (a.y > b.y)\r\n          return 1;\r\n        else\r\n          return 0;\r\n      }\r\n\r\n      var byY = group.labels.map(reset).sort(sortY).reverse();\r\n\r\n      byY.forEach(function(label, index) {\r\n        var prev = first(byY, index);\r\n        var overlap;\r\n\r\n        for (var i = prev.length - 1; i >= 0; i--) {\r\n          if (checkForOverlap(label, prev[i])) {\r\n            overlap = prev[i];\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (overlap)\r\n          label.y = overlap.y - label.height;\r\n      });\r\n    }\r\n  },\r\n\r\n  _setLayout: function(chart, label) {\r\n    label.bg.selection\r\n      .attr('transform', translate(label.bg.layout.x, label.bg.layout.y))\r\n      .attr('width', label.bg.layout.width)\r\n      .attr('height', label.bg.layout.height);\r\n\r\n    label.text.selection\r\n      .attr('transform', translate(label.text.layout.x, label.text.layout.y));\r\n\r\n    // Position label and set opacity to fade-in\r\n    label.selection\r\n      .attr('transform', translate(label.x, label.y))\r\n      .attr('opacity', 0);\r\n  }\r\n}, {\r\n  z_index: 150\r\n});\r\n\r\nvar labels = createHelper('Labels');\r\n\r\nexport {\r\n  Labels as default,\r\n  labels\r\n};\r\n","import d3 from 'd3';\r\nimport {\r\n  property,\r\n  mixin,\r\n  createHelper\r\n} from '../helpers';\r\nimport {\r\n  Hover\r\n} from '../mixins';\r\nimport Labels from './Labels';\r\n/**\r\n  (in-progress)\r\n\r\n  @class HoverLabels\r\n*/\r\nvar Mixed = mixin(Labels, Hover);\r\nvar HoverLabels = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n    this.on('attach', function() {\r\n      this.container.on('mouseenter:point', this.onMouseEnterPoint.bind(this));\r\n      this.container.on('mouseleave:point', this.onMouseLeavePoint.bind(this));\r\n    }.bind(this));\r\n  },\r\n\r\n  /**\r\n    Maximum distance to find active points\r\n\r\n    @property hoverTolerance\r\n    @type Number\r\n    @default Infinity\r\n  */\r\n  hoverTolerance: property({\r\n    set: function(value) {\r\n      // Pass through hover tolerance to parent (if present)\r\n      if (this.parent && this.parent.hoverTolerance)\r\n        this.parent.hoverTolerance(value);\r\n    },\r\n    default_value: Infinity\r\n  }),\r\n\r\n  // Don't fade in labels, hidden until hover\r\n  transitionLabels: function() {},\r\n\r\n  onMouseEnterPoint: function(point) {\r\n    var label = this.findLabelForPoint(point);\r\n    if (label)\r\n      d3.select(label).attr('opacity', 1);\r\n  },\r\n  onMouseLeavePoint: function(point) {\r\n    var label = this.findLabelForPoint(point);\r\n    if (label)\r\n      d3.select(label).attr('opacity', 0);\r\n  },\r\n\r\n  findLabelForPoint: function(point) {\r\n    var labels = this.base.selectAll('g.chart-series').selectAll('g');\r\n    var chart = this;\r\n    var label;\r\n\r\n    labels.each(function(d, i, j) {\r\n      var series = chart.seriesData.call(this, d, i, j);\r\n      if (d === point.d && series === point.series)\r\n        label = this;\r\n    });\r\n\r\n    return label;\r\n  }\r\n});\r\n\r\nvar hoverLabels = createHelper('HoverLabels');\r\n\r\nexport {\r\n  HoverLabels as default,\r\n  hoverLabels\r\n};\r\n","import {\r\n  objectFind\r\n} from '../utils';\r\nimport {\r\n  mixin,\r\n  di,\r\n  createHelper\r\n} from '../helpers';\r\nimport {\r\n  Series,\r\n  XY,\r\n  XYValues,\r\n  LabelsXY,\r\n  Hover,\r\n  Transition,\r\n  StandardLayer\r\n} from '../mixins';\r\nimport Chart from '../Chart';\r\n\r\n/**\r\n  Bars chart with centered or adjacent display for single or series data.\r\n\r\n  To display bars for different series next to each other (adjacent),\r\n  use the `adjacent` option when creating the `xScale` (see example below).\r\n\r\n  ### Extending\r\n\r\n  To extend the `Bars` chart, the following methods are available:\r\n\r\n  - `barHeight`\r\n  - `barWidth`\r\n  - `barX`\r\n  - `barY`\r\n  - `barClass`\r\n  - `onDataBind`\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  @example\r\n  ```js\r\n  var chart = d3.select('#chart').chart('Compose', function(data) {\r\n    // Display bars for different series next to each other (adjacent: true)\r\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n    return {\r\n      charts: {\r\n        output: {\r\n          type: 'Bars',\r\n          data: data.output,\r\n          xScale: xScale,\r\n          // yScale: ...,\r\n          // other properties...\r\n        }\r\n      }\r\n    };\r\n  });\r\n\r\n  // Single y-values\r\n  chart.draw([10, 20, 30]);\r\n\r\n  // Series (x,y) values\r\n  chart.draw([\r\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n  ]);\r\n  ```\r\n  @class Bars\r\n  @extends Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer\r\n*/\r\n\r\nvar Mixed = mixin(Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer);\r\nvar Bars = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n\r\n    this.on('before:draw', function() {\r\n      this.offset_axis = this.getOffsetAxis();\r\n    }.bind(this));\r\n\r\n    // Use standard series layer for extensibility\r\n    // (dataBind, insert, and events defined in prototype)\r\n    this.standardSeriesLayer('Bars', this.base.append('g').classed('chart-bars', true));\r\n    this.attachLabels();\r\n  },\r\n\r\n  barHeight: di(function(chart, d, i) {\r\n    var height = Math.abs(chart.y0() - chart.y.call(this, d, i)) - chart.barOffset();\r\n    return height > 0 ? height : 0;\r\n  }),\r\n  barWidth: di(function(chart) {\r\n    return chart.itemWidth();\r\n  }),\r\n  barX: di(function(chart, d, i) {\r\n    return chart.x.call(this, d, i) - chart.itemWidth() / 2;\r\n  }),\r\n  barY: di(function(chart, d, i) {\r\n    var y = chart.y.call(this, d, i);\r\n    var y0 = chart.y0();\r\n\r\n    return y < y0 ? y : y0 + chart.barOffset();\r\n  }),\r\n  bar0: di(function(chart, d, i) {\r\n    var y0 = chart.y0();\r\n    var offset = chart.barOffset();\r\n    return chart.y.call(this, d, i) <= y0 ? y0 - offset : y0 + offset;\r\n  }),\r\n  barClass: di(function(chart, d) {\r\n    return 'chart-bar' + (d['class'] ? ' ' + d['class'] : '');\r\n  }),\r\n\r\n  // Shift bars slightly to account for axis thickness\r\n  barOffset: function barOffset() {\r\n    if (this.offset_axis) {\r\n      var axis_thickness = parseInt(this.offset_axis.base.select('.domain').style('stroke-width')) || 0;\r\n      return axis_thickness / 2;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  },\r\n\r\n  getOffsetAxis: function getOffsetAxis() {\r\n    var components = this.container && this.container.components();\r\n    return objectFind(components, function(component) {\r\n      if (component.type == 'Axis' && component.position() == 'bottom')\r\n        return component;\r\n    });\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onDataBind: function onDataBind(selection, data) {\r\n    return selection.selectAll('rect')\r\n      .data(data, this.key);\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onInsert: function onInsert(selection) {\r\n    return selection.append('rect')\r\n      .on('mouseenter', this.mouseEnterPoint)\r\n      .on('mouseleave', this.mouseLeavePoint);\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onEnter: function onEnter(selection) {\r\n    selection\r\n      .attr('y', this.bar0)\r\n      .attr('height', 0);\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onMerge: function onMerge(selection) {\r\n    selection\r\n      .attr('class', this.barClass)\r\n      .attr('style', this.itemStyle)\r\n      .attr('x', this.barX)\r\n      .attr('width', this.barWidth);\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onMergeTransition: function onMergeTransition(selection) {\r\n    this.setupTransition(selection);\r\n\r\n    selection\r\n      .attr('y', this.barY)\r\n      .attr('height', this.barHeight);\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onExitTransition: function onExitTransition(selection) {\r\n    this.setupTransition(selection);\r\n\r\n    selection\r\n      .attr('y', this.bar0)\r\n      .attr('height', 0)\r\n      .remove();\r\n  }\r\n});\r\n\r\nvar bars = createHelper('Bars');\r\n\r\nexport {\r\n  Bars as default,\r\n  bars\r\n};\r\n","import { objectFind } from '../utils';\r\nimport {\r\n  mixin,\r\n  di,\r\n  createHelper\r\n} from '../helpers';\r\nimport { XYInverted } from '../mixins';\r\nimport Bars from './Bars';\r\n\r\n/**\r\n  Bars chart with bars that group from left-to-right\r\n\r\n  (See `Bars` for extensibility details)\r\n\r\n  @example\r\n  ```js\r\n  var chart = d3.select('#chart').chart('Compose', function(data) {\r\n    // Display bars for different series next to each other (adjacent: true)\r\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n    return {\r\n      charts: {\r\n        output: {\r\n          type: 'HorizontalBars',\r\n          data: data.output,\r\n          xScale: xScale,\r\n          // yScale: ...,\r\n          // other properties...\r\n        }\r\n      }\r\n    };\r\n  });\r\n\r\n  // Single y-values\r\n  chart.draw([10, 20, 30]);\r\n\r\n  // Series (x,y) values\r\n  chart.draw([\r\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n  ]);\r\n  ```\r\n  @class HorizontalBars\r\n  @extends Bars, XYInverted\r\n*/\r\nvar HorizontalBars = mixin(Bars, XYInverted).extend({\r\n  barX: di(function(chart, d, i) {\r\n    var x = chart.x.call(this, d, i);\r\n    var x0 = chart.x0();\r\n\r\n    return x < x0 ? x : x0 + chart.barOffset();\r\n  }),\r\n  barY: di(function(chart, d, i) {\r\n    return chart.y.call(this, d, i) - chart.itemWidth() / 2;\r\n  }),\r\n  barWidth: di(function(chart, d, i) {\r\n    var width = Math.abs(chart.x0() - chart.x.call(this, d, i)) - chart.barOffset();\r\n    return width > 0 ? width : 0;\r\n  }),\r\n  barHeight: di(function(chart) {\r\n    return chart.itemWidth();\r\n  }),\r\n  bar0: di(function(chart, d, i) {\r\n    var x0 = chart.x0();\r\n    var offset = chart.barOffset();\r\n    return chart.x.call(this, d, i) >= x0 ? x0 + offset : x0 - offset;\r\n  }),\r\n\r\n  getOffsetAxis: function getOffsetAxis() {\r\n    var components = this.container && this.container.components();\r\n    return objectFind(components, function(component) {\r\n      if (component.type == 'Axis' && component.position() == 'left')\r\n        return component;\r\n    });\r\n  },\r\n\r\n  onEnter: function onEnter(selection) {\r\n    selection\r\n      .attr('x', this.bar0)\r\n      .attr('width', 0);\r\n  },\r\n\r\n  onMerge: function onMerge(selection) {\r\n    selection\r\n      .attr('class', this.barClass)\r\n      .attr('style', this.itemStyle)\r\n      .attr('y', this.barY)\r\n      .attr('height', this.barHeight);\r\n  },\r\n\r\n  onMergeTransition: function onMergeTransition(selection) {\r\n    this.setupTransition(selection);\r\n\r\n    selection\r\n      .attr('x', this.barX)\r\n      .attr('width', this.barWidth);\r\n  },\r\n\r\n  onExitTransition: function onExitTransition(selection) {\r\n    this.setupTransition(selection);\r\n\r\n    selection\r\n      .attr('x', this.bar0)\r\n      .attr('width', 0)\r\n      .remove();\r\n  }\r\n});\r\n\r\nvar horizontalBars = createHelper('HorizontalBars');\r\n\r\nexport {\r\n  HorizontalBars as default,\r\n  horizontalBars\r\n};\r\n","import {\r\n  extend\r\n} from '../utils';\r\nimport {\r\n  di,\r\n  createHelper\r\n} from '../helpers';\r\nimport Bars from './Bars';\r\n\r\n/**\r\n  Bars chart with values stacked on top of each other\r\n\r\n  (See `Bars` for extensibility details)\r\n\r\n  @example\r\n  ```js\r\n  var chart = d3.select('#chart').chart('Compose', function(data) {\r\n    // Display bars for different series next to each other (adjacent: true)\r\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n    return {\r\n      charts: {\r\n        stacked_output: {\r\n          type: 'StackedBars',\r\n          data: data.output,\r\n          xScale: xScale,\r\n          // yScale: ...,\r\n          // other properties...\r\n        }\r\n      }\r\n    };\r\n  });\r\n\r\n  // Single y-values\r\n  chart.draw([10, 20, 30]);\r\n\r\n  // Series (x,y) values\r\n  chart.draw([\r\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n  ]);\r\n  ```\r\n  @class StackedBars\r\n  @extends Bars\r\n*/\r\nvar StackedBars = Bars.extend({\r\n  transform: function(data) {\r\n    data = Bars.prototype.transform.call(this, data);\r\n\r\n    var grouped = {};\r\n    var x_key = this.xKey();\r\n    var y_key = this.yKey();\r\n    data = data.map(function(series) {\r\n      series = extend({}, series);\r\n      series.values = series.values.map(function(value) {\r\n        value = extend({}, value);\r\n        var x = value[x_key];\r\n        var y = value.__original_y = value[y_key];\r\n\r\n        if (!grouped[x])\r\n          grouped[x] = {pos: 0, neg: 0};\r\n\r\n        if (y >= 0) {\r\n          value.__previous = grouped[x].pos;\r\n          grouped[x].pos = value[y_key] = grouped[x].pos + y;\r\n        }\r\n        else {\r\n          value.__previous = grouped[x].neg;\r\n          grouped[x].neg = value[y_key] = grouped[x].neg + y;\r\n        }\r\n\r\n        return value;\r\n      }, this);\r\n\r\n      return series;\r\n    }, this);\r\n\r\n    return data;\r\n  },\r\n\r\n  barHeight: di(function(chart, d, i) {\r\n    var height = Math.abs(chart.yScale()(d.__previous) - chart.y.call(this, d, i));\r\n    var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n    return height > 0 ? height - offset : 0;\r\n  })\r\n});\r\n\r\nvar stackedBars = createHelper('StackedBars');\r\n\r\nexport {\r\n  StackedBars as default,\r\n  stackedBars\r\n};\r\n","import {\r\n  di,\r\n  createHelper\r\n} from '../helpers';\r\nimport HorizontalBars from './HorizontalBars';\r\nimport StackedBars from './StackedBars';\r\n\r\n/**\r\n  Horizontal Stacked Bars\r\n\r\n  (See `Bars` for extensibility details)\r\n\r\n  @example\r\n  ```js\r\n  var chart = d3.select('#chart').chart('Compose', function(data) {\r\n    // Display bars for different series next to each other (adjacent: true)\r\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n    return {\r\n      charts: {\r\n        output: {\r\n          type: 'HorizontalStackedBars',\r\n          data: data.output,\r\n          xScale: xScale,\r\n          // yScale: ...,\r\n          // other properties...\r\n        }\r\n      }\r\n    };\r\n  });\r\n\r\n  // Single y-values\r\n  chart.draw([10, 20, 30]);\r\n\r\n  // Series (x,y) values\r\n  chart.draw([\r\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n  ]);\r\n  ```\r\n  @class HorizontalStackedBars\r\n  @extends HorizontalBars\r\n*/\r\nvar HorizontalStackedBars = HorizontalBars.extend({\r\n  transform: function(data) {\r\n    data = StackedBars.prototype.transform.call(this, data);\r\n    data = HorizontalBars.prototype.transform.call(this, data);\r\n    return data;\r\n  },\r\n\r\n  barWidth: di(function(chart, d, i) {\r\n    var width = Math.abs(chart.yScale()(d.__previous) - chart.x.call(this, d, i));\r\n    var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n    return width > 0 ? width - offset : 0;\r\n  }),\r\n  barX: di(function(chart, d, i) {\r\n    var x = chart.x.call(this, d, i);\r\n    var x0 = chart.yScale()(d.__previous);\r\n\r\n    return x < x0 ? x : x0 + chart.barOffset();\r\n  })\r\n});\r\n\r\nvar horizontalStackedBars = createHelper('HorizontalStackedBars');\r\n\r\nexport {\r\n  HorizontalStackedBars as default,\r\n  horizontalStackedBars\r\n};\r\n","import d3 from 'd3';\r\nimport {\r\n  property,\r\n  di,\r\n  mixin,\r\n  createHelper\r\n} from '../helpers';\r\nimport {\r\n  Series,\r\n  XY,\r\n  LabelsXY,\r\n  Hover,\r\n  HoverPoints,\r\n  Transition,\r\n  StandardLayer\r\n} from '../mixins';\r\nimport Chart from '../Chart';\r\n\r\n/**\r\n  Create an XY Lines chart with single or series data.\r\n\r\n  ### Extending\r\n\r\n  Great care has been taken in making the standard charts in d3.compose extensible.\r\n  To extend the `Lines` chart, the following methods are available:\r\n\r\n  - `createLine`\r\n  - `lineKey`\r\n  - `lineData`\r\n  - `onDataBind`\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  View the `Lines.js` source for the default implementation and more information on these methods.\r\n\r\n  @example\r\n  ```js\r\n  var chart = d3.select('#chart').chart('Compose', function(data) {\r\n    return {\r\n      charts: {\r\n        input: {\r\n          type: 'Lines'\r\n          data: data.input,\r\n          // xScale: ...,\r\n          // yScale: ...,\r\n          // other properties...\r\n        }\r\n      }\r\n    };\r\n  });\r\n\r\n  // Single y-values\r\n  chart.draw([1, 2, 3]);\r\n\r\n  // Series (x,y) values\r\n  chart.draw([\r\n    {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\r\n    {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\r\n  ]);\r\n  ```\r\n  @class Lines\r\n  @extends Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer\r\n*/\r\nvar Mixed = mixin(Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer);\r\nvar Lines = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n\r\n    this.lines = {};\r\n\r\n    // Use standard series layer for extensibility\r\n    // (dataBind, insert, and events defined in prototype)\r\n    this.standardSeriesLayer('Lines', this.base.append('g').classed('chart-lines', true));\r\n\r\n    this.attachLabels();\r\n  },\r\n\r\n  /**\r\n    Set interpolation mode for line\r\n\r\n    - See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\r\n    - Set to `null` or `'linear'` for no interpolation\r\n\r\n    @property interpolate\r\n    @type String\r\n    @default monotone\r\n  */\r\n  interpolate: property({\r\n    default_value: 'monotone'\r\n  }),\r\n\r\n  // Create line on insert (keyed by series/index)\r\n  createLine: di(function(chart, d, i, j) {\r\n    var key = chart.lineKey.call(this, d, i, j);\r\n    var line = chart.lines[key] = d3.svg.line()\r\n      .x(chart.x)\r\n      .y(chart.y);\r\n\r\n    var interpolate = d.interpolate || chart.interpolate();\r\n    if (interpolate)\r\n      line.interpolate(interpolate);\r\n  }),\r\n\r\n  // Get key for line (from series key or index)\r\n  lineKey: di(function(chart, d, i, j) {\r\n    var key = chart.seriesKey(chart.seriesData.call(this, d, i, j));\r\n    return key != null ? key : chart.seriesIndex.call(this, d, i, j);\r\n  }),\r\n\r\n  // Get data for line\r\n  lineData: di(function(chart, d, i, j) {\r\n    var key = chart.lineKey.call(this, d, i, j);\r\n    if (chart.lines[key])\r\n      return chart.lines[key](d);\r\n  }),\r\n\r\n  // Override StandardLayer\r\n  onDataBind: function onDataBind(selection, data) {\r\n    return selection.selectAll('path')\r\n      .data(function(d, i, j) {\r\n        return [data.call(selection, d, i, j)];\r\n      });\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onInsert: function onInsert(selection) {\r\n    return selection.append('path')\r\n      .classed('chart-line', true)\r\n      .each(this.createLine);\r\n  },\r\n\r\n  // Override StandardLayer\r\n  onMergeTransition: function onMergeTransition(selection) {\r\n    this.setupTransition(selection);\r\n\r\n    selection\r\n      .attr('d', this.lineData)\r\n      .attr('style', this.itemStyle);\r\n  }\r\n});\r\n\r\nvar lines = createHelper('Lines');\r\n\r\nexport {\r\n  Lines as default,\r\n  lines\r\n};\r\n","import {\r\n  property,\r\n  translate,\r\n  style as styleToString,\r\n  dimensions\r\n} from './helpers';\r\nimport Component from './Component';\r\n\r\n/**\r\n  Common base for creating overlays that includes helpers for positioning and show/hide.\r\n\r\n  ### Extending\r\n\r\n  Create an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n  - To adjust positioning, override `position`\r\n  - To adjust show/hide behavior, override `show`/`hide`\r\n\r\n  @example\r\n  ```js\r\n  d3.chart('Overlay').extend('ClosestPoints', {\r\n    // TODO\r\n  });\r\n  ```\r\n  @class Overlay\r\n  @extends Component\r\n*/\r\nvar Overlay = Component.extend({\r\n  initialize: function(options) {\r\n    Component.prototype.initialize.call(this, options);\r\n    this.base.attr('style', this.style());\r\n  },\r\n  skip_layout: true,\r\n\r\n  /**\r\n    Overlay's top-left x-position in px from left\r\n\r\n    @property x\r\n    @type Number\r\n    @default 0\r\n  */\r\n  x: property({\r\n    default_value: 0\r\n  }),\r\n\r\n  /**\r\n    Overlay's top-left y-position in px from top\r\n\r\n    @property y\r\n    @type Number\r\n    @default 0\r\n  */\r\n  y: property({\r\n    default_value: 0\r\n  }),\r\n\r\n  /**\r\n    Whether overlay is currently hidden\r\n\r\n    @property hidden\r\n    @type Boolean\r\n    @default true\r\n  */\r\n  hidden: property({\r\n    default_value: true\r\n  }),\r\n\r\n  /**\r\n    Overlays base styling\r\n    (default includes position and hidden)\r\n\r\n    @property style\r\n    @type String\r\n    @default set from x, y, and hidden\r\n  */\r\n  style: property({\r\n    default_value: function() {\r\n      var transform = translate(this.x() + 'px', this.y() + 'px');\r\n      var styles = {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        '-webkit-transform': transform,\r\n        '-ms-transform': transform,\r\n        transform: transform\r\n      };\r\n\r\n      if (this.hidden())\r\n        styles.display = 'none';\r\n\r\n      return styleToString(styles);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Position overlay layer at given x,y coordinates\r\n\r\n    @example\r\n    ```js\r\n    // Absolute, x: 100, y: 50\r\n    overlay.position(100, 50);\r\n    overlay.position({x: 100, y: 50});\r\n\r\n    // Relative-to-chart, x: 50, y: 40\r\n    overlay.position({chart: {x: 50, y: 40}});\r\n\r\n    // Relative-to-container, x: 75, y: 50\r\n    overlay.position({container: {x: 75, y: 50}});\r\n    ```\r\n    @method position\r\n    @param {Object|Number} position {x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left\r\n    @param {Number} [y] in px from top\r\n  */\r\n  // TODO This conflicts with component.position(), might need a rename\r\n  position: function(position, y) {\r\n    if (arguments.length > 1) {\r\n      position = {\r\n        x: position,\r\n        y: y\r\n      };\r\n    }\r\n    else {\r\n      if ('container' in position) {\r\n        position = this.getAbsolutePosition(position.container);\r\n      }\r\n      else if ('chart' in position) {\r\n        if (this.container) {\r\n          var chart = this.container.chartPosition();\r\n          position = this.getAbsolutePosition({\r\n            x: position.chart.x + chart.left,\r\n            y: position.chart.y + chart.top\r\n          });\r\n        }\r\n        else {\r\n          position = this.getAbsolutePosition(position.chart);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.x(position.x).y(position.y);\r\n    this.base.attr('style', this.style());\r\n  },\r\n\r\n  /**\r\n    Show overlay (with `display: block`)\r\n\r\n    @method show\r\n  */\r\n  show: function() {\r\n    this.hidden(false);\r\n    this.base.attr('style', this.style());\r\n  },\r\n\r\n  /**\r\n    Hide overlay (with `display: none`)\r\n\r\n    @method hide\r\n  */\r\n  hide: function() {\r\n    this.hidden(true);\r\n    this.base.attr('style', this.style());\r\n  },\r\n\r\n  /**\r\n    Get absolute position from container position\r\n    (needed since container position uses viewBox and needs to be scaled to absolute position)\r\n\r\n    @method getAbsolutePosition\r\n    @param {Object} container_position ({x, y})\r\n    @return {Object} absolute {x, y} relative to container div\r\n  */\r\n  getAbsolutePosition: function(container_position) {\r\n    var container = this.container && this.container.container;\r\n\r\n    if (container && this.container.responsive()) {\r\n      var container_dimensions = dimensions(container);\r\n      var chart_width = this.container.width();\r\n      var chart_height = this.container.height();\r\n      var width_ratio = container_dimensions.width / chart_width;\r\n      var height_ratio = container_dimensions.height / chart_height;\r\n\r\n      return {\r\n        x: width_ratio * container_position.x,\r\n        y: height_ratio * container_position.y\r\n      };\r\n    }\r\n    else {\r\n      // Not attached so can't get actual dimensions\r\n      // fallback to container position\r\n      return container_position;\r\n    }\r\n  }\r\n}, {\r\n  layer_type: 'overlay'\r\n});\r\n\r\nexport default Overlay;\r\n","import d3 from 'd3';\r\nimport utils from './src/utils';\r\nimport helpers from './src/helpers';\r\nimport Base from './src/Base';\r\nimport Chart from './src/Chart';\r\nimport Component from './src/Component';\r\nimport Overlay from './src/Overlay';\r\nimport Compose, { layered } from './src/Compose';\r\n\r\nimport mixins from './src/mixins';\r\n\r\nimport Lines, { lines } from './src/charts/Lines';\r\nimport Bars, { bars } from './src/charts/Bars';\r\nimport StackedBars, { stackedBars } from './src/charts/StackedBars';\r\nimport HorizontalBars, { horizontalBars } from './src/charts/HorizontalBars';\r\nimport HorizontalStackedBars, { horizontalStackedBars } from './src/charts/HorizontalStackedBars';\r\nimport Labels, { labels } from './src/charts/Labels';\r\nimport HoverLabels, { hoverLabels } from './src/charts/HoverLabels';\r\n\r\nimport Text, { text } from './src/components/Text';\r\nimport Title, { title } from './src/components/Title';\r\nimport Axis, { axis } from './src/components/Axis';\r\nimport AxisTitle, { axisTitle } from './src/components/AxisTitle';\r\nimport Legend, { legend } from './src/components/Legend';\r\nimport InsetLegend, { insetLegend } from './src/components/InsetLegend';\r\nimport Gridlines, { gridlines } from './src/components/Gridlines';\r\n\r\n// Export charts/components to d3.chart\r\nutils.extend(d3.chart(), {\r\n  Base: Base,\r\n  Chart: Chart,\r\n  Component: Component,\r\n  Overlay: Overlay,\r\n  Compose: Compose,\r\n  Lines: Lines,\r\n  Bars: Bars,\r\n  StackedBars: StackedBars,\r\n  HorizontalBars: HorizontalBars,\r\n  HorizontalStackedBars: HorizontalStackedBars,\r\n  Labels: Labels,\r\n  HoverLabels: HoverLabels,\r\n  Text: Text,\r\n  Title: Title,\r\n  Axis: Axis,\r\n  AxisTitle: AxisTitle,\r\n  Legend: Legend,\r\n  InsetLegend: InsetLegend,\r\n  Gridlines: Gridlines\r\n});\r\n\r\nvar d3c = d3.compose = {\r\n  VERSION: '{version}',\r\n  utils: utils,\r\n  helpers: helpers,\r\n  Base: Base,\r\n  Chart: Chart,\r\n  Component: Component,\r\n  Overlay: Overlay,\r\n  Compose: Compose,\r\n  layered: layered,\r\n\r\n  mixins: mixins,\r\n\r\n  Lines: Lines,\r\n  lines: lines,\r\n  Bars: Bars,\r\n  bars: bars,\r\n  StackedBars: StackedBars,\r\n  stackedBars: stackedBars,\r\n  HorizontalBars: HorizontalBars,\r\n  horizontalBars: horizontalBars,\r\n  HorizontalStackedBars: HorizontalStackedBars,\r\n  horizontalStackedBars: horizontalStackedBars,\r\n  Labels: Labels,\r\n  labels: labels,\r\n  HoverLabels: HoverLabels,\r\n  hoverLabels: hoverLabels,\r\n\r\n  Text: Text,\r\n  text: text,\r\n  Title: Title,\r\n  title: title,\r\n  Axis: Axis,\r\n  axis: axis,\r\n  AxisTitle: AxisTitle,\r\n  axisTitle: axisTitle,\r\n  Legend: Legend,\r\n  legend: legend,\r\n  InsetLegend: InsetLegend,\r\n  insetLegend: insetLegend,\r\n  Gridlines: Gridlines,\r\n  gridlines: gridlines\r\n};\r\n\r\nexport default d3c;\r\n"],"sourceRoot":"/source/"}