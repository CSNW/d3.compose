{"version":3,"sources":["d3.compose-all.js"],"names":["global","factory","exports","module","require","define","amd","d3c","d3","d3_chart","this","createLayer","chart","type","name","selection","layer","series","events","forEach","event","method","split","map","str","charAt","toUpperCase","slice","join","dataBind","data","onDataBind","insert","onInsert","_extend","target","extensions","undefined_only","i","length","key","contains","arr","item","indexOf","compact","filter","difference","a","b","value","defaults","call","arguments","extend","flatten","reduce","memo","concat","find","fn","context","first","n","Array","prototype","isBoolean","obj","isObject","isNumber","toString","isString","isUndefined","objectEach","keys","Object","objectFind","pluck","objs","uniq","result","push","inherits","Child","Parent","create","constructor","enumerable","writeable","configurable","setPrototypeOf","__proto__","valueOrDefault","default_value","deprecate","message","version","console","warn","property","options","id","unique_index","get","properties","isFunction","set","validate","Error","JSON","stringify","previous","response","override","after","__properties","is_property","set_from_options","mixin","mixins","initializes","transforms","mixed","mix","initialize","args","apply","init","transform","trans","bind","stack","padding","direction","origin","min_height","min_width","elements","attr","d","next_position","element_dimensions","getBBox","spacing_width","max","width","spacing_height","height","x","y","translate","createScale","scale","time","linear","domain","setDomain","centered","adjacent","addCentered","addPadding","getValue","isSeriesData","values","min_value","min","original","series_count","series_index","range_band","rangeBand","isFinite","original_range","range","rangeBands","dimensions","client","clientDimensions","attrDimensions","isSVG","bbox","bboxDimensions","element","node","clientWidth","clientHeight","window","getComputedStyle","styles","parseFloat","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","isNaN","ex","nodeName","rotate","degrees","center","rotation","alignText","line_height","offset","element_style","css_font_size","css_line_height","css_adjustment","height_adjustment","first_item","isArray","getMax","series_data","extent","series_max","Infinity","getMin","series_min","style","keyValues","getMargins","margins","default_margins","top","right","bottom","left","di","callback","wrapped","j","undefined","_is_di","bindDi","diFn","bindAllDi","getParentData","_parent_data","parent","parentNode","select","createHelper","checkProp","definition","createPrepare","steps","base","props","step","createDraw","prepared","prepareSteps","selected","exit","update","enter","merge","remove","curry","createTransition","duration","delay","ease","getLayer","empty","append","createProperties","Item","Base","_layers","_attached","_events","getPoints","getPoint","sort","meta","getClosestPoints","points","position","tolerance","getDistance","Math","sqrt","pow","setDistance","point","distance","closePoints","sortPoints","by_distance","updateActive","active","closest","container","active_keys","closest_keys","trigger","prepareMargins$2","default_legend_margins","prepareLegendData","charts","combined_data","chart_id","find_chart","exclude_from_legend","chart_data","demux","legend_data","index","getLegendData","prepareLegend","class","swatchClass","createSwatch","selectAll","groups","pointer-events","swatchDimensions","visibility","size","swatch","each","text","stackDirection","sizes","item_size","getTransform","translation","relative_to_x","relative_to","relative_to_y","prepareText","textAlign","middle","verticalAlign","drawText","text_selection","anchor","textOptions","default_options","prepareMargins","defaultMargins","default_margin","margins_by_position","title","prepareMargins$1","defaultMargins$1","axisTitle","prepareScales","xScale","orientation","XY","getDefaultXScale","setXScaleRange","yScale","getDefaultYScale","setYScaleRange","prepareAxis","axis","orient","ticks","tickValues","tickSize","innerTickSize","outerTickSize","tickPadding","tickFormat","transition","prepareGridlines","gridlines","drawAxis","createAxis","svg","array_extensions","getLabelOverhang","overhangs","extractLayout","prepareComponent","component","row_index","col_index","getId","setPosition","layered_index","extractData","_charts","_components","items","layout","components","found","row","row_components","row_layout","_layered","chart_ids","chart_index","unshift","calculateLayout","overall_layout","skip_layout","getLayout","applyLayout","chart_position","setLayout","part","parts","previousPart","layered","findById","StandardLayer","standardLayer","standardSeriesLayer","onEnter","onUpdate","onMerge","onExit","Int8Array","utils","types","string","number","array","object","any","architecture","prepareProps","prop","getDefault","attach","Type","attached","draw","detach","helpers","Transition","setupTransition","on","setScales","normalizeData","xKey","yKey","xValue","seriesIndex","yValue","x0","y0","x_scale","y_scale","d3Chart","attachment","unlayer","once","off","isProperty","unset","proto_props","static_props","hasOwnProperty","Component","prepareLayout","actual_dimensions","z_index","layer_type","Hover","onMouseEnter","onMouseMove","onMouseLeave","seriesData","mouseEnterPoint","mouseLeavePoint","HoverPoints","hoverTolerance","Labels$1","attachLabels","labels","LabelsClass","_labels","proxyLabelMethods","display","LabelsXY","XYInverted","XYValues","adjacentWidth","seriesCount","layeredWidth","itemWidth","Series","seriesKey","seriesValues","seriesClass","itemStyle","seriesLayer","Labels","Mixed$7","Gridlines","drawLine","x1","x2","y1","y2","chartPosition","hide","tick_values","ticks_args","onMergeTransition","drawLegend","Mixed$6","Legend","prepare","render","classed","swatches","direction_by_position","default","swatch_dimensions","registerSwatch","chart_types","chart_type","legend","InsetLegend","insetLegend","Mixed$4","Text","Title","rotate_by_position","AxisTitle","Mixed$5","Axis","gridlines_layer","label_overhang","Chart","Mixed$2","format","y_value","alignment","labelText","label","__original_y","labelClass","insertLabels","mergeLabels","layoutLabels","transitionLabels","getOptions","label_position","label_options","_prepareLabel","_calculateLayout","_handleCollisions","_setLayout","bg","text_bounds","text_y_adjustment","checkForOverlap","labelA","labelB","getEdges","contained_LR","contained_TB","overlap_LR","overlap_TB","notGrouped","groupIncludes","group","groupLabels","updateGroupPositions","addLabelToGroup","originalY","reset","sortY","byY","reverse","overlap","prev","compareSeries","compareLabel","overlapping","not_grouped","Mixed$3","HoverLabels","onMouseEnterPoint","onMouseLeavePoint","findLabelForPoint","hoverLabels","Mixed$1","Bars","offset_axis","getOffsetAxis","barHeight","abs","barOffset","barWidth","barX","barY","bar0","barClass","axis_thickness","parseInt","onExitTransition","bars","HorizontalBars","horizontalBars","StackedBars","grouped","x_key","y_key","pos","neg","__previous","stackedBars","HorizontalStackedBars","horizontalStackedBars","Mixed","Lines","lines","interpolate","createLine","lineKey","line","lineData","Overlay","hidden","-webkit-transform","-ms-transform","getAbsolutePosition","show","container_position","responsive","container_dimensions","chart_width","chart_height","width_ratio","height_ratio","default_compose_margins","Compose","tagName","attachHoverListeners","rawData","_width","_height","viewBox","preserveAspectRatio","containerStyle","aspect_ratio","padding-top","baseStyle","chart_options","_attachItems","component_options","config","_prepareConfig","_setDimensions","redraw","createChartLayer","createComponentLayer","createOverlayLayer","_positionChartLayers","_extractLayout","positionLayers","inside","mouse","document","documentElement","bounds","translateToXY","move","leave","coordinates","chart_x","chart_y","getBounds","scroll_y","scrollY","scrollTop","getBoundingClientRect","was_inside","is_inside","_positionComponents","_positionByZIndex","remove_ids","remove_id","changed_position","layer_options","overlay","setZIndex","zIndex","sortZIndex","layers","appendChild","compose","VERSION"],"mappings":";;;;CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,EAAAG,QAAA,MAAAA,QAAA,aACA,kBAAAC,SAAAA,OAAAC,IAAAD,QAAA,KAAA,YAAAJ,GACAD,EAAAO,IAAAN,EAAAD,EAAAQ,GAAAR,EAAAS,WACAC,KAAA,SAAAF,EAAAC,GAAA,YAgKA,SAAAE,GAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IACAA,MAAA,QACAC,OAAA,eACAJ,EAEA,IAAAG,GAAAJ,EAAAI,GAAA,CACA,GAAAE,KAuBA,QArBA,QACA,mBACA,SACA,oBACA,QACA,mBACA,OACA,mBACAC,QAAA,SAAAC,GACA,GAAAC,GAAA,KAAAD,EAAAE,MAAA,KAAAC,IAAA,SAAAC,GACA,MAAAA,GAAAC,OAAA,GAAAC,cAAAF,EAAAG,MAAA,KACAC,KAAA,GAGAhB,GAAAS,KACAH,EAAAE,GAAA,WACAV,KAAAE,QAAAS,GAAAX,UAKAE,EAAAI,GAAAF,EAAAC,GACAc,SAAA,SAAAC,GACA,MAAApB,MAAAE,QAAAmB,WAAArB,KAAAoB,IAEAE,OAAA,WACA,MAAAtB,MAAAE,QAAAqB,SAAAvB,OAEAQ,OAAAA,KAWA,QAAAgB,GAAAC,EAAAC,EAAAC,GACA,IAAA,GAAAC,GAAA,EAAAC,EAAAH,EAAAG,OAAAD,EAAAC,EAAAD,IACA,IAAA,GAAAE,KAAAJ,GAAAE,GACAD,GAAA,SAAAF,EAAAK,KACAL,EAAAK,GAAAJ,EAAAE,GAAAE,GAIA,OAAAL,GAGA,QAAAM,GAAAC,EAAAC,GACA,MAAAD,GAAAE,QAAAD,IAAA,EAGA,QAAAE,GAAAH,GACA,MAAAA,GAAAI,OAAA,SAAAH,GACA,MAAAA,KAIA,QAAAI,GAAAC,EAAAC,GACA,MAAAD,GAAAF,OAAA,SAAAI,GACA,MAAAD,GAAAL,QAAAM,GAAA,IAIA,QAAAC,GAAAhB,GACA,MAAAD,GAAAC,EAAAR,GAAAyB,KAAAC,UAAA,IAAA,GAGA,QAAAC,GAAAnB,GACA,MAAAD,GAAAC,EAAAR,GAAAyB,KAAAC,UAAA,IAGA,QAAAE,GAAAb,GAEA,MAAAA,GAAAc,OAAA,SAAAC,EAAAd,GACA,MAAAc,GAAAC,OAAAf,QAIA,QAAAgB,GAAAjB,EAAAkB,EAAAC,GACA,GAAAnB,EACA,IAAA,GAAAJ,GAAA,EAAAC,EAAAG,EAAAH,OAAAD,EAAAC,EAAAD,IACA,GAAAsB,EAAAR,KAAAS,EAAAnB,EAAAJ,GAAAA,EAAAI,GACA,MAAAA,GAAAJ,GAIA,QAAAwB,GAAApB,EAAAqB,GACA,GAAA,MAAArB,EACA,MAAA,OAAAqB,EAAArB,EAAA,GACAsB,MAAAC,UAAAtC,MAAAyB,KAAAV,EAAA,EAAAqB,GAGA,QAAAG,GAAAC,GACA,MAAAA,MAAA,GAAAA,KAAA,EAEA,QAAAC,GAAAD,GACA,GAAAtD,SAAAsD,EACA,OAAA,aAAAtD,GAAA,WAAAA,KAAAsD,EAEA,QAAAE,GAAAF,GACA,MAAA,oBAAAG,GAAAlB,KAAAe,GAEA,QAAAI,GAAAJ,GACA,MAAA,oBAAAG,GAAAlB,KAAAe,GAEA,QAAAK,GAAAL,GACA,MAAA,UAAAA,EAYA,QAAAM,GAAAN,EAAAP,EAAAC,GACA,GAAAM,EAEA,IAAA,GADAO,GAAAC,OAAAD,KAAAP,GACA7B,EAAA,EAAAC,EAAAmC,EAAAnC,OAAAD,EAAAC,EAAAD,IACAsB,EAAAR,KAAAS,EAAAM,EAAAO,EAAApC,IAAAoC,EAAApC,GAAA6B,GAIA,QAAAS,GAAAT,EAAAP,EAAAC,GACA,GAAAM,EAEA,IAAA,GADAO,GAAAC,OAAAD,KAAAP,GACA7B,EAAA,EAAAC,EAAAmC,EAAAnC,OAAAD,EAAAC,EAAAD,IACA,GAAAsB,EAAAR,KAAAS,EAAAM,EAAAO,EAAApC,IAAAoC,EAAApC,GAAA6B,GACA,MAAAA,GAAAO,EAAApC,IAIA,QAAAuC,GAAAC,EAAAtC,GACA,MAAAsC,GACAA,EAAAvD,IAAA,SAAA4C,GACA,MAAAA,GAAA3B,QAIA,QAAAuC,GAAArC,GAEA,IAAA,GADAsC,MACA1C,EAAA,EAAAC,EAAAG,EAAAH,OAAAD,EAAAC,EAAAD,IACA0C,EAAApC,QAAAF,EAAAJ,IAAA,GACA0C,EAAAC,KAAAvC,EAAAJ,GAEA,OAAA0C,GAGA,QAAAE,GAAAC,EAAAC,GACAD,EAAAlB,UAAAU,OAAAU,OAAAD,EAAAnB,WACAqB,aACApC,MAAAiC,EACAI,YAAA,EACAC,WAAA,EACAC,cAAA,KAIAd,OAAAe,eACAf,OAAAe,eAAAP,EAAAC,IAGAD,EAAAQ,UAAAP,EAIAjC,EAAAgC,EAAAC,IAUA,QAAAQ,GAAA1C,EAAA2C,GACA,MAAArB,GAAAtB,GAAA2C,EAAA3C,EAGA,QAAA4C,GAAAC,EAAAC,GACA,mBAAAC,UAAAA,QAAAC,MACAD,QAAAC,KAAA,kCAAAF,EAAA,OAAAD,GAwHA,QAAAI,GAAAC,GAEA,GAAA/C,UAAAd,SACAuD,EAAA,mIAAA,WACAM,EAAA/C,UAAA,IAGA+C,EAAAA,KACA,IAAAC,GAAA,YAAAC,KAEAH,EAAA,SAAAjD,GASA,QAAAqD,KAUA,MATArD,GAAAsD,EAAAH,GAEA7B,EAAAtB,KAEAA,EAAAiD,EAAAN,cACAY,GAAAvD,KACAA,EAAAA,EAAAE,KAAAS,KAGA4C,GAAAL,EAAAG,KAAAH,EAAAG,IAAAnD,KAAAS,EAAAX,GAAAA,EAGA,QAAAwD,KAEA,GAAAD,GAAAL,EAAAO,YAAAnC,EAAAtB,KAAAkD,EAAAO,SAAAvD,KAAAS,EAAAX,GACA,KAAA,IAAA0D,OAAA,+BAAAC,KAAAC,UAAA5D,GAEA,IAAA6D,GAAAP,EAAAH,EAGA,IAFAG,EAAAH,GAAAnD,EAEAuD,GAAAL,EAAAM,OAAAlC,EAAAtB,GAAA,CACA,GAAA8D,GAAAZ,EAAAM,IAAAtD,KAAAS,EAAAX,EAAA6D,EAEAC,IAAA,YAAAA,KACAR,EAAAH,GAAAW,EAAAC,UACAD,GAAAP,GAAAO,EAAAE,QACAF,EAAAE,MAAA9D,KAAAS,EAAA2C,EAAAH,IAGA,MAAA3F,MAtCA,GAAA8F,GAAA9F,KAAAyG,aAAAzG,KAAAyG,iBACAtD,EAAA+B,EAAAO,EAAAtC,QAAAnD,KAEA,OAAA2C,WAAAd,OACAmE,EAAAtD,KAAA1C,MAEA6F,EAAAnD,KAAA1C,MA4CA,OAPAyF,GAAAiB,aAAA,EACAjB,EAAAE,GAAAA,EACAF,EAAAkB,iBAAAzB,EAAAQ,EAAAiB,kBAAA,GACAlB,EAAAN,cAAAO,EAAAP,cACAM,EAAAtC,QAAAuC,EAAAvC,QACAsC,EAAAC,QAAAA,EAEAD,EAgCA,QAAAmB,GAAAlC,GACA,GAAAmC,GAAA5F,GAAAyB,KAAAC,UAAA,GACAmE,KACAC,KACAC,IAgCA,OA9BAH,GAAApG,QAAA,SAAAwG,GACAlD,EAAAkD,EAAA,SAAAzE,EAAAV,GACA,cAAAA,EACAgF,EAAAvC,KAAA/B,GACA,aAAAV,EACAiF,EAAAxC,KAAA/B,GAEAwE,EAAAlF,GAAAU,MAIAsE,EAAAjF,SACAmF,EAAAE,WAAA,WACA,GAAAC,GAAAlG,GAAAyB,KAAAC,UACA+B,GAAAnB,UAAA2D,WAAAE,MAAApH,KAAAmH,GACAL,EAAArG,QAAA,SAAA4G,GACAA,EAAAD,MAAApH,KAAAmH,IACAnH,QAIA+G,EAAAlF,SACAmF,EAAAM,UAAA,SAAAlG,GAEA,MADAA,GAAAsD,EAAAnB,UAAA+D,UAAA5E,KAAA1C,KAAAoB,GACA2F,EAAAjE,OAAA,SAAAC,EAAAwE,GACA,MAAAA,GAAA7E,KAAA1C,KAAA+C,IACAyE,KAAAxH,MAAAoB,KAIAsD,EAAA9B,OAAAoE,GA4BA,QAAAS,GAAA/B,GAeA,QAAAgC,GAAA9F,GACA,MAAAA,GAAA,GAAA8D,EAAAgC,QAAAhC,EAAAgC,QAAA,EAGA,MAlBAhC,GAAA9C,GACA+E,UAAA,WACAC,OAAA,MACAF,QAAA,EACAG,WAAA,EACAC,UAAA,GACApC,GAGA,cAAAA,EAAAiC,WAAA,QAAAjC,EAAAkC,QAAA,SAAAlC,EAAAkC,OACAlC,EAAAkC,OAAA,OACA,YAAAlC,EAAAiC,WAAA,OAAAjC,EAAAkC,QAAA,UAAAlC,EAAAkC,SACAlC,EAAAkC,OAAA,OAMA,SAAAG,GACA,GAAAA,GAAAA,EAAAC,KAAA,CACA,GAAA3B,GAAA,CAEA0B,GAAAC,KAAA,YAAA,SAAAC,EAAArG,GACA,GAKAsG,GALAC,EAAAnI,KAAAoI,UACAC,EAAAvI,EAAAwI,KAAAH,EAAAI,MAAA7C,EAAAoC,YACAU,EAAA1I,EAAAwI,KAAAH,EAAAM,OAAA/C,EAAAmC,aACAa,EAAA,EACAC,EAAA,CAwBA,OArBA,cAAAjD,EAAAiC,WACAO,EAAA7B,EAAAgC,EAAAX,EAAA9F,GAGA8G,EADA,QAAAhD,EAAAkC,OACAvB,EAAAqB,EAAA9F,GAEAsG,EAEA7B,EAAA6B,IAGAA,EAAA7B,EAAAmC,EAAAd,EAAA9F,GAGA+G,EADA,OAAAjD,EAAAkC,OACAvB,EAAAqB,EAAA9F,GAEAsG,EAEA7B,EAAA6B,GAGAU,EAAAF,EAAAC,OAgEA,QAAAE,GAAAnD,GAIA,GAHAA,EAAAA,MAGAK,GAAAL,GACA,MAAAA,EAGA,IAAAoD,EAEAA,GADA,QAAApD,EAAAvF,KACAL,EAAAiJ,KAAAD,QACAhJ,EAAAgJ,MAAApD,EAAAvF,MACAL,EAAAgJ,MAAApD,EAAAvF,QAEAL,EAAAgJ,MAAAE,SAEAjF,EAAA2B,EAAA,SAAAlD,EAAAV,GACAgH,EAAAhH,KAIA,SAAAA,GAAA,UAAAA,EACAgH,EAAAhH,GAAAU,GACAT,GAAA,OAAA,OAAA,QAAA,MAAA,WAAA,WAAA,SAAA,WAAAD,IACAgH,EAAAhH,GAAAsF,MAAA0B,EAAAtG,OAIAkD,EAAAuD,QAAAvD,EAAAtE,OAAAsE,EAAA5D,KAAA4D,EAAAlD,SACAsG,EAAAI,EAAAJ,EAAApD,GAIA,IAAAyD,GAAAzD,EAAAyD,UAAA,WAAAzD,EAAAvF,MAAA,MAAAuF,EAAAyD,QAQA,OAPA,WAAAzD,EAAAvF,OAAAgJ,GAAAzD,EAAA0D,YACAN,EAAAO,EAAAP,EAAApD,IAGA,WAAAA,EAAAvF,OAAA,MAAAuF,EAAAgC,SAAAyB,GAAAzD,EAAA0D,YACAN,EAAAQ,EAAAR,EAAApD,IAEAoD,EAGA,QAAAI,GAAAJ,EAAApD,GAEA,GAAA6D,GAAA7D,EAAAlD,OAAA,SAAAyF,GACA,MAAAA,GAAAvC,EAAA5D,MAIAV,EAAAsE,EAAAtE,IACAoI,GAAApI,KACAA,IAAAqI,OAAArI,IAEA,IAAA6H,EACA,IAAA,WAAAvD,EAAAvF,KAEA8I,EAAA5E,EAAAxB,EAAAzB,EAAAP,IAAA,SAAAN,GACA,GAAAA,GAAAA,EAAAkJ,OACA,MAAAlJ,GAAAkJ,OAAA5I,IAAA0I,WAGA,CACA,GAAAG,GAAAC,EAAAvI,EAAAmI,EAEAN,IACAS,EAAA,EAAAA,EAAA,EACApB,EAAAlH,EAAAmI,IAKA,MADAT,GAAAG,OAAAA,GACAH,EAGA,QAAAO,GAAAO,EAAAlE,GAEA,GAAAmE,GAAAnE,EAAAnF,SAAAiJ,EAAA9D,EAAAtE,MAAAsE,EAAAtE,KAAAS,OAAA,GAGAiH,EAAA,SAAAc,EAAAlE,EAAAmE,GACA,GAAA1G,GAAA,SAAAX,EAAAsH,GACA,GAAAvB,GAAApF,EAAAoF,OAKA,OAHA7C,GAAA0D,WACAU,EAAA,GAEAF,EAAApH,GAAA,GAAA+F,EAAAA,GAAAuB,GAAA,GAgBA,OAdAlH,GAAAO,EAAAyG,GACArB,MAAA,WACA,GAAAwB,GAAA5G,EAAA6G,WAAA7G,EAAA6G,YACAzB,EAAA0B,SAAAF,GAAAA,EAAA,CAKA,OAHArE,GAAA0D,WACAb,GAAAsB,GAEAtB,KAMApF,GACAyG,EAAAlE,EAAAmE,EAEA,OAAAf,GAGA,QAAAQ,GAAAR,EAAApD,GACA,GAAAgC,GAAA,MAAAhC,EAAAgC,QAAAhC,EAAAgC,QAAA,GAEAwC,EAAApB,EAAAqB,KAeA,OAdArB,GAAAqB,MAAA,SAAAA,GACA,MAAAxH,WAAAd,WAEAiH,GAAAsB,WACAD,EACAzC,EACAA,EAAA,GALAwC,KASAxE,EAAAyE,OACArB,EAAAqB,MAAAzE,EAAAyE,OAGArB,EAYA,QAAAuB,GAAAhK,GAEA,GAAAiK,GAAAC,EAAAlK,EAEA,IAAAiK,EAAA/B,OAAA+B,EAAA7B,OACA,MAAA6B,EAGA,IAAAtC,GAAAwC,EAAAnK,EAEA,IAAAoK,EAAApK,GACA,OACAkI,MAAA,MAAA+B,EAAA/B,MAAA+B,EAAA/B,MAAAP,EAAAO,OAAA,EACAE,OAAA,MAAA6B,EAAA7B,OAAA6B,EAAA7B,OAAAT,EAAAS,QAAA,EAIA,IAAAiC,GAAAC,EAAAtK,EAKA,QACAkI,MAAAzI,EAAAwI,KAAAgC,EAAA/B,MAAAP,EAAAO,OAAAmC,EAAAnC,SAAA,EACAE,OAAA3I,EAAAwI,KAAAgC,EAAA7B,OAAAT,EAAAS,QAAAiC,EAAAjC,UAAA,GAKA,QAAA8B,GAAAlK,GACA,GAAAuK,GAAAvK,EAAAwK,OACAtC,EAAAqC,GAAAA,EAAAE,YACArC,EAAAmC,GAAAA,EAAAG,YAMA,IAAAN,EAAApK,MAAAuK,EAAAE,cAAAF,EAAAG,eAAA,mBAAAC,SAAAA,OAAAC,iBAAA,CACA,GAAAC,GAAAF,OAAAC,iBAAAL,EACAnC,GAAA0C,WAAAD,EAAAzC,QAAA0C,WAAAD,EAAAE,gBAAAD,WAAAD,EAAAG,mBACA9C,EAAA4C,WAAAD,EAAA3C,OAAA4C,WAAAD,EAAAI,iBAAAH,WAAAD,EAAAK,kBAGA,OACAhD,MAAAA,IAAAiD,MAAAjD,GAAAA,EAAA,KACAE,OAAAA,IAAA+C,MAAA/C,GAAAA,EAAA,MAIA,QAAA+B,GAAAnK,GACA,OACAkI,MAAAlI,GAAAA,EAAA2H,MAAAmD,WAAA9K,EAAA2H,KAAA,UACAS,OAAApI,GAAAA,EAAA2H,MAAAmD,WAAA9K,EAAA2H,KAAA,YAIA,QAAA2C,GAAAtK,GACA,GACAqK,GADAE,EAAAvK,EAAAwK,MAEA,KACAH,EAAAE,GAAA,kBAAAA,GAAAxC,SAAAwC,EAAAxC,UAEA,MAAAqD,GAGAf,GAAAnC,MAAA,EAAAE,OAAA,GAGA,MAAAiC,GAGA,QAAAD,GAAApK,GACA,MAAA,OAAAA,EAAAwK,OAAAa,SAgBA,QAAA9C,GAAAF,EAAAC,GAMA,MALAjF,GAAAgF,KACAC,EAAAD,EAAAC,EACAD,EAAAA,EAAAA,GAGA,cAAAA,GAAA,GAAA,MAAAC,GAAA,GAAA,IAWA,QAAAgD,GAAAC,EAAAC,GACA,GAAAC,GAAA,WAAAF,GAAA,EAKA,OAJAC,KACAC,GAAA,KAAAD,EAAAnD,GAAA,GAAA,KAAAmD,EAAAlD,GAAA,IACAmD,GAAA,IA0BA,QAAAC,GAAAnB,EAAAoB,GACA,GAAAC,GAAA,CACA,KACA,GAAAxD,GAAAmC,EAAAxC,UAAAK,OAEAyD,EAAAlB,OAAAC,iBAAAL,GACAuB,EAAAhB,WAAAe,EAAA,cACAE,EAAAjB,WAAAe,EAAA,eAIAV,OAAAY,KACAA,EAAA,KAAAD,EAEA,IAAAE,KAAAD,EAAAD,GAAA,EAGAG,EAAA,CACAN,IAAAA,EAAA,IACAM,GAAAN,EAAAvD,GAAA,GAEAwD,EAAAxD,GAAA4D,GAAA,IAAAC,GAAA,GAEA,MAAAb,IAKA,MAAAQ,GAUA,QAAAzC,GAAApI,GACA,GAAAmL,GAAAnJ,EAAAhC,EACA,OAAAmL,IAAA7I,EAAA6I,IAAAjJ,MAAAkJ,QAAAD,EAAA9C,QAmBA,QAAAnB,GAAAlH,EAAAmI,GACA,GAAAkD,GAAA,SAAAC,GACA,MAAAA,IAAA5M,EAAA6M,OAAAD,EAAAnD,GAAA,GAGA,OAAAC,GAAApI,GACAA,EAAA0B,OAAA,SAAAC,EAAAxC,GACA,GAAAA,GAAA+C,MAAAkJ,QAAAjM,EAAAkJ,QAAA,CACA,GAAAmD,GAAAH,EAAAlM,EAAAkJ,OACA,OAAAmD,GAAA7J,EAAA6J,EAAA7J,EAGA,MAAAA,MAEA8J,EAAAA,IAGAJ,EAAArL,GAoBA,QAAAuI,GAAAvI,EAAAmI,GACA,GAAAuD,GAAA,SAAAJ,GACA,MAAAA,IAAA5M,EAAA6M,OAAAD,EAAAnD,GAAA,GAGA,OAAAC,GAAApI,GACAA,EAAA0B,OAAA,SAAAC,EAAAxC,GACA,GAAAA,GAAA+C,MAAAkJ,QAAAjM,EAAAkJ,QAAA,CACA,GAAAsD,GAAAD,EAAAvM,EAAAkJ,OACA,OAAAsD,GAAAhK,EAAAgK,EAAAhK,EAGA,MAAAA,IAEA8J,EAAAA,GAGAC,EAAA1L,GAcA,QAAA4L,GAAA9B,GACA,IAAAA,EACA,MAAA,EAEA,IAAA+B,KAMA,OALAlJ,GAAAmH,EAAA,SAAA1I,EAAAV,GACAmL,EAAA1I,KAAAzC,EAAA,KAAAU,KAEA0I,EAAA+B,EAAA/L,KAAA,MAEAgK,EAAAA,EAAA,IAAA,GAmBA,QAAAgC,GAAAC,EAAAC,GACA,MAAAzJ,GAAAwJ,IACAE,IAAAF,EAAAG,MAAAH,EAAAI,OAAAJ,EAAAK,KAAAL,GAEA1K,KAAA0K,EAAAC,GAAAC,IAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,KAAA,IA+BA,QAAAC,GAAAC,GAEA,GAAAC,GAAA,SAAA1F,EAAArG,EAAAgM,GACA,MAAAF,GAAAhL,KAAA1C,KAAA6N,OAAA5F,EAAArG,EAAAgM,GAKA,OAHAD,GAAAG,QAAA,EACAH,EAAA/D,SAAA8D,EAEAC,EAGA,QAAAI,GAAAC,EAAA9N,GACA,MAAA,UAAA+H,EAAArG,EAAAgM,GACA,OAAAI,EAAApE,UAAAoE,GAAAtL,KAAA1C,KAAAE,EAAA+H,EAAArG,EAAAgM,IAKA,QAAAK,GAAA/N,GACA,IAAA,GAAA4B,KAAA5B,GACAA,EAAA4B,IAAA5B,EAAA4B,GAAAgM,SACA5N,EAAA4B,GAAAiM,EAAA7N,EAAA4B,GAAA5B,IAgCA,QAAAgO,GAAAtD,GAEA,GAAAA,EAAAuD,aACA,MAAAvD,GAAAuD,YAEA,IAAAC,GAAAxD,GAAAA,EAAAyD,UACA,IAAAD,EAAA,CACA,GAAAhN,GAAAtB,EAAAwO,OAAAF,GAAAhN,MACA,OAAAA,IAAAA,EAAA,IAIA,QAAAmN,GAAApO,GACA,MAAA,UAAAwF,EAAAD,GAMA,MALAA,KACAA,EAAAC,EACAA,EAAAkI,QAGAjL,GAAA+C,GAAAA,EAAAxF,KAAAA,GAAAuF,IAYA,QAAA8I,GAAAhM,EAAAiM,GACA,GAAAA,EAAAxI,WAAAwI,EAAAxI,SAAAzD,GACA,KAAA,IAAA0D,OAAA,+BAAAC,KAAAC,UAAA5D,IAGA,QAAAkM,GAAAC,GAIA,MAHArL,OAAAkJ,QAAAmC,KACAA,EAAArL,MAAAC,UAAAtC,MAAAyB,KAAAC,YAEA,WACA,GAAAtC,GAAAL,KAAA4O,KACAzL,EAAAnD,IAEA,OAAA2O,GAAA7L,OAAA,SAAA+L,EAAAC,GACA,MAAAA,GAAAzO,EAAAwO,EAAA1L,IACAnD,KAAA6O,QAIA,QAAAE,GAAAJ,GACA,MAAA,UAAAtO,EAAAwO,GACA,GAAAG,GAAAC,EAAAN,EAAAE,GAGAK,EAAAF,EAAAV,OAAA5L,KAAArC,EACA6O,GAAAC,OAAAzM,KAAAsM,EAAAG,MACAD,EAAAxM,KAAAsM,EAAAI,QACAF,EAAAG,QAAA3M,KAAAsM,EAAAK,OACAH,EAAAxM,KAAAsM,EAAAM,QAIA,QAAAL,GAAAN,EAAAE,GAUA,MATAF,GAAAlM,KAAAkM,GACAL,OAAA,WAAA,MAAAtO,OACAqP,MAAA,aACAD,OAAA,aACAE,MAAA,aACAH,KAAA,WAAAnP,KAAAuP,aAKAjB,OAAAkB,EAAAb,EAAAL,OAAAO,GACAQ,MAAAG,EAAAb,EAAAU,MAAAR,GACAO,OAAAI,EAAAb,EAAAS,OAAAP,GACAS,MAAAE,EAAAb,EAAAW,MAAAT,GACAM,KAAAK,EAAAb,EAAAQ,KAAAN,IAIA,QAAAW,GAAAtM,GACA,GAAAuG,GAAAnG,MAAAC,UAAAtC,MAAAyB,KAAAC,UAAA,EAEA,OAAA,YACA,GAAAwE,GAAA7D,MAAAC,UAAAtC,MAAAyB,KAAAC,UACA,OAAAO,GAAAkE,MAAApH,KAAAyJ,EAAAzG,OAAAmE,KAIA,QAAAsI,IAAAZ,GACA,MAAA,YACA/K,EAAA+K,EAAAa,WACA1P,KAAA0P,SAAAb,EAAAa,UACA5L,EAAA+K,EAAAc,QACA3P,KAAA2P,MAAAd,EAAAc,OACA7L,EAAA+K,EAAAe,OACA5P,KAAA4P,KAAAf,EAAAe,OAIA,QAAAC,IAAAxP,EAAAsF,GACA,GAAArF,GAAAD,EAAAiO,OAAA,gBAAA3I,EAAA,KAIA,OAHArF,GAAAwP,UACAxP,EAAAD,EAAA0P,OAAA,KAAA/H,KAAA,aAAArC,IAEArF,EA+CA,QAAA0P,IAAAC,EAAAjM,GACAA,EAAAA,GAAAC,OAAAD,KAAAiM,EAAAnK,YAEA9B,EAAAvD,QAAA,SAAAqB,GACAmO,EAAA1M,UAAAzB,KAGAmO,EAAA1M,UAAAzB,GAAA2D,GACAI,IAAA,WAEA,MADAT,GAAA,OAAAtD,EAAA,yDAAAA,EAAA,KACA9B,KAAA0F,UAAA5D,IAEAkE,IAAA,SAAAxD,GAEAxC,KAAA0F,UAAA5D,GAAAU,QAkZA,QAAA0N,IAAA7P,EAAAqF,GAEA1F,KAAA4O,KAAAvO,EACAL,KAAAmQ,WACAnQ,KAAAoQ,aACApQ,KAAAqQ,WAGApC,EAAAjO,MAGA0F,GACA1F,KAAA0F,QAAAA,GAGA1F,KAAAkH,WAAAxB,GAgpBA,QAAA4K,IAAApQ,EAAAkB,GACA,GAAAA,EAIA,MAHAoI,GAAApI,KACAA,IAAAqI,OAAArI,KAEAA,EAAAP,IAAA,SAAAN,EAAAqN,GACA,MAAArN,GAAAkJ,OAAA5I,IAAA,SAAAoH,EAAArG,GACA,MAAA1B,GAAAqQ,SAAA7N,MAAAyL,aAAA5N,GAAA0H,EAAArG,EAAAgM,KACA4C,KAAA,SAAAlO,EAAAC,GAEA,MAAAD,GAAAmO,KAAA/H,EAAAnG,EAAAkO,KAAA/H,MAMA,QAAAgI,IAAAC,EAAAC,EAAAC,GA0BA,QAAAC,GAAAxO,EAAAC,GACA,MAAAwO,MAAAC,KAAAD,KAAAE,IAAA1O,EAAAmG,EAAApG,EAAAoG,EAAA,GAAAqI,KAAAE,IAAA1O,EAAAoG,EAAArG,EAAAqG,EAAA,IA1BA,MAAAgI,GAGAxO,EAAAwO,EAAA9P,IAAA,SAAAN,GACA,QAAA2Q,GAAAC,GAEA,MADAA,GAAAC,SAAAN,EAAAK,EAAAV,KAAAG,GACAO,EAEA,QAAAE,GAAAF,GACA,MAAAA,GAAAC,SAAAP,EAEA,QAAAS,GAAAhP,EAAAC,GACA,MAAAD,GAAA8O,SAAA7O,EAAA6O,YAEA9O,EAAA8O,SAAA7O,EAAA6O,SACA,EAEA,EAGA,GAAAG,GAAAhR,EAAAM,IAAAqQ,GAAA9O,OAAAiP,GAAAb,KAAAc,EAEA,OAAAC,GAAA,SAQA,QAAAC,IAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAzN,EAAAsN,EAAA,OACAI,EAAA1N,EAAAuN,EAAA,MAEA3N,GAAA2N,EAAA,SAAAP,GACApP,EAAA6P,EAAAT,EAAArP,KACA6P,EAAAG,QAAA,kBAAAX,GAEAQ,EAAAG,QAAA,mBAAAX,KAEApN,EAAA0N,EAAA,SAAAN,GACApP,EAAA8P,EAAAV,EAAArP,MACA6P,EAAAG,QAAA,mBAAAX,KAw3BA,QAAAY,IAAA1R,EAAAwO,GACA,MAAAjM,MAAAiM,GACA1B,QAAAD,EAAA2B,EAAA1B,QAAA6E,MAIA,QAAAC,IAAA5R,EAAAwO,EAAA1L,GAEA,GAAA/B,GAAAyN,EAAAzN,IACA,IAAAyN,EAAAqD,OAAA,CACA,GAAAA,GAAA/O,EAAAwO,UAAAO,QACA9Q,GAAAyN,EAAAqD,OAAApP,OAAA,SAAAqP,EAAAC,GACA,GAAAlS,GAAA+C,EAAAiP,EAAA,SAAAG,GACA,MAAAA,GAAA1M,IAAAyM,GAIA,KAAAlS,GAAAA,EAAAoS,qBAAApS,EAAAwF,UAAA4M,oBACA,MAAAH,EAEA,IAAAI,GAAApP,EAAAwO,UAAAa,MAAAJ,EAAAjP,EAAAwO,UAAAvQ,OACAoI,GAAA+I,KACAA,IAAA9I,OAAA8I,IAEA,IAAAE,GAAAF,EAAAzP,OAAA,SAAAC,EAAAxC,EAAAmS,GAIA,MAHAnS,KAAAA,EAAA+R,qBACAvP,EAAAwB,KAAApB,EAAAwP,cAAAzS,EAAAK,EAAAmS,IAEA3P,MAGA,OAAAoP,GAAAnP,OAAAyP,QAIA,MAAA7P,MAAAiM,GACAzN,KAAAA,IAIA,QAAAwR,IAAAvS,EAAAwO,EAAA1L,GACA,GAAA/B,GAAAyN,EAAAzN,KAAAP,IAAA,SAAAoH,EAAArG,GACA,MAAAgB,MAAAqF,GACA4K,QAAA1P,EAAA2P,YAAAjE,EAAA1L,EAAA8E,EAAArG,MAIA,OAAAgB,MAAAiM,GACAzN,KAAAA,EACA2R,aAAAvD,EAAArM,EAAA4P,aAAAlE,EAAA1L,KAIA,QAAAmL,IAAAO,GACA,MAAA7O,MAAAgT,UAAA,uBACA5R,KAAAyN,EAAAzN,KAAA,SAAA6G,GAAA,MAAAA,GAAAnG,MAGA,QAAAuN,IAAAR,GACA,GAAAoE,GAAAjT,KAAA+P,OAAA,KACA/H,KAAA,QAAA,sBACAgF,OAAAkG,iBAAA,OAYAD,GAAAlD,OAAA,KACA/H,KAAA,QAAA6G,EAAAsE,iBAAA5K,OACAP,KAAA,SAAA6G,EAAAsE,iBAAA1K,QACAT,KAAA,QAAA,uBACAiL,EAAAlD,OAAA,QACA/H,KAAA,QAAA,sBAEAiL,EAAAlD,OAAA,QACA/H,KAAA,QAAA,sBACAgF,OAAAoG,WAAA,WAGA,QAAA9D,IAAAT,GACA,GAAAwE,GAAAxE,EAAAsE,iBACAG,EAAAtT,KAAAsO,OAAA,uBAEAgF,GACAtL,KAAA,QAAA,SAAAC,GAAA,MAAAA,GAAA,WACA+K,UAAA,KAAAzD,SAEA+D,EAAAC,KAAA1E,EAAAkE,cAEA/S,KAAAsO,OAAA,uBACAkF,KAAA,SAAAvL,GAAA,MAAAA,GAAAuL,OACAD,KAAA,WAEA,GAAAtH,GAAAF,EAAA/L,KAAAqT,EAAA5K,OACA3I,GAAAwO,OAAAtO,MACAgI,KAAA,YAAAY,EAAAyK,EAAA9K,MAAA,EAAA0D,MAIAjM,KAAA0C,KAAA+E,GACAE,UAAAkH,EAAA4E,eACA7L,OAAA,MACAF,QAAA,EACAG,WAAAwL,EAAA5K,OACAX,UAAAuL,EAAA9K,QAIA,IAAAmL,KACA1T,MAAAuT,KAAA,WACAG,EAAAnP,KAAAvE,KAAAoI,aAEApI,KAAAsO,OAAA,uBAAAiF,KAAA,SAAAtL,EAAArG,GACA,GAAA+R,GAAAD,EAAA9R,GACA0F,EAAA,IAEAqM,GAAAlL,OAAA4K,EAAA5K,SACAnB,EAAAsB,EAAA,EAAA+K,EAAAhL,IAEA7I,EAAAwO,OAAAtO,MACAgI,KAAA,QAAA2L,EAAApL,OACAP,KAAA,SAAA2L,EAAAlL,QACAT,KAAA,YAAAV,KAmFA,QAAAsM,IAAAtT,EAAAuO,GACA,GAAArM,GAAAqM,EAAAgF,YACAnL,EAAAlG,EAAAkG,GAAA,EACAC,EAAAnG,EAAAmG,GAAA,EACAmL,EAAAtR,EAAAuR,aAAAvR,EAAAuR,YAAAnT,MAAA,KAAA,IAAA,OACAoT,EAAAxR,EAAAuR,aAAAvR,EAAAuR,YAAAnT,MAAA,KAAA,IAAA,MACAyS,EAAAhJ,EAAA/J,EAOA,OALA,UAAAwT,IACApL,EAAAmG,EAAAtG,MAAA8K,EAAA9K,MAAAG,GACA,WAAAsL,IACArL,EAAAkG,EAAApG,OAAA4K,EAAA5K,OAAAE,GAEAC,EAAAF,EAAAC,GAgKA,QAAAsL,IAAA5T,EAAAwO,GAEA,GAAAnG,IACA8E,KAAA,EACA3B,OAAAgD,EAAAtG,MAAA,EACA+E,MAAAuB,EAAAtG,OACAsG,EAAAqF,WACAvL,GACA0E,IAAA,EACA8G,OAAAtF,EAAApG,OAAA,EACA8E,OAAAsB,EAAApG,QACAoG,EAAAuF,eAEAP,EAAAjL,EAAAF,EAAAC,GACAmD,EAAAH,EAAAkD,EAAA/C,UACAxE,EAAAuM,EAAA,IAAA/H,CAEA,OAAAlJ,MAAAiM,GACAvH,UAAAA,IAIA,QAAA+M,IAAAhU,EAAAwO,GACA,GAAAyF,GAAAjU,EAAA2S,UAAA,OAEAsB,GAAAxE,UACAwE,EAAAjU,EAAA0P,OAAA,SAEAuE,EACAtM,KAAA,YAAA6G,EAAAvH,WACAU,KAAA,QAAAgF,EAAA6B,EAAA7B,QACAhF,KAAA,cAAA6G,EAAA0F,QACAvM,KAAA,QAAA6G,EAAA,UACA2E,KAAA3E,EAAA2E,MAGA,QAAAgB,IAAA7O,EAAAD,EAAA+O,GAQA,MAPA/O,KACAA,EAAAC,EACAA,EAAAkI,QAEAhK,EAAA6B,KACAA,GAAA8N,KAAA9N,IAEA9C,GAAA+C,GAAAA,GAAA8O,EAAA/O,GAGA,QAAA8N,IAAA7N,EAAAD,GACA,MAAA8O,IAAA7O,EAAAD,GAAAvF,KAAA,SAgEA,QAAAuU,IAAArU,EAAAwO,GACA,MAAAjM,MAAAiM,GACA1B,QAAAD,EAAA2B,EAAA1B,QAAAwH,GAAA9F,EAAA+B,aAIA,QAAA+D,IAAA/D,GACA,GAAAgE,GAAA,EACAC,GACAxH,KAAAA,IAAAuH,EAAArH,OAAAqH,GACAtH,OAAAA,MAAAsH,EAAApH,KAAAoH,GACArH,QAAAF,IAAAuH,EAAArH,OAAAqH,GACApH,MAAAF,MAAAsH,EAAApH,KAAAoH,GAEA,OAAA1H,GAAA2H,EAAAjE,IAGA,QAAAkE,IAAAnP,EAAAD,GACA,MAAA8O,IAAA7O,EAAAD,GAAAvF,KAAA,UA6CA,QAAA4U,IAAA1U,EAAAwO,GACA,MAAAjM,MAAAiM,GACA1B,QAAAD,EAAA2B,EAAA1B,QAAA6H,GAAAnG,EAAA+B,aAIA,QAAAoE,IAAApE,GACA,GAAAgE,GAAA,EACAC,GACAxH,KAAAA,IAAAuH,EAAA,EAAArH,OAAAqH,GACAtH,OAAAE,KAAAoH,EAAA,EAAAtH,MAAAsH,GACArH,QAAAA,OAAAqH,EAAA,EAAAvH,IAAAuH,GACApH,MAAAF,MAAAsH,EAAA,EAAApH,KAAAoH,GAGA,OAAA1H,GAAA2H,EAAAjE,IAGA,QAAAqE,IAAAtP,EAAAD,GACA,MAAA8O,IAAA7O,EAAAD,GAAAvF,KAAA,cA2OA,QAAA+U,IAAA7U,EAAAwO,GACA,GAAAsG,GAAA,cAAAtG,EAAAuG,YAAAvG,EAAA/F,MAAA+F,EAAAsG,MACAA,KACAA,EAAAE,GAAAC,iBAAA5S,MAAAtB,KAAA,WAAA,MAAAyN,GAAAzN,SAEA+T,EAAAtM,EAAAsM,GACAE,GAAAE,eAAA7S,MAAA6F,MAAA,WAAA,MAAAsG,GAAAtG,QAAA4M,EAEA,IAAAK,GAAA,YAAA3G,EAAAuG,YAAAvG,EAAA/F,MAAA+F,EAAA2G,MAOA,OANAA,KACAA,EAAAH,GAAAI,iBAAA/S,MAAAtB,KAAA,WAAA,MAAAyN,GAAAzN,SAEAoU,EAAA3M,EAAA2M,GACAH,GAAAK,eAAAhT,MAAA+F,OAAA,WAAA,MAAAoG,GAAApG,SAAA+M,GAEA5S,KAAAiM,GACAsG,OAAAA,EACAK,OAAAA,EACA1M,MAAA,YAAA+F,EAAAuG,YAAAI,EAAAL,IAIA,QAAAQ,IAAAtV,EAAAwO,EAAA1L,GACA,GAAAyS,IACA9M,MAAA+F,EAAA/F,MACA+M,OAAAhH,EAAAgH,OACAC,MAAAjH,EAAAiH,MACAC,WAAAlH,EAAAkH,WACAC,SAAAnH,EAAAmH,SACAC,cAAApH,EAAAoH,cACAC,cAAArH,EAAAqH,cACAC,YAAAtH,EAAAsH,YACAC,WAAAvH,EAAAuH,YAEA9O,EAAAsB,EAAAiG,EAAAgF,aACAwC,GAEA3G,SAAAvM,EAAAuM,WACAC,MAAAxM,EAAAwM,QACAC,KAAAzM,EAAAyM,OAGA,OAAAhN,MAAAiM,GACA+G,KAAAA,EACAtO,UAAAA,EACA+O,WAAAA,IAIA,QAAAC,IAAAjW,EAAAwO,EAAA1L,GACA,GAAAoT,GAAA1H,EAAA0H,SAgBA,OAdAA,KACA/S,EAAA+S,KACAA,MAEAA,EAAA9T,KAAA8T,GACAnI,OAAAjL,EACAgS,OAAAtG,EAAAsG,OACAK,OAAA3G,EAAA2G,OACAM,MAAAjH,EAAAiH,MACAC,WAAAlH,EAAAkH,WACAX,YAAA,cAAAvG,EAAAuG,YAAA,WAAA,gBAIAxS,KAAAiM,GAAA0H,UAAAA,IAGA,QAAAC,IAAAnW,EAAAwO,GACA,GAAA+G,GAAAa,GAAA5H,EAAA+G,KAEA/G,GAAAwH,aAAAhW,EAAA2S,UAAA,KAAAlD,UACAzP,EAAAA,EAAAgW,aAAA3T,KAAA+M,GAAAZ,EAAAwH,cAEAhW,EAAAqC,KAAAkT,GAGA,QAAAa,IAAA5H,GACA,GAAA+G,GAAA9V,EAAA4W,IAAAd,OACAe,GAAA,aAaA,OAXA5S,GAAA8K,EAAA,SAAArM,EAAAV,GACAgC,EAAAtB,KAGAc,MAAAkJ,QAAAhK,KAAAT,EAAA4U,EAAA7U,GACA8T,EAAA9T,GAAAsF,MAAAwO,EAAApT,GAEAoT,EAAA9T,GAAAU,MAIAoT,EAGA,QAAAgB,IAAAvW,EAAA+U,GAEA,GAAAyB,IAAAtO,OAAA,GAAAE,QAAA,GAkBA,OAhBApI,GAAA2S,UAAA,KAAAO,KAAA,WACA,IAGA,GAAA7I,GAAA1K,KAAAoI,SAEA,eAAAgN,EACAyB,EAAApO,OAAAlE,KAAAmG,EAAAjC,QAEAoO,EAAAtO,MAAAhE,KAAAmG,EAAAnC,OAEA,MAAAkD,QAMAlD,MAAAzI,EAAAwI,IAAAuO,EAAAtO,OACAE,OAAA3I,EAAAwI,IAAAuO,EAAApO,SAusCA,QAAAqO,IAAApR,GAsGA,QAAAqR,GAAAC,EAAAC,EAAAC,GACA,MAAAzU,MAAAuU,GAAArR,GAAAwR,EAAAF,EAAAC,KAEA,QAAAE,GAAAJ,EAAApG,GACAoG,GAAAjR,GAAAiR,EAAApG,UACAoG,EAAApG,SAAAA,GAEAoG,EAAApG,SAAAA,EAEA,QAAAuG,GAAAF,EAAAC,EAAAG,GACA,GAAA1R,GAAA,SAAAsR,EAAA,GAAA,KAAAC,EAAA,EAIA,OAHA,OAAAG,IACA1R,GAAA,KAAA0R,EAAA,IAEA1R,EAGA,QAAA2R,GAAAnX,GACA,MAAA,UAAA8B,GACAA,EAAAb,OAAA2E,GAAA9D,EAAAb,QACAA,EAAAjB,GAAA8B,EAAA0D,IAAA1D,EAAAb,KACAA,EAAAa,EAAA0D,IAAA1D,EAAAb,WACAa,GAAAb,OA3HA,GAAAsE,EAAA,CAGA,GAAAtE,IACAmW,WACAC,gBAEAC,KACAC,KACAxF,KACAyF,KAIAC,GACAC,KAAA,EACA3F,QAAA,EA4EA,OAvEAxM,GAAAjF,QAAA,SAAAoX,EAAAZ,GACA,GAAAa,KAEAxU,OAAAkJ,QAAAqL,KACAA,GAAAA,IACAA,EAAAhW,OAAA,IACA+V,EAAAC,KAAA,EAEA,IAAAE,GAAAF,EAAAhX,IAAA,SAAAoB,EAAAiV,GACA,GAAAjV,EAAA,CAGA,GAAAA,EAAA+V,SAAA,CAEAJ,EAAA1F,OAAA0F,EAAAC,KAAA,CACA,IAAAI,KAaA,OAXAhW,GAAAwV,MAAAhX,QAAA,SAAAP,EAAAgY,GACAhY,IAGAA,EAAAuC,KAAAvC,GAAAyF,GAAAwR,EAAAF,EAAAC,EAAAgB,KAEAD,EAAA1T,KAAArE,EAAAyF,IACAuM,EAAA3N,KAAArE,GACAuX,EAAAvX,EAAAyF,IAAAzF,KAGA+X,EAGA,GAAAjB,GAAAD,EAAA9U,EAAAgV,EAAAC,EA4BA,OA3BAO,GAAAT,EAAArR,IAAAqR,EAEAa,EAAAhW,OAAA,EACA+V,EAAA1F,QAOAkF,EAAAJ,EAAA,SACAc,EAAAvT,KAAAyS,KANAI,EAAAJ,EAAA,QACAc,EAAAK,QAAAnB,IASAY,EAAAC,KAOAT,EAAAJ,EAAA,UACAW,EAAApT,KAAAyS,KANAI,EAAAJ,EAAA,OACAW,EAAAQ,QAAAnB,IASAA,EAAArR,KAGAmS,GAAAjW,SACA8V,EAAAA,EAAA3U,OAAA8U,IAEAJ,EAAAnT,KAAAwT,KAGA7F,EAAAzR,QAAA6W,EAAA,YACAK,EAAAlX,QAAA6W,EAAA,iBAGAlW,KAAAA,EACAqW,MAAAA,EACAC,OAAAA,EAEAxF,OAAAA,EACAyF,WAAAA,IAkCA,QAAAS,IAAAT,EAAAvW,EAAAoR,GACA,GAAA6F,IAAAhL,OAAAC,SAAAC,UAAAC,QAiBA,OAhBAmK,GAAAlX,QAAA,SAAAuW,GACA,IAAAA,EAAAsB,aAAAtB,EAAAuB,UAAA,CAGA,GAAAb,GAAAV,EAAAuB,UAAA/F,EAAAwE,EAAArR,GAAAvE,IACAwP,EAAA8G,GAAAA,EAAA9G,QAEA7O,IAAA,MAAA,QAAA,SAAA,QAAA6O,IAGAyH,EAAAzH,GAAArM,MACA0H,OAAA,OAAA2E,GAAA,UAAAA,EAAA8G,EAAAjP,OAAAiP,EAAAnP,MACAyO,UAAAA,OAIAqB,EAMA,QAAAG,IAAAd,EAAAe,EAAAlQ,EAAAE,GA+BA,QAAAiQ,GAAA1B,EAAAtO,EAAAC,EAAAjD,GACAsR,GAAAjR,GAAAiR,EAAA0B,YACA1B,EAAA0B,UAAAhQ,EAAAC,EAAAjD,GAhCAgS,EAAArK,IAAAvK,OAAA,SAAAuD,EAAAsS,GACA,GAAAhQ,GAAAtC,EAAAsS,EAAA1M,MAGA,OAFAyM,GAAAC,EAAA3B,UAAAyB,EAAAjL,KAAA7E,GAAAJ,MAAAkQ,EAAAlQ,QAEAI,GACA8P,EAAApL,KAEAqK,EAAApK,MAAAxK,OAAA,SAAAuD,EAAAsS,EAAAjG,EAAAkG,GACA,GAAAC,GAAAD,EAAAlG,EAAA,KAAAzG,OAAA,GACAvD,EAAArC,EAAAwS,EAAA5M,MAGA,OAFAyM,GAAAC,EAAA3B,UAAAtO,EAAA+P,EAAApL,KAAA5E,OAAAgQ,EAAAhQ,SAEAC,GACAH,EAAAkQ,EAAAnL,OAEAoK,EAAAnK,OAAAzK,OAAA,SAAAuD,EAAAsS,EAAAjG,EAAAkG,GACA,GAAAC,GAAAD,EAAAlG,EAAA,KAAAzG,OAAA,GACAtD,EAAAtC,EAAAwS,EAAA5M,MAGA,OAFAyM,GAAAC,EAAA3B,UAAAyB,EAAAjL,KAAA7E,GAAAJ,MAAAkQ,EAAAlQ,QAEAI,GACAF,EAAAgQ,EAAAlL,QAEAmK,EAAAlK,KAAA1K,OAAA,SAAAuD,EAAAsS,GACA,GAAAjQ,GAAArC,EAAAsS,EAAA1M,MAGA,OAFAyM,GAAAC,EAAA3B,UAAAtO,EAAA+P,EAAApL,KAAA5E,OAAAgQ,EAAAhQ,SAEAC,GACA+P,EAAAjL,MAo5BA,QAAAsL,IAAArB,GAIA,MAHAnU,OAAAkJ,QAAAiL,KACAA,EAAAnU,MAAAC,UAAAtC,MAAAyB,KAAAC,aAEAqV,UAAA,EAAAP,MAAAA,GAGA,QAAAsB,IAAAtB,EAAA9R,GACA,MAAA1C,GAAAwU,EAAA,SAAAxV,GACA,MAAAA,GAAA0D,IAAAA,IAjkNA7F,EAAA,WAAAA,GAAAA,EAAA,WAAAA,CA+BA,IAAAkZ,KAkBAC,cAAA,SAAA7Y,EAAAC,GACA,MAAAJ,GAAAD,KAAA,QAAAI,EAAAC,IAoBA6Y,oBAAA,SAAA9Y,EAAAC,GACA,MAAAJ,GAAAD,KAAA,SAAAI,EAAAC,IAWAgB,WAAA,aASAE,SAAA,aAQA4X,QAAA,aAgBAC,SAAA,aAgBAC,QAAA,aAgBAC,OAAA,cAwDArY,GAAAqC,MAAAC,UAAAtC,MACA2C,GAAAK,OAAAV,UAAAK,SA2EAmC,GAAA,SAAAtC,GACA,MAAA,sBAAAG,GAAAlB,KAAAe,GAEA,mBAAA,KAAA,gBAAA8V,aACAxT,GAAA,SAAAtC,GACA,MAAA,kBAAAA,KAAA,GA0EA,IAAA+V,KACAvY,MAAAA,GACA2C,SAAAA,GACA7B,SAAAA,EACAI,QAAAA,EACAE,WAAAA,EACAI,SAAAA,EACAG,OAAAA,EACAC,QAAAA,EACAI,KAAAA,EACAG,MAAAA,EACAI,UAAAA,EACAuC,WAAAA,GACArC,SAAAA,EACAC,SAAAA,EACAE,SAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAG,WAAAA,EACAC,MAAAA,EACAE,KAAAA,EACAG,SAAAA,EACAU,eAAAA,GAGAU,GAAA,EA44BA6T,IACAC,UACAC,UACAC,SACAC,UACAC,QAmFAC,IACA3K,OAAA,SAAA/O,EAAAwO,GACA7O,KAAA4O,KAAAvO,EACAL,KAAA6O,MAAA7O,KAAAga,aAAAnL,IAEAmL,aAAA,SAAAnL,GACA,GAAA/I,GAAA9F,KAAA4E,aAAA5E,KAAA4E,YAAAkB,UACA,KAAAA,EACA,MAAA+I,EAEA,IAAAG,GAAApM,KAAAiM,EAWA,OATA9K,GAAA+B,EAAA,SAAA2I,EAAA3M,GACA,GAAAmY,GAAAjL,EAAAlN,EAEAgC,GAAAmW,GAEAxL,EAAAyL,aACAlL,EAAAlN,GAAA2M,EAAAyL,WAAAla,KAAA4O,KAAAI,EAAAhP,OAFAwO,EAAAyL,EAAAxL,IAGAzO,MAEAgP,GAEAmL,OAAA,SAAAxU,EAAAyU,EAAA/Z,EAAAwO,GACA,GAAAwL,GAAAra,KAAAqa,SAAA1U,EAEA0U,GACAA,EAAA3U,QAAAmJ,GAEAwL,EAAA,GAAAD,GAAA/Z,EAAAwO,GAEAwL,EAAAC,OACAta,KAAAqa,SAAA1U,GAAA0U,GAEAE,OAAA,SAAA5U,GACA,GAAA0U,GAAAra,KAAAqa,SAAA1U,EACA0U,KACAA,EAAAzL,KAAAW,eACAvP,MAAAqa,SAAA1U,MAyBA6U,IACA/U,SAAAA,EACA4E,WAAAA,EACAzB,UAAAA,EACA+C,OAAAA,EACAI,UAAAA,EACAvC,aAAAA,EACAlB,IAAAA,EACAqB,IAAAA,EACAd,YAAAA,EACAmE,MAAAA,EACAE,WAAAA,EACAzF,MAAAA,EACAgG,GAAAA,EACAM,OAAAA,EACAE,UAAAA,EACAC,cAAAA,EACAtH,MAAAA,EACA2H,aAAAA,EAEAkL,MAAAA,GACAjL,UAAAA,EACAE,cAAAA,EACAK,WAAAA,EACAU,iBAAAA,GACAI,SAAAA,IASA4K,IAQA9K,MAAAlK,GACAN,cAAA,WACA,MAAAnF,MAAA2R,WAAA3R,KAAA2R,UAAAhC,OAAA3P,KAAA2R,UAAAhC,WAWAD,SAAAjK,GACAN,cAAA,WACA,MAAAnF,MAAA2R,WAAA3R,KAAA2R,UAAAhC,OAAA3P,KAAA2R,UAAAjC,cAcAE,KAAAnK,GACAN,cAAA,WACA,MAAAnF,MAAA2R,WAAA3R,KAAA2R,UAAAhC,OAAA3P,KAAA2R,UAAA/B,UA0BA8K,gBAAA,SAAAra,GACA,GAAAsP,GAAA3P,KAAA2P,QACAD,EAAA1P,KAAA0P,WACAE,EAAA5P,KAAA4P,MAEA9L,GAAA6L,IACAtP,EAAAsP,MAAAA,GACA7L,EAAA4L,IACArP,EAAAqP,SAAAA,GACA5L,EAAA8L,IACAvP,EAAAuP,KAAAA,KAUAyF,IACAnO,WAAA,WAEAlH,KAAA2a,GAAA,cAAA3a,KAAA4a,UAAApT,KAAAxH,QAGAsH,UAAA,SAAAlG,GAiBA,QAAAyZ,GAAA1J,EAAAuB,GAMA,MALAhP,GAAAyN,IAEA7N,MAAAkJ,QAAA2E,IAAArN,EAAAqN,EAAAzI,KACAyI,EAAAzI,EAAAgK,GAFAvB,GAAAzI,EAAAgK,EAAA/J,EAAAwI,GAIAA,EARA,MAdA/P,GAAAA,MAGAoI,EAAApI,GACAA,EAAAA,EAAAP,IAAA,SAAAN,GACA,MAAAqC,MAAArC,GACAkJ,OAAAlJ,EAAAkJ,OAAA5I,IAAAga,OAIAvX,MAAAkJ,QAAApL,KACAA,EAAAA,EAAAP,IAAAga,IAGAzZ,GAkBA+T,OAAA1P,GACAO,IAAA,SAAAxD,GACA,GAAAsG,GAAAD,EAAArG,EAGA,OAFAxC,MAAAuV,eAAAzM,IAGAvC,SAAAuC,IAGAjD,IAAA,SAAAiD,GAMA,MALAA,KACAA,EAAA9I,KAAAsV,mBACAtV,KAAAuV,eAAAzM,IAGAA,KAUA0M,OAAA/P,GACAO,IAAA,SAAAxD,GACA,GAAAsG,GAAAD,EAAArG,EAGA,OAFAxC,MAAA0V,eAAA5M,IAGAvC,SAAAuC,IAGAjD,IAAA,SAAAiD,GAMA,MALAA,KACAA,EAAA9I,KAAAyV,mBACAzV,KAAA0V,eAAA5M,IAGAA,KAWAgS,KAAArV,GACAN,cAAA,MAUA4V,KAAAtV,GACAN,cAAA,MAWAuD,EAAA+E,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAAY,GAAAtC,EAAA8a,OAAAtY,KAAA1C,KAAAiI,EAAArG,GACAkI,EAAA5J,EAAA+a,aAAA/a,EAAA+a,YAAAvY,KAAA1C,KAAAiI,EAAArG,IAAA,CAEA,OAAAuJ,YAAAjL,EAAAiV,SAAA3S,EAAAsH,MAWAnB,EAAA8E,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAAY,GAAAtC,EAAAgb,OAAAxY,KAAA1C,KAAAiI,EAAArG,GACAkI,EAAA5J,EAAA+a,aAAA/a,EAAA+a,YAAAvY,KAAA1C,KAAAiI,EAAArG,IAAA,CAEA,OAAAuJ,YAAAjL,EAAAsV,SAAAhT,EAAAsH,MAWAhI,IAAA2L,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,MAAAsD,GAAA+C,EAAAnG,IAAA5B,EAAA8a,OAAAtY,KAAA1C,KAAAiI,EAAArG,MASAuZ,GAAA,WACA,MAAAhQ,YAAAnL,KAAAmV,SAAA,KASAiG,GAAA,WACA,MAAAjQ,YAAAnL,KAAAwV,SAAA,KAeAwF,OAAAvN,EAAA,SAAAvN,EAAA+H,GACA,GAAAnG,GAAA5B,EAAA4a,MACA,IAAA7S,EACA,MAAAnG,KAAAmG,GAAAA,EAAAnG,GAAAmG,EAAA,KAeAiT,OAAAzN,EAAA,SAAAvN,EAAA+H,GACA,GAAAnG,GAAA5B,EAAA6a,MACA,IAAA9S,EACA,MAAAnG,KAAAmG,GAAAA,EAAAnG,GAAAmG,EAAA,KAQA2S,UAAA,WACA5a,KAAAuV,eAAAvV,KAAAmV,UACAnV,KAAA0V,eAAA1V,KAAAwV,WASAD,eAAA,SAAA8F,GACAA,EAAAlR,OAAA,EAAAnK,KAAAuI,WASAmN,eAAA,SAAA4F,GACAA,EAAAnR,OAAAnK,KAAAyI,SAAA,KASA6M,iBAAA,WACA,MAAAzM,IACAzH,KAAApB,KAAAoB,OACAU,IAAA,OAUA2T,iBAAA,WACA,MAAA5M,IACAzH,KAAApB,KAAAoB,OACAU,IAAA,QAKAyZ,GAAAzb,EAAAI,OAmCAsE,GAAA0L,GAAAqL,IAEA3Y,EAAAsN,GAAA3M,WACA2D,WAAA,aACAI,UAAA,SAAAlG,GACA,MAAAA,IAEAoR,MAAA,SAAApS,EAAAgB,GAAA,MAAAA,IAGAkZ,KAAA,SAAAlZ,GAEAA,EAAApB,KAAAsH,UAAAlG,GAGApB,KAAAoB,KAAAA,GAEApB,KAAA8R,QAAA,cAAA1Q,GAEA2C,EAAA/D,KAAAmQ,QAAA,SAAA7P,GACAA,EAAAga,KAAAlZ,KAEA2C,EAAA/D,KAAAoQ,UAAA,SAAAoL,EAAApb,GACAob,EAAAlB,KAAAta,KAAAwS,MAAApS,EAAAgB,KACApB,MAEAA,KAAA8R,QAAA,OAAA1Q,IAIAd,MAAAib,GAAAhY,UAAAjD,MACAmb,QAAAF,GAAAhY,UAAAkY,QACAtB,OAAAoB,GAAAhY,UAAA4W,OACAQ,GAAAY,GAAAhY,UAAAoX,GACAe,KAAAH,GAAAhY,UAAAmY,KACAC,IAAAJ,GAAAhY,UAAAoY,IACA7J,QAAAyJ,GAAAhY,UAAAuO,QAQA1Q,KAAAqE,IAuCAC,QAAAD,GACAN,iBACAa,IAAA,SAAAN,EAAAW,GAeA,QAAAuV,GAAA1b,EAAA4B,GACA,MAAA5B,GAAA4B,IAAA5B,EAAA4B,GAAA4E,aAAAxG,EAAA4B,GAAA6E,iBAdA,GAAAN,EAAA,CACA,GAAAwV,GAAAxZ,EAAA4B,OAAAD,KAAAqC,GAAApC,OAAAD,KAAA0B,GACAmW,GAAApb,QAAA,SAAAqB,GACA,QAAAA,GAAA,WAAAA,GAAA8Z,EAAA5b,KAAA8B,IACA9B,KAAA8B,GAAA+L,SACA7N,MAGA+D,EAAA2B,EAAA,SAAAlD,EAAAV,GACA8Z,EAAA5b,KAAA8B,IACA9B,KAAA8B,GAAAU,IACAxC,SAeAuI,MAAA,WACA,MAAA8B,GAAArK,KAAA4O,MAAArG,OAUAE,OAAA,WACA,MAAA4B,GAAArK,KAAA4O,MAAAnG,UAIAyH,GAAAtN,OAAA,SAAAkZ,EAAAC,GAEA,GAAA3b,EACAyD,GAAAiY,KACA1b,EAAA0b,EACAA,EAAAC,EACAA,EAAApZ,UAAA,GAGA,IACA8B,GADAC,EAAA1E,IAwBA,OArBA8b,IAAAA,EAAAE,eAAA,gBACAvX,EAAAqX,EAAAlX,YAGAkX,EAAAlZ,KAAAkZ,SACAA,GAAAlX,aAGAH,EAAA,WAAA,MAAAC,GAAA0C,MAAApH,KAAA2C,YAGA6B,EAAAC,EAAAC,GACAqX,GACAnZ,EAAA6B,EAAAsX,GACAD,GACAlZ,EAAA6B,EAAAlB,UAAAuY,GAGA1b,IACAmb,GAAAnb,GAAAqE,GAEAA,EA0CA,IAAAwX,IAAA/L,GAAAtN,QASAgO,SAAAnL,GACAN,cAAA,MACAc,SAAA,SAAAzD,GACA,MAAAT,IAAA,MAAA,QAAA,SAAA,QAAAS,MAYA+F,MAAA9C,GACAN,cAAA,WACA,MAAAkF,GAAArK,KAAA4O,MAAArG,SAYAE,OAAAhD,GACAN,cAAA,WACA,MAAAkF,GAAArK,KAAA4O,MAAAnG,UAWA0E,QAAA1H,GACAO,IAAA,SAAAyD,GACA,OACAlD,SAAA2G,EAAAzD,KAGAtE,cAAA+H,MAUA/D,SAAA1D,GACAN,eAAA,IAiBAmT,aAAA,EAwBA4D,cAAA,SAAA9a,GACApB,KAAAsa,KAAAlZ,IA4BAmX,UAAA,SAAAnX,GACApB,KAAAkc,cAAA9a,EAEA,IAAA+L,GAAAnN,KAAAmN,SACA,QACAyD,SAAA5Q,KAAA4Q,WACArI,MAAAvI,KAAAuI,QAAA4E,EAAAK,KAAAL,EAAAG,MACA7E,OAAAzI,KAAAyI,SAAA0E,EAAAE,IAAAF,EAAAI,SAgCAmL,UAAA,SAAAhQ,EAAAC,EAAAjD,GACA,GAAAyH,GAAAnN,KAAAmN,SAEA,IAAAnN,KAAAmJ,WAAA,CACA,GAAAgT,GAAA9R,EAAArK,KAAA4O,KAEAjG,IADA,UAAAjD,IACAA,EAAA+C,OAAA0T,EAAA1T,QAAA,EAEA0E,EAAAE,IAGA3E,GADA,SAAAhD,IACAA,EAAA6C,MAAA4T,EAAA5T,OAAA,EAEA4E,EAAAK,SAGA9E,IAAAyE,EAAAK,KACA7E,GAAAwE,EAAAE,GAGArN,MAAA4O,KAAA5G,KAAA,YAAAY,EAAAF,EAAAC,IACA3I,KAAAyI,OAAA/C,GAAAA,EAAA+C,QACAzI,KAAAuI,MAAA7C,GAAAA,EAAA6C,UAGAzC,YACA8K,UACAzQ,KAAAsZ,GAAAC,OACAzT,SAAA,SAAAzD,GACA,MAAAT,IAAA,MAAA,QAAA,SAAA,QAAAS,KAGA+F,OACApI,KAAAsZ,GAAAE,OACAO,WAAA,SAAA7Z,EAAAwO,EAAA1L,GAEA,GAAAoF,GAAApF,EAAAoF,OACA,OAAAzE,GAAAyE,GAAA8B,EAAAhK,GAAAkI,MAAAA,IAGAE,QACAtI,KAAAsZ,GAAAE,OACAO,WAAA,SAAA7Z,EAAAwO,EAAA1L,GAEA,GAAAsF,GAAAtF,EAAAsF,QACA,OAAA3E,GAAA2E,GAAA4B,EAAAhK,GAAAoI,OAAAA,KAsBA2T,QAAA,GAmBAC,WAAA,cAUAC,IACApV,WAAA,WACAlH,KAAA2a,GAAA,SAAA,WACA3a,KAAA2R,UAAAgJ,GAAA,aAAA3a,KAAAuc,aAAA/U,KAAAxH,OACAA,KAAA2R,UAAAgJ,GAAA,YAAA3a,KAAAwc,YAAAhV,KAAAxH,OACAA,KAAA2R,UAAAgJ,GAAA,aAAA3a,KAAAyc,aAAAjV,KAAAxH,QACAwH,KAAAxH,QAYAuQ,SAAA9C,EAAA,SAAAvN,EAAA+H,EAAArG,EAAAgM,GACA,GAAA9L,GAAA5B,EAAA4B,KAAA5B,EAAA4B,IAAAY,KAAA1C,KAAAiI,EAAArG,EAAAgM,GACArN,EAAAL,EAAAwc,YAAAxc,EAAAwc,WAAAha,KAAA1C,KAAAiI,EAAArG,EAAAgM,MAEA,QACA9L,KAAAvB,EAAAuB,KAAA8L,GAAA,KAAA9L,GAAAF,GACArB,OAAAA,EACA0H,EAAAA,EACAwI,MACAvQ,MAAAA,EACA0B,EAAAA,EACAgM,EAAAA,EACAlF,EAAAxI,EAAAwI,GAAAxI,EAAAwI,EAAAhG,KAAA1C,KAAAiI,EAAArG,EAAAgM,GACAjF,EAAAzI,EAAAyI,GAAAzI,EAAAyI,EAAAjG,KAAA1C,KAAAiI,EAAArG,EAAAgM,OAgCA+O,gBAAAlP,EAAA,SAAAvN,EAAA+H,EAAArG,EAAAgM,GACA1N,EAAAyR,UAAAG,QAAA,mBAAA5R,EAAAqQ,SAAA7N,KAAA1C,KAAAiI,EAAArG,EAAAgM,MA8BAgP,gBAAAnP,EAAA,SAAAvN,EAAA+H,EAAArG,EAAAgM,GACA1N,EAAAyR,UAAAG,QAAA,mBAAA5R,EAAAqQ,SAAA7N,KAAA1C,KAAAiI,EAAArG,EAAAgM,MAWA2O,aAAA,aAUAC,YAAA,aAOAC,aAAA,cASAI,IACA3V,WAAA,WACA,GAAAyJ,GAAAE,EAAAY,CAEAzR,MAAA2a,GAAA,OAAA,WAEAhK,EAAA,OAGA3Q,KAAA2a,GAAA,SAAA,WACA,GAAAvL,GAAA,SAAAwB,GACA,GAAAc,KACAd,KACAc,EAAAhB,GAAAC,EAAAC,EAAA1Q,MAAA2Q,IAEAW,GAAAC,EAAAC,EAAA1R,KAAA2R,WACAF,EAAAC,GACAlK,KAAAxH,KAEAA,MAAA2R,UAAAgJ,GAAA,aAAA,SAAA/J,GACAD,IACAA,EAAAL,GAAAtQ,KAAAA,KAAAoB,SAEAyP,EAAA7Q,KAAA8c,iBACA1N,EAAAwB,IACApJ,KAAAxH,OAEAA,KAAA2R,UAAAgJ,GAAA,YAAAvL,GACApP,KAAA2R,UAAAgJ,GAAA,aAAAvL,IACA5H,KAAAxH,QAUA8c,eAAArX,GACAN,cAAA0H,EAAAA,KAyEAkQ,IAiBAC,aAAA,WACA,GAAAtX,GAAA1F,KAAAid,QACAvX,GAAA0I,OAAApO,IAEA,IAAAkd,GAAApd,EAAAI,MAAAwF,EAAAvF,MACAyO,EAAA5O,KAAA4O,KAAAmB,OAAA,KAAA/H,KAAA,QAAA,gBACAiV,EAAAjd,KAAAmd,QAAA,GAAAD,GAAAtO,EAAAlJ,EAGA1F,MAAAod,kBAAA3c,QAAA,SAAAE,GACAsc,EAAAtc,GAAAX,KAAAW,IACAX,MAEAA,KAAA2a,GAAA,OAAA,SAAAvZ,GACAsE,EAAA1F,KAAAid,SACAvX,EAAA0I,OAAApO,KAEAid,EAAAvX,QAAAA,GAEAA,EAAA2X,WAAA,EACAJ,EAAA3C,KAAA5U,EAAAtE,MAAAA,GAEA6b,EAAA3C,UACA9S,KAAAxH,QA8BAid,OAAAxX,GACAI,IAAA,SAAArD,GAMA,MALAgB,GAAAhB,GACAA,GAAA6a,QAAA7a,GACAA,IACAA,GAAA6a,SAAA,IAEA5a,KAAAD,GACArC,KAAA,cAMAid,sBAWAE,GAAA1a,KAAAma,IACAK,mBAAA,IAAA,OASAG,IASA7U,EAAA+E,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAAY,GAAAtC,EAAAgb,OAAAxY,KAAA1C,KAAAiI,EAAArG,GACAkI,EAAA5J,EAAA+a,aAAA/a,EAAA+a,YAAAvY,KAAA1C,KAAAiI,EAAArG,IAAA,CAEA,OAAAuJ,YAAAjL,EAAAsV,SAAAhT,EAAAsH,MAWAnB,EAAA8E,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAAY,GAAAtC,EAAA8a,OAAAtY,KAAA1C,KAAAiI,EAAArG,GACAkI,EAAA5J,EAAA+a,aAAA/a,EAAA+a,YAAAvY,KAAA1C,KAAAiI,EAAArG,IAAA,CAEA,OAAAuJ,YAAAjL,EAAAiV,SAAA3S,EAAAsH,MASAqR,GAAA,WACA,MAAAhQ,YAAAnL,KAAAwV,SAAA,KASA4F,GAAA,WACA,MAAAjQ,YAAAnL,KAAAmV,SAAA,KASAI,eAAA,SAAA8F,GACAA,EAAAlR,OAAAnK,KAAAyI,SAAA,KASAiN,eAAA,SAAA4F,GACAA,EAAAnR,OAAA,EAAAnK,KAAAuI,YAUAiV,IAOAC,cAAA,WACA,GAAA5T,GAAA7J,KAAA0d,YAAA1d,KAAA0d,cAAA,CACA,OAAA1d,MAAA2d,eAAA9T,GASA8T,aAAA,WACA,GAAA5T,GAAA/J,KAAAmV,UAAAnV,KAAAmV,SAAAnL,WAAAhK,KAAAmV,SAAAnL,YACAzB,EAAA0B,SAAAF,GAAAA,EAAA,CAEA,OAAAxB,IASAqV,UAAA,WACA,GAAA9U,GAAA9I,KAAAmV,QACA,OAAArM,IAAAA,EAAAP,MAAAO,EAAAP,QAAAvI,KAAA2d,gBAUArI,iBAAA,WACA,MAAAzM,IACA1I,KAAA,UACAiB,KAAApB,KAAAoB,OACAU,IAAA,IACAqH,UAAA,MAWA0U,IAQAC,UAAArQ,EAAA,SAAAvN,EAAA+H,GACA,MAAAA,GAAAnG,MAUAic,aAAAtQ,EAAA,SAAAvN,EAAA+H,EAAArG,GAGA,MADAqG,GAAAgT,YAAArZ,EACAqG,EAAAwB,SAWAuU,YAAAvQ,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,MAAA,4BAAAA,GAAAqG,EAAA,SAAA,IAAAA,EAAA,SAAA,MAUAgT,YAAAxN,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAArB,GAAAL,EAAAwc,WAAAha,KAAA1C,KAAAiI,EAAArG,EACA,OAAArB,IAAAA,EAAA0a,aAAA,IASAyB,WAAAjP,EAAA,WACA,MAAAS,GAAAlO,QAaAie,UAAAxQ,EAAA,SAAAvN,EAAA+H,GACA,MAAA+E,GAAA/E,EAAA+E,QAAA,OASA0Q,YAAA,WACA,GAAAtc,GAAApB,KAAAoB,MACA,OAAAA,IAAAoI,EAAApI,GAAAA,EAAAS,OAAA,GA+CAqc,YAAA,SAAA9d,EAAAC,EAAAqF,GACA,GAAAA,GAAAA,EAAAvE,SAAA,CACA,GAAAA,GAAAuE,EAAAvE,QAEAuE,GAAAvE,SAAA,SAAAC,GACA,GAAAlB,GAAAF,KAAAE,QACAK,EAAAP,KAAAgT,UAAA,KACA5R,KAAAA,EAAAlB,EAAA4d,UAeA,OAbAvd,GAAA8O,QACAU,OAAA,KAEAxP,EACAyH,KAAA,QAAA9H,EAAA8d,aACAhW,KAAA,QAAA9H,EAAA+d,WAGA1d,EAAA4O,OACAI,SAEAhP,EAAAL,MAAA,WAAA,MAAAA,IAEAiB,EAAAuB,KAAAnC,EAAAL,EAAA6d,eAIA,MAAAje,GAAAI,QAAAqD,UAAAjD,MAAAoC,KAAA1C,KAAAI,EAAAC,EAAAqF,IAIA4B,UAAA,SAAAlG,GACA,MAAAoI,GAAApI,GAAAA,IAAAqI,OAAArI,MAIAyF,IACAgX,OAAAA,GACAxI,GAAAA,GACAmI,SAAAA,GACAD,WAAAA,GACAY,OAAApB,GACAO,SAAAA,GACAhB,MAAAA,GACAO,YAAAA,GACApC,WAAAA,GACAzB,cAAAA,IAkDAoF,GAAAxX,EAAAqV,GAAA5G,GAAAoF,GAAAzB,IACAqF,GAAAD,GAAAxb,QACAsE,WAAA,SAAAxB,GACA0Y,GAAA7a,UAAA2D,WAAAxE,KAAA1C,KAAA0F,EAGA,IAAA0I,GAAApO,KAAA0F,UAAA0I,MACAA,KACApO,KAAAoO,OAAAA,EAEAA,EAAAuD,WACA3R,KAAA2R,UAAAvD,EAAAuD,UACA3R,KAAA8R,QAAA,WAGA1D,EAAAuM,GAAA,SAAA,WACA3a,KAAA2R,UAAAvD,EAAAuD,UACA3R,KAAA8R,QAAA,WACAtK,KAAAxH,QAKAA,KAAAiZ,cAAA,YAAAjZ,KAAA4O,KAAAmB,OAAA,KAAA/H,KAAA,QAAA,qBAUAoN,YAAA3P,GACAN,cAAA,aACAc,SAAA,SAAAzD,GACA,MAAAT,IAAA,aAAA,YAAAS,IAEAwD,IAAA,WAEAhG,KAAA8I,SACA9I,KAAA8I,MAAA9I,KAAA8I,YAmBAA,MAAArD,GACAO,IAAA,SAAAxD,GAUA,MATA,YAAAxC,KAAAoV,eACApV,KAAAmV,OAAA3S,GACAA,EAAAxC,KAAAmV,WAGAnV,KAAAwV,OAAAhT,GACAA,EAAAxC,KAAAwV,WAIAjP,SAAA/D,MAMAsT,MAAArQ,GACAN,eAAA,MAEA4Q,WAAAtQ,IAEA6Y,SAAA7Q,EAAA,SAAAvN,EAAA+H,GACA,GAAAsW,GAAAC,EAAAC,EAAAC,CACA,aAAAxe,EAAAkV,eACAmJ,EAAAC,EAAAte,EAAAiV,SAAAlN,GACAwW,EAAA,EACAC,EAAAxe,EAAAuI,WAGA8V,EAAA,EACAC,EAAAte,EAAAqI,QACAkW,EAAAC,EAAAxe,EAAAsV,SAAAvN,IAGAnI,EAAAwO,OAAAtO,MACAgI,KAAA,KAAAuW,GACAvW,KAAA,KAAAwW,GACAxW,KAAA,KAAAyW,GACAzW,KAAA,KAAA0W,KAGAnW,MAAA,WAEA,MAAAvI,MAAA2R,UAAA3R,KAAA2R,UAAAgN,gBAAApW,MAAA8B,EAAArK,KAAA4O,MAAArG,OAEAE,OAAA,WAEA,MAAAzI,MAAA2R,UAAA3R,KAAA2R,UAAAgN,gBAAAlW,OAAA4B,EAAArK,KAAA4O,MAAArG,OAGAlH,WAAA,SAAAhB,EAAAe,GAEA,GAAAwd,GAAAxd,GAAAA,EAAA,IAAAA,EAAA,GAAAuH,KAAA,EAEAkW,EAAA7e,KAAA+V,YACA,IAAA,MAAA8I,IAAAD,EAAA,CAEA,GAAA9V,GAAA,YAAA9I,KAAAoV,cAAApV,KAAAmV,SAAAnV,KAAAwV,SACAsJ,EAAA9e,KAAA8V,OAEAgJ,KACAA,GAAA,KACAxb,MAAAkJ,QAAAsS,KACAA,GAAAA,IAEAD,EAAA/V,EAAAgN,MAAAhN,EAAAgN,MAAA1O,MAAA0B,EAAAgW,GAAAhW,EAAAG,SAGA,MAAA5I,GAAA2S,UAAA,QAAA5R,KAAAwd,KAAAC,IAEAtd,SAAA,SAAAlB,GACA,MAAAA,GAAA0P,OAAA,QACA/H,KAAA,QAAA,mBAEAqR,QAAA,SAAAhZ,GACAA,EACA2H,KAAA,UAAA,GACAuL,KAAAvT,KAAAse,WAEAS,kBAAA,SAAA1e,GACAA,EAAA2H,KAAA,UAAA,IAEAsR,OAAA,SAAAjZ,GACAA,EAAAkP,UAGA+I,aAAA,IAEA+D,WAAA,QACAD,QAAA,KAGA7F,GAAAhI,EAAA,aAEAyD,IAAA3E,IAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,KAAA,GAIAwR,GAAAjQ,GACAT,OAAAA,GACAe,MAAAA,GACAC,MAAAA,KAoDA2P,GAAArY,EAAAqV,GAAAlC,IACAmF,GAAAD,GAAArc,QACAuc,QAAAzQ,EACAqD,GACAE,GACAW,IAGAwM,OAAA,SAAAhe,GAEApB,KAAAoP,OAAApP,KAAA4O,KAAA5O,KAAA0F,WACA1F,KAAA6O,MAAAzN,KAAAA,CAEA,IAAAd,GAAAuP,GAAA7P,KAAA4O,KAAA,UACAyQ,QAAA,gBAAA,GACAxQ,EAAA7O,KAAAmf,SAEAH,IAAA1e,EAAAuO,IAGAiE,YAAA,SAAAjE,EAAA1L,EAAA8E,GACA,MAAA9F,IAAA,sBAAA8F,EAAA,WAAA/G,KAAA,MAGA6R,aAAA,SAAAlE,EAAA1L,EAAA8E,EAAArG,GACA,GAAA0d,GAAAnc,EAAAyB,YAAA0a,QACA,IAAAA,EAAA,CAGA,GAAAhM,GAAArL,GAAAA,EAAA9H,MAAAmf,EAAArX,EAAA9H,OAAAmf,EAAA,UACA,IAAAhM,EAAA,CAGA,GAAAjT,GAAAP,EAAAwO,OAAAtO,KACAsT,GAAA5Q,KAAArC,EAAA8C,EAAA8E,EAAArG,MAGA+Q,cAAA,SAAAzS,EAAAK,EAAAuJ,GACA,OACA0J,KAAAjT,EAAAH,MAAA,WAAA0J,EAAA,GACAhI,IAAA5B,EAAAyF,GAAA,KAAApF,EAAAuB,KAAAgI,GACA3J,KAAAD,EAAAC,KACA0S,QAAA1Q,GACA,eACA,eAAA2H,EACA5J,EAAAwF,UAAA,SACAnF,EAAA,WACAW,KAAA,OAcAgG,WAAA,WACA+X,GAAA1b,UAAA2D,WAAAE,MAAApH,KAAA2C,WACA3C,KAAAqa,aAEAC,KAAA,SAAAlZ,GACApB,KAAAof,OAAAhe,IAEA+R,iBAAA,WACA,MAAAnT,MAAA6O,MAAAsE,oBAIArN,WAAAlD,KAAAqZ,GAAAnW,YAuBAoM,QACA/R,KAAAsZ,GAAAG,OAUAzG,kBACAhT,KAAAsZ,GAAAI,OACAK,WAAA,WACA,OAAA3R,MAAA,GAAAE,OAAA,MAWA0E,SACAhN,KAAAsZ,GAAAK,IACAI,WAAA,WACA,MAAAlI,MAYAyB,gBACAtT,KAAAsZ,GAAAC,OACAzT,SAAA,SAAAzD,GACA,MAAAT,IAAA,WAAA,cAAAS,IAEA0X,WAAA,SAAA7Z,EAAAwO,GACA,GAAA0Q,IACAlS,IAAA,aACAC,MAAA,WACAC,OAAA,aACAC,KAAA,WAEA,OAAA+R,GAAA1Q,EAAA+B,cAKAwL,QAAA,IACAkD,UACAE,UAAA,SAAAtf,GACA,GAAAuf,GAAAvf,EAAAiT,kBAEAnT,MAAA+P,OAAA,UACA/H,KAAA,KAAAyX,EAAAlX,MAAA,GACAP,KAAA,KAAAyX,EAAAhX,OAAA,GACAT,KAAA,IAAAlI,EAAA6J,KAAA8V,EAAAlX,MAAAkX,EAAAhX,SAAA,GACAT,KAAA,QAAA,kBAuBA0X,eAAA,SAAAC,EAAAhb,GACArB,MAAAkJ,QAAAmT,KACAA,GAAAA,IAEAA,EAAAlf,QAAA,SAAAmf,GACA5f,KAAAsf,SAAAM,GAAAjb,GACA3E,QAKAgQ,IAAAkP,IAuIAA,GAAAQ,gBAAA,SAAA,SAAAxf,GACA,GAAAuf,GAAAvf,EAAAiT,kBAEA,OAAAnT,MAAA+P,OAAA,QACA/H,KAAA,KAAA,GAAAA,KAAA,KAAAyX,EAAAhX,OAAA,GACAT,KAAA,KAAAyX,EAAAlX,OAAAP,KAAA,KAAAyX,EAAAhX,OAAA,GACAT,KAAA,QAAA,gBAIAkX,GAAAQ,gBAAA,OAAA,cAAA,iBAAA,yBAAA,SAAAxf,GACA,GAAAuf,GAAAvf,EAAAiT,kBAEA,OAAAnT,MAAA+P,OAAA,QACA/H,KAAA,IAAA,GAAAA,KAAA,IAAA,GACAA,KAAA,QAAAyX,EAAAlX,OAAAP,KAAA,SAAAyX,EAAAhX,QACAT,KAAA,QAAA,cAGA,IAAA6X,IAAAtR,EAAA,UAQAuR,GAAAZ,GAAAtc,QACAwc,OAAA,SAAAhe,GACA8d,GAAA3b,UAAA6b,OAAA1c,KAAA1C,KAAAoB,EAEA,IAAAd,GAAAuP,GAAA7P,KAAA4O,KAAA,UACAtH,EAAAsM,GAAAtT,EAAAN,KAAA6O,MAEAvO,GAAA0H,KAAA,YAAAV,IAGAgR,aAAA,IAEAxS,WAAAlD,KAAAsc,GAAApZ,YAyBA+N,aACA1T,KAAAsZ,GAAAI,OACAK,WAAA,WACA,OAAAxR,EAAA,GAAAC,EAAA,EAAAoL,YAAA,gBAKAsI,WAAA,SAIArM,IAAA8P,GAkBA,IAAAC,IAAAxR,EAAA,eA+BAyR,GAAApZ,EAAAqV,GAAAlC,IACAkG,GAAAD,GAAApd,QACAuc,QAAAzQ,EACAuF,IAGAmL,OAAA,WAEApf,KAAAoP,OAAApP,KAAA4O,KAAA5O,KAAA0F,UAEA,IAAApF,GAAAuP,GAAA7P,KAAA4O,KAAA,QACAyQ,QAAA,cAAA,GACAxQ,EAAA7O,KAAAmf,SAEA9K,IAAA/T,EAAAuO,IAIA3H,WAAA,WACA8Y,GAAAzc,UAAA2D,WAAAE,MAAApH,KAAA2C,WACA3C,KAAAqa,aAEAC,KAAA,WACAta,KAAAof,YAIAtZ,WAAAlD,KAAAqZ,GAAAnW,YAOA0N,KAAAiG,GAAAC,OASA5N,UACA3L,KAAAsZ,GAAAE,OACAO,WAAA,WACA,MAAA,KAWAhG,WACA/T,KAAAsZ,GAAAC,OACAzT,SAAA,SAAAzD,GACA,MAAAT,IAAA,OAAA,SAAA,SAAAS,IAEA0X,WAAA,WACA,MAAA,WAWA3F,QACApU,KAAAsZ,GAAAC,OACAzT,SAAA,SAAAzD,GACA,MAAAT,IAAA,QAAA,SAAA,MAAA,WAAAS,IAEA0X,WAAA,SAAA7Z,EAAAwO,GACA,OACArB,KAAA,QACA3B,OAAA,SACAyB,MAAA,OACAuB,EAAAqF,aAWAE,eACAjU,KAAAsZ,GAAAC,OACAzT,SAAA,SAAAzD,GACA,MAAAT,IAAA,MAAA,SAAA,UAAAS,IAEA0X,WAAA,WACA,MAAA,WAWAlN,OACA7M,KAAAsZ,GAAAI,OACAK,WAAA,WACA,aAKAkC,QAAA,IAIApM,IAAAiQ,GA2DA,IAAAC,IAAAD,GAAArd,QACAuc,QAAAzQ,EACAgG,GACAT,IAGAmL,OAAA,WACAa,GAAA1c,UAAA6b,OAAA1c,KAAA1C,MACA6P,GAAA7P,KAAA4O,KAAA,QAAAyQ,QAAA,eAAA,IAIAlS,QAAA,WACA,MAAAnN,MAAA6O,MAAA1B,WAIArH,WAAAlD,KAAAqd,GAAAna,YAQAqH,SACAhN,KAAAsZ,GAAAK,IACAI,WAAA,SAAA7Z,EAAAwO,GACA,MAAA8F,IAAA9F,EAAA+B,YAWA9E,SAAAlJ,KAAAqd,GAAAna,WAAAgG,UACAoO,WAAA,SAAA7Z,EAAAwO,GACA,GAAAsR,IACA7S,MAAA,GACAE,SAGA,OAAA2S,GAAAtR,EAAA+B,WAAA,QAOAZ,IAAAkQ,GA6BA,IAAAE,IAAAF,GAAAtd,QACAuc,QAAAzQ,EACAqG,GACAd,IAGAyE,UAAA,SAAAhQ,EAAAC,EAAAjD,GACAwa,GAAA3c,UAAAmV,UAAAhW,KAAA1C,KAAA0I,EAAAC,EAAAjD,IAGA0Z,OAAA,WACAc,GAAA3c,UAAA6b,OAAA1c,KAAA1C,MACA6P,GAAA7P,KAAA4O,KAAA,QACAyQ,QAAA,eAAA,GACAA,QAAA,oBAAA,MAGAvZ,WAAAlD,KAAAsd,GAAApa,YAQAqH,QAAAvK,KAAAsd,GAAApa,WAAAqH,SACA+M,WAAA,SAAA7Z,EAAAwO;AACA,MAAAmG,IAAAnG,EAAA+B,gBAOAZ,IAAAoQ,GA8DA,IAAAC,IAAAzZ,EAAAqV,GAAAxB,GAAAV,IAEAuG,GAAAD,GAAAzd,QACAuc,QAAAzQ,EACAwG,GACAS,GACAW,IAGA8I,OAAA,WAMApf,KAAAoP,OAAApP,KAAA4O,KAAA5O,KAAA0F,UAEA,IAAAmJ,GAAA7O,KAAAmf,UACA7e,EAAAuP,GAAA7P,KAAA4O,KAAA,QACA5G,KAAA,QAAA,cACAA,KAAA,YAAA6G,EAAAvH,UAEA,IAAAuH,EAAA0H,UAAA,CACA,GAAAgK,GAAA1Q,GAAA7P,KAAA4O,KAAA,aACA5G,KAAA,QAAA,uBACAhI,MAAAma,OAAA,YAAAkE,GAAAkC,EAAA1R,EAAA0H,eAGAvW,MAAAua,OAAA,YAGA/D,IAAAlW,GAAAsV,KAAA/G,EAAA+G,KAAAS,WAAAxH,EAAAwH,cAGAkC,UAAA,WAEAvY,KAAAoP,OAAApP,KAAA4O,KAAA5O,KAAA0F,UAGA,IAAAmJ,IACA+G,KAAA5V,KAAAmf,UAAAvJ,MAEAtV,EAAAuP,GAAA7P,KAAA4O,KAAA,UACA5G,KAAA,QAAA,2BACAgF,OAAAqQ,QAAA,QAEA7G,IAAAlW,EAAAuO,GAIAvO,EAAA0M,OAAAqQ,QAAA,SAEA,IAAAmD,GAAA5J,GAAAtW,EAAAN,KAAA6O,MAAAuG,YAIA,OAFA9U,GAAA0M,OAAAqQ,QAAA,UAGAzM,SAAA5Q,KAAA6O,MAAA+B,SACArI,MAAAiY,EAAAjY,MACAE,OAAA+X,EAAA/X,SAGAiQ,UAAA,aAKAxR,WAAA,WACAmZ,GAAA9c,UAAA2D,WAAAE,MAAApH,KAAA2C,WACA3C,KAAAqa,aAEAC,KAAA,WACAta,KAAAof,YAIAtZ,WAAAlD,KAAAqZ,GAAAnW,YA0BAgD,MAAA2Q,GAAAK,IAEA3E,OAAAsE,GAAAK,IAEAtE,OAAAiE,GAAAK,IAUAjG,aACA1T,KAAAsZ,GAAAI,OACAK,WAAA,SAAA7Z,EAAAwO,GACA,OACAxB,KAAA3E,EAAA,EAAAC,EAAA,GACA2E,OAAA5E,EAAAmG,EAAAtG,MAAAI,EAAA,GACA4E,QAAA7E,EAAA,EAAAC,EAAAkG,EAAApG,QACA+E,MAAA9E,EAAA,EAAAC,EAAA,IACAkG,EAAA+B,YAYAiF,QACA1V,KAAAsZ,GAAAC,OACAQ,WAAA,SAAA7Z,EAAAwO,GACA,MAAAA,GAAA+B,WAWAwE,aACAjV,KAAAsZ,GAAAC,OACAzT,SAAA,SAAAzD,GACA,MAAAT,IAAA,aAAA,YAAAS,IAEA0X,WAAA,SAAA7Z,EAAAwO,GACA,OACAxB,IAAA,aACAC,MAAA,WACAC,OAAA,aACAC,KAAA,WACA2N,GAAA,WACAC,GAAA,cACAvM,EAAA+B,YAYA2F,UAAAkD,GAAAK,IAEAhE,MAAA2D,GAAAK,IACA/D,WAAA0D,GAAAK,IACA9D,SAAAyD,GAAAK,IACA7D,cAAAwD,GAAAK,IACA5D,cAAAuD,GAAAK,IACA3D,YAAAsD,GAAAK,IACA1D,WAAAqD,GAAAK,MAGAuC,WAAA,QACAD,QAAA,IAIApM,IAAAsQ,GA6HA,IAAA1K,IAAArH,EAAA,QAqCAkS,GAAAvQ,GAAAtN,WAkBAwZ,QAAA,IACAC,WAAA,UA+EAqE,GAAA9Z,EAAA6Z,GAAA5C,GAAAxI,GAAAiH,GAAA7B,GAAAzB,IACAmF,GAAAuC,GAAA9d,QACAsE,WAAA,SAAAxB,GACAgb,GAAAnd,UAAA2D,WAAAxE,KAAA1C,KAAA0F,EAGA,IAAA0I,GAAApO,KAAA0F,UAAA0I,MACAA,KACApO,KAAAoO,OAAAA,EACAA,EAAAuM,GAAA,SAAA,WACA3a,KAAA2R,UAAAvD,EAAAuD,UACA3R,KAAA8R,QAAA,WACAtK,KAAAxH,QAIAA,KAAAkZ,oBAAA,SAAAlZ,KAAA4O,OAGAtH,UAAA,SAAAlG,GAQA,MAPAA,GAAAsf,GAAAnd,UAAA+D,UAAA5E,KAAA1C,KAAAoB,GAEAoI,EAAApI,KACAA,IAAAU,IAAA,SAAA1B,KAAA,SAAAqJ,OAAArI,KAIAA,GASAuf,OAAAlb,GACAO,IAAA,SAAAxD,GACA,GAAAqB,EAAArB,GACA,OACA+D,SAAAzG,EAAA6gB,OAAAne,OAyBAoO,SAAAnL,GACAN,cAAA,aACAU,IAAA,SAAArD,GACA,GAAAqB,EAAArB,IAAAA,EAAAN,QAAA,MAAA,EAAA,CACA,GAAAhC,GAAAF,KACA4Y,EAAApW,EAAA5B,MAAA,IACA,OAAA,UAAAqH,EAAArG,EAAAgM,GACA,GAAAgT,GAAA1gB,EAAAgb,OAAAxY,KAAA1C,KAAAiI,EAAArG,EAAAgM,EACA,OAAAgT,IAAA,EAAAhI,EAAA,GAAAA,EAAA,IAIA,MAAApW,MAaAyJ,OAAAxG,GACAN,cAAA,IAUAuC,QAAAjC,GAAAN,cAAA,IAWAoP,OAAA9O,GACAQ,SAAA,SAAAzD,GACA,MAAAT,IAAA,QAAA,SAAA,OAAAS,MAaAqe,UAAApb,GACAQ,SAAA,SAAAzD,GACA,MAAAT,IAAA,MAAA,SAAA,UAAAS,MAYAse,UAAArT,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAAY,GAAA0C,EAAA+C,EAAA8Y,MAAA7b,EAAA+C,EAAA+Y,aAAA9gB,EAAAgb,OAAAxY,KAAA1C,KAAAiI,EAAArG,KACA+e,EAAAzgB,EAAAygB,QAEA,OAAAA,GAAAA,EAAAne,GAAAA,IAWAye,WAAAxT,EAAA,SAAAvN,EAAA+H,GACA,MAAA,eAAAA,EAAA,SAAA,IAAAA,EAAA,SAAA,MAGA5G,WAAA,SAAAhB,EAAAe,GACA,MAAAf,GAAA2S,UAAA,KACA5R,KAAAA,EAAApB,KAAA8B,MAEAP,SAAA,SAAAlB,GACA,MAAAA,GAAA0P,OAAA,KACArN,KAAA1C,KAAAkhB,eAEA7H,QAAA,SAAAhZ,GACAA,EAAA2H,KAAA,QAAAhI,KAAAihB,YAEAjhB,KAAAmhB,YAAA9gB,GACAL,KAAAohB,aAAA/gB,IAEA0e,kBAAA,SAAA1e,GAEAL,KAAA0a,gBAAAra,GACAL,KAAAqhB,iBAAAhhB,IAIA6gB,aAAA,SAAA7gB,GACAA,EAAA0P,OAAA,QACA/H,KAAA,QAAA,kBACA3H,EAAA0P,OAAA,QACA/H,KAAA,QAAA,qBAIAmZ,YAAA,SAAA9gB,GACAA,EAAA2S,UAAA,QACAQ,KAAAxT,KAAA8gB,YAIAM,aAAA,SAAA/gB,GAuCA,QAAAihB,GAAA1W,EAAA3C,EAAArG,EAAAgM,GACA,GACA2T,GADAC,EAAA5e,KAAA6G,EAQA,IAJA8X,EADAxb,GAAA6K,GACAA,EAAAlO,KAAAkI,EAAA3C,EAAArG,EAAAgM,GAEAgD,EAEAjN,EAAA6d,EAAAvV,QAAA,CACA,GAAAA,IACAoB,KAAA3E,EAAA,EAAAC,GAAA6Y,EAAAvV,QACAqB,OAAA5E,EAAA8Y,EAAAvV,OAAAtD,EAAA,GACA4E,QAAA7E,EAAA,EAAAC,EAAA6Y,EAAAvV,QACAuB,MAAA9E,GAAA8Y,EAAAvV,OAAAtD,EAAA,IACA4Y,EAEAtV,KACAA,GAAAvD,EAAA,EAAAC,EAAA,IAEA6Y,EAAAvV,OAAAA,EAkBA,MAhBAnI,GAAA0d,EAAAjN,UACAiN,EAAAjN,QACAlH,IAAA,SACAC,MAAA,QACAC,OAAA,SACAC,KAAA,OACA+T,IAEAzd,EAAA0d,EAAAX,aACAW,EAAAX,WACAxT,IAAA,SACAC,MAAA,SACAC,OAAA,MACAC,KAAA,UACA+T,IAEAC,EA3EA,GAUA9b,GAVAxF,EAAAF,KACAid,KACArM,EAAA1Q,EAAA0Q,WACAnH,GACAwC,OAAA/L,EAAA+L,SACAvE,QAAAxH,EAAAwH,UACA6M,OAAArU,EAAAqU,SACAsM,UAAA3gB,EAAA2gB,YAIAhd,GAAA+M,KACAlL,EAAA4b,KAEAjhB,EAAAkT,KAAA,SAAAtL,EAAArG,EAAAgM,GACAqP,EAAArP,KACAqP,EAAArP,MAGA,IAAAmT,GAAA7gB,EAAAuhB,cAAAvhB,EAAAF,KAAAiI,EAAArG,EAAAgM,EACAqP,GAAArP,GAAArJ,KAAAwc,EAEA,IAAAS,GAAA9b,GAAA4b,EAAA5e,KAAAxC,EAAAF,KAAAiI,EAAArG,EAAAgM,EAEA1N,GAAAwhB,iBAAAxhB,EAAAshB,EAAAT,KAIA/gB,KAAA2hB,kBAAAzhB,EAAA+c,GAGAA,EAAAxc,QAAA,SAAAF,GACAA,EAAAE,QAAA,SAAAsgB,GACA/gB,KAAA4hB,WAAA1hB,EAAA6gB,IACA/gB,OACAA,OA6CAqhB,iBAAA,SAAAhhB,GACAA,EAAA2H,KAAA,UAAA,IAOAyZ,cAAA,SAAAvhB,EAAA0K,EAAA3C,EAAArG,GACA,GAAAvB,GAAAP,EAAAwO,OAAA1D,GACA4I,EAAAnT,EAAAiO,OAAA,QACAuT,EAAAxhB,EAAAiO,OAAA,OAEA,QACA5F,EAAAxI,EAAAwI,EAAAhG,KAAAkI,EAAA3C,EAAArG,GACA+G,EAAAzI,EAAAyI,EAAAjG,KAAAkI,EAAA3C,EAAArG,GACAgJ,QAAAA,EACAvK,UAAAA,EACAmT,MACA5I,QAAA4I,EAAA3I,OACAxK,UAAAmT,GAEAqO,IACAjX,QAAAiX,EAAAhX,OACAxK,UAAAwhB,KAKAH,iBAAA,SAAAxhB,EAAAwF,EAAAqb,GACA,GAAAe,GAAAf,EAAAvN,KAAA5I,QAAAxC,UAGA2Z,EAAAhW,EAAAgV,EAAAvN,KAAA5I,SAGA8M,EAAAqJ,EAAAc,GAAAnK,QACAhP,EAAAhD,EAAAuG,OAAAvD,EACAC,EAAAjD,EAAAuG,OAAAtD,EACAJ,MAAAuZ,EAAAvZ,MAAA,EAAA7C,EAAAgC,QACAe,OAAAqZ,EAAArZ,OAAA,EAAA/C,EAAAgC,QAIAqZ,GAAAxY,MAAAmP,EAAAnP,MACAwY,EAAAtY,OAAAiP,EAAAjP,OAEA,OAAA/C,EAAA6O,OACAwM,EAAArY,GAAAgP,EAAAnP,MACA,UAAA7C,EAAA6O,SACAwM,EAAArY,GAAAgP,EAAAnP,MAAA,GAEA,UAAA7C,EAAAmb,UACAE,EAAApY,GAAA+O,EAAAjP,OACA,UAAA/C,EAAAmb,YACAE,EAAApY,GAAA+O,EAAAjP,OAAA,GAGAsY,EAAAvN,KAAAkE,QACAhP,EAAAgP,EAAAhP,EAAAgP,EAAAnP,MAAA,EAAAuZ,EAAAvZ,MAAA,EACAI,EAAA+O,EAAA/O,EAAA+O,EAAAjP,OAAA,EAAAqZ,EAAArZ,OAAA,EAAAsZ,IAIAJ,kBAAA,SAAAzhB,EAAA+c,GAgBA,QAAA+E,GAAAC,EAAAC,GAWA,QAAAC,GAAApB,GACA,OACAvT,KAAAuT,EAAArY,EACA4E,MAAAyT,EAAArY,EAAAqY,EAAAxY,MACA8E,IAAA0T,EAAApY,EACA4E,OAAAwT,EAAApY,EAAAoY,EAAAtY,QAfA,GAAAnG,GAAA6f,EAAAF,GACA1f,EAAA4f,EAAAD,GAEAE,EAAA7f,EAAAiL,KAAAlL,EAAAkL,MAAAjL,EAAA+K,MAAAhL,EAAAgL,MACA+U,EAAA9f,EAAAgL,OAAAjL,EAAAiL,QAAAhL,EAAA8K,IAAA/K,EAAA+K,IACAiV,EAAA/f,EAAAiL,MAAAlL,EAAAkL,MAAAjL,EAAAiL,KAAAlL,EAAAgL,OAAA/K,EAAA+K,MAAAhL,EAAAkL,MAAAjL,EAAA+K,OAAAhL,EAAAgL,OAAA8U,EACAG,EAAAhgB,EAAA8K,KAAA/K,EAAA+K,KAAA9K,EAAA8K,IAAA/K,EAAAiL,QAAAhL,EAAAgL,OAAAjL,EAAA+K,KAAA9K,EAAAgL,QAAAjL,EAAAiL,QAAA8U,CAEA,OAAAC,IAAAC,EAYA,QAAAC,GAAAP,EAAAC,GACA,OAAAO,EAAAR,EAAAS,MAAAR,KAAAO,EAAAP,EAAAQ,MAAAT,GAGA,QAAAQ,GAAAC,EAAA3B,GACA,MAAA2B,IAAAA,EAAAzF,OAAA/a,QAAA6e,MAGA,QAAA4B,GAAAV,EAAAC,GACA,GAAAD,EAAAS,OAAAR,EAAAQ,MAEA3e,EAAAme,EAAAQ,MAAAzF,OAAA,SAAA8D,GACAkB,EAAAS,MAAAzF,OAAA1Y,KAAAwc,GACAA,EAAA2B,MAAAT,EAAAS,QAGAE,EAAAX,EAAAS,WAEA,IAAAT,EAAAS,MACAG,EAAAX,EAAAD,EAAAS,WAEA,IAAAR,EAAAQ,MACAG,EAAAZ,EAAAC,EAAAQ,WAEA,CACA,GAAAA,IAAAzF,UACA4F,GAAAZ,EAAAS,GACAG,EAAAX,EAAAQ,IAIA,QAAAG,GAAA9B,EAAA2B,GACAA,EAAAzF,OAAA1Y,KAAAwc,GACAA,EAAA2B,MAAAA,EACA3B,EAAA+B,UAAA/B,EAAApY,EAEAia,EAAAF,GAGA,QAAAE,GAAAF,GACA,QAAAK,GAAAhC,GAGA,MADAA,GAAApY,EAAAoY,EAAA+B,UACA/B,EAEA,QAAAiC,GAAA1gB,EAAAC,GACA,MAAAD,GAAAqG,EAAApG,EAAAoG,KAEArG,EAAAqG,EAAApG,EAAAoG,EACA,EAEA,EAGA,GAAAsa,GAAAP,EAAAzF,OAAApc,IAAAkiB,GAAAvS,KAAAwS,GAAAE,SAEAD,GAAAxiB,QAAA,SAAAsgB,EAAArO,GAIA,IAAA,GAFAyQ,GADAC,EAAAhgB,EAAA6f,EAAAvQ,GAGA9Q,EAAAwhB,EAAAvhB,OAAA,EAAAD,GAAA,EAAAA,IACA,GAAAogB,EAAAjB,EAAAqC,EAAAxhB,IAAA,CACAuhB,EAAAC,EAAAxhB,EACA,OAIAuhB,IAIApC,EAAApY,EAAAya,EAAAA,EAAAvhB,OAAA,GAAA8G,EAAAoY,EAAAtY,UA3GAwU,EAAAxc,QAAA,SAAAF,EAAA0a,GAEAgC,EAAAhc,MAAAga,EAAA,GAAAxa,QAAA,SAAA4iB,GACAA,EAAA5iB,QAAA,SAAA6iB,GACA/iB,EAAAE,QAAA,SAAAsgB,GACA,GAAAwC,GAAAvB,EAAAjB,EAAAuC,GACAE,EAAAhB,EAAAzB,EAAAuC,EAEAC,IAAAC,GACAb,EAAA5B,EAAAuC,YAyGA1B,WAAA,SAAA1hB,EAAA6gB,GACAA,EAAAc,GAAAxhB,UACA2H,KAAA,YAAAY,EAAAmY,EAAAc,GAAAnK,OAAAhP,EAAAqY,EAAAc,GAAAnK,OAAA/O,IACAX,KAAA,QAAA+Y,EAAAc,GAAAnK,OAAAnP,OACAP,KAAA,SAAA+Y,EAAAc,GAAAnK,OAAAjP,QAEAsY,EAAAvN,KAAAnT,UACA2H,KAAA,YAAAY,EAAAmY,EAAAvN,KAAAkE,OAAAhP,EAAAqY,EAAAvN,KAAAkE,OAAA/O,IAGAoY,EAAA1gB,UACA2H,KAAA,YAAAY,EAAAmY,EAAArY,EAAAqY,EAAApY,IACAX,KAAA,UAAA,MAGAoU,QAAA,MAGAa,GAAA1O,EAAA,UAOAkV,GAAA7c,EAAAuX,GAAA7B,IACAoH,GAAAD,GAAA7gB,QACAsE,WAAA,SAAAxB,GACA+d,GAAAlgB,UAAA2D,WAAAxE,KAAA1C,KAAA0F,GACA1F,KAAA2a,GAAA,SAAA,WACA3a,KAAA2R,UAAAgJ,GAAA,mBAAA3a,KAAA2jB,kBAAAnc,KAAAxH,OACAA,KAAA2R,UAAAgJ,GAAA,mBAAA3a,KAAA4jB,kBAAApc,KAAAxH,QACAwH,KAAAxH,QAUA8c,eAAArX,GACAO,IAAA,SAAAxD,GAEAxC,KAAAoO,QAAApO,KAAAoO,OAAA0O,gBACA9c,KAAAoO,OAAA0O,eAAAta,IAEA2C,cAAA0H,EAAAA,IAIAwU,iBAAA,aAEAsC,kBAAA,SAAAxS,GACA,GAAA4P,GAAA/gB,KAAA6jB,kBAAA1S,EACA4P,IACAjhB,EAAAwO,OAAAyS,GAAA/Y,KAAA,UAAA,IAEA4b,kBAAA,SAAAzS,GACA,GAAA4P,GAAA/gB,KAAA6jB,kBAAA1S,EACA4P,IACAjhB,EAAAwO,OAAAyS,GAAA/Y,KAAA,UAAA,IAGA6b,kBAAA,SAAA1S,GACA,GAEA4P,GAFA9D,EAAAjd,KAAA4O,KAAAoE,UAAA,kBAAAA,UAAA,KACA9S,EAAAF,IASA,OANAid,GAAA1J,KAAA,SAAAtL,EAAArG,EAAAgM,GACA,GAAArN,GAAAL,EAAAwc,WAAAha,KAAA1C,KAAAiI,EAAArG,EAAAgM,EACA3F,KAAAkJ,EAAAlJ,GAAA1H,IAAA4Q,EAAA5Q,SACAwgB,EAAA/gB,QAGA+gB,KAIA+C,GAAAvV,EAAA,eA4DAwV,GAAAnd,EAAA6Z,GAAA5C,GAAAxI,GAAAmI,GAAAF,GAAAhB,GAAA7B,GAAAzB,IACAgL,GAAAD,GAAAnhB,QACAsE,WAAA,SAAAxB,GACAqe,GAAAxgB,UAAA2D,WAAAxE,KAAA1C,KAAA0F,GAEA1F,KAAA2a,GAAA,cAAA,WACA3a,KAAAikB,YAAAjkB,KAAAkkB,iBACA1c,KAAAxH,OAIAA,KAAAkZ,oBAAA,OAAAlZ,KAAA4O,KAAAmB,OAAA,KAAAsP,QAAA,cAAA,IACArf,KAAAgd,gBAGAmH,UAAA1W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAA6G,GAAAsI,KAAAqT,IAAAlkB,EAAAkb,KAAAlb,EAAAyI,EAAAjG,KAAA1C,KAAAiI,EAAArG,IAAA1B,EAAAmkB,WACA,OAAA5b,GAAA,EAAAA,EAAA,IAEA6b,SAAA7W,EAAA,SAAAvN,GACA,MAAAA,GAAA0d,cAEA2G,KAAA9W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,MAAA1B,GAAAwI,EAAAhG,KAAA1C,KAAAiI,EAAArG,GAAA1B,EAAA0d,YAAA,IAEA4G,KAAA/W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAA+G,GAAAzI,EAAAyI,EAAAjG,KAAA1C,KAAAiI,EAAArG,GACAwZ,EAAAlb,EAAAkb,IAEA,OAAAzS,GAAAyS,EAAAzS,EAAAyS,EAAAlb,EAAAmkB,cAEAI,KAAAhX,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAAwZ,GAAAlb,EAAAkb,KACAnP,EAAA/L,EAAAmkB,WACA,OAAAnkB,GAAAyI,EAAAjG,KAAA1C,KAAAiI,EAAArG,IAAAwZ,EAAAA,EAAAnP,EAAAmP,EAAAnP,IAEAyY,SAAAjX,EAAA,SAAAvN,EAAA+H,GACA,MAAA,aAAAA,EAAA,SAAA,IAAAA,EAAA,SAAA,MAIAoc,UAAA,WACA,GAAArkB,KAAAikB,YAAA,CACA,GAAAU,GAAAC,SAAA5kB,KAAAikB,YAAArV,KAAAN,OAAA,WAAAtB,MAAA,kBAAA,CACA,OAAA2X,GAAA,EAGA,MAAA,IAIAT,cAAA,WACA,GAAAvM,GAAA3X,KAAA2R,WAAA3R,KAAA2R,UAAAgG,YACA,OAAAzT,GAAAyT,EAAA,SAAAX,GACA,GAAA,QAAAA,EAAA7W,MAAA,UAAA6W,EAAApG,WACA,MAAAoG,MAKA3V,WAAA,SAAAhB,EAAAe,GACA,MAAAf,GAAA2S,UAAA,QACA5R,KAAAA,EAAApB,KAAA8B,MAIAP,SAAA,SAAAlB,GACA,MAAAA,GAAA0P,OAAA,QACA4K,GAAA,aAAA3a,KAAA2c,iBACAhC,GAAA,aAAA3a,KAAA4c,kBAIAzD,QAAA,SAAA9Y,GACAA,EACA2H,KAAA,IAAAhI,KAAAykB,MACAzc,KAAA,SAAA,IAIAqR,QAAA,SAAAhZ,GACAA,EACA2H,KAAA,QAAAhI,KAAA0kB,UACA1c,KAAA,QAAAhI,KAAAie,WACAjW,KAAA,IAAAhI,KAAAukB,MACAvc,KAAA,QAAAhI,KAAAskB,WAIAvF,kBAAA,SAAA1e,GACAL,KAAA0a,gBAAAra,GAEAA,EACA2H,KAAA,IAAAhI,KAAAwkB,MACAxc,KAAA,SAAAhI,KAAAmkB,YAIAU,iBAAA,SAAAxkB,GACAL,KAAA0a,gBAAAra,GAEAA,EACA2H,KAAA,IAAAhI,KAAAykB,MACAzc,KAAA,SAAA,GACAuH,YAIAuV,GAAAvW,EAAA,QAsCAwW,GAAAne,EAAAod,GAAAzG,IAAA3a,QACA2hB,KAAA9W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAA8G,GAAAxI,EAAAwI,EAAAhG,KAAA1C,KAAAiI,EAAArG,GACAuZ,EAAAjb,EAAAib,IAEA,OAAAzS,GAAAyS,EAAAzS,EAAAyS,EAAAjb,EAAAmkB,cAEAG,KAAA/W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,MAAA1B,GAAAyI,EAAAjG,KAAA1C,KAAAiI,EAAArG,GAAA1B,EAAA0d,YAAA,IAEA0G,SAAA7W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAA2G,GAAAwI,KAAAqT,IAAAlkB,EAAAib,KAAAjb,EAAAwI,EAAAhG,KAAA1C,KAAAiI,EAAArG,IAAA1B,EAAAmkB,WACA,OAAA9b,GAAA,EAAAA,EAAA,IAEA4b,UAAA1W,EAAA,SAAAvN,GACA,MAAAA,GAAA0d,cAEA6G,KAAAhX,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAAuZ,GAAAjb,EAAAib,KACAlP,EAAA/L,EAAAmkB,WACA,OAAAnkB,GAAAwI,EAAAhG,KAAA1C,KAAAiI,EAAArG,IAAAuZ,EAAAA,EAAAlP,EAAAkP,EAAAlP,IAGAiY,cAAA,WACA,GAAAvM,GAAA3X,KAAA2R,WAAA3R,KAAA2R,UAAAgG,YACA,OAAAzT,GAAAyT,EAAA,SAAAX,GACA,GAAA,QAAAA,EAAA7W,MAAA,QAAA6W,EAAApG,WACA,MAAAoG,MAIAmC,QAAA,SAAA9Y,GACAA,EACA2H,KAAA,IAAAhI,KAAAykB,MACAzc,KAAA,QAAA,IAGAqR,QAAA,SAAAhZ,GACAA,EACA2H,KAAA,QAAAhI,KAAA0kB,UACA1c,KAAA,QAAAhI,KAAAie,WACAjW,KAAA,IAAAhI,KAAAwkB,MACAxc,KAAA,SAAAhI,KAAAmkB,YAGApF,kBAAA,SAAA1e,GACAL,KAAA0a,gBAAAra,GAEAA,EACA2H,KAAA,IAAAhI,KAAAukB,MACAvc,KAAA,QAAAhI,KAAAskB,WAGAO,iBAAA,SAAAxkB,GACAL,KAAA0a,gBAAAra,GAEAA,EACA2H,KAAA,IAAAhI,KAAAykB,MACAzc,KAAA,QAAA,GACAuH,YAIAyV,GAAAzW,EAAA,kBAsCA0W,GAAAjB,GAAAphB,QACA0E,UAAA,SAAAlG,GACAA,EAAA4iB,GAAAzgB,UAAA+D,UAAA5E,KAAA1C,KAAAoB,EAEA,IAAA8jB,MACAC,EAAAnlB,KAAA8a,OACAsK,EAAAplB,KAAA+a,MA0BA,OAzBA3Z,GAAAA,EAAAP,IAAA,SAAAN,GAsBA,MArBAA,GAAAqC,KAAArC,GACAA,EAAAkJ,OAAAlJ,EAAAkJ,OAAA5I,IAAA,SAAA2B,GACAA,EAAAI,KAAAJ,EACA,IAAAkG,GAAAlG,EAAA2iB,GACAxc,EAAAnG,EAAAwe,aAAAxe,EAAA4iB,EAcA,OAZAF,GAAAxc,KACAwc,EAAAxc,IAAA2c,IAAA,EAAAC,IAAA,IAEA3c,GAAA,GACAnG,EAAA+iB,WAAAL,EAAAxc,GAAA2c,IACAH,EAAAxc,GAAA2c,IAAA7iB,EAAA4iB,GAAAF,EAAAxc,GAAA2c,IAAA1c,IAGAnG,EAAA+iB,WAAAL,EAAAxc,GAAA4c,IACAJ,EAAAxc,GAAA4c,IAAA9iB,EAAA4iB,GAAAF,EAAAxc,GAAA4c,IAAA3c,GAGAnG,GACAxC,MAEAO,GACAP,OAKAmkB,UAAA1W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAA6G,GAAAsI,KAAAqT,IAAAlkB,EAAAsV,SAAAvN,EAAAsd,YAAArlB,EAAAyI,EAAAjG,KAAA1C,KAAAiI,EAAArG,IACAqK,EAAA,IAAA/L,EAAA+a,YAAAvY,KAAA1C,KAAAiI,EAAArG,GAAA1B,EAAAmkB,YAAA,CAEA,OADA5b,IAAAwD,EACAxD,EAAA,EAAAA,EAAA,MAIA+c,GAAAjX,EAAA,eAsCAkX,GAAAV,GAAAniB,QACA0E,UAAA,SAAAlG,GAGA,MAFAA,GAAA6jB,GAAA1hB,UAAA+D,UAAA5E,KAAA1C,KAAAoB,GACAA,EAAA2jB,GAAAxhB,UAAA+D,UAAA5E,KAAA1C,KAAAoB,IAIAkjB,SAAA7W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAA2G,GAAAwI,KAAAqT,IAAAlkB,EAAAsV,SAAAvN,EAAAsd,YAAArlB,EAAAwI,EAAAhG,KAAA1C,KAAAiI,EAAArG,IACAqK,EAAA,IAAA/L,EAAA+a,YAAAvY,KAAA1C,KAAAiI,EAAArG,GAAA1B,EAAAmkB,YAAA,CACA,OAAA9b,GAAA,EAAAA,EAAA0D,EAAA,IAEAsY,KAAA9W,EAAA,SAAAvN,EAAA+H,EAAArG,GACA,GAAA8G,GAAAxI,EAAAwI,EAAAhG,KAAA1C,KAAAiI,EAAArG,GACAuZ,EAAAjb,EAAAsV,SAAAvN,EAAAsd,WAEA,OAAA7c,GAAAyS,EAAAzS,EAAAyS,EAAAjb,EAAAmkB,gBAIAqB,GAAAnX,EAAA,yBAsDAoX,GAAA/e,EAAA6Z,GAAA5C,GAAAxI,GAAAiI,GAAAhB,GAAAO,GAAApC,GAAAzB,IACA4M,GAAAD,GAAA/iB,QACAsE,WAAA,SAAAxB,GACAigB,GAAApiB,UAAA2D,WAAAxE,KAAA1C,KAAA0F,GAEA1F,KAAA6lB,SAIA7lB,KAAAkZ,oBAAA,QAAAlZ,KAAA4O,KAAAmB,OAAA,KAAAsP,QAAA,eAAA,IAEArf,KAAAgd,gBAaA8I,YAAArgB,GACAN,cAAA,aAIA4gB,WAAAtY,EAAA,SAAAvN,EAAA+H,EAAArG,EAAAgM,GACA,GAAA9L,GAAA5B,EAAA8lB,QAAAtjB,KAAA1C,KAAAiI,EAAArG,EAAAgM,GACAqY,EAAA/lB,EAAA2lB,MAAA/jB,GAAAhC,EAAA4W,IAAAuP,OACAvd,EAAAxI,EAAAwI,GACAC,EAAAzI,EAAAyI,GAEAmd,EAAA7d,EAAA6d,aAAA5lB,EAAA4lB,aACAA,IACAG,EAAAH,YAAAA,KAIAE,QAAAvY,EAAA,SAAAvN,EAAA+H,EAAArG,EAAAgM,GACA,GAAA9L,GAAA5B,EAAA4d,UAAA5d,EAAAwc,WAAAha,KAAA1C,KAAAiI,EAAArG,EAAAgM,GACA,OAAA,OAAA9L,EAAAA,EAAA5B,EAAA+a,YAAAvY,KAAA1C,KAAAiI,EAAArG,EAAAgM,KAIAsY,SAAAzY,EAAA,SAAAvN,EAAA+H,EAAArG,EAAAgM,GACA,GAAA9L,GAAA5B,EAAA8lB,QAAAtjB,KAAA1C,KAAAiI,EAAArG,EAAAgM,EACA,IAAA1N,EAAA2lB,MAAA/jB,GACA,MAAA5B,GAAA2lB,MAAA/jB,GAAAmG,KAIA5G,WAAA,SAAAhB,EAAAe,GACA,MAAAf,GAAA2S,UAAA,QACA5R,KAAA,SAAA6G,EAAArG,EAAAgM,GACA,OAAAxM,EAAAsB,KAAArC,EAAA4H,EAAArG,EAAAgM,OAKArM,SAAA,SAAAlB,GACA,MAAAA,GAAA0P,OAAA,QACAsP,QAAA,cAAA,GACA9L,KAAAvT,KAAA+lB,aAIAhH,kBAAA,SAAA1e,GACAL,KAAA0a,gBAAAra,GAEAA,EACA2H,KAAA,IAAAhI,KAAAkmB,UACAle,KAAA,QAAAhI,KAAAie,cAIA4H,GAAAtX,EAAA,SA6NA4X,GAAAlK,GAAArZ,QACAsE,WAAA,SAAAxB,GACAuW,GAAA1Y,UAAA2D,WAAAxE,KAAA1C,KAAA0F,GACA1F,KAAA4O,KAAA5G,KAAA,QAAAhI,KAAAgN,UAEAsL,aAAA,EASA5P,EAAAjD,GACAN,cAAA,IAUAwD,EAAAlD,GACAN,cAAA,IAUAihB,OAAA3gB,GACAN,eAAA,IAWA6H,MAAAvH,GACAN,cAAA,WACA,GAAAmC,GAAAsB,EAAA5I,KAAA0I,IAAA,KAAA1I,KAAA2I,IAAA,MACAuC,GACA0F,SAAA,WACAvD,IAAA,EACAG,KAAA,EACA6Y,oBAAA/e,EACAgf,gBAAAhf,EACAA,UAAAA,EAMA,OAHAtH,MAAAomB,WACAlb,EAAAmS,QAAA,QAEArQ,EAAA9B,MAwBA0F,SAAA,SAAAA,EAAAjI,GACA,GAAAhG,UAAAd,OAAA,EACA+O,GACAlI,EAAAkI,EACAjI,EAAAA,OAIA,IAAA,aAAAiI,GACAA,EAAA5Q,KAAAumB,oBAAA3V,EAAAe,eAEA,IAAA,SAAAf,GACA,GAAA5Q,KAAA2R,UAAA,CACA,GAAAzR,GAAAF,KAAA2R,UAAAgN,eACA/N,GAAA5Q,KAAAumB,qBACA7d,EAAAkI,EAAA1Q,MAAAwI,EAAAxI,EAAAsN,KACA7E,EAAAiI,EAAA1Q,MAAAyI,EAAAzI,EAAAmN,UAIAuD,GAAA5Q,KAAAumB,oBAAA3V,EAAA1Q,MAKAF,MAAA0I,EAAAkI,EAAAlI,GAAAC,EAAAiI,EAAAjI,GACA3I,KAAA4O,KAAA5G,KAAA,QAAAhI,KAAAgN,UAQAwZ,KAAA,WACAxmB,KAAAomB,QAAA,GACApmB,KAAA4O,KAAA5G,KAAA,QAAAhI,KAAAgN,UAQA4R,KAAA,WACA5e,KAAAomB,QAAA,GACApmB,KAAA4O,KAAA5G,KAAA,QAAAhI,KAAAgN,UAWAuZ,oBAAA,SAAAE,GACA,GAAA9U,GAAA3R,KAAA2R,WAAA3R,KAAA2R,UAAAA,SAEA,IAAAA,GAAA3R,KAAA2R,UAAA+U,aAAA,CACA,GAAAC,GAAAtc,EAAAsH,GACAiV,EAAA5mB,KAAA2R,UAAApJ,QACAse,EAAA7mB,KAAA2R,UAAAlJ,SACAqe,EAAAH,EAAApe,MAAAqe,EACAG,EAAAJ,EAAAle,OAAAoe,CAEA,QACAne,EAAAoe,EAAAL,EAAA/d,EACAC,EAAAoe,EAAAN,EAAA9d,GAMA,MAAA8d,MAIApK,WAAA,YAGA2K,IAAA3Z,IAAA,GAAAC,MAAA,GAAAC,OAAA,GAAAC,KAAA,IA6CAyZ,GAAA/W,GAAAtN,QACAsE,WAAA,SAAAxB,GACAwK,GAAA3M,UAAA2D,WAAAxE,KAAA1C,KAAA0F,GAKA,OAAA1F,KAAA4O,KAAA/D,OAAAqc,SACAlnB,KAAA2R,UAAA3R,KAAA4O,KAAAmB,OAAA,OACA/H,KAAA,QAAA,2BAEAhI,KAAA4O,KAAA5O,KAAA2R,UAAA5B,OAAA,OACA/H,KAAA,QAAA,8BACAA,KAAA,UAAA,OACAA,KAAA,QAAA,kBAGAhI,KAAA4O,KAAAyQ,QAAA,iBAAA,GAGArf,KAAAmnB,wBAGA7f,UAAA,SAAAlG,GAGA,MADApB,MAAAonB,QAAAhmB,GACA8O,GAAA3M,UAAA+D,UAAA5E,KAAA1C,KAAAoB,IAmCAsE,QAAAD,GACAN,cAAA,WAAA,MAAA,eACAa,IAAA,SAAAN,GAGA,IAAAK,GAAAL,GACA,OACAa,SAAA,WACA,MAAAb,QAQA0hB,QAAA3hB,IAaA0H,QAAA1H,GACAN,cAAA6hB,GACAhhB,IAAA,SAAAyD,GACA,OACAlD,SAAA2G,EAAAzD,EAAAud,QAMArI,cAAAlZ,GACAN,eAAAkI,IAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,KAAA,GACAxH,IAAA,SAAAyD,GACA,OACAlD,SAAA9D,KAAAgH,GAAA4D,IAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,KAAA,MAGA3H,IAAA,SAAA4D,GAIA,MAHAA,GAAAlB,MAAAvI,KAAAqnB,SAAA5d,EAAA6D,MAAA7D,EAAA+D,KACA/D,EAAAhB,OAAAzI,KAAAsnB,UAAA7d,EAAA8D,OAAA9D,EAAA4D,IAEA5D,KAUAlB,MAAA9C,GACAN,cAAA,OASAsD,OAAAhD,GACAN,cAAA,OAGAkiB,OAAA,WACA,GAAA9e,GAAAvI,KAAAuI,OACA,OAAA,OAAAA,EAAAA,EAAA2H,GAAA3M,UAAAgF,MAAA7F,KAAA1C,OAEAsnB,QAAA,WACA,GAAA7e,GAAAzI,KAAAyI,QACA,OAAA,OAAAA,EAAAA,EAAAyH,GAAA3M,UAAAkF,OAAA/F,KAAA1C,OAWA0mB,WAAAjhB,GACAN,eAAA,IAIAoiB,QAAA9hB,GACAN,cAAA,WACA,MAAAnF,MAAA0mB,cAAA1mB,KAAAuI,SAAAvI,KAAAyI,SACA,OAAAzI,KAAAuI,QAAA,IAAAvI,KAAAyI,SAEA,QAKA+e,oBAAA/hB,GACAN,cAAA,WACA,MAAAnF,MAAA0mB,aACA,gBAEA,QAKAe,eAAAhiB,GACAN,cAAA,WACA,GAAAnF,KAAA0mB,aAAA,CACA,GAAAgB,GAAA,CAIA,OAHA1nB,MAAAuI,SAAAvI,KAAAyI,WACAif,EAAA1nB,KAAAyI,SAAAzI,KAAAuI,SAEAyE,GACAzE,MAAA,OACAE,OAAA,EACAkf,cAAA,IAAAD,EAAA,IACA9W,SAAA,aAIA,MAAA5D,IAAA4D,SAAA,gBAMAgX,UAAAniB,GACAN,cAAA,WACA,MAAAnF,MAAA0mB,cAAA1mB,KAAA2R,UACA3E,GACA4D,SAAA,WACAvD,IAAA,EACAG,KAAA,IAIA,QAqBA0E,OAAAzM,GACAO,IAAA,SAAA6hB,EAAA3V,GAEA,OACA3L,SAAAvG,KAAA8nB,aAAAD,EAAA3V,EAAAlS,QAGAmF,mBAmBAwS,WAAAlS,GACAO,IAAA,SAAA+hB,EAAApQ,GAEA,OACApR,SAAAvG,KAAA8nB,aAAAC,EAAApQ,EAAA3X,QAGAmF,mBAWAwK,MAAAlK,IAUAiK,SAAAjK,IAaAmK,KAAAnK,IAwBA6U,KAAA,SAAAlZ,GACA,GAAA4mB,GAAAhoB,KAAAioB,eAAAjoB,KAAA0F,UAAAtE,EACA4mB,KACAA,GAAA5mB,MAAAmW,WAAAC,gBAAAE,UAAAxF,UAAAyF,gBAGA3X,KAAAkS,OAAA8V,EAAA9V,QACAlS,KAAA2X,WAAAqQ,EAAArQ,YAGAvW,GACAwI,SAAAxI,EACA4mB,OAAAA,EAAA5mB,MAEApB,KAAAoB,KAAAA,GAEApB,KAAAkoB,iBAGAloB,KAAA0X,OAAAsQ,EAAAtQ,OAAAtW,GAGAtB,EAAAI,QAAAqD,UAAA+W,KAAA5X,KAAA1C,KAAAoB,IAQA+mB,OAAA,WACAnoB,KAAAonB,WACApnB,KAAAsa,KAAAta,KAAAonB,UAAAxd,WAGA4I,MAAA,SAAApS,EAAAgB,GACA,MAAAA,IAAAA,EAAA4mB,QAAA5mB,EAAAwI,SAGAmP,GAAA/Y,KAAAkS,SAAA9R,IAAAgB,EAAA4mB,OAAAzQ,QAAAnX,GACAgB,EAAA4mB,OAAAzQ,QAAAnX,GACA2Y,GAAA/Y,KAAA2X,aAAAvX,IAAAgB,EAAA4mB,OAAAxQ,YAAApX,GACAgB,EAAA4mB,OAAAxQ,YAAApX,GAEAgB,EAAAwI,SAPAxI,GAWAgnB,iBAAA,SAAA1iB,GACA,MAAA1F,MAAA4O,KAAAmB,OAAA,KACA/H,KAAA,QAAA,eACAA,KAAA,cAAAtC,GAAAA,EAAA0W,UAIAiM,qBAAA,SAAA3iB,GACA,MAAA1F,MAAA4O,KAAAmB,OAAA,KACA/H,KAAA,QAAA,yBACAA,KAAA,cAAAtC,GAAAA,EAAA0W,UAIAkM,mBAAA,WACA,IAAAtoB,KAAA2R,UACA,KAAA,IAAAzL,OAAA,yJAEA,OAAAlG,MAAA2R,UAAA5B,OAAA,OACA/H,KAAA,QAAA,wBAIA0P,OAAA,SAAAA,EAAAtW,GAEApB,KAAAuoB,uBAGA7Q,EAAA1X,KAAAwoB,eAAApnB,EAGA,IAAAqX,GAAA7V,KAAA5C,KAAAmN,UACApJ,GAAA2T,EAAA,SAAAkB,EAAA9W,GACA8W,EAAAnY,QAAA,SAAAkY,GACAF,EAAA3W,IAAA6W,EAAA1M,QAAA,MAGAjM,KAAA2e,cAAAlG,GAGAzY,KAAAyoB,eAAA/Q,IAGAyP,qBAAA,WA2CA,QAAAuB,KACA,GAAAC,GAAA7oB,EAAA6oB,MAAAC,SAAAC,gBACA,OAAAF,GAAA,IAAAG,EAAAtb,MAAAmb,EAAA,IAAAG,EAAAxb,OAAAqb,EAAA,IAAAG,EAAAzb,KAAAsb,EAAA,IAAAG,EAAAvb,OAEA,QAAA8B,KACAyC,EAAA,aAAAiX,EAAAjpB,EAAA6oB,MAAA/Z,KAEA,QAAAoa,KACAlX,EAAA,YAAAiX,EAAAjpB,EAAA6oB,MAAA/Z,KAEA,QAAAqa,KACAnX,EAAA,cAGA,QAAAiX,GAAAG,GACA,GAAAxgB,GAAAwgB,EAAA,GACAvgB,EAAAugB,EAAA,GACAC,EAAAzgB,EAAA+P,EAAAjL,KACA4b,EAAAzgB,EAAA8P,EAAApL,GAaA,OAVA3E,GAAA+P,EAAAjL,KAAAiL,EAAAlQ,MACA4gB,EAAA1Q,EAAAlQ,MACAG,EAAA+P,EAAAjL,OACA2b,EAAA,GAEAxgB,EAAA8P,EAAApL,IAAAoL,EAAAhQ,OACA2gB,EAAA3Q,EAAAhQ,OACAE,EAAA8P,EAAApL,MACA+b,EAAA,IAGAzX,WAAAjJ,EAAAA,EAAAC,EAAAA,GACAzI,OAAAwI,EAAAygB,EAAAxgB,EAAAygB,IAIA,QAAAC,KACA,GAAAC,GAAA,WAAAte,QAAAA,OAAAue,QAAAX,SAAAC,gBAAAW,SAMA,OAJAV,GAAAlmB,KAAAgM,EAAA6a,yBACAX,EAAAzb,KAAAic,EACAR,EAAAvb,QAAA+b,EAEAR,EAnFA,GAIArQ,GAAAqQ,EAAAY,EAJA5X,EAAA9R,KAAA8R,QAAAtK,KAAAxH,MACA2e,EAAA3e,KAAA2e,cAAAnX,KAAAxH,MACA2R,EAAA3R,KAAA2R,WAAA3R,KAAA4O,KACAA,EAAA5O,KAAA4O,KAAA/D,MAGA8G,GAAAgJ,GAAA,aAAA,WAEAlC,EAAAkG,IACAmK,EAAAO,IAEAK,EAAAhB,EAAAI,GACAY,GACAra,MAEAsC,EAAAgJ,GAAA,YAAA,WAEAlC,GAAAqQ,IACArQ,EAAAkG,IACAmK,EAAAO,IAGA,IAAAM,GAAAjB,EAAAI,EACAY,IAAAC,EACAX,IACAU,EACAT,IACAU,GACAta,IAEAqa,EAAAC,IAEAhY,EAAAgJ,GAAA,aAAA,WACA+O,IACAA,GAAA,EACAT,QAqDA9O,OAAA,SAAAxU,EAAA1D,GACAA,EAAA0D,GAAAA,EACA1D,EAAA2M,KAAA5G,KAAA,UAAArC,GACA1D,EAAA0P,UAAA3R,KAEAkQ,GAAA3M,UAAA4W,OAAAzX,KAAA1C,KAAA2F,EAAA1D,GAEAA,GAAA8D,GAAA9D,EAAA6P,UACA7P,EAAA6P,QAAA,WAIAyI,OAAA,SAAA5U,EAAA1D,GACAA,EAAA2M,KAAAW,eAEAvP,MAAAoQ,UAAAzK,GAEA1D,GAAA8D,GAAA9D,EAAA6P,UACA7P,EAAA6P,QAAA,WAIA2W,eAAA,SAAA/Q,GACA1X,KAAAuoB,uBACAvoB,KAAA4pB,oBAAAlS,GACA1X,KAAA6pB,qBAOA3B,eAAA,WAGAloB,KAAA2R,WACA3R,KAAA2R,UACA3J,KAAA,QAAAhI,KAAAynB,kBAGAznB,KAAA4O,KACA5G,KAAA,UAAAhI,KAAAunB,WACAvf,KAAA,sBAAAhI,KAAAwnB,uBACAxf,KAAA,QAAAhI,KAAA4nB,aACA5f,KAAA,QAAAhI,KAAA0mB,aAAA,KAAA1mB,KAAAuI,SACAP,KAAA,SAAAhI,KAAA0mB,aAAA,KAAA1mB,KAAAyI,WAGAqf,aAAA,SAAArQ,EAAA9F,EAAAxO,GACAsU,EAAAA,MACA9F,EAAAA,KAGA,IAAAmY,GAAAznB,EAAA8B,EAAAwN,EAAA,MAAAxN,EAAAsT,EAAA,MAMA,OALAqS,GAAArpB,QAAA,SAAAspB,GACA5mB,EAAAoX,OAAAwP,EAAAhR,GAAApH,EAAAoY,MAIAtS,EAAA5W,IAAA,SAAA6E,GAGA,GAAAC,GAAAD,EAAAC,GACA1D,EAAA8W,GAAApH,EAAAhM,EAEA,IAAAD,YAAA5F,GAAAI,QAMA,MAJA+B,IACAkB,EAAAoX,OAAA5U,EAAA1D,GAEAkB,EAAAgX,OAAAxU,EAAAD,GACAA,CAIA,IAAAskB,GAAA/nB,KAAAA,YAAAkkB,MAAAlkB,EAAA2O,UAAAlL,EAAAkL,UAAA3O,EAAA2O,YAAAlL,EAAAkL,QAQA,IANA3O,IAAAA,EAAA9B,MAAAuF,EAAAvF,MAAA6pB,KAEA7mB,EAAAoX,OAAA5U,EAAA1D,GACAA,EAAA4L,QAGA5L,EAwBAA,EAAAyD,QAAAA,OAxBA,CACA,GAAAuK,GAAAnQ,EAAAI,MAAAwF,EAAAvF,KAEA,KAAA8P,EACA,KAAA,IAAA/J,OAAA,oCAAAR,EAAAvF,KAEA,IAAA8pB,IAAA7N,QAAAnM,EAAAmM,SAAA,GACAnc,GACAC,MAAA,mBACA8W,UAAA,uBACAkT,QAAA,sBACAja,EAAAoM,WAEA,KAAApc,EACA,KAAA,IAAAiG,OAAA,4BAAA+J,EAAAoM,WAAA,SAAA3W,EAAAvF,KAEA,IAAAyO,GAAAzL,EAAAlD,GAAAgqB,EAEAhoB,GAAA,GAAAgO,GAAArB,EAAAlJ,GACAzD,EAAA9B,KAAAuF,EAAAvF,KAEAgD,EAAAgX,OAAAxU,EAAA1D,GAMA,MAAAA,MAKAgmB,eAAA,SAAAviB,EAAAtE,GACA,MAAA0V,IAAApR,EAAAtE,KAGAmnB,qBAAA,WACA,GAAA3X,GAAA5Q,KAAA2e,eACA3e,MAAA4O,KAAAoE,UAAA,gBACAhL,KAAA,YAAAY,EAAAgI,EAAApD,KAAAoD,EAAAvD,MACArF,KAAA,QAAA4I,EAAArI,OACAP,KAAA,SAAA4I,EAAAnI,SAGAmhB,oBAAA,SAAAlS,GACA,GAAAe,GAAAzY,KAAA2e,gBACApW,EAAAvI,KAAAqnB,SACA5e,EAAAzI,KAAAsnB,SAEA9O,IAAAd,EAAAe,EAAAlQ,EAAAE,IAGAohB,kBAAA,WAIA,QAAAM,GAAA7pB,GACA,OACAA,MAAAA,EACA8pB,OAAAxF,SAAA9kB,EAAAwO,OAAAhO,GAAA0H,KAAA,iBAAA,GAGA,QAAAqiB,GAAA/nB,EAAAC,GACA,MAAAD,GAAA8nB,OAAA7nB,EAAA6nB,UAEA9nB,EAAA8nB,OAAA7nB,EAAA6nB,OACA,EAEA,EAEA,QAAAva,GAAAlC,GACA,MAAAA,GAAArN,MAlBA,GAAAgqB,GAAAtqB,KAAA4O,KAAAoE,UAAA,wCAAA,EAqBAsX,GAAAA,EAAAzpB,IAAAspB,GAAA3Z,KAAA6Z,GAAAxpB,IAAAgP,GAGAya,EAAA7pB,QAAA,SAAAH,GACAA,GAAAA,EAAA+N,YAAA/N,EAAA+N,WAAAkc,aACAjqB,EAAA+N,WAAAkc,YAAAjqB,MAIAkoB,eAAA,SAAApnB,GACA,MAAAgX,IAAApY,KAAA2X,aAAAvW,EAAApB,KAAAwS,MAAAhL,KAAAxH,SAmBAwZ,IAAA5W,OAAA9C,EAAAI,SACAgQ,KAAAA,GACAuQ,MAAAA,GACAxE,UAAAA,GACAkK,QAAAA,GACAc,QAAAA,GACArB,MAAAA,GACA5B,KAAAA,GACAiB,YAAAA,GACAF,eAAAA,GACAU,sBAAAA,GACAtH,OAAAA,GACAuF,YAAAA,GACAzD,KAAAA,GACAC,MAAAA,GACAI,KAAAA,GACAF,UAAAA,GACAlB,OAAAA,GACAY,YAAAA,GACAzB,UAAAA,IAGA,IAAAxe,IAAAC,EAAA0qB,SACAC,QAAA,UACAjR,MAAAA,GACAgB,QAAAA,GACAtK,KAAAA,GACAuQ,MAAAA,GACAxE,UAAAA,GACAkK,QAAAA,GACAc,QAAAA,GACAnO,QAAAA,GAEAjS,OAAAA,GAEA+e,MAAAA,GACAC,MAAAA,GACA7B,KAAAA,GACAc,KAAAA,GACAG,YAAAA,GACAO,YAAAA,GACAT,eAAAA,GACAC,eAAAA,GACAS,sBAAAA,GACAC,sBAAAA,GACAvH,OAAAA,GACAlB,OAAAA,GACAyG,YAAAA,GACAI,YAAAA,GAEA7D,KAAAA,GACAzM,KAAAA,GACA0M,MAAAA,GACApL,MAAAA,GACAwL,KAAAA,GACA1K,KAAAA,GACAwK,UAAAA,GACAnL,UAAAA,GACAiK,OAAAA,GACAW,OAAAA,GACAC,YAAAA,GACAC,YAAAA,GACA1B,UAAAA,GACA9H,UAAAA,GAGA,OAAA1W","file":"d3.compose-all.min.js","sourcesContent":["/*!\n * d3.compose - Compose complex, data-driven visualizations from reusable charts and components with d3\n * v0.15.20 - https://github.com/CSNW/d3.compose - license: MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3'), require('d3.chart')) :\n  typeof define === 'function' && define.amd ? define(['d3', 'd3.chart'], factory) :\n  global.d3c = factory(global.d3,global.d3_chart);\n}(this, function (d3,d3_chart) { 'use strict';\n\n  d3 = 'default' in d3 ? d3['default'] : d3;\n\n  /**\r\n    Mixin to create standard layer to make extending charts straightforward.\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\r\n      initialize: function() {\r\n        this.standardLayer('main', this.base.append('g'))\r\n        // dataBind, insert, events are defined on prototype\r\n      },\r\n\r\n      onDataBind: function(selection, data) {\r\n        // ...\r\n      },\r\n      onInsert: function(selection) {\r\n        // ...\r\n      },\r\n      onEnter: function(selection) {\r\n        // ...\r\n      },\r\n      onUpdateTransition: function(selection) {\r\n        // ...\r\n      },\r\n      // all d3.chart events are available: onMerge, onExit, ...\r\n    }));\r\n    ```\r\n    @class StandardLayer\r\n    @namespace mixins\r\n  */\r\n  var StandardLayer = {\r\n    /**\r\n      extension of `layer()` that uses standard methods on prototype for extensibility.\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\r\n        initialize: function() {\r\n          this.standardLayer('circles', this.base.append('g'));\r\n        }\r\n\r\n        // onDataBind, onInsert, etc. work with \"circles\" layer\r\n      }));\r\n      ```\r\n      @method standardLayer\r\n      @param {String} name\r\n      @param {d3.selection} selection\r\n    */\r\n    standardLayer: function standardLayer(name, selection) {\r\n      return createLayer(this, 'layer', name, selection);\r\n    },\r\n\r\n    /**\r\n      extension of `seriesLayer()` that uses standard methods on prototype for extensibility.\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\r\n        initialize: function() {\r\n          this.standardSeriesLayer('circles', this.base.append('g'));\r\n        },\r\n\r\n        // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\r\n      }));\r\n      ```\r\n      @method standardSeriesLayer\r\n      @param {String} name\r\n      @param {d3.selection} selection\r\n    */\r\n    standardSeriesLayer: function standardSeriesLayer(name, selection) {\r\n      return createLayer(this, 'series', name, selection);\r\n    },\r\n\r\n    /**\r\n      Called for standard layer's `dataBind`\r\n\r\n      @method onDataBind\r\n      @param {d3.selection} selection\r\n      @param {Any} data\r\n      @return {d3.selection}\r\n    */\r\n    onDataBind: function onDataBind(/* selection, data */) {},\r\n\r\n    /**\r\n      Called for standard layer's `insert`\r\n\r\n      @method onInsert\r\n      @param {d3.selection} selection\r\n      @return {d3.selection}\r\n    */\r\n    onInsert: function onInsert(/* selection */) {},\r\n\r\n    /**\r\n      Call for standard layer's `events['enter']`\r\n\r\n      @method onEnter\r\n      @param {d3.selection} selection\r\n    */\r\n    onEnter: function onEnter(/* selection */) {},\r\n\r\n    /**\r\n      Call for standard layer's `events['enter:transition']`\r\n\r\n      @method onEnterTransition\r\n      @param {d3.selection} selection\r\n    */\r\n    // onEnterTransition: function onEnterTransition(selection) {},\r\n\r\n    /**\r\n      Call for standard layer's `events['update']`\r\n\r\n      @method onUpdate\r\n      @param {d3.selection} selection\r\n    */\r\n    onUpdate: function onUpdate(/* selection */) {},\r\n\r\n    /**\r\n      Call for standard layer's `events['update']`\r\n\r\n      @method onUpdateTransition\r\n      @param {d3.selection} selection\r\n    */\r\n    // onUpdateTransition: function onUpdateTransition(selection) {},\r\n\r\n    /**\r\n      Call for standard layer's `events['merge']`\r\n\r\n      @method onMerge\r\n      @param {d3.selection} selection\r\n    */\r\n    onMerge: function onMerge(/* selection */) {},\r\n\r\n    /**\r\n      Call for standard layer's `events['merge:transition']`\r\n\r\n      @method onMergeTransition\r\n      @param {d3.selection} selection\r\n    */\r\n    // onMergeTransition: function onMergeTransition(selection) {},\r\n\r\n    /**\r\n      Call for standard layer's `events['exit']`\r\n\r\n      @method onExit\r\n      @param {d3.selection} selection\r\n    */\r\n    onExit: function onExit(/* selection */) {}\r\n\r\n    /**\r\n      Call for standard layer's `events['exit:transition']`\r\n\r\n      @method onExitTransition\r\n      @param {d3.selection} selection\r\n    */\r\n    // onExitTransition: function onExitTransition(selection) {},\r\n  };\r\n\r\n  function createLayer(chart, type, name, selection) {\r\n    var layer = {\r\n      layer: 'layer',\r\n      series: 'seriesLayer'\r\n    }[type];\r\n\r\n    if (layer && chart[layer]) {\r\n      var events = {};\r\n      [\r\n        'enter',\r\n        'enter:transition',\r\n        'update',\r\n        'update:transition',\r\n        'merge',\r\n        'merge:transition',\r\n        'exit',\r\n        'exit:transition'\r\n      ].forEach(function(event) {\r\n        var method = 'on' + event.split(':').map(function capitalize(str) {\r\n          return str.charAt(0).toUpperCase() + str.slice(1);\r\n        }).join('');\r\n\r\n        // Only create events if chart method exists as empty transition events can cause unforeseen issues\r\n        if (chart[method]) {\r\n          events[event] = function() {\r\n            this.chart()[method](this);\r\n          };\r\n        }\r\n      });\r\n\r\n      return chart[layer](name, selection, {\r\n        dataBind: function(data) {\r\n          return this.chart().onDataBind(this, data);\r\n        },\r\n        insert: function() {\r\n          return this.chart().onInsert(this);\r\n        },\r\n        events: events\r\n      });\r\n    }\r\n  }\n\n  // Many utils inlined from Underscore.js\r\n  // 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n\r\n  var slice = Array.prototype.slice;\r\n  var toString = Object.prototype.toString;\r\n\r\n  function _extend(target, extensions, undefined_only) {\r\n    for (var i = 0, length = extensions.length; i < length; i++) {\r\n      for (var key in extensions[i]) {\r\n        if (!undefined_only || target[key] === void 0)\r\n          target[key] = extensions[i][key];\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  function contains(arr, item) {\r\n    return arr.indexOf(item) >= 0;\r\n  }\r\n\r\n  function compact(arr) {\r\n    return arr.filter(function(item) {\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function difference(a, b) {\r\n    return a.filter(function(value) {\r\n      return b.indexOf(value) < 0;\r\n    });\r\n  }\r\n\r\n  function defaults(target) {\r\n    return _extend(target, slice.call(arguments, 1), true);\r\n  }\r\n\r\n  function extend(target) {\r\n    return _extend(target, slice.call(arguments, 1));\r\n  }\r\n\r\n  function flatten(arr) {\r\n    // Assumes all items in arr are arrays and only flattens one level\r\n    return arr.reduce(function(memo, item) {\r\n      return memo.concat(item);\r\n    }, []);\r\n  }\r\n\r\n  function find(arr, fn, context) {\r\n    if (!arr) return;\r\n    for (var i = 0, length = arr.length; i < length; i++) {\r\n      if (fn.call(context, arr[i], i, arr))\r\n        return arr[i];\r\n    }\r\n  }\r\n\r\n  function first(arr, n) {\r\n    if (arr == null) return void 0;\r\n    if (n == null) return arr[0];\r\n    return Array.prototype.slice.call(arr, 0, n);\r\n  }\r\n\r\n  function isBoolean(obj) {\r\n    return obj === true || obj === false;\r\n  }\r\n  function isObject(obj) {\r\n    var type = typeof obj;\r\n    return type === 'function' || type === 'object' && !!obj;\r\n  }\r\n  function isNumber(obj) {\r\n    return toString.call(obj) === '[object Number]';\r\n  }\r\n  function isString(obj) {\r\n    return toString.call(obj) === '[object String]';\r\n  }\r\n  function isUndefined(obj) {\r\n    return obj === void 0;\r\n  }\r\n\r\n  var isFunction = function(obj) {\r\n    return toString.call(obj) === '[object Function]';\r\n  };\r\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\r\n    isFunction = function(obj) {\r\n      return typeof obj == 'function' || false;\r\n    };\r\n  }\r\n\r\n  function objectEach(obj, fn, context) {\r\n    if (!obj) return;\r\n    var keys = Object.keys(obj);\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      fn.call(context, obj[keys[i]], keys[i], obj);\r\n    }\r\n  }\r\n\r\n  function objectFind(obj, fn, context) {\r\n    if (!obj) return;\r\n    var keys = Object.keys(obj);\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      if (fn.call(context, obj[keys[i]], keys[i], obj))\r\n        return obj[keys[i]];\r\n    }\r\n  }\r\n\r\n  function pluck(objs, key) {\r\n    if (!objs) return [];\r\n    return objs.map(function(obj) {\r\n      return obj[key];\r\n    });\r\n  }\r\n\r\n  function uniq(arr) {\r\n    var result = [];\r\n    for (var i = 0, length = arr.length; i < length; i++) {\r\n      if (result.indexOf(arr[i]) < 0)\r\n        result.push(arr[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function inherits(Child, Parent) {\r\n    Child.prototype = Object.create(Parent.prototype, {\r\n      constructor: {\r\n        value: Child,\r\n        enumerable: false,\r\n        writeable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n\r\n    if (Object.setPrototypeOf) {\r\n      Object.setPrototypeOf(Child, Parent);\r\n    }\r\n    else {\r\n      Child.__proto__ = Parent; //eslint-disable-line no-proto\r\n\r\n      // __proto__ isn't supported in IE,\r\n      // use one-time copy of static properties to approximate\r\n      defaults(Child, Parent);\r\n    }\r\n  }\r\n\r\n  // If value isn't `undefined`, return `value`, otherwise use `default_value`\r\n  //\r\n  // @method valueOrDefault\r\n  // @param {Any} [value]\r\n  // @param {Any} default_value\r\n  // @return {Any}\r\n  function valueOrDefault(value, default_value) {\r\n    return !isUndefined(value) ? value : default_value;\r\n  }\r\n\r\n  function deprecate(message, version) {\r\n    if (typeof console != 'undefined' && console.warn)\r\n      console.warn('DEPRECATED (will be removed in ' + version + ') - ' + message);\r\n  }\r\n\r\n  var utils = {\r\n    slice: slice,\r\n    toString: toString,\r\n    contains: contains,\r\n    compact: compact,\r\n    difference: difference,\r\n    defaults: defaults,\r\n    extend: extend,\r\n    flatten: flatten,\r\n    find: find,\r\n    first: first,\r\n    isBoolean: isBoolean,\r\n    isFunction: isFunction,\r\n    isObject: isObject,\r\n    isNumber: isNumber,\r\n    isString: isString,\r\n    isUndefined: isUndefined,\r\n    objectEach: objectEach,\r\n    objectFind: objectFind,\r\n    pluck: pluck,\r\n    uniq: uniq,\r\n    inherits: inherits,\r\n    valueOrDefault: valueOrDefault\r\n  };\n\n  var unique_index = 0;\r\n\r\n  /**\r\n    Helper for creating properties for charts/components\r\n\r\n    @example\r\n    ```javascript\r\n    var Custom = d3.chart('Chart').extend('Custom', {\r\n      // Create property that's stored internally as 'simple'\r\n      simple: property()\r\n    });\r\n    var custom; // = new Custom(...);\r\n\r\n    // set\r\n    custom.simple('Howdy');\r\n\r\n    // get\r\n    console.log(custom.simple()); // -> 'Howdy'\r\n\r\n    // Advanced\r\n    // --------\r\n    // Default values:\r\n    Custom.prototype.message = property({\r\n      default_value: 'Howdy!'\r\n    });\r\n\r\n    console.log(custom.message()); // -> 'Howdy!'\r\n    custom.message('Goodbye');\r\n    console.log(custom.message()); // -> 'Goodbye'\r\n\r\n    // Set to undefined to reset to default value\r\n    custom.message(undefined);\r\n    console.log(custom.message()); // -> 'Howdy!'\r\n\r\n    // Computed default value:\r\n    Custom.property.computed = property({\r\n      default_value: function() {\r\n        // \"this\" = Custom instance\r\n        return this.message();\r\n      }\r\n    });\r\n\r\n    // Function default value:\r\n    // For function default_values, wrap in function to differentiate from computed\r\n    Custom.property.fn = property({\r\n      default_value: function() {\r\n        return function defaultFn() {};\r\n      }\r\n      // The following would be incorrectly evaluated\r\n      // default_value: function defaultFn() {}\r\n    })\r\n\r\n    // Custom getter:\r\n    Custom.prototype.exclaimed = property({\r\n      get: function(value) {\r\n        // Value is the underlying set value\r\n        return value + '!';\r\n      }\r\n    });\r\n\r\n    custom.exclaimed('Howdy');\r\n    console.log(custom.exclaimed()); // -> 'Howdy!'\r\n\r\n    // Custom setter:\r\n    Custom.prototype.feeling = property({\r\n      set: function(value, previous) {\r\n        if (value == 'Hate') {\r\n          // To override value, return Object with override specified\r\n          return {\r\n            override: 'Love',\r\n\r\n            // To do something after override, use after callback\r\n            after: function() {\r\n              console.log('After: ' + this.feeling()); // -> 'After: Love'\r\n            }\r\n          };\r\n        }\r\n      }\r\n\r\n      custom.feeling('Hate'); // -> 'After: Love'\r\n      console.log(custom.feeling()); // -> 'Love'\r\n    });\r\n    ```\r\n    @method property\r\n    @for helpers\r\n    @param {Object} [options]\r\n    @param {Any} [options.default_value] default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.\r\n    @param {Function} [options.get] `function(value) {return ...}` getter, where `value` is the stored value and return desired value\r\n    @param {Function} [options.set] `function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set\r\n    @param {Object} [options.context=this] context to evaluate get/set/after functions\r\n    @return {Function} `()`: get, `(value)`: set\r\n  */\r\n  function property(options) {\r\n    // DEPRECATED: name as first argument\r\n    if (arguments.length == 2) {\r\n      deprecate('\"name\" as the first argument for property is no longer required/supported and will be removed in the next version of d3.compose.', 'v0.17.0');\r\n      options = arguments[1];\r\n    }\r\n\r\n    options = options || {};\r\n    var id = 'property_' + unique_index++;\r\n\r\n    var property = function(value) {//eslint-disable-line no-shadow\r\n      var properties = this.__properties = this.__properties || {};\r\n      var context = valueOrDefault(property.context, this);\r\n\r\n      if (arguments.length)\r\n        return set.call(this);\r\n      else\r\n        return get.call(this);\r\n\r\n      function get() {\r\n        value = properties[id];\r\n\r\n        if (isUndefined(value)) {\r\n          // Use default value and unwrap if it's a function\r\n          value = property.default_value;\r\n          if (isFunction(value))\r\n            value = value.call(context);\r\n        }\r\n\r\n        return isFunction(options.get) ? options.get.call(context, value) : value;\r\n      }\r\n\r\n      function set() {\r\n        // Validate\r\n        if (isFunction(options.validate) && !isUndefined(value) && !options.validate.call(context, value))\r\n          throw new Error('Invalid value for property: ' + JSON.stringify(value));\r\n\r\n        var previous = properties[id];\r\n        properties[id] = value;\r\n\r\n        if (isFunction(options.set) && !isUndefined(value)) {\r\n          var response = options.set.call(context, value, previous);\r\n\r\n          if (response && 'override' in response)\r\n            properties[id] = response.override;\r\n          if (response && isFunction(response.after))\r\n            response.after.call(context, properties[id]);\r\n        }\r\n\r\n        return this;\r\n      }\r\n    };\r\n\r\n    // For checking if function is a property\r\n    property.is_property = true;\r\n    property.id = id;\r\n    property.set_from_options = valueOrDefault(options.set_from_options, true);\r\n    property.default_value = options.default_value;\r\n    property.context = options.context;\r\n    property.options = options;\r\n\r\n    return property;\r\n  }\n\n  /**\r\n    Combine mixins with Parent super class for extension\r\n\r\n    @example\r\n    ```js\r\n    var a = {transform: function() {}, a: 1};\r\n    var b = {initialize: function() {}, b: 2};\r\n    var c = {c: 3};\r\n\r\n    var Custom = mixin(Chart, a, b, c).extend({\r\n      initialize: function(options) {\r\n        this._super.initialize.call(this, options);\r\n        // d\r\n      },\r\n      transform: function(data) {\r\n        data = this._super.transform.call(this, data);\r\n        // d\r\n      }\r\n    });\r\n\r\n    // initialize: Chart, b, d\r\n    // transform: Chart, a, d\r\n    ```\r\n    @method mixin\r\n    @for helpers\r\n    @param {Function} Parent\r\n    @param {...Object} ...mixins\r\n    @return {Function}\r\n  */\r\n  function mixin(Parent/*, ...mixins*/) {\r\n    var mixins = slice.call(arguments, 1);\r\n    var initializes = [];\r\n    var transforms = [];\r\n    var mixed = {};\r\n\r\n    mixins.forEach(function(mix) {\r\n      objectEach(mix, function(value, key) {\r\n        if (key == 'initialize')\r\n          initializes.push(value);\r\n        else if (key == 'transform')\r\n          transforms.push(value);\r\n        else\r\n          mixed[key] = value;\r\n      });\r\n    });\r\n\r\n    if (initializes.length) {\r\n      mixed.initialize = function initialize() {\r\n        var args = slice.call(arguments);\r\n        Parent.prototype.initialize.apply(this, args);\r\n        initializes.forEach(function(init) {\r\n          init.apply(this, args);\r\n        }, this);\r\n      };\r\n    }\r\n\r\n    if (transforms.length) {\r\n      mixed.transform = function transform(data) {\r\n        data = Parent.prototype.transform.call(this, data);\r\n        return transforms.reduce(function(memo, trans) {\r\n          return trans.call(this, memo);\r\n        }.bind(this), data);\r\n      };\r\n    }\r\n\r\n    return Parent.extend(mixed);\r\n  }\n\n  /**\r\n    Stack given array of elements vertically or horizontally\r\n\r\n    @example\r\n    ```js\r\n    // Stack all text elements vertically, from the top, with 0px padding\r\n    d3.selectAll('text').call(helpers.stack())\r\n\r\n    // Stack all text elements horizontally, from the right, with 5px padding\r\n    d3.selectAll('text').call(helpers.stack({\r\n      direction: 'horizontal',\r\n      origin: 'right',\r\n      padding: 5\r\n    }));\r\n    ```\r\n    @method stack\r\n    @for helpers\r\n    @param {Object} [options]\r\n    @param {String} [options.direction=vertical] `\"vertical\"` or `\"horizontal\"`\r\n    @param {String} [options.origin] `\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)\r\n    @param {Number} [options.padding=0] padding (in px) between elements\r\n    @param {Number} [options.min_height=0] minimum spacing height (for vertical stacking)\r\n    @param {Number} [options.min_width=0]  minimum spacing width (for horizontal stacking)\r\n    @return {Function}\r\n  */\r\n  function stack(options) {\r\n    options = extend({\r\n      direction: 'vertical',\r\n      origin: 'top',\r\n      padding: 0,\r\n      min_height: 0,\r\n      min_width: 0\r\n    }, options);\r\n\r\n    // Ensure valid origin based on direction\r\n    if (options.direction == 'horizontal' && !(options.origin == 'left' || options.origin == 'right'))\r\n      options.origin = 'left';\r\n    else if (options.direction == 'vertical' && !(options.origin == 'top' || options.origin == 'bottom'))\r\n      options.origin = 'top';\r\n\r\n    function padding(i) {\r\n      return i > 0 && options.padding ? options.padding : 0;\r\n    }\r\n\r\n    return function(elements) {\r\n      if (elements && elements.attr) {\r\n        var previous = 0;\r\n\r\n        elements.attr('transform', function(d, i) {\r\n          var element_dimensions = this.getBBox();\r\n          var spacing_width = d3.max([element_dimensions.width, options.min_width]);\r\n          var spacing_height = d3.max([element_dimensions.height, options.min_height]);\r\n          var x = 0;\r\n          var y = 0;\r\n          var next_position;\r\n\r\n          if (options.direction == 'horizontal') {\r\n            next_position = previous + spacing_width + padding(i);\r\n\r\n            if (options.origin == 'left')\r\n              x = previous + padding(i);\r\n            else\r\n              x = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n          else {\r\n            next_position = previous + spacing_height + padding(i);\r\n\r\n            if (options.origin == 'top')\r\n              y = previous + padding(i);\r\n            else\r\n              y = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n\r\n          return translate(x, y);\r\n        });\r\n      }\r\n    };\r\n  }\n\n  /**\r\n    Create scale from options\r\n\r\n    @example\r\n    ```javascript\r\n    // Simple type, range, and domain\r\n    var scale = createScale({\r\n      type: 'linear',\r\n      domain: [0, 100],\r\n      range: [0, 500]\r\n    });\r\n\r\n    // Calculate domain for data\r\n    var scale = createScale({\r\n      type: 'log',\r\n      data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\r\n      key: 'y'\r\n    });\r\n\r\n    // Scale is passed through\r\n    var original = d3.scale.linear();\r\n    var scale = createScale(original);\r\n    scale === original;\r\n\r\n    // Set other properties by passing in \"arguments\" array\r\n    var scale = createScale({\r\n      type: 'ordinal',\r\n      domain: ['a', 'b', 'c', 'd', 'e'],\r\n      rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\r\n    });\r\n\r\n    // Use ordinal + adjacent for bar charts\r\n    var scale = createScale({\r\n      type: 'ordinal',\r\n      adjacent: true,\r\n      domain: ['a', 'b', 'c'],\r\n      series: 2 // Series count is required for adjacent if data isn't given\r\n    })\r\n    ```\r\n    @method createScale\r\n    @for helpers\r\n    @param {Object|Function} options (passing in `Function` returns original function with no changes)\r\n    @param {String} [options.type='linear'] Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`\r\n    @param {Array} [options.domain] Domain for scale\r\n    @param {Array} [options.range] Range for scale\r\n    @param {Any} [options.data] Used to dynamically set domain (with given value or key)\r\n    @param {Function} [options.value] \"di\"-function for getting value for data\r\n    @param {String} [options.key] Data key to extract value\r\n    @param {Boolean} [options.centered] For \"ordinal\" scales, use centered x-values\r\n    @param {Boolean} [options.adjacent] For \"ordinal\" + centered, set x-values for different series next to each other\r\n\r\n    - Requires series-index as second argument to scale, otherwise centered x-value is used\r\n    - Requires \"data\" or \"series\" options to determine number of series\r\n    @param {Number} [options.series] Used with \"adjacent\" if no \"data\" is given to set series count\r\n    @param {Number} [options.padding=0.1] For \"ordinal\" scales, set padding between different x-values\r\n    @param {Array...} [options....] Set any other scale properties with array of arguments to pass to property\r\n    @return {d3.Scale}\r\n  */\r\n  function createScale(options) {\r\n    options = options || {};\r\n\r\n    // If function, scale was passed in as options\r\n    if (isFunction(options))\r\n      return options;\r\n\r\n    // Create scale (using d3.time.scale() if type is 'time')\r\n    var scale;\r\n    if (options.type == 'time')\r\n      scale = d3.time.scale();\r\n    else if (d3.scale[options.type])\r\n      scale = d3.scale[options.type]();\r\n    else\r\n      scale = d3.scale.linear();\r\n\r\n    objectEach(options, function(value, key) {\r\n      if (scale[key]) {\r\n        // If option is standard property (domain or range), pass in directly\r\n        // otherwise, pass in as arguments\r\n        // (don't pass through internal options)\r\n        if (key == 'range' || key == 'domain')\r\n          scale[key](value);\r\n        else if (!contains(['type', 'data', 'value', 'key', 'centered', 'adjacent', 'series', 'padding'], key))\r\n          scale[key].apply(scale, value);\r\n      }\r\n    });\r\n\r\n    if (!options.domain && options.data && (options.key || options.value))\r\n      scale = setDomain(scale, options);\r\n\r\n    // Add centered and adjacent extensions to ordinal\r\n    // (centered by default for ordinal)\r\n    var centered = options.centered || (options.type == 'ordinal' && options.centered == null);\r\n    if (options.type == 'ordinal' && (centered || options.adjacent))\r\n      scale = addCentered(scale, options);\r\n\r\n    // Add padding extension to ordinal\r\n    if (options.type == 'ordinal' && (options.padding != null || centered || options.adjacent))\r\n      scale = addPadding(scale, options);\r\n\r\n    return scale;\r\n  }\r\n\r\n  function setDomain(scale, options) {\r\n    // Use value \"di\" or create for key\r\n    var getValue = options.value || function(d) {\r\n      return d[options.key];\r\n    };\r\n\r\n    // Enforce series data\r\n    var data = options.data;\r\n    if (!isSeriesData(data))\r\n      data = [{values: data}];\r\n\r\n    var domain;\r\n    if (options.type == 'ordinal') {\r\n      // Domain for ordinal is array of unique values\r\n      domain = uniq(flatten(data.map(function(series) {\r\n        if (series && series.values)\r\n          return series.values.map(getValue);\r\n      })));\r\n    }\r\n    else {\r\n      var min_value = min(data, getValue);\r\n\r\n      domain = [\r\n        min_value < 0 ? min_value : 0,\r\n        max(data, getValue)\r\n      ];\r\n    }\r\n\r\n    scale.domain(domain);\r\n    return scale;\r\n  }\r\n\r\n  function addCentered(original, options) {\r\n    // Get series count for adjacent\r\n    var series_count = options.series || (!isSeriesData(options.data) ? 1 : options.data.length);\r\n\r\n    // TODO Look into removing closure\r\n    var scale = (function(original, options, series_count) {//eslint-disable-line no-shadow\r\n      var context = function(value, series_index) {\r\n        var width = context.width();\r\n\r\n        if (!options.adjacent)\r\n          series_index = 0;\r\n\r\n        return original(value) + (0.5 * width) + (width * (series_index || 0));\r\n      };\r\n      extend(context, original, {\r\n        width: function() {\r\n          var range_band = context.rangeBand && context.rangeBand();\r\n          var width = isFinite(range_band) ? range_band : 0;\r\n\r\n          if (options.adjacent)\r\n            width = width / series_count;\r\n\r\n          return width;\r\n        }\r\n      });\r\n\r\n      // TODO test copy() behavior\r\n\r\n      return context;\r\n    })(original, options, series_count);\r\n\r\n    return scale;\r\n  }\r\n\r\n  function addPadding(scale, options) {\r\n    var padding = options.padding != null ? options.padding : 0.1;\r\n\r\n    var original_range = scale.range;\r\n    scale.range = function(range) {\r\n      if (!arguments.length) return original_range();\r\n\r\n      scale.rangeBands(\r\n        range,\r\n        padding,\r\n        padding / 2\r\n      );\r\n    };\r\n\r\n    if (options.range)\r\n      scale.range(options.range);\r\n\r\n    // TODO test copy() behavior\r\n    return scale;\r\n  }\n\n  /**\r\n    Helper for robustly determining width/height of given selector.\r\n    Checks dimensions from css, attributes, and bounding box.\r\n\r\n    @method dimensions\r\n    @for helpers\r\n    @param {d3.Selection} selection\r\n    @return {Object} `{width, height}`\r\n  */\r\n  function dimensions(selection) {\r\n    // 1. Get width/height set via css (only valid for svg and some other elements)\r\n    var client = clientDimensions(selection);\r\n\r\n    if (client.width && client.height)\r\n      return client;\r\n\r\n    // 2. Get width/height set via attribute\r\n    var attr = attrDimensions(selection);\r\n\r\n    if (isSVG(selection)) {\r\n      return {\r\n        width: client.width != null ? client.width : attr.width || 0,\r\n        height: client.height != null ? client.height : attr.height || 0\r\n      };\r\n    }\r\n    else {\r\n      var bbox = bboxDimensions(selection);\r\n\r\n      // Size set by css -> client (only valid for svg and some other elements)\r\n      // Size set by svg -> attr override or bounding_box\r\n      // -> Take maximum\r\n      return {\r\n        width: d3.max([client.width, attr.width || bbox.width]) || 0,\r\n        height: d3.max([client.height, attr.height || bbox.height]) || 0\r\n      };\r\n    }\r\n  }\r\n\r\n  function clientDimensions(selection) {\r\n    var element = selection.node();\r\n    var width = element && element.clientWidth;\r\n    var height = element && element.clientHeight;\r\n\r\n    // Issue: Firefox does not correctly calculate clientWidth/clientHeight for svg\r\n    //        calculate from css\r\n    //        http://stackoverflow.com/questions/13122790/how-to-get-svg-element-dimensions-in-firefox\r\n    //        Note: This makes assumptions about the box model in use and that width/height are not percent values\r\n    if (isSVG(selection) && (!element.clientWidth || !element.clientHeight) && typeof window !== 'undefined' && window.getComputedStyle) {\r\n      var styles = window.getComputedStyle(element);\r\n      height = parseFloat(styles.height) - parseFloat(styles.borderTopWidth) - parseFloat(styles.borderBottomWidth);\r\n      width = parseFloat(styles.width) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\r\n    }\r\n\r\n    return {\r\n      width: width && !isNaN(width) ? width : null,\r\n      height: height && !isNaN(height) ? height : null\r\n    };\r\n  }\r\n\r\n  function attrDimensions(selection) {\r\n    return {\r\n      width: selection && selection.attr && parseFloat(selection.attr('width')),\r\n      height: selection && selection.attr && parseFloat(selection.attr('height'))\r\n    };\r\n  }\r\n\r\n  function bboxDimensions(selection) {\r\n    var element = selection.node();\r\n    var bbox;\r\n    try {\r\n      bbox = element && typeof element.getBBox == 'function' && element.getBBox();\r\n    }\r\n    catch(ex) {\r\n      // Firefox throws error when calling getBBox when svg hasn't been displayed\r\n      // Ignore error and set to empty\r\n      bbox = {width: 0, height: 0};\r\n    }\r\n\r\n    return bbox;\r\n  }\r\n\r\n  function isSVG(selection) {\r\n    return selection.node().nodeName == 'svg';\r\n  }\n\n  /**\r\n    Translate by (x, y) distance\r\n\r\n    @example\r\n    ```javascript\r\n    translate(10, 15) == 'translate(10, 15)'\r\n    translate({x: 10, y: 15}) == 'translate(10, 15)'\r\n    ```\r\n    @method translate\r\n    @param {Number|Object} [x] value or `{x, y}`\r\n    @param {Number} [y]\r\n    @return {String}\r\n  */\r\n  function translate(x, y) {\r\n    if (isObject(x)) {\r\n      y = x.y;\r\n      x = x.x;\r\n    }\r\n\r\n    return 'translate(' + (x || 0) + ', ' + (y || 0) + ')';\r\n  }\r\n\r\n  /**\r\n    Rotate by degrees, with optional center\r\n\r\n    @method rotate\r\n    @param {Number} degrees\r\n    @param {Object} [center = {x: 0, y: 0}]\r\n    @return {String}\r\n  */\r\n  function rotate(degrees, center) {\r\n    var rotation = 'rotate(' + (degrees || 0);\r\n    if (center)\r\n      rotation += ' ' + (center.x || 0) + ',' + (center.y || 0);\r\n    rotation += ')';\r\n\r\n    return rotation;\r\n  }\r\n\r\n  /**\r\n    Find vertical offset to vertically align text\r\n    (needed due to lack of `alignment-baseline` support in Firefox)\r\n\r\n    @example\r\n    ```js\r\n    var label = d3.select('text');\r\n\r\n    // Place label vertically so that origin is top-left\r\n    var offset = alignText(label);\r\n    label.attr('transform', translate(0, offset));\r\n\r\n    // Center label for line-height of 20px\r\n    var offset = alignText(label, 20);\r\n    label.attr('transform', translate(0, offset));\r\n    ```\r\n    @method alignText\r\n    @param {element} element\r\n    @param {Number} [line_height]\r\n    @return {Number} offset\r\n  */\r\n  function alignText(element, line_height) {\r\n    var offset = 0;\r\n    try {\r\n      var height = element.getBBox().height;\r\n\r\n      var element_style = window.getComputedStyle(element);\r\n      var css_font_size = parseFloat(element_style['font-size']);\r\n      var css_line_height = parseFloat(element_style['line-height']);\r\n\r\n      // If line-height: normal, use estimate 1.14em\r\n      // (actual line-height depends on browser and font)\r\n      if (isNaN(css_line_height))\r\n        css_line_height = 1.15 * css_font_size;\r\n\r\n      var css_adjustment = -(css_line_height - css_font_size) / 2;\r\n\r\n      // Add additional line-height, if specified\r\n      var height_adjustment = 0;\r\n      if (line_height && line_height > 0)\r\n        height_adjustment = (line_height - height) / 2;\r\n\r\n      offset = height + (css_adjustment || 0) + (height_adjustment || 0);\r\n    }\r\n    catch (ex) {\r\n      // Errors can occur from getBBox and getComputedStyle\r\n      // No useful information for offset, do nothing\r\n    }\r\n\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n    Determine if given data is likely series data\r\n\r\n    @method isSeriesData\r\n    @param {Array} data\r\n    @return {Boolean}\r\n  */\r\n  function isSeriesData(data) {\r\n    var first_item = first(data);\r\n    return first_item && isObject(first_item) && Array.isArray(first_item.values);\r\n  }\r\n\r\n  /**\r\n    Get max for array/series by value di\r\n\r\n    @example\r\n    ```js\r\n    var data = [\r\n      {values: [{y: 1}, {y: 2}, {y: 3}]},\r\n      {values: [{y: 4}, {y: 2}, {y: 0}]}\r\n    ];\r\n    max(data, function(d, i) { return d.y; }); // -> 4\r\n    ```\r\n    @method max\r\n    @param {Array} data\r\n    @param {Function} getValue di function that returns value for given (d, i)\r\n    @return {Number}\r\n  */\r\n  function max(data, getValue) {\r\n    var getMax = function(series_data) {\r\n      return series_data && d3.extent(series_data, getValue)[1];\r\n    };\r\n\r\n    if (isSeriesData(data)) {\r\n      return data.reduce(function(memo, series) {\r\n        if (series && Array.isArray(series.values)) {\r\n          var series_max = getMax(series.values);\r\n          return series_max > memo ? series_max : memo;\r\n        }\r\n        else {\r\n          return memo;\r\n        }\r\n      }, -Infinity);\r\n    }\r\n    else {\r\n      return getMax(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n    Get min for array/series by value di\r\n\r\n    @example\r\n    ```js\r\n    var data = [\r\n      {values: [{x: 1}, {x: 2}, {x: 3}]},\r\n      {values: [{x: 4}, {x: 2}, {x: 0}]}\r\n    ];\r\n    min(data, function(d, i) { return d.x; }); // -> 0\r\n    ```\r\n    @method min\r\n    @param {Array} data\r\n    @param {Function} getValue di function that returns value for given (d, i)\r\n    @return {Number}\r\n  */\r\n  function min(data, getValue) {\r\n    var getMin = function(series_data) {\r\n      return series_data && d3.extent(series_data, getValue)[0];\r\n    };\r\n\r\n    if (isSeriesData(data)) {\r\n      return data.reduce(function(memo, series) {\r\n        if (series && Array.isArray(series.values)) {\r\n          var series_min = getMin(series.values);\r\n          return series_min < memo ? series_min : memo;\r\n        }\r\n        else {\r\n          return memo;\r\n        }\r\n      }, Infinity);\r\n    }\r\n    else {\r\n      return getMin(data);\r\n    }\r\n  }\r\n\r\n  // TODO Look into converting to d3's internal style handling\r\n  // Convert key,values to style string\r\n  //\r\n  // @example\r\n  // ```js\r\n  // style({color: 'red', display: 'block'}) -> color: red; display: block;\r\n  // ```\r\n  // @method style\r\n  // @param {Object} styles\r\n  // @return {String}\r\n  function style(styles) {\r\n    if (!styles)\r\n      return '';\r\n\r\n    var keyValues = [];\r\n    objectEach(styles, function(value, key) {\r\n      keyValues.push(key + ': ' + value);\r\n    });\r\n    styles = keyValues.join('; ');\r\n\r\n    return styles ? styles + ';' : '';\r\n  }\r\n\r\n  /**\r\n    Get formatted margins for varying input\r\n\r\n    @method getMargins\r\n    @example\r\n    ```js\r\n    getMargins(4);\r\n    // -> {top: 4, right: 4, bottom: 4, left: 4}\r\n\r\n    getMargins({top: 20}, {top: 8, bottom: 8});\r\n    // -> {top: 20, right: 0, bottom: 8, left: 0}\r\n    ```\r\n    @param {Number|Object} margins\r\n    @param {Object} default_margins\r\n    @return {Object}\r\n  */\r\n  function getMargins(margins, default_margins) {\r\n    if (isNumber(margins))\r\n      return {top: margins, right: margins, bottom: margins, left: margins};\r\n    else\r\n      return defaults({}, margins, default_margins, {top: 0, right: 0, bottom: 0, left: 0});\r\n  }\r\n\r\n  /**\r\n    Create wrapped `(d, i)` function that adds chart instance as first argument.\r\n    Wrapped function uses standard d3 arguments and context.\r\n\r\n    Note: in order to pass proper context to di-functions called within di-function\r\n    use `.call(this, d, i)` (where \"this\" is d3 context)\r\n\r\n    @example\r\n    ```javascript\r\n    d3.chart('Base').extend('Custom', {\r\n      initialize: function() {\r\n        this.base.select('point')\r\n          .attr('cx', this.x);\r\n        // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\r\n      },\r\n\r\n      x: di(function(chart, d, i) {\r\n        // \"this\" is standard d3 context: node\r\n        return chart.xScale()(chart.xValue.call(this, d, i));\r\n      })\r\n\r\n      // xScale, xValue...\r\n    });\r\n    ```\r\n    @method di\r\n    @param {Function} callback with `(chart, d, i)` arguments\r\n    @return {Function}\r\n  */\r\n  function di(callback) {\r\n    // Create intermediate wrapping in case it's called without binding\r\n    var wrapped = function wrapped(d, i, j) {\r\n      return callback.call(this, undefined, d, i, j);\r\n    };\r\n    wrapped._is_di = true;\r\n    wrapped.original = callback;\r\n\r\n    return wrapped;\r\n  }\r\n\r\n  function bindDi(diFn, chart) {\r\n    return function wrapped(d, i, j) {\r\n      return (diFn.original || diFn).call(this, chart, d, i, j);\r\n    };\r\n  }\r\n\r\n  // Bind all di-functions found in chart\r\n  function bindAllDi(chart) {\r\n    for (var key in chart) {\r\n      if (chart[key] && chart[key]._is_di)\r\n        chart[key] = bindDi(chart[key], chart);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n    Get parent data for element (used to get parent series for data point)\r\n\r\n    @example\r\n    ```js\r\n    var data = [{\r\n      name: 'Input',\r\n      values: [1, 2, 3]\r\n    }];\r\n\r\n    d3.selectAll('g')\r\n      .data(data)\r\n      .enter().append('g')\r\n        .selectAll('text')\r\n          .data(function(d) { return d.values; })\r\n          .enter().append('text')\r\n            .text(function(d) {\r\n              var series_data = getParentData(this);\r\n              return series_data.name + ': ' + d;\r\n            });\r\n\r\n    // Input: 1, Input: 2, Input: 3\r\n    ```\r\n    @method getParentData\r\n    @param {Element} element\r\n    @return {Any}\r\n  */\r\n  function getParentData(element) {\r\n    // @internal Shortcut if element + parentData needs to be mocked\r\n    if (element._parent_data)\r\n      return element._parent_data;\r\n\r\n    var parent = element && element.parentNode;\r\n    if (parent) {\r\n      var data = d3.select(parent).data();\r\n      return data && data[0];\r\n    }\r\n  }\r\n\r\n  function createHelper(type) {\r\n    return function(id, options) {\r\n      if (!options) {\r\n        options = id;\r\n        id = undefined;\r\n      }\r\n\r\n      return extend({id: id, type: type}, options);\r\n    };\r\n  }\r\n\r\n  var types = {\r\n    string: {},\r\n    number: {},\r\n    array: {},\r\n    object: {},\r\n    any: {}\r\n  };\r\n\r\n  function checkProp(value, definition) {\r\n    if (definition.validate && !definition.validate(value))\r\n      throw new Error('Invalid value for property: ' + JSON.stringify(value));\r\n  }\r\n\r\n  function createPrepare(steps) {\r\n    if (!Array.isArray(steps))\r\n      steps = Array.prototype.slice.call(arguments);\r\n\r\n    return function() {\r\n      var selection = this.base;\r\n      var context = this;\r\n\r\n      return steps.reduce(function(props, step) {\r\n        return step(selection, props, context);\r\n      }, this.props);\r\n    };\r\n  }\r\n\r\n  function createDraw(steps) {\r\n    return function(selection, props) {\r\n      var prepared = prepareSteps(steps, props);\r\n\r\n      // TODO transitions\r\n      var selected = prepared.select.call(selection);\r\n      selected.exit().call(prepared.exit);\r\n      selected.call(prepared.update);\r\n      selected.enter().call(prepared.enter);\r\n      selected.call(prepared.merge);\r\n    };\r\n  }\r\n\r\n  function prepareSteps(steps, props) {\r\n    steps = defaults({}, steps, {\r\n      select: function() { return this; },\r\n      enter: function() {},\r\n      update: function() {},\r\n      merge: function() {},\r\n      exit: function() { this.remove(); }\r\n    });\r\n    // TODO transitions\r\n\r\n    return {\r\n      select: curry(steps.select, props),\r\n      enter: curry(steps.enter, props),\r\n      update: curry(steps.update, props),\r\n      merge: curry(steps.merge, props),\r\n      exit: curry(steps.exit, props)\r\n    };\r\n  }\r\n\r\n  function curry(fn) {\r\n    var values = Array.prototype.slice.call(arguments, 1);\r\n\r\n    return function() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n      return fn.apply(this, values.concat(args));\r\n    };\r\n  }\r\n\r\n  function createTransition(props) {\r\n    return function() {\r\n      if (!isUndefined(props.duration))\r\n        this.duration(props.duration);\r\n      if (!isUndefined(props.delay))\r\n        this.delay(props.delay);\r\n      if (!isUndefined(props.ease))\r\n        this.ease(props.ease);\r\n    };\r\n  }\r\n\r\n  function getLayer(selection, id) {\r\n    var layer = selection.select('[data-layer=\"' + id + '\"]');\r\n    if (layer.empty())\r\n      layer = selection.append('g').attr('data-layer', id);\r\n\r\n    return layer;\r\n  }\r\n\r\n  // TODO Move to Chart/Base\r\n  var architecture = {\r\n    update: function(selection, props) {\r\n      this.base = selection;\r\n      this.props = this.prepareProps(props);\r\n    },\r\n    prepareProps: function(props) {\r\n      var properties = this.constructor && this.constructor.properties;\r\n      if (!properties)\r\n        return props;\r\n\r\n      var prepared = extend({}, props);\r\n\r\n      objectEach(properties, function(definition, key) {\r\n        var prop = prepared[key];\r\n\r\n        if (!isUndefined(prop))\r\n          checkProp(prop, definition);\r\n        else if (definition.getDefault)\r\n          prepared[key] = definition.getDefault(this.base, prepared, this);\r\n      }, this);\r\n\r\n      return prepared;\r\n    },\r\n    attach: function(id, Type, selection, props) {\r\n      var attached = this.attached[id];\r\n\r\n      if (attached)\r\n        attached.options(props);\r\n      else\r\n        attached = new Type(selection, props);\r\n\r\n      attached.draw();\r\n      this.attached[id] = attached;\r\n    },\r\n    detach: function(id) {\r\n      var attached = this.attached[id];\r\n      if (attached) {\r\n        attached.base.remove();\r\n        delete this.attached[id];\r\n      }\r\n    }\r\n  };\r\n\r\n  function createProperties(Item, keys) {\r\n    keys = keys || Object.keys(Item.properties);\r\n\r\n    keys.forEach(function(key) {\r\n      if (Item.prototype[key])\r\n        return;\r\n\r\n      Item.prototype[key] = property({\r\n        get: function() {\r\n          deprecate('The ' + key + ' property will be removed and replaced by \"this.props.' + key + '\"');\r\n          return this.options()[key];\r\n        },\r\n        set: function(value) {\r\n          // Deliberately mutate underlying options to avoid firing options setter\r\n          this.options()[key] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  var helpers = {\r\n    property: property,\r\n    dimensions: dimensions,\r\n    translate: translate,\r\n    rotate: rotate,\r\n    alignText: alignText,\r\n    isSeriesData: isSeriesData,\r\n    max: max,\r\n    min: min,\r\n    createScale: createScale,\r\n    style: style,\r\n    getMargins: getMargins,\r\n    stack: stack,\r\n    di: di,\r\n    bindDi: bindDi,\r\n    bindAllDi: bindAllDi,\r\n    getParentData: getParentData,\r\n    mixin: mixin,\r\n    createHelper: createHelper,\r\n\r\n    types: types,\r\n    checkProp: checkProp,\r\n    createPrepare: createPrepare,\r\n    createDraw: createDraw,\r\n    createTransition: createTransition,\r\n    getLayer: getLayer\r\n  };\n\n  /**\r\n    Mixin for handling common transition behaviors\r\n\r\n    @class Transition\r\n    @namespace mixins\r\n  */\r\n  var Transition = {\r\n    /**\r\n      Delay start of transition by specified milliseconds.\r\n\r\n      @property delay\r\n      @type Number|Function\r\n      @default (use container value, if available)\r\n    */\r\n    delay: property({\r\n      default_value: function() {\r\n        return this.container && this.container.delay && this.container.delay();\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Transition duration in milliseconds.\r\n\r\n      @property duration\r\n      @type Number|Function\r\n      @default (use container value, if available)\r\n    */\r\n    duration: property({\r\n      default_value: function() {\r\n        return this.container && this.container.delay && this.container.duration();\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Transition ease function\r\n\r\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\r\n      - Note: arguments to pass to `d3.ease` are not supported\r\n\r\n      @property ease\r\n      @type String|Function\r\n      @default (use container value, if available)\r\n    */\r\n    ease: property({\r\n      default_value: function() {\r\n        return this.container && this.container.delay && this.container.ease();\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Setup delay, duration, and ease for transition\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\r\n        initialize: function() {\r\n          this.layer('circles', this.base, {\r\n            // ...\r\n            events: {\r\n              'merge:transition': function() {\r\n                // Set delay, duration, and ease from properties\r\n                this.chart().setupTransition(this);\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }));\r\n      ```\r\n      @method setupTransition\r\n      @param {d3.selection} selection\r\n    */\r\n    setupTransition: function setupTransition(selection) {\r\n      var delay = this.delay();\r\n      var duration = this.duration();\r\n      var ease = this.ease();\r\n\r\n      if (!isUndefined(delay))\r\n        selection.delay(delay);\r\n      if (!isUndefined(duration))\r\n        selection.duration(duration);\r\n      if (!isUndefined(ease))\r\n        selection.ease(ease);\r\n    }\r\n  };\n\n  /**\r\n    Mixin for handling XY data\r\n\r\n    @class XY\r\n    @namespace mixins\r\n  */\r\n  var XY = {\r\n    initialize: function() {\r\n      // Set scale ranges once chart is ready to be rendered\r\n      this.on('before:draw', this.setScales.bind(this));\r\n    },\r\n\r\n    transform: function(data) {\r\n      data = data || [];\r\n\r\n      // Transform series data from values to x,y\r\n      if (isSeriesData(data)) {\r\n        data = data.map(function(series) {\r\n          return extend({}, series, {\r\n            values: series.values.map(normalizeData)\r\n          });\r\n        });\r\n      }\r\n      else if (Array.isArray(data)) {\r\n        data = data.map(normalizeData);\r\n      }\r\n\r\n      return data;\r\n\r\n      function normalizeData(point, index) {\r\n        if (!isObject(point))\r\n          point = {x: index, y: point};\r\n        else if (!Array.isArray(point) && isUndefined(point.x))\r\n          point.x = index;\r\n\r\n        return point;\r\n      }\r\n    },\r\n\r\n    /**\r\n      Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)\r\n\r\n      @property xScale\r\n      @type Object|d3.scale\r\n    */\r\n    xScale: property({\r\n      set: function(value) {\r\n        var scale = createScale(value);\r\n        this.setXScaleRange(scale);\r\n\r\n        return {\r\n          override: scale\r\n        };\r\n      },\r\n      get: function(scale) {\r\n        if (!scale) {\r\n          scale = this.getDefaultXScale();\r\n          this.setXScaleRange(scale);\r\n        }\r\n\r\n        return scale;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)\r\n\r\n      @property xScale\r\n      @type Object|d3.scale\r\n    */\r\n    yScale: property({\r\n      set: function(value) {\r\n        var scale = createScale(value);\r\n        this.setYScaleRange(scale);\r\n\r\n        return {\r\n          override: scale\r\n        };\r\n      },\r\n      get: function(scale) {\r\n        if (!scale) {\r\n          scale = this.getDefaultYScale();\r\n          this.setYScaleRange(scale);\r\n        }\r\n\r\n        return scale;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Key on data object for x-value\r\n\r\n      @property xKey\r\n      @type String\r\n      @default 'x'\r\n    */\r\n    xKey: property({\r\n      default_value: 'x'\r\n    }),\r\n\r\n    /**\r\n      Key on data object for y-value\r\n\r\n      @property yKey\r\n      @type String\r\n      @default 'y'\r\n    */\r\n    yKey: property({\r\n      default_value: 'y'\r\n    }),\r\n\r\n    /**\r\n      Get scaled x-value for given data-point\r\n\r\n      @method x\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {Number}\r\n    */\r\n    x: di(function(chart, d, i) {\r\n      var value = chart.xValue.call(this, d, i);\r\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\r\n\r\n      return parseFloat(chart.xScale()(value, series_index));\r\n    }),\r\n\r\n    /**\r\n      Get scaled y-value for given data-point\r\n\r\n      @method y\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {Number}\r\n    */\r\n    y: di(function(chart, d, i) {\r\n      var value = chart.yValue.call(this, d, i);\r\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\r\n\r\n      return parseFloat(chart.yScale()(value, series_index));\r\n    }),\r\n\r\n    /**\r\n      Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.\r\n\r\n      @method key\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {Any}\r\n    */\r\n    key: di(function(chart, d, i) {\r\n      return valueOrDefault(d.key, chart.xValue.call(this, d, i));\r\n    }),\r\n\r\n    /**\r\n      Get scaled `x = 0` value\r\n\r\n      @method x0\r\n      @return {Number}\r\n    */\r\n    x0: function() {\r\n      return parseFloat(this.xScale()(0));\r\n    },\r\n\r\n    /**\r\n      Get scaled `y = 0` value\r\n\r\n      @method x0\r\n      @return {Number}\r\n    */\r\n    y0: function() {\r\n      return parseFloat(this.yScale()(0));\r\n    },\r\n\r\n    /**\r\n      Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.\r\n\r\n      @example\r\n      ```js\r\n      xValue({x: 10, y: 20}); // -> 10\r\n      xValue([10, 20]); // -> 10\r\n      ```\r\n      @method xValue\r\n      @param {Any} d\r\n      @return {Any}\r\n    */\r\n    xValue: di(function(chart, d) {\r\n      var key = chart.xKey();\r\n      if (d)\r\n        return key in d ? d[key] : d[0];\r\n    }),\r\n\r\n    /**\r\n      Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.\r\n\r\n      @example\r\n      ```js\r\n      yValue({x: 10, y: 20}); // -> 20\r\n      yValue([10, 20]); // -> 20\r\n      ```\r\n      @method yValue\r\n      @param {Any} d\r\n      @return {Any}\r\n    */\r\n    yValue: di(function(chart, d) {\r\n      var key = chart.yKey();\r\n      if (d)\r\n        return key in d ? d[key] : d[1];\r\n    }),\r\n\r\n    /**\r\n      Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)\r\n\r\n      @method setScales\r\n    */\r\n    setScales: function() {\r\n      this.setXScaleRange(this.xScale());\r\n      this.setYScaleRange(this.yScale());\r\n    },\r\n\r\n    /**\r\n      Set range (0, width) for given x-scale\r\n\r\n      @method setXScaleRange\r\n      @param {d3.scale} x_scale\r\n    */\r\n    setXScaleRange: function(x_scale) {\r\n      x_scale.range([0, this.width()]);\r\n    },\r\n\r\n    /**\r\n      Set range(height, 0) for given y-scale\r\n\r\n      @method setYScaleRange\r\n      @param {d3.scale} y_scale\r\n    */\r\n    setYScaleRange: function(y_scale) {\r\n      y_scale.range([this.height(), 0]);\r\n    },\r\n\r\n    /**\r\n      Get default x-scale: `{data: this.data(), key: 'x'}`\r\n\r\n      @method getDefaultXScale\r\n      @return {d3.scale}\r\n    */\r\n    getDefaultXScale: function() {\r\n      return createScale({\r\n        data: this.data(),\r\n        key: 'x'\r\n      });\r\n    },\r\n\r\n    /**\r\n      Get default y-scale: `{data: this.data(), key: 'y'}`\r\n\r\n      @method getDefaultYScale\r\n      @return {d3.scale}\r\n    */\r\n    getDefaultYScale: function() {\r\n      return createScale({\r\n        data: this.data(),\r\n        key: 'y'\r\n      });\r\n    }\r\n  };\n\n  var d3Chart = d3.chart();\r\n\r\n  // TEMP Clear namespace from mixins\r\n  /**\r\n    @namespace\r\n  */\r\n\r\n  /**\r\n    Shared functionality between all charts and components.\r\n\r\n    - Set properties automatically from `options`,\r\n    - Store fully transformed data\r\n    - Adds `\"before:draw\"` and `\"draw\"` events\r\n    - Standard `width` and `height` calculations\r\n\r\n    @class Base\r\n  */\r\n  function Base(selection, options) {\r\n    // d3.chart() constructor without transform and initialize cascade\r\n    this.base = selection;\r\n    this._layers = {};\r\n    this._attached = {};\r\n    this._events = {};\r\n\r\n    // Bind all di-functions to this chart\r\n    bindAllDi(this);\r\n\r\n    // Set options (and properties with set_from_options)\r\n    if (options)\r\n      this.options(options);\r\n\r\n    // Initialize Chart (relies on explicitly calling super in initialize)\r\n    this.initialize(options);\r\n  }\r\n\r\n  inherits(Base, d3Chart);\r\n\r\n  extend(Base.prototype, {\r\n    initialize: function() {},\r\n    transform: function(data) {\r\n      return data;\r\n    },\r\n    demux: function(name, data) { return data; },\r\n\r\n    // Add events to draw: \"before:draw\" and \"draw\"\r\n    draw: function(data) {\r\n      // Transform data (relies on explicitly calling super in transform)\r\n      data = this.transform(data);\r\n\r\n      // Store fully-transformed data for reference\r\n      this.data(data);\r\n\r\n      this.trigger('before:draw', data);\r\n\r\n      objectEach(this._layers, function(layer) {\r\n        layer.draw(data);\r\n      });\r\n      objectEach(this._attached, function(attachment, name) {\r\n        attachment.draw(this.demux(name, data));\r\n      }, this);\r\n\r\n      this.trigger('draw', data);\r\n    },\r\n\r\n    // Explicitly load d3.chart prototype\r\n    layer: d3Chart.prototype.layer,\r\n    unlayer: d3Chart.prototype.unlayer,\r\n    attach: d3Chart.prototype.attach,\r\n    on: d3Chart.prototype.on,\r\n    once: d3Chart.prototype.once,\r\n    off: d3Chart.prototype.off,\r\n    trigger: d3Chart.prototype.trigger,\r\n\r\n    /**\r\n      Store fully-transformed data for direct access from the chart\r\n\r\n      @property data\r\n      @type Any\r\n    */\r\n    data: property(),\r\n\r\n    /**\r\n      Overall options for chart/component, automatically setting any matching properties.\r\n\r\n      @example\r\n      ```js\r\n      var property = d3.compose.helpers.property;\r\n\r\n      d3.chart('Base').extend('HasProperties', {\r\n        a: property(),\r\n        b: property({\r\n          set: function(value) {\r\n            return {\r\n              override: value + '!'\r\n            };\r\n          }\r\n        })\r\n      });\r\n\r\n      var instance = d3.select('#chart')\r\n        .chart('HasProperties', {\r\n          a: 123,\r\n          b: 'Howdy',\r\n          c: true\r\n        });\r\n\r\n      // Equivalent to:\r\n      // d3.select(...)\r\n      //   .chart('HasProperties')\r\n      //   .options({...});\r\n\r\n      console.log(instance.a()); // -> 123\r\n      console.log(instance.b()); // -> Howdy!\r\n      console.log(instance.options().c); // -> true\r\n      ```\r\n      @property options\r\n      @type Object\r\n    */\r\n    options: property({\r\n      default_value: {},\r\n      set: function(options, previous) {\r\n        // Clear all unset options, except for data and options\r\n        if (previous) {\r\n          var unset = difference(Object.keys(previous), Object.keys(options));\r\n          unset.forEach(function(key) {\r\n            if (key != 'data' && key != 'options' && isProperty(this, key))\r\n              this[key](undefined);\r\n          }, this);\r\n        }\r\n\r\n        objectEach(options, function setFromOptions(value, key) {\r\n          if (isProperty(this, key))\r\n            this[key](value);\r\n        }, this);\r\n\r\n        function isProperty(chart, key) {\r\n          return chart[key] && chart[key].is_property && chart[key].set_from_options;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get width of `this.base`.\r\n      (Does not include `set` for setting width of `this.base`)\r\n\r\n      @method width\r\n      @return {Number}\r\n    */\r\n    width: function width() {\r\n      return dimensions(this.base).width;\r\n    },\r\n\r\n    /**\r\n      Get height of `this.base`.\r\n      (Does not include `set` for setting height of `this.base`)\r\n\r\n      @method height\r\n      @return {Number}\r\n    */\r\n    height: function height() {\r\n      return dimensions(this.base).height;\r\n    }\r\n  });\r\n\r\n  Base.extend = function(proto_props, static_props) {\r\n    // name may be first parameter for d3.chart usage\r\n    var name;\r\n    if (isString(proto_props)) {\r\n      name = proto_props;\r\n      proto_props = static_props;\r\n      static_props = arguments[2];\r\n    }\r\n\r\n    var Parent = this;\r\n    var Child;\r\n\r\n    if (proto_props && proto_props.hasOwnProperty('constructor')) {\r\n      Child = proto_props.constructor;\r\n\r\n      // inherits sets constructor, remove from proto_props\r\n      proto_props = extend({}, proto_props);\r\n      delete proto_props.constructor;\r\n    }\r\n    else {\r\n      Child = function() { return Parent.apply(this, arguments); };\r\n    }\r\n\r\n    inherits(Child, Parent);\r\n    if (static_props)\r\n      extend(Child, static_props);\r\n    if (proto_props)\r\n      extend(Child.prototype, proto_props);\r\n\r\n    // If name is given, register with d3.chart\r\n    if (name)\r\n      d3Chart[name] = Child;\r\n\r\n    return Child;\r\n  };\n\n  /**\r\n    Common base for creating components that includes helpers for positioning and layout.\r\n\r\n    ### Extending\r\n\r\n    `d3.chart('Component')` contains intelligent defaults and there are no required overrides.\r\n    Create a component just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\r\n    - To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('Key', {\r\n      initialize: function() {\r\n        this.layer('Key', this.base, {\r\n          dataBind: function(data) {\r\n            return this.selectAll('text')\r\n              .data(data);\r\n          },\r\n          insert: function() {\r\n            return this.append('text');\r\n          },\r\n          events: {\r\n            merge: function() {\r\n              this.text(this.chart().keyText)\r\n            }\r\n          }\r\n        })\r\n      },\r\n\r\n      keyText: helpers.di(function(chart, d, i) {\r\n        return d.abbr + ' = ' + d.value;\r\n      })\r\n    });\r\n    ```\r\n    @class Component\r\n    @extends Base\r\n  */\r\n  var Component = Base.extend({\r\n    /**\r\n      Component's position relative to chart\r\n      (top, right, bottom, left)\r\n\r\n      @property position\r\n      @type String\r\n      @default 'top'\r\n    */\r\n    position: property({\r\n      default_value: 'top',\r\n      validate: function(value) {\r\n        return contains(['top', 'right', 'bottom', 'left'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the width of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property width\r\n      @type Number\r\n      @default (actual width)\r\n    */\r\n    width: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).width;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the height of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property height\r\n      @type Number\r\n      @default (actual height)\r\n    */\r\n    height: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).height;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Margins (in pixels) around component\r\n\r\n      @property margins\r\n      @type Object\r\n      @default {top: 0, right: 0, bottom: 0, left: 0}\r\n    */\r\n    margins: property({\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values)\r\n        };\r\n      },\r\n      default_value: getMargins()\r\n    }),\r\n\r\n    /**\r\n      Center the component vertically/horizontally (depending on position)\r\n\r\n      @property centered\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    centered: property({\r\n      default_value: false\r\n    }),\r\n\r\n    /**\r\n      Skip component during layout calculations and positioning\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('NotLaidOut', {\r\n        skip_layout: true\r\n      });\r\n      ```\r\n      @attribute skip_layout\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    skip_layout: false,\r\n\r\n    /**\r\n      Perform any layout preparation required before getLayout (default is draw)\r\n      (override in prototype of extension)\r\n\r\n      Note: By default, components are double-drawn;\r\n      for every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\r\n      This can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        prepareLayout: function(data) {\r\n          // default: this.draw(data);\r\n          // so that getLayout has real dimensions\r\n\r\n          // -> custom preparation (if necessary)\r\n        }\r\n      })\r\n      ```\r\n      @method prepareLayout\r\n      @param {Any} data\r\n    */\r\n    prepareLayout: function(data) {\r\n      this.draw(data);\r\n    },\r\n\r\n    /**\r\n      Get layout details for use when laying out component\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        getLayout: function(data) {\r\n          var calculated_width, calculated_height;\r\n\r\n          // Perform custom calculations...\r\n\r\n          // Must return position, width, and height\r\n          return {\r\n            position: this.position(),\r\n            width: calculated_width,\r\n            height: calculated_height\r\n          };\r\n        }\r\n      });\r\n      ```\r\n      @method getLayout\r\n      @param {Any} data\r\n      @return {Object} position, width, and height for layout\r\n    */\r\n    getLayout: function(data) {\r\n      this.prepareLayout(data);\r\n\r\n      var margins = this.margins();\r\n      return {\r\n        position: this.position(),\r\n        width: this.width() + margins.left + margins.right,\r\n        height: this.height() + margins.top + margins.bottom\r\n      };\r\n    },\r\n\r\n    /**\r\n      Set layout of underlying base\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        setLayout: function(x, y, options) {\r\n          // Set layout of this.base...\r\n          // (the following is the default implementation)\r\n          var margins = this.margins();\r\n\r\n          // (handle this.centered())\r\n\r\n          this.base\r\n            .attr('transform', helpers.translate(x + margins.left, y + margins.top));\r\n          this.height(options && options.height);\r\n          this.width(options && options.width);\r\n        }\r\n      });\r\n      ```\r\n      @method setLayout\r\n      @param {Number} x position of base top-left\r\n      @param {Number} y position of base top-left\r\n      @param {Object} options\r\n        @param {Object} [options.height] height of component in layout\r\n        @param {Object} [options.width] width of component in layout\r\n    */\r\n    setLayout: function(x, y, options) {\r\n      var margins = this.margins();\r\n\r\n      if (this.centered()) {\r\n        var actual_dimensions = dimensions(this.base);\r\n        if ('height' in options)\r\n          y += (options.height - actual_dimensions.height) / 2;\r\n        else\r\n          y += margins.top;\r\n\r\n        if ('width' in options)\r\n          x += (options.width - actual_dimensions.width) / 2;\r\n        else\r\n          x += margins.left;\r\n      }\r\n      else {\r\n        x += margins.left;\r\n        y += margins.top;\r\n      }\r\n\r\n      this.base.attr('transform', translate(x, y));\r\n      this.height(options && options.height);\r\n      this.width(options && options.width);\r\n    }\r\n  }, {\r\n    properties: {\r\n      position: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['top', 'right', 'bottom', 'left'], value);\r\n        }\r\n      },\r\n      width: {\r\n        type: types.number,\r\n        getDefault: function(selection, props, context) {\r\n          // TODO Move to Component.prepare\r\n          var width = context.width();\r\n          return !isUndefined(width) ? width : dimensions(selection).width;\r\n        }\r\n      },\r\n      height: {\r\n        type: types.number,\r\n        getDefault: function(selection, props, context) {\r\n          // TODO Move to Component.prepare\r\n          var height = context.height();\r\n          return !isUndefined(height) ? height : dimensions(selection).height;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n      Default z-index for component\r\n      (Charts are 100 by default, so Component = 50 is below chart by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('AboveChartLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 150\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 50\r\n    */\r\n    z_index: 50,\r\n\r\n    /**\r\n      Set to `'chart'` to use chart layer for component.\r\n      (e.g. Axis uses chart layer to position with charts, but includes layout for ticks)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('ChartComponent', {\r\n        // ...\r\n      }, {\r\n        layer_type: 'chart'\r\n      });\r\n      ```\r\n      @attribute layer_type\r\n      @static\r\n      @type String\r\n      @default 'component'\r\n    */\r\n    layer_type: 'component'\r\n  });\n\n  /**\r\n    Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\r\n    and `getPoint` helper for adding helpful meta information to raw data point.\r\n\r\n    @class Hover\r\n    @namespace mixins\r\n  */\r\n  var Hover = {\r\n    initialize: function() {\r\n      this.on('attach', function() {\r\n        this.container.on('mouseenter', this.onMouseEnter.bind(this));\r\n        this.container.on('mousemove', this.onMouseMove.bind(this));\r\n        this.container.on('mouseleave', this.onMouseLeave.bind(this));\r\n      }.bind(this));\r\n    },\r\n\r\n    /**\r\n      Get point information for given data-point\r\n\r\n      @method getPoint\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @param {Number} j\r\n      @return {key, series, d, meta {chart, i, j, x, y}}\r\n    */\r\n    getPoint: di(function(chart, d, i, j) {\r\n      var key = chart.key && chart.key.call(this, d, i, j);\r\n      var series = chart.seriesData && chart.seriesData.call(this, d, i, j) || {};\r\n\r\n      return {\r\n        key: (series.key || j) + '.' + (key || i),\r\n        series: series,\r\n        d: d,\r\n        meta: {\r\n          chart: chart,\r\n          i: i,\r\n          j: j,\r\n          x: chart.x && chart.x.call(this, d, i, j),\r\n          y: chart.y && chart.y.call(this, d, i, j)\r\n        }\r\n      };\r\n    }),\r\n\r\n    /**\r\n      Call to trigger mouseenter:point when mouse enters data-point\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\r\n        initialize: function() {\r\n          this.layer('bars', this.base, {\r\n            // dataBind...\r\n            insert: function() {\r\n              // Want to trigger enter/leave point\r\n              // when mouse enter/leaves bar (rect)\r\n              var chart = this.chart();\r\n              return this.append('rect')\r\n                .on('mouseenter', chart.mouseEnterPoint)\r\n                .on('mouseleave', chart.mouseLeavePoint);\r\n            }\r\n            // events...\r\n          })\r\n        }\r\n      }));\r\n      ```\r\n      @method mouseEnterPoint\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @param {Number} j\r\n    */\r\n    mouseEnterPoint: di(function(chart, d, i, j) {\r\n      chart.container.trigger('mouseenter:point', chart.getPoint.call(this, d, i, j));\r\n    }),\r\n\r\n    /**\r\n      Call to trigger mouseleave:point when mouse leaves data-point\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\r\n        initialize: function() {\r\n          this.layer('bars', this.base, {\r\n            // dataBind...\r\n            insert: function() {\r\n              // Want to trigger enter/leave point\r\n              // when mouse enter/leaves bar (rect)\r\n              var chart = this.chart();\r\n              return this.append('rect')\r\n                .on('mouseenter', chart.mouseEnterPoint)\r\n                .on('mouseleave', chart.mouseLeavePoint);\r\n            }\r\n            // events...\r\n          })\r\n        }\r\n      }));\r\n      ```\r\n      @method mouseleavePoint\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @param {Number} j\r\n    */\r\n    mouseLeavePoint: di(function(chart, d, i, j) {\r\n      chart.container.trigger('mouseleave:point', chart.getPoint.call(this, d, i, j));\r\n    }),\r\n\r\n    /**\r\n      (Override) Called when mouse enters container\r\n\r\n      @method onMouseEnter\r\n      @param {Object} position (chart and container {x,y} position of mouse)\r\n      @param {Object} position.chart {x, y} position relative to chart origin\r\n      @param {Object} position.container {x, y} position relative to container origin\r\n    */\r\n    onMouseEnter: function(/* position */) {},\r\n\r\n    /**\r\n      (Override) Called when mouse moves within container\r\n\r\n      @method onMouseMove\r\n      @param {Object} position (chart and container {x,y} position of mouse)\r\n      @param {Object} position.chart {x, y} position relative to chart origin\r\n      @param {Object} position.container {x, y} position relative to container origin\r\n    */\r\n    onMouseMove: function(/* position */) {},\r\n\r\n    /**\r\n      (Override) Called when mouse leaves container\r\n\r\n      @method onMouseLeave\r\n    */\r\n    onMouseLeave: function() {}\r\n  };\r\n\r\n  /**\r\n    Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.\r\n\r\n    @class HoverPoints\r\n    @namespace mixins\r\n  */\r\n  var HoverPoints = {\r\n    initialize: function() {\r\n      var points, tolerance, active;\r\n\r\n      this.on('draw', function() {\r\n        // Clear cache on draw\r\n        points = null;\r\n      });\r\n\r\n      this.on('attach', function() {\r\n        var update = function update(position) {\r\n          var closest = [];\r\n          if (position)\r\n            closest = getClosestPoints(points, position.chart, tolerance);\r\n\r\n          updateActive(active, closest, this.container);\r\n          active = closest;\r\n        }.bind(this);\r\n\r\n        this.container.on('mouseenter', function(position) {\r\n          if (!points)\r\n            points = getPoints(this, this.data());\r\n\r\n          tolerance = this.hoverTolerance();\r\n          update(position);\r\n        }.bind(this));\r\n\r\n        this.container.on('mousemove', update);\r\n        this.container.on('mouseleave', update);\r\n      }.bind(this));\r\n    },\r\n\r\n    /**\r\n      Hover tolerance (in px) for calculating close points\r\n\r\n      @property hoverTolerance\r\n      @type Number\r\n      @default Infinity\r\n    */\r\n    hoverTolerance: property({\r\n      default_value: Infinity\r\n    })\r\n  };\r\n\r\n  function getPoints(chart, data) {\r\n    if (data) {\r\n      if (!isSeriesData(data))\r\n        data = [{values: data}];\r\n\r\n      return data.map(function(series, j) {\r\n        return series.values.map(function(d, i) {\r\n          return chart.getPoint.call({_parent_data: series}, d, i, j);\r\n        }).sort(function(a, b) {\r\n          // Sort by x\r\n          return a.meta.x - b.meta.x;\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  function getClosestPoints(points, position, tolerance) {\r\n    if (!points)\r\n      return [];\r\n\r\n    return compact(points.map(function(series) {\r\n      function setDistance(point) {\r\n        point.distance = getDistance(point.meta, position);\r\n        return point;\r\n      }\r\n      function closePoints(point) {\r\n        return point.distance < tolerance;\r\n      }\r\n      function sortPoints(a, b) {\r\n        if (a.distance < b.distance)\r\n          return -1;\r\n        else if (a.distance > b.distance)\r\n          return 1;\r\n        else\r\n          return 0;\r\n      }\r\n\r\n      var by_distance = series.map(setDistance).filter(closePoints).sort(sortPoints);\r\n\r\n      return by_distance[0];\r\n    }));\r\n\r\n    function getDistance(a, b) {\r\n      return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n    }\r\n  }\r\n\r\n  function updateActive(active, closest, container) {\r\n    var active_keys = pluck(active, 'key');\r\n    var closest_keys = pluck(closest, 'key');\r\n\r\n    objectEach(closest, function(point) {\r\n      if (contains(active_keys, point.key))\r\n        container.trigger('mousemove:point', point);\r\n      else\r\n        container.trigger('mouseenter:point', point);\r\n    });\r\n    objectEach(active, function(point) {\r\n      if (!contains(closest_keys, point.key))\r\n        container.trigger('mouseleave:point', point);\r\n    });\r\n  }\n\n  /**\r\n    Mixin for handling labels in charts\r\n\r\n    @class Labels\r\n    @namespace mixins\r\n  */\r\n  var Labels$1 = {\r\n    /**\r\n      Call during chart initialization to add labels to chart\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\r\n        initialize: function() {\r\n          // this.layer()...\r\n\r\n          // Attach labels layer\r\n          this.attachLabels();\r\n        }\r\n      }));\r\n      ```\r\n      @method attachLabels\r\n    */\r\n    attachLabels: function() {\r\n      var options = this.labels();\r\n      options.parent = this;\r\n\r\n      var LabelsClass = d3.chart(options.type);\r\n      var base = this.base.append('g').attr('class', 'chart-labels');\r\n      var labels = this._labels = new LabelsClass(base, options);\r\n\r\n      // Proxy x and y to parent chart\r\n      this.proxyLabelMethods.forEach(function(method) {\r\n        labels[method] = this[method];\r\n      }, this);\r\n\r\n      this.on('draw', function(data) {\r\n        options = this.labels();\r\n        options.parent = this;\r\n\r\n        labels.options(options);\r\n\r\n        if (options.display !== false)\r\n          labels.draw(options.data || data);\r\n        else\r\n          labels.draw([]);\r\n      }.bind(this));\r\n    },\r\n\r\n    /**\r\n      Options passed to labels chart\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\r\n        // ...\r\n      }));\r\n\r\n      // ...\r\n\r\n      chart.labels(true); // -> display labels with defaults\r\n      chart.labels(false); // -> hide labels\r\n      chart.labels({offset: 10}); // -> pass options to labels chart\r\n\r\n      d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          return {\r\n            charts: {\r\n              custom: {labels: {offset: 10}}\r\n            }\r\n          };\r\n        });\r\n      ```\r\n      @property labels\r\n      @type Object\r\n    */\r\n    labels: property({\r\n      get: function(value) {\r\n        if (isBoolean(value))\r\n          value = {display: value};\r\n        else if (!value)\r\n          value = {display: false};\r\n\r\n        return defaults({}, value, {\r\n          type: 'Labels'\r\n        });\r\n      }\r\n    }),\r\n\r\n    // Array of methods to proxy on labels chart\r\n    proxyLabelMethods: []\r\n  };\r\n\r\n  /**\r\n    Mixin for handling labels in XY charts\r\n    (proxies `x` and `y` to properly place labels for XY charts)\r\n\r\n    @class LabelsXY\r\n    @namespace mixins\r\n    @extends Labels\r\n  */\r\n  var LabelsXY = extend({}, Labels$1, {\r\n    proxyLabelMethods: ['x', 'y']\r\n  });\n\n  /**\r\n    Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right\r\n\r\n    @class XYInverted\r\n    @namespace mixins\r\n  */\r\n  var XYInverted = {\r\n    /**\r\n      Get x-value for plotting (scaled y-value)\r\n\r\n      @method x\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {Number}\r\n    */\r\n    x: di(function(chart, d, i) {\r\n      var value = chart.yValue.call(this, d, i);\r\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\r\n\r\n      return parseFloat(chart.yScale()(value, series_index));\r\n    }),\r\n\r\n    /**\r\n      Get y-value for plotting (scaled x-value)\r\n\r\n      @method y\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {Number}\r\n    */\r\n    y: di(function(chart, d, i) {\r\n      var value = chart.xValue.call(this, d, i);\r\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\r\n\r\n      return parseFloat(chart.xScale()(value, series_index));\r\n    }),\r\n\r\n    /**\r\n      Get scaled y = 0 value (along x-axis)\r\n\r\n      @method x0\r\n      @return {Number}\r\n    */\r\n    x0: function() {\r\n      return parseFloat(this.yScale()(0));\r\n    },\r\n\r\n    /**\r\n      Get scaled x = 0 value (along y-axis)\r\n\r\n      @method x0\r\n      @return {Number}\r\n    */\r\n    y0: function() {\r\n      return parseFloat(this.xScale()(0));\r\n    },\r\n\r\n    /**\r\n      Set range (height, 0) for given x-scale\r\n\r\n      @method setXScaleRange\r\n      @param {d3.scale} x_scale\r\n    */\r\n    setXScaleRange: function(x_scale) {\r\n      x_scale.range([this.height(), 0]);\r\n    },\r\n\r\n    /**\r\n      Set range (0, width) for given y-scale\r\n\r\n      @method setYScaleRange\r\n      @param {d3.scale} y_scale\r\n    */\r\n    setYScaleRange: function(y_scale) {\r\n      y_scale.range([0, this.width()]);\r\n    }\r\n  };\n\n  /**\r\n    Mixin for charts of centered key,value data (x: index, y: value, key)\r\n\r\n    @class XYValues\r\n    @namespace mixins\r\n  */\r\n  var XYValues = {\r\n    /**\r\n      Determine width of data-point when displayed adjacent\r\n\r\n      @method adjacentWidth\r\n      @return {Number}\r\n    */\r\n    adjacentWidth: function() {\r\n      var series_count = this.seriesCount ? this.seriesCount() : 1;\r\n      return this.layeredWidth() / series_count;\r\n    },\r\n\r\n    /**\r\n      Determine layered width (width of group for adjacent)\r\n\r\n      @method layeredWidth\r\n      @return {Number}\r\n    */\r\n    layeredWidth: function() {\r\n      var range_band = this.xScale() && this.xScale().rangeBand && this.xScale().rangeBand();\r\n      var width = isFinite(range_band) ? range_band : 0;\r\n\r\n      return width;\r\n    },\r\n\r\n    /**\r\n      Determine item width based on series display type (adjacent or layered)\r\n\r\n      @method itemWidth\r\n      @return {Number}\r\n    */\r\n    itemWidth: function() {\r\n      var scale = this.xScale();\r\n      return scale && scale.width ? scale.width() : this.layeredWidth();\r\n    },\r\n\r\n    // Override default x-scale to use ordinal type\r\n    /**\r\n      Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`\r\n\r\n      @method getDefaultYScale\r\n      @return {d3.scale}\r\n    */\r\n    getDefaultXScale: function() {\r\n      return createScale({\r\n        type: 'ordinal',\r\n        data: this.data(),\r\n        key: 'x',\r\n        centered: true\r\n      });\r\n    }\r\n  };\n\n  /**\r\n    Mixin for handling series data\r\n\r\n    @class Series\r\n    @namespace mixins\r\n  */\r\n  var Series = {\r\n    /**\r\n      Get key for given series data\r\n\r\n      @method seriesKey\r\n      @param {Any} d Series object with `key`\r\n      @return {Any}\r\n    */\r\n    seriesKey: di(function(chart, d) {\r\n      return d.key;\r\n    }),\r\n\r\n    /**\r\n      Get values for given series data\r\n\r\n      @method seriesValues\r\n      @param {Any} d Series object with `values` array\r\n      @return {Array}\r\n    */\r\n    seriesValues: di(function(chart, d, i) {\r\n      // Store seriesIndex on series\r\n      d.seriesIndex = i;\r\n      return d.values;\r\n    }),\r\n\r\n    /**\r\n      Get class for given series data\r\n\r\n      @method seriesClass\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {String}\r\n    */\r\n    seriesClass: di(function(chart, d, i) {\r\n      return 'chart-series chart-index-' + i + (d['class'] ? ' ' + d['class'] : '');\r\n    }),\r\n\r\n    /**\r\n      Get index for given data-point of series\r\n\r\n      @method seriesIndex\r\n      @param {Any} d\r\n      @param {Number} i\r\n    */\r\n    seriesIndex: di(function(chart, d, i) {\r\n      var series = chart.seriesData.call(this, d, i);\r\n      return series && series.seriesIndex || 0;\r\n    }),\r\n\r\n    /**\r\n      Get parent series data for given data-point\r\n\r\n      @method seriesData\r\n      @return {Any}\r\n    */\r\n    seriesData: di(function() {\r\n      return getParentData(this);\r\n    }),\r\n\r\n    /**\r\n      (di) Get style given series data or data-point\r\n      (Uses \"style\" object on `d`, if defined)\r\n\r\n      @method itemStyle\r\n      @param {Any} d\r\n      @param {Number} [i]\r\n      @param {Number} [j]\r\n      @return {String}\r\n    */\r\n    itemStyle: di(function(chart, d) {\r\n      return style(d.style) || null;\r\n    }),\r\n\r\n    /**\r\n      Get series count for chart\r\n\r\n      @method seriesCount\r\n      @return {Number}\r\n    */\r\n    seriesCount: function() {\r\n      var data = this.data();\r\n      return (data && isSeriesData(data)) ? data.length : 1;\r\n    },\r\n\r\n    /**\r\n      Extension of layer() that handles data-binding and layering for series data.\r\n\r\n      - Updates `dataBind` method to access underlying series values\r\n      - Creates group layer for each series in chart\r\n      - Should be used just like layer()\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\r\n        initialize: function() {\r\n          this.seriesLayer('Circles', this.base, {\r\n            // Create group for each series on this.base\r\n            // and calls the following for each series item\r\n            // (entire layer is called twice: series-1 and series-2)\r\n\r\n            dataBind: function(data) {\r\n              // 1. data = [1, 2, 3]\r\n              // 2. data = [4, 5, 6]\r\n            },\r\n            insert: function() {\r\n              // Same as chart.layer\r\n              // (where \"this\" is series group layer)\r\n            },\r\n            events: {\r\n              // Same as chart.layer\r\n            }\r\n          });\r\n        }\r\n      }));\r\n\r\n      // ...\r\n\r\n      chart.draw([\r\n        {key: 'series-1', values: [1, 2, 3]},\r\n        {key: 'series-2', values: [4, 5, 6]}\r\n      ]);\r\n      ```\r\n      @method seriesLayer\r\n      @param {String} name\r\n      @param {Selection} selection\r\n      @param {Object} options (`dataBind` and `insert` required)\r\n      @return {d3.chart.layer}\r\n    */\r\n    seriesLayer: function(name, selection, options) {\r\n      if (options && options.dataBind) {\r\n        var dataBind = options.dataBind;\r\n\r\n        options.dataBind = function(data) {\r\n          var chart = this.chart();\r\n          var series = this.selectAll('g')\r\n            .data(data, chart.seriesKey);\r\n\r\n          series.enter()\r\n            .append('g');\r\n\r\n          series\r\n            .attr('class', chart.seriesClass)\r\n            .attr('style', chart.itemStyle);\r\n\r\n          // TODO Exit layer items then exit series layer\r\n          series.exit()\r\n            .remove();\r\n\r\n          series.chart = function() { return chart; };\r\n\r\n          return dataBind.call(series, chart.seriesValues);\r\n        };\r\n      }\r\n\r\n      return d3.chart().prototype.layer.call(this, name, selection, options);\r\n    },\r\n\r\n    // Ensure data is in series form\r\n    transform: function(data) {\r\n      return !isSeriesData(data) ? [{values: data}] : data;\r\n    }\r\n  };\n\n  var mixins = {\r\n    Series: Series,\r\n    XY: XY,\r\n    XYValues: XYValues,\r\n    XYInverted: XYInverted,\r\n    Labels: Labels$1,\r\n    LabelsXY: LabelsXY,\r\n    Hover: Hover,\r\n    HoverPoints: HoverPoints,\r\n    Transition: Transition,\r\n    StandardLayer: StandardLayer\r\n  };\n\n  /**\r\n    Gridlines component that draws major ticks for chart\r\n\r\n    Uses d3.axis extensions for ticks:\r\n\r\n    - `ticks`\r\n    - `tickValues`\r\n\r\n    ### Extending\r\n\r\n    To extend the `Gridlines` component, the following methods are available\r\n\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart').chart('Compose', function(data) {\r\n      var scales = {\r\n        x: {data: data, key: 'x'},\r\n        y: {data: data, key: 'y'}\r\n      };\r\n\r\n      var vertical = d3c.gridlines({\r\n        scale: scales.x,\r\n        orientation: 'vertical'\r\n      });\r\n      var horizontal = d3c.gridlines({\r\n        scale: scales.y,\r\n        orientation: 'horizontal'\r\n      });\r\n\r\n      return [\r\n        vertical,\r\n        horizontal\r\n      ];\r\n    });\r\n    ```\r\n    @class Gridlines\r\n  */\r\n  var Mixed$7 = mixin(Component, XY, Transition, StandardLayer);\r\n  var Gridlines = Mixed$7.extend({\r\n    initialize: function(options) {\r\n      Mixed$7.prototype.initialize.call(this, options);\r\n\r\n      // Proxy attach to parent for width/height\r\n      var parent = this.options().parent;\r\n      if (parent) {\r\n        this.parent = parent;\r\n\r\n        if (parent.container) {\r\n          this.container = parent.container;\r\n          this.trigger('attach');\r\n        }\r\n        else {\r\n          parent.on('attach', function() {\r\n            this.container = parent.container;\r\n            this.trigger('attach');\r\n          }.bind(this));\r\n        }\r\n      }\r\n\r\n      // Use standard layer for extensibility\r\n      this.standardLayer('Gridlines', this.base.append('g').attr('class', 'chart-gridlines'));\r\n    },\r\n\r\n    /**\r\n      Use horizontal, vertical gridlines\r\n\r\n      @property orientation\r\n      @type String\r\n      @default horizontal\r\n    */\r\n    orientation: property({\r\n      default_value: 'horizontal',\r\n      validate: function(value) {\r\n        return contains(['horizontal', 'vertical'], value);\r\n      },\r\n      set: function() {\r\n        // Update scale -> xScale/yScale when position changes\r\n        if (this.scale())\r\n          this.scale(this.scale());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Scale to use for gridlines.\r\n      Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used.\r\n\r\n      @example\r\n      ```js\r\n      // Set with d3.scale directly\r\n      gridlines.scale(d3.scale());\r\n\r\n      // or with Object passed to helpers.createScale\r\n      gridlines.scale({data: data, key: 'x'});\r\n      ```\r\n      @property scale\r\n      @type Object|d3.scale\r\n    */\r\n    scale: property({\r\n      set: function(value) {\r\n        if (this.orientation() == 'vertical') {\r\n          this.xScale(value);\r\n          value = this.xScale();\r\n        }\r\n        else {\r\n          this.yScale(value);\r\n          value = this.yScale();\r\n        }\r\n\r\n        return {\r\n          override: value\r\n        };\r\n      }\r\n    }),\r\n\r\n    // d3.axis extensions\r\n    ticks: property({\r\n      default_value: [10]\r\n    }),\r\n    tickValues: property(),\r\n\r\n    drawLine: di(function(chart, d) {\r\n      var x1, x2, y1, y2;\r\n      if (chart.orientation() == 'vertical') {\r\n        x1 = x2 = chart.xScale()(d);\r\n        y1 = 0;\r\n        y2 = chart.height();\r\n      }\r\n      else {\r\n        x1 = 0;\r\n        x2 = chart.width();\r\n        y1 = y2 = chart.yScale()(d);\r\n      }\r\n\r\n      d3.select(this)\r\n        .attr('x1', x1)\r\n        .attr('x2', x2)\r\n        .attr('y1', y1)\r\n        .attr('y2', y2);\r\n    }),\r\n\r\n    width: function width() {\r\n      // Use container's explicit chart width rather than component width (if available)\r\n      return this.container ? this.container.chartPosition().width : dimensions(this.base).width;\r\n    },\r\n    height: function height() {\r\n      // Use container's explicit chart height rather than component width (if available)\r\n      return this.container ? this.container.chartPosition().height : dimensions(this.base).width;\r\n    },\r\n\r\n    onDataBind: function onDataBind(selection, data) {\r\n      // [false] is given for display: false when attached from Axis\r\n      var hide = data && data[0] && data[0].y === false;\r\n\r\n      var tick_values = this.tickValues();\r\n      if (tick_values == null && !hide) {\r\n        // Get tick values from scale\r\n        var scale = this.orientation() == 'vertical' ? this.xScale() : this.yScale();\r\n        var ticks_args = this.ticks();\r\n\r\n        if (!ticks_args)\r\n          ticks_args = [10];\r\n        if (!Array.isArray(ticks_args))\r\n          ticks_args = [ticks_args];\r\n\r\n        tick_values = scale.ticks ? scale.ticks.apply(scale, ticks_args) : scale.domain();\r\n      }\r\n\r\n      return selection.selectAll('line').data(hide ? [] : tick_values);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('line')\r\n        .attr('class', 'chart-gridline');\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('opacity', 0)\r\n        .each(this.drawLine);\r\n    },\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      selection.attr('opacity', 1);\r\n    },\r\n    onExit: function onExit(selection) {\r\n      selection.remove();\r\n    },\r\n\r\n    skip_layout: true\r\n  }, {\r\n    layer_type: 'chart',\r\n    z_index: 55\r\n  });\r\n\r\n  var gridlines = createHelper('Gridlines');\n\n  var default_legend_margins = {top: 8, right: 8, bottom: 8, left: 8};\r\n\r\n  // TODO Define after Legend\r\n  // Possibly by passing into Legend/wrapping with Legend\r\n  var drawLegend = createDraw({\r\n    select: select,\r\n    enter: enter,\r\n    merge: merge\r\n  });\r\n\r\n  /**\r\n    Legend component that can automatically pull chart and series information from d3.compose\r\n\r\n    Notes:\r\n\r\n    - To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\r\n    - To exclude a series from the legend, use `exclude_from_legend = true` in series object\r\n    - To add swatch for custom chart, use `Legend.registerSwatch()`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var input = [{key: 'input', name: 'Input', values: data.input}];\r\n        var output = [\r\n          {key: 'output1', name: 'Output 1', values: data.output1},\r\n          {key: 'output2', name: 'Output 2', values: data.output2}\r\n        ];\r\n\r\n        var charts = [\r\n          d3c.lines('a', {data: input}), // ...\r\n          d3c.bars('b', {data: output}) // ...\r\n        ];\r\n        var legend = d3c.legend({charts: ['a', 'b']});\r\n\r\n        return [\r\n          [d3c.layered(charts), legend]\r\n        ];\r\n      });\r\n\r\n    // -> automatically creates legend from series data for 'a' and 'b'\r\n    //    (Lines Swatch) Input\r\n    //    (Bars Swatch) Output 1\r\n    //    (Bars Swatch) Output 2\r\n\r\n    // or, manually set data for legend\r\n    return [\r\n      d3c.legend({\r\n        data: [\r\n          {type: 'Lines', text: 'Input', class: 'series-index-0'},\r\n          {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\r\n          {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\r\n        ]\r\n      })\r\n    };\r\n    ```\r\n    @class Legend\r\n    @extends Component, StandardLayer\r\n  */\r\n  var Mixed$6 = mixin(Component, architecture);\r\n  var Legend = Mixed$6.extend({\r\n    prepare: createPrepare(\r\n      prepareMargins$2,\r\n      prepareLegendData,\r\n      prepareLegend\r\n    ),\r\n\r\n    render: function(data) {\r\n      // TODO Move to lifecycle\r\n      this.update(this.base, this.options());\r\n      this.props.data = data;\r\n\r\n      var layer = getLayer(this.base, 'legend')\r\n        .classed('chart-legend', true);\r\n      var props = this.prepare();\r\n\r\n      drawLegend(layer, props);\r\n    },\r\n\r\n    swatchClass: function(props, context, d) {\r\n      return compact(['chart-legend-swatch', d['class']]).join(' ');\r\n    },\r\n\r\n    createSwatch: function(props, context, d, i) {\r\n      var swatches = context.constructor.swatches;\r\n      if (!swatches)\r\n        return;\r\n\r\n      var swatch = d && d.type && swatches[d.type] || swatches['default'];\r\n      if (!swatch)\r\n        return;\r\n\r\n      var selection = d3.select(this);\r\n      swatch.call(selection, context, d, i);\r\n    },\r\n\r\n    getLegendData: function(chart, series, series_index) {\r\n      return {\r\n        text: series.name || 'Series ' + (series_index + 1),\r\n        key: chart.id + '.' + (series.key || series_index),\r\n        type: chart.type,\r\n        'class': compact([\r\n          'chart-series',\r\n          'chart-index-' + series_index,\r\n          chart.options()['class'],\r\n          series['class']\r\n        ]).join(' ')\r\n      };\r\n    },\r\n\r\n    // TODO\r\n    // _itemDetails: function _itemDetails(d, i) {\r\n    //   return {\r\n    //     legend: this,\r\n    //     d: d,\r\n    //     i: i\r\n    //   };\r\n    // },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    initialize: function() {\r\n      Mixed$6.prototype.initialize.apply(this, arguments);\r\n      this.attached = {};\r\n    },\r\n    draw: function(data) {\r\n      this.render(data);\r\n    },\r\n    swatchDimensions: function() {\r\n      return this.props.swatchDimensions;\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Component.properties, {\r\n      /**\r\n        Array of chart keys from container to display in legend\r\n\r\n        @example\r\n        ```js\r\n        d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          var charts = [\r\n            {id: 'a'},\r\n            {id: 'b'},\r\n            {id: 'c'}\r\n          ];\r\n          var legend = d3c.legend({charts: ['a', 'c']});\r\n\r\n          return [\r\n            [d3c.layered(charts), legend]\r\n          ];\r\n        });\r\n        ```\r\n        @property charts\r\n        @type Array\r\n      */\r\n      charts: {\r\n        type: types.array\r\n      },\r\n\r\n      /**\r\n        Dimensions of \"swatch\" in px\r\n\r\n        @property swatchDimensions\r\n        @type Object\r\n        @default {width: 20, height: 20}\r\n      */\r\n      swatchDimensions: {\r\n        type: types.object,\r\n        getDefault: function() {\r\n          return {width: 20, height: 20};\r\n        }\r\n      },\r\n\r\n       /**\r\n        Margins (in pixels) around legend\r\n\r\n        @property margins\r\n        @type Object\r\n        @default {top: 8, right: 8, bottom: 8, left: 8}\r\n      */\r\n      margins: {\r\n        type: types.any,\r\n        getDefault: function() {\r\n          return default_legend_margins;\r\n        }\r\n      },\r\n\r\n      /**\r\n        Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\r\n        (Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")\r\n\r\n        @property stackDirection\r\n        @type String\r\n        @default (based on position)\r\n      */\r\n      stackDirection: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['vertical', 'horizontal'], value);\r\n        },\r\n        getDefault: function(selection, props) {\r\n          var direction_by_position = {\r\n            top: 'horizontal',\r\n            right: 'vertical',\r\n            bottom: 'horizontal',\r\n            left: 'vertical'\r\n          };\r\n          return direction_by_position[props.position];\r\n        }\r\n      }\r\n    }),\r\n\r\n    z_index: 200,\r\n    swatches: {\r\n      'default': function(chart) {\r\n        var swatch_dimensions = chart.swatchDimensions();\r\n\r\n        this.append('circle')\r\n          .attr('cx', swatch_dimensions.width / 2)\r\n          .attr('cy', swatch_dimensions.height / 2)\r\n          .attr('r', d3.min([swatch_dimensions.width, swatch_dimensions.height]) / 2)\r\n          .attr('class', 'chart-swatch');\r\n      }\r\n    },\r\n\r\n    /**\r\n      Register a swatch create function for the given chart type\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\r\n        var dimensions = chart.swatchDimensions();\r\n\r\n        return this.append('line')\r\n          .attr('x1', 0).attr('y1', dimensions.height / 2)\r\n          .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\r\n          .attr('class', 'chart-line');\r\n      });\r\n      ```\r\n      @method registerSwatch\r\n      @static\r\n      @param {Array|String} types Chart type(s)\r\n      @param {Function} create \"di\" function that inserts swatch\r\n    */\r\n    registerSwatch: function(chart_types, create) {\r\n      if (!Array.isArray(chart_types))\r\n        chart_types = [chart_types];\r\n\r\n      chart_types.forEach(function(chart_type) {\r\n        this.swatches[chart_type] = create;\r\n      }, this);\r\n    }\r\n  });\r\n\r\n  // DEPRECATED Backwards compatibility for properties\r\n  createProperties(Legend);\r\n\r\n  function prepareMargins$2(selection, props) {\r\n    return extend({}, props, {\r\n      margins: getMargins(props.margins, default_legend_margins)\r\n    });\r\n  }\r\n\r\n  function prepareLegendData(selection, props, context) {\r\n    // Pull legend data from charts, if specified\r\n    var data = props.data;\r\n    if (props.charts) {\r\n      var charts = context.container.charts();\r\n      data = props.charts.reduce(function(combined_data, chart_id) {\r\n        var chart = find(charts, function(find_chart) {\r\n          return find_chart.id == chart_id;\r\n        });\r\n\r\n        // Check for exclude from legend option\r\n        if (!chart || chart.exclude_from_legend || chart.options().exclude_from_legend)\r\n          return combined_data;\r\n\r\n        var chart_data = context.container.demux(chart_id, context.container.data());\r\n        if (!isSeriesData(chart_data))\r\n          chart_data = [{values: chart_data}];\r\n\r\n        var legend_data = chart_data.reduce(function(memo, series, index) {\r\n          if (series && !series.exclude_from_legend)\r\n            memo.push(context.getLegendData(chart, series, index));\r\n\r\n          return memo;\r\n        }, []);\r\n\r\n        return combined_data.concat(legend_data);\r\n      }, []);\r\n    }\r\n\r\n    return extend({}, props, {\r\n      data: data\r\n    });\r\n  }\r\n\r\n  function prepareLegend(selection, props, context) {\r\n    var data = props.data.map(function(d, i) {\r\n      return extend({}, d, {\r\n        'class': context.swatchClass(props, context, d, i)\r\n      });\r\n    });\r\n\r\n    return extend({}, props, {\r\n      data: data,\r\n      createSwatch: curry(context.createSwatch, props, context)\r\n    });\r\n  }\r\n\r\n  function select(props) {\r\n    return this.selectAll('.chart-legend-group')\r\n      .data(props.data, function(d) { return d.key; });\r\n  }\r\n\r\n  function enter(props) {\r\n    var groups = this.append('g')\r\n      .attr('class', 'chart-legend-group')\r\n      .style({'pointer-events': 'all'});\r\n      // TODO\r\n      // .on('mouseenter', function(d, i) {\r\n      //   this.container.trigger('mouseenter:legend', this._itemDetails(d, i));\r\n      // }.bind(this))\r\n      // .on('mousemove', function(d, i) {\r\n      //   this.container.trigger('mousemove:legend', this._itemDetails(d, i));\r\n      // }.bind(this))\r\n      // .on('mouseleave', function(d, i) {\r\n      //   this.container.trigger('mouseleave:legend', this._itemDetails(d, i));\r\n      // }.bind(this));\r\n\r\n    groups.append('g')\r\n      .attr('width', props.swatchDimensions.width)\r\n      .attr('height', props.swatchDimensions.height)\r\n      .attr('class', 'chart-legend-swatch');\r\n    groups.append('text')\r\n      .attr('class', 'chart-legend-label');\r\n\r\n    groups.append('rect')\r\n      .attr('class', 'chart-legend-hover')\r\n      .style({visibility: 'hidden'});\r\n  }\r\n\r\n  function merge(props) {\r\n    var size = props.swatchDimensions;\r\n    var swatch = this.select('.chart-legend-swatch');\r\n\r\n    swatch\r\n      .attr('class', function(d) { return d['class']; })\r\n      .selectAll('*').remove();\r\n\r\n    swatch.each(props.createSwatch);\r\n\r\n    this.select('.chart-legend-label')\r\n      .text(function(d) { return d.text; })\r\n      .each(function() {\r\n        // Vertically center text\r\n        var offset = alignText(this, size.height);\r\n        d3.select(this)\r\n          .attr('transform', translate(size.width + 5, offset));\r\n      });\r\n\r\n    // Position groups after positioning everything inside\r\n    this.call(stack({\r\n      direction: props.stackDirection,\r\n      origin: 'top',\r\n      padding: 5,\r\n      min_height: size.height,\r\n      min_width: size.width\r\n    }));\r\n\r\n    // Position hover listeners\r\n    var sizes = [];\r\n    this.each(function() {\r\n      sizes.push(this.getBBox());\r\n    });\r\n    this.select('.chart-legend-hover').each(function(d, i) {\r\n      var item_size = sizes[i];\r\n      var transform = null;\r\n\r\n      if (item_size.height > size.height)\r\n        transform = translate(0, item_size.y);\r\n\r\n      d3.select(this)\r\n        .attr('width', item_size.width)\r\n        .attr('height', item_size.height)\r\n        .attr('transform', transform);\r\n    });\r\n  }\r\n\r\n  // Create line swatch for Line and LineValues\r\n  Legend.registerSwatch(['Lines'], function(chart) {\r\n    var swatch_dimensions = chart.swatchDimensions();\r\n\r\n    return this.append('line')\r\n      .attr('x1', 0).attr('y1', swatch_dimensions.height / 2)\r\n      .attr('x2', swatch_dimensions.width).attr('y2', swatch_dimensions.height / 2)\r\n      .attr('class', 'chart-line');\r\n  });\r\n\r\n  // Create bars swatch for Bars and StackedBars\r\n  Legend.registerSwatch(['Bars', 'StackedBars', 'HorizontalBars', 'HorizontalStackedBars'], function(chart) {\r\n    var swatch_dimensions = chart.swatchDimensions();\r\n\r\n    return this.append('rect')\r\n      .attr('x', 0).attr('y', 0)\r\n      .attr('width', swatch_dimensions.width).attr('height', swatch_dimensions.height)\r\n      .attr('class', 'chart-bar');\r\n  });\r\n\r\n  var legend = createHelper('Legend');\n\n  /**\r\n    Legend positioned within chart bounds.\r\n\r\n    @class InsetLegend\r\n    @extends Legend\r\n  */\r\n  var InsetLegend = Legend.extend({\r\n    render: function(data) {\r\n      Legend.prototype.render.call(this, data);\r\n\r\n      var layer = getLayer(this.base, 'legend');\r\n      var transform = getTransform(layer, this.props);\r\n\r\n      layer.attr('transform', transform);\r\n    },\r\n\r\n    skip_layout: true\r\n  }, {\r\n    properties: extend({}, Legend.properties, {\r\n      /**\r\n        Position legend within chart layer `{x, y, relative_to}`\r\n        Use `relative_to` to use x,y values relative to x-y origin\r\n        (e.g. `\"left-top\"` is default)\r\n\r\n        @example\r\n        ```js\r\n        d3.select('#chart')\r\n          .chart('Compose', function(data) {\r\n            return {\r\n              components: {\r\n                legend: {\r\n                  type: 'InsetLegend',\r\n                  // Position legend 10px away from right-bottom corner of chart\r\n                  translation: {x: 10, y: 10, relative_to: 'right-bottom'}\r\n                }\r\n              }\r\n            }\r\n          });\r\n        ```\r\n        @property translation\r\n        @type Object {x,y}\r\n        @default {x: 10, y: 10, relative_to: 'left-top'}\r\n      */\r\n      translation: {\r\n        type: types.object,\r\n        getDefault: function() {\r\n          return {x: 10, y: 0, relative_to: 'left-top'};\r\n        }\r\n      }\r\n    }),\r\n\r\n    layer_type: 'chart'\r\n  });\r\n\r\n  // DEPRECATED Backwards compatibility for properties\r\n  createProperties(InsetLegend);\r\n\r\n  function getTransform(layer, props) {\r\n    var value = props.translation;\r\n    var x = value.x || 0;\r\n    var y = value.y || 0;\r\n    var relative_to_x = (value.relative_to && value.relative_to.split('-')[0]) || 'left';\r\n    var relative_to_y = (value.relative_to && value.relative_to.split('-')[1]) || 'top';\r\n    var size = dimensions(layer);\r\n\r\n    if (relative_to_x === 'right')\r\n      x = props.width - size.width - x;\r\n    if (relative_to_y === 'bottom')\r\n      y = props.height - size.height - y;\r\n\r\n    return translate(x, y);\r\n  }\r\n\r\n  var insetLegend = createHelper('InsetLegend');\n\n  /**\r\n    Add text to a chart.\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        return {\r\n          components: {\r\n            title: {\r\n              type: 'Text',\r\n              position: 'top'\r\n              text: 'Main Title',\r\n              textAlign: 'left',\r\n              'class': 'title'\r\n            },\r\n            notes: {\r\n              type: 'Text',\r\n              position: 'bottom',\r\n              text: 'Notes',\r\n              'class': 'notes'\r\n            }\r\n          }\r\n        };\r\n      });\r\n    ```\r\n    @class Text\r\n    @extends Component, StandardLayer\r\n  */\r\n  var Mixed$4 = mixin(Component, architecture);\r\n  var Text = Mixed$4.extend({\r\n    prepare: createPrepare(\r\n      prepareText\r\n    ),\r\n\r\n    render: function() {\r\n      // TODO Move to lifecycle\r\n      this.update(this.base, this.options());\r\n\r\n      var layer = getLayer(this.base, 'text')\r\n        .classed('chart-text', true);\r\n      var props = this.prepare();\r\n\r\n      drawText(layer, props);\r\n    },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    initialize: function() {\r\n      Mixed$4.prototype.initialize.apply(this, arguments);\r\n      this.attached = {};\r\n    },\r\n    draw: function() {\r\n      this.render();\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Component.properties, {\r\n      /**\r\n        Text to display\r\n\r\n        @property text\r\n        @type String\r\n      */\r\n      text: types.string,\r\n\r\n      /**\r\n        Rotation of text\r\n\r\n        @property rotation\r\n        @type Number\r\n        @default 0\r\n      */\r\n      rotation: {\r\n        type: types.number,\r\n        getDefault: function() {\r\n          return 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n        Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)\r\n\r\n        @property textAlign\r\n        @type String\r\n        @default \"center\"\r\n      */\r\n      textAlign: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['left', 'center', 'right'], value);\r\n        },\r\n        getDefault: function() {\r\n          return 'center';\r\n        }\r\n      },\r\n\r\n      /**\r\n        text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)\r\n\r\n        @property anchor\r\n        @type String\r\n        @default (set by `textAlign`)\r\n      */\r\n      anchor: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['start', 'middle', 'end', 'inherit'], value);\r\n        },\r\n        getDefault: function(selection, props) {\r\n          return {\r\n            left: 'start',\r\n            center: 'middle',\r\n            right: 'end'\r\n          }[props.textAlign];\r\n        }\r\n      },\r\n\r\n      /**\r\n        Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)\r\n\r\n        @property verticalAlign\r\n        @type String\r\n        @default \"middle\"\r\n      */\r\n      verticalAlign: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['top', 'middle', 'bottom'], value);\r\n        },\r\n        getDefault: function() {\r\n          return 'middle';\r\n        }\r\n      },\r\n\r\n      /**\r\n        Style object containing styles for text\r\n\r\n        @property style\r\n        @type Object\r\n        @default {}\r\n      */\r\n      style: {\r\n        type: types.object,\r\n        getDefault: function() {\r\n          return {};\r\n        }\r\n      }\r\n    }),\r\n\r\n    z_index: 70\r\n  });\r\n\r\n  // DEPRECATED Backwards compatibility for properties\r\n  createProperties(Text);\r\n\r\n  function prepareText(selection, props) {\r\n    // Calculate transform\r\n    var x = {\r\n      left: 0,\r\n      center: props.width / 2,\r\n      right: props.width\r\n    }[props.textAlign];\r\n    var y = {\r\n      top: 0,\r\n      middle: props.height / 2,\r\n      bottom: props.height\r\n    }[props.verticalAlign];\r\n\r\n    var translation = translate(x, y);\r\n    var rotation = rotate(props.rotation);\r\n    var transform = translation + ' ' + rotation;\r\n\r\n    return extend({}, props, {\r\n      transform: transform\r\n    });\r\n  }\r\n\r\n  function drawText(selection, props) {\r\n    var text_selection = selection.selectAll('text');\r\n\r\n    if (text_selection.empty())\r\n      text_selection = selection.append('text');\r\n\r\n    text_selection\r\n      .attr('transform', props.transform)\r\n      .attr('style', style(props.style))\r\n      .attr('text-anchor', props.anchor)\r\n      .attr('class', props['class'])\r\n      .text(props.text);\r\n  }\r\n\r\n  function textOptions(id, options, default_options) {\r\n    if (!options) {\r\n      options = id;\r\n      id = undefined;\r\n    }\r\n    if (isString(options))\r\n      options = {text: options};\r\n\r\n    return extend({id: id}, default_options, options);\r\n  }\r\n\r\n  function text(id, options) {\r\n    return textOptions(id, options, {type: 'Text'});\r\n  }\n\n  /**\r\n    Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)\r\n\r\n    @class Title\r\n    @extends Text\r\n  */\r\n  var Title = Text.extend({\r\n    prepare: createPrepare(\r\n      prepareMargins,\r\n      prepareText\r\n    ),\r\n\r\n    render: function() {\r\n      Text.prototype.render.call(this);\r\n      getLayer(this.base, 'text').classed('chart-title', true);\r\n    },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    margins: function() {\r\n      return this.props.margins;\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Text.properties, {\r\n      /**\r\n        Margins (in pixels) around Title\r\n\r\n        @property margins\r\n        @type Object\r\n        @default (set based on `position`)\r\n      */\r\n      margins: {\r\n        type: types.any,\r\n        getDefault: function(selection, props) {\r\n          return defaultMargins(props.position);\r\n        }\r\n      },\r\n\r\n      /**\r\n        Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).\r\n\r\n        @property rotation\r\n        @type Number\r\n        @default (set based on `position`)\r\n      */\r\n      rotation: extend({}, Text.properties.rotation, {\r\n        getDefault: function(selection, props) {\r\n          var rotate_by_position = {\r\n            right: 90,\r\n            left: -90\r\n          };\r\n\r\n          return rotate_by_position[props.position] || 0;\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  // DEPRECATED Backwards compatibility for properties\r\n  createProperties(Title);\r\n\r\n  function prepareMargins(selection, props) {\r\n    return extend({}, props, {\r\n      margins: getMargins(props.margins, defaultMargins(props.position))\r\n    });\r\n  }\r\n\r\n  function defaultMargins(position) {\r\n    var default_margin = 8;\r\n    var margins_by_position = {\r\n      top: {top: default_margin, bottom: default_margin},\r\n      right: {right: default_margin, left: default_margin},\r\n      bottom: {top: default_margin, bottom: default_margin},\r\n      left: {right: default_margin, left: default_margin}\r\n    };\r\n    return getMargins(margins_by_position[position]);\r\n  }\r\n\r\n  function title(id, options) {\r\n    return textOptions(id, options, {type: 'Title'});\r\n  }\n\n  /**\r\n    Axis title component that extends Title with defaults (styling)\r\n\r\n    @class AxisTitle\r\n    @extends Title\r\n  */\r\n  var AxisTitle = Title.extend({\r\n    prepare: createPrepare(\r\n      prepareMargins$1,\r\n      prepareText\r\n    ),\r\n\r\n    setLayout: function(x, y, options) {\r\n      Title.prototype.setLayout.call(this, x, y, options);\r\n    },\r\n\r\n    render: function() {\r\n      Title.prototype.render.call(this);\r\n      getLayer(this.base, 'text')\r\n        .classed('chart-title', false)\r\n        .classed('chart-axis-title', true);\r\n    }\r\n  }, {\r\n    properties: extend({}, Title.properties, {\r\n      /**\r\n        Margins (in pixels) around axis title\r\n\r\n        @property margins\r\n        @type Object\r\n        @default (set based on `position`)\r\n      */\r\n      margins: extend({}, Title.properties.margins, {\r\n        getDefault: function(selection, props) {\r\n          return defaultMargins$1(props.position);\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  // DEPRECATED Backwards compatibility for properties\r\n  createProperties(AxisTitle);\r\n\r\n  function prepareMargins$1(selection, props) {\r\n    return extend({}, props, {\r\n      margins: getMargins(props.margins, defaultMargins$1(props.position))\r\n    });\r\n  }\r\n\r\n  function defaultMargins$1(position) {\r\n    var default_margin = 8;\r\n    var margins_by_position = {\r\n      top: {top: default_margin / 2, bottom: default_margin},\r\n      right: {left: default_margin / 2, right: default_margin},\r\n      bottom: {bottom: default_margin / 2, top: default_margin},\r\n      left: {right: default_margin / 2, left: default_margin}\r\n    };\r\n\r\n    return getMargins(margins_by_position[position]);\r\n  }\r\n\r\n  function axisTitle(id, options) {\r\n    return textOptions(id, options, {type: 'AxisTitle'});\r\n  }\n\n  /**\r\n    Axis component for XY data (wraps `d3.axis`).\r\n\r\n    Available d3.axis extensions:\r\n\r\n    - `ticks`\r\n    - `tickValues`\r\n    - `tickSize`\r\n    - `innerTickSize`\r\n    - `outerTickSize`\r\n    - `tickPadding`\r\n    - `tickFormat`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var scales = {\r\n          x: {data: data, key: 'x'},\r\n          y: {data: data, key: 'y'}\r\n        };\r\n\r\n        var charts = [];\r\n        var xAxis = d3c.axis({scale: scales.x});\r\n        var yAxis = d3c.axis({scale: scales.y});\r\n\r\n        return [\r\n          // Display y-axis to left of charts\r\n          [yAxis, d3c.layered(charts)],\r\n\r\n          // Display x-axis below charts\r\n          xAxis\r\n        ];\r\n      });\r\n    ```\r\n    @class Axis\r\n    @extends Component, Transition\r\n  */\r\n  var Mixed$5 = mixin(Component, Transition, architecture);\r\n\r\n  var Axis = Mixed$5.extend({\r\n    prepare: createPrepare(\r\n      prepareScales,\r\n      prepareAxis,\r\n      prepareGridlines\r\n    ),\r\n\r\n    render: function() {\r\n      // TODO Move to lifecycle\r\n      // also, update is called on getLayout and render\r\n      // to get up-to-date width/height defaults in scales\r\n      // will need to move width/height and scale to prepare\r\n      // (rather than getDefaults)\r\n      this.update(this.base, this.options());\r\n\r\n      var props = this.prepare();\r\n      var layer = getLayer(this.base, 'axis')\r\n        .attr('class', 'chart-axis')\r\n        .attr('transform', props.transform);\r\n\r\n      if (props.gridlines) {\r\n        var gridlines_layer = getLayer(this.base, 'gridlines')\r\n          .attr('class', 'chart-axis-gridlines');\r\n        this.attach('gridlines', Gridlines, gridlines_layer, props.gridlines);\r\n      }\r\n      else {\r\n        this.detach('gridlines');\r\n      }\r\n\r\n      drawAxis(layer, {axis: props.axis, transition: props.transition});\r\n    },\r\n\r\n    getLayout: function() {\r\n      // TODO Move to lifecycle\r\n      this.update(this.base, this.options());\r\n\r\n      // Draw layout axis\r\n      var props = {\r\n        axis: this.prepare().axis\r\n      };\r\n      var layer = getLayer(this.base, 'layout')\r\n        .attr('class', 'chart-axis chart-layout')\r\n        .style({display: 'none'});\r\n\r\n      drawAxis(layer, props);\r\n\r\n      // Calculate layout\r\n      // (make layout axis visible for width calculations in Firefox)\r\n      layer.style({display: 'block'});\r\n\r\n      var label_overhang = getLabelOverhang(layer, this.props.orientation);\r\n\r\n      layer.style({display: 'none'});\r\n\r\n      return {\r\n        position: this.props.position,\r\n        width: label_overhang.width,\r\n        height: label_overhang.height\r\n      };\r\n    },\r\n    setLayout: function() {\r\n      // Axis is positioned as chart layer, so don't set layout\r\n    },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    initialize: function() {\r\n      Mixed$5.prototype.initialize.apply(this, arguments);\r\n      this.attached = {};\r\n    },\r\n    draw: function() {\r\n      this.render();\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Component.properties, {\r\n      /**\r\n        Scale to pass to d3.axis\r\n\r\n        - If `xScale`/`yScale` are given, `scale` is set automatically based on `position`.\r\n        - Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used\r\n\r\n        @example\r\n        ```js\r\n        // Set with d3.scale directly\r\n        axis.scale(d3.scale());\r\n\r\n        // or with Object passed helpers.createScale\r\n        axis.scale({data: data, key: 'x'});\r\n\r\n        // For x0/y0 position, both xScale and yScale needed\r\n        // (scale is automatically set by position)\r\n        axis.xScale({domain: [0, 100]});\r\n        axis.yScale({domain: [0, 10]});\r\n        axis.position('y0');\r\n\r\n        // -> axis.scale() -> axis.xScale by default\r\n        ```\r\n        @property scale\r\n        @type Object|d3.scale\r\n      */\r\n      scale: types.any,\r\n\r\n      xScale: types.any,\r\n\r\n      yScale: types.any,\r\n\r\n      /**\r\n        {x,y} translation of axis relative to chart\r\n        (set by default based on position)\r\n\r\n        @property translation\r\n        @type Object\r\n        @default (set based on position)\r\n      */\r\n      translation: {\r\n        type: types.object,\r\n        getDefault: function(selection, props) {\r\n          return {\r\n            top: {x: 0, y: 0},\r\n            right: {x: props.width, y: 0},\r\n            bottom: {x: 0, y: props.height},\r\n            left: {x: 0, y: 0}\r\n          }[props.position];\r\n        }\r\n      },\r\n\r\n      /**\r\n        Axis orient for ticks\r\n        (set by default based on position)\r\n\r\n        @property orient\r\n        @type String\r\n        @default (set based on position)\r\n      */\r\n      orient: {\r\n        type: types.string,\r\n        getDefault: function(selection, props) {\r\n          return props.position;\r\n        }\r\n      },\r\n\r\n      /**\r\n        Axis orientation (vertical or horizonal)\r\n\r\n        @property orientation\r\n        @type String\r\n        @default (set based on position)\r\n      */\r\n      orientation: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['horizontal', 'vertical'], value);\r\n        },\r\n        getDefault: function(selection, props) {\r\n          return {\r\n            top: 'horizontal',\r\n            right: 'vertical',\r\n            bottom: 'horizontal',\r\n            left: 'vertical',\r\n            x0: 'vertical',\r\n            y0: 'horizontal'\r\n          }[props.position];\r\n        }\r\n      },\r\n\r\n      /**\r\n        Attach gridlines for axis\r\n        (`true` to show with default options, `{...}` to pass options to `Gridlines`)\r\n\r\n        @property gridlines\r\n        @type Boolean|Object\r\n        @default false\r\n      */\r\n      gridlines: types.any,\r\n\r\n      ticks: types.any,\r\n      tickValues: types.any,\r\n      tickSize: types.any,\r\n      innerTickSize: types.any,\r\n      outerTickSize: types.any,\r\n      tickPadding: types.any,\r\n      tickFormat: types.any\r\n    }),\r\n\r\n    layer_type: 'chart',\r\n    z_index: 60\r\n  });\r\n\r\n  // DEPRECATED Backwards compatibility for properties\r\n  createProperties(Axis);\r\n\r\n  // TODO Move to xy.prepare\r\n  function prepareScales(selection, props) {\r\n    var xScale = props.orientation == 'horizontal' ? props.scale : props.xScale;\r\n    if (!xScale)\r\n      xScale = XY.getDefaultXScale.call({data: function() { return props.data; }});\r\n\r\n    xScale = createScale(xScale);\r\n    XY.setXScaleRange.call({width: function() { return props.width; }}, xScale);\r\n\r\n    var yScale = props.orientation == 'vertical' ? props.scale : props.yScale;\r\n    if (!yScale)\r\n      yScale = XY.getDefaultYScale.call({data: function() { return props.data; }});\r\n\r\n    yScale = createScale(yScale);\r\n    XY.setYScaleRange.call({height: function() { return props.height; }}, yScale);\r\n\r\n    return extend({}, props, {\r\n      xScale: xScale,\r\n      yScale: yScale,\r\n      scale: props.orientation == 'vertical' ? yScale : xScale\r\n    });\r\n  }\r\n\r\n  function prepareAxis(selection, props, context) {\r\n    var axis = {\r\n      scale: props.scale,\r\n      orient: props.orient,\r\n      ticks: props.ticks,\r\n      tickValues: props.tickValues,\r\n      tickSize: props.tickSize,\r\n      innerTickSize: props.innerTickSize,\r\n      outerTickSize: props.outerTickSize,\r\n      tickPadding: props.tickPadding,\r\n      tickFormat: props.tickFormat\r\n    };\r\n    var transform = translate(props.translation);\r\n    var transition = {\r\n      // Pull properties from Transition mixin\r\n      duration: context.duration(),\r\n      delay: context.delay(),\r\n      ease: context.ease()\r\n    };\r\n\r\n    return extend({}, props, {\r\n      axis: axis,\r\n      transform: transform,\r\n      transition: transition\r\n    });\r\n  }\r\n\r\n  function prepareGridlines(selection, props, context) {\r\n    var gridlines = props.gridlines;\r\n\r\n    if (gridlines) {\r\n      if (isBoolean(gridlines))\r\n        gridlines = {};\r\n\r\n      gridlines = defaults({}, gridlines, {\r\n        parent: context,\r\n        xScale: props.xScale,\r\n        yScale: props.yScale,\r\n        ticks: props.ticks,\r\n        tickValues: props.tickValues,\r\n        orientation: props.orientation == 'horizontal' ? 'vertical' : 'horizontal'\r\n      });\r\n    }\r\n\r\n    return extend({}, props, {gridlines: gridlines});\r\n  }\r\n\r\n  function drawAxis(selection, props) {\r\n    var axis = createAxis(props.axis);\r\n\r\n    if (props.transition && !selection.selectAll('*').empty())\r\n      selection = selection.transition().call(createTransition(props.transition));\r\n\r\n    selection.call(axis);\r\n  }\r\n\r\n  function createAxis(props) {\r\n    var axis = d3.svg.axis();\r\n    var array_extensions = ['tickValues'];\r\n\r\n    objectEach(props, function(value, key) {\r\n      if (!isUndefined(value)) {\r\n        // If value is array, treat as arguments array\r\n        // otherwise, pass in directly\r\n        if (Array.isArray(value) && !contains(array_extensions, key))\r\n          axis[key].apply(axis, value);\r\n        else\r\n          axis[key](value);\r\n      }\r\n    });\r\n\r\n    return axis;\r\n  }\r\n\r\n  function getLabelOverhang(selection, orientation) {\r\n    // TODO Look into overhang relative to chartBase (for x0, y0)\r\n    var overhangs = {width: [0], height: [0]};\r\n\r\n    selection.selectAll('g').each(function() {\r\n      try {\r\n        // There are cases where getBBox may throw\r\n        // (e.g. not currently displayed in Firefox)\r\n        var bbox = this.getBBox();\r\n\r\n        if (orientation == 'horizontal')\r\n          overhangs.height.push(bbox.height);\r\n        else\r\n          overhangs.width.push(bbox.width);\r\n      }\r\n      catch (ex) {\r\n        // Ignore error\r\n      }\r\n    });\r\n\r\n    return {\r\n      width: d3.max(overhangs.width),\r\n      height: d3.max(overhangs.height)\r\n    };\r\n  }\r\n\r\n  var axis = createHelper('Axis');\n\n  /**\r\n    Common base for creating charts.\r\n    Standard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\r\n\r\n    ### Extending\r\n\r\n    To take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\r\n    and automatically setting properties from `options`, use `d3.compose.helpers.di`\r\n    and `d3.compose.helpers.property` when creating your chart.\r\n\r\n    @example\r\n    ```js\r\n    var helpers = d3.compose.helpers;\r\n\r\n    d3.chart('Chart').extend('Pie', {\r\n      initialize: function() {\r\n        // same as d3.chart\r\n      },\r\n      transform: function(data) {\r\n        // same as d3.chart\r\n      },\r\n\r\n      color: helpers.di(function(chart, d, i) {\r\n        // \"di\" function with parent chart injected (\"this\" = element)\r\n      }),\r\n\r\n      centered: helpers.property({\r\n        default_value: true\r\n        // can be automatically set from options object\r\n      })\r\n    });\r\n    ```\r\n    @class Chart\r\n    @extends Base\r\n  */\r\n  var Chart = Base.extend({}, {\r\n    /**\r\n      Default z-index for chart\r\n      (Components are 50 by default, so Chart = 100 is above component by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('BelowComponentLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 40\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 100\r\n    */\r\n    z_index: 100,\r\n    layer_type: 'chart'\r\n  });\n\n  /**\r\n    Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\r\n\r\n    ### Extending\r\n\r\n    To extend the `Labels` chart, the following methods are available:\r\n\r\n    - `insertLabels`\r\n    - `mergeLabels`\r\n    - `layoutLabels`\r\n    - `transitionLabels`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    View the `Labels.js` source for the default implementation and more information on these methods.\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      return {\r\n        charts: {\r\n          input: {\r\n            type: 'Lines',\r\n            data: data.input,\r\n            // xScale, yScale, other properties...\r\n\r\n            // Show labels with default properties\r\n            labels: true\r\n          },\r\n          output: {\r\n            type: 'Bars',\r\n            data: data.output,\r\n            // xScale, yScale, other properties...\r\n\r\n            // Pass options to labels\r\n            labels: {\r\n              offset: 2,\r\n              position: 'top',\r\n              style: {\r\n                'font-size': '14px'\r\n              },\r\n              format: d3.format(',0d')\r\n            }\r\n          },\r\n          labels: {\r\n            type: 'Labels',\r\n            data: data.labels,\r\n\r\n            // xScale, yScale, other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    chart.draw({\r\n      input: [1, 2, 3],\r\n      output: [10, 20, 30],\r\n      labels: [\r\n        {x: 0, y: 0},\r\n        {x: 0, y: 30, label: 'Override (y by default)'},\r\n        {x: 2, y: 0},\r\n        {x: 2, y: 30}\r\n      ]\r\n    });\r\n    ```\r\n    @class Labels\r\n    @extends Chart, Series, XY, Hover, Transition, StandardLayer\r\n  */\r\n  var Mixed$2 = mixin(Chart, Series, XY, Hover, Transition, StandardLayer);\r\n  var Labels = Mixed$2.extend({\r\n    initialize: function(options) {\r\n      Mixed$2.prototype.initialize.call(this, options);\r\n\r\n      // Proxy attach to parent for hover\r\n      var parent = this.options().parent;\r\n      if (parent) {\r\n        this.parent = parent;\r\n        parent.on('attach', function() {\r\n          this.container = parent.container;\r\n          this.trigger('attach');\r\n        }.bind(this));\r\n      }\r\n\r\n      // Use StandardLayer for extensibility\r\n      this.standardSeriesLayer('Labels', this.base);\r\n    },\r\n\r\n    transform: function(data) {\r\n      data = Mixed$2.prototype.transform.call(this, data);\r\n\r\n      if (!isSeriesData(data))\r\n        data = [{key: 'labels', name: 'Labels', values: data}];\r\n\r\n      // TODO Use ticks / domain from xScale\r\n      // ticks = scale.ticks ? scale.ticks.apply(scale, [10]) : scale.domain()\r\n      return data;\r\n    },\r\n\r\n    /**\r\n      Formatting function or string (string is passed to `d3.format`) for label values\r\n\r\n      @property format\r\n      @type String|Function\r\n    */\r\n    format: property({\r\n      set: function(value) {\r\n        if (isString(value)) {\r\n          return {\r\n            override: d3.format(value)\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Label position relative to data point\r\n      (top, right, bottom, or left)\r\n\r\n      Additionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\r\n      where `a` and `b` are `top`, `right`, `bottom`, or `left`\r\n\r\n      For more advanced positioning, a \"di\" function can be specified to set position per label\r\n\r\n      @example\r\n      ```js\r\n      labels.position('top'); // top for all values\r\n      labels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\r\n      labels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\r\n      ```\r\n      @property position\r\n      @type String|Function\r\n      @default top|bottom\r\n    */\r\n    position: property({\r\n      default_value: 'top|bottom',\r\n      get: function(value) {\r\n        if (isString(value) && value.indexOf('|') >= 0) {\r\n          var chart = this;\r\n          var parts = value.split('|');\r\n          return function(d, i, j) {\r\n            var y_value = chart.yValue.call(this, d, i, j);\r\n            return y_value >= 0 ? parts[0] : parts[1];\r\n          };\r\n        }\r\n        else {\r\n          return value;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Offset between data point and label\r\n      (if `Number` is given, offset is set based on position)\r\n\r\n      @property offset\r\n      @type Number|Object\r\n      @default 0\r\n    */\r\n    offset: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Padding between text and label background\r\n\r\n      @property padding\r\n      @type Number\r\n      @default 1\r\n    */\r\n    padding: property({default_value: 1}),\r\n\r\n    /**\r\n      Define text anchor (start, middle, or end)\r\n\r\n      (set by default based on label position)\r\n\r\n      @property anchor\r\n      @type String\r\n      @default middle\r\n    */\r\n    anchor: property({\r\n      validate: function(value) {\r\n        return contains(['start', 'middle', 'end'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Define text-alignment (top, middle, or bottom)\r\n\r\n      (set by default based on label position)\r\n\r\n      @property alignment\r\n      @type String\r\n      @default middle\r\n    */\r\n    alignment: property({\r\n      validate: function(value) {\r\n        return contains(['top', 'middle', 'bottom'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get label text for data-point (uses \"label\" property or y-value)\r\n\r\n      @method labelText\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {String}\r\n    */\r\n    labelText: di(function(chart, d, i) {\r\n      var value = valueOrDefault(d.label, valueOrDefault(d.__original_y, chart.yValue.call(this, d, i)));\r\n      var format = chart.format();\r\n\r\n      return format ? format(value) : value;\r\n    }),\r\n\r\n    /**\r\n      Get class for label group\r\n\r\n      @method labelClass\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {String}\r\n    */\r\n    labelClass: di(function(chart, d) {\r\n      return 'chart-label' + (d['class'] ? ' ' + d['class'] : '');\r\n    }),\r\n\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('g')\r\n        .data(data, this.key);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('g')\r\n        .call(this.insertLabels);\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      selection.attr('class', this.labelClass);\r\n\r\n      this.mergeLabels(selection);\r\n      this.layoutLabels(selection);\r\n    },\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      // Transition labels into position\r\n      this.setupTransition(selection);\r\n      this.transitionLabels(selection);\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    insertLabels: function(selection) {\r\n      selection.append('rect')\r\n        .attr('class', 'chart-label-bg');\r\n      selection.append('text')\r\n        .attr('class', 'chart-label-text');\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    mergeLabels: function(selection) {\r\n      selection.selectAll('text')\r\n        .text(this.labelText);\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    layoutLabels: function(selection) {\r\n      // Calculate layout\r\n      var chart = this;\r\n      var labels = [];\r\n      var position = chart.position();\r\n      var values = {\r\n        offset: chart.offset(),\r\n        padding: chart.padding(),\r\n        anchor: chart.anchor(),\r\n        alignment: chart.alignment()\r\n      };\r\n\r\n      var options;\r\n      if (isString(position))\r\n        options = getOptions();\r\n\r\n      selection.each(function(d, i, j) {\r\n        if (!labels[j])\r\n          labels[j] = [];\r\n\r\n        // Store values for label and calculate layout\r\n        var label = chart._prepareLabel(chart, this, d, i, j);\r\n        labels[j].push(label);\r\n\r\n        var label_options = options || getOptions.call(chart, this, d, i, j);\r\n\r\n        chart._calculateLayout(chart, label_options, label);\r\n      });\r\n\r\n      // Collision detection\r\n      this._handleCollisions(chart, labels);\r\n\r\n      // Layout labels\r\n      labels.forEach(function(series) {\r\n        series.forEach(function(label) {\r\n          this._setLayout(chart, label);\r\n        }, this);\r\n      }, this);\r\n\r\n      function getOptions(element, d, i, j) {\r\n        var label_options = extend({}, values);\r\n        var label_position;\r\n\r\n        if (isFunction(position))\r\n          label_position = position.call(element, d, i, j);\r\n        else\r\n          label_position = position;\r\n\r\n        if (isNumber(label_options.offset)) {\r\n          var offset = {\r\n            top: {x: 0, y: -label_options.offset},\r\n            right: {x: label_options.offset, y: 0},\r\n            bottom: {x: 0, y: label_options.offset},\r\n            left: {x: -label_options.offset, y: 0}\r\n          }[label_position];\r\n\r\n          if (!offset)\r\n            offset = {x: 0, y: 0};\r\n\r\n          label_options.offset = offset;\r\n        }\r\n        if (isUndefined(label_options.anchor)) {\r\n          label_options.anchor = {\r\n            top: 'middle',\r\n            right: 'start',\r\n            bottom: 'middle',\r\n            left: 'end'\r\n          }[label_position];\r\n        }\r\n        if (isUndefined(label_options.alignment)) {\r\n          label_options.alignment = {\r\n            top: 'bottom',\r\n            right: 'middle',\r\n            bottom: 'top',\r\n            left: 'middle'\r\n          }[label_position];\r\n        }\r\n        return label_options;\r\n      }\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    transitionLabels: function(selection) {\r\n      selection.attr('opacity', 1);\r\n    },\r\n\r\n    //\r\n    // Internal\r\n    //\r\n\r\n    _prepareLabel: function(chart, element, d, i) {\r\n      var selection = d3.select(element);\r\n      var text = selection.select('text');\r\n      var bg = selection.select('rect');\r\n\r\n      return {\r\n        x: chart.x.call(element, d, i),\r\n        y: chart.y.call(element, d, i),\r\n        element: element,\r\n        selection: selection,\r\n        text: {\r\n          element: text.node(),\r\n          selection: text\r\n        },\r\n        bg: {\r\n          element: bg.node(),\r\n          selection: bg\r\n        }\r\n      };\r\n    },\r\n\r\n    _calculateLayout: function(chart, options, label) {\r\n      var text_bounds = label.text.element.getBBox();\r\n\r\n      // Need to adjust text for line-height\r\n      var text_y_adjustment = alignText(label.text.element);\r\n\r\n      // Position background\r\n      var layout = label.bg.layout = {\r\n        x: options.offset.x,\r\n        y: options.offset.y,\r\n        width: text_bounds.width + (2 * options.padding),\r\n        height: text_bounds.height + (2 * options.padding)\r\n      };\r\n\r\n      // Set width / height of label\r\n      label.width = layout.width;\r\n      label.height = layout.height;\r\n\r\n      if (options.anchor == 'end')\r\n        label.x -= layout.width;\r\n      else if (options.anchor == 'middle')\r\n        label.x -= (layout.width / 2);\r\n\r\n      if (options.alignment == 'bottom')\r\n        label.y -= layout.height;\r\n      else if (options.alignment == 'middle')\r\n        label.y -= (layout.height / 2);\r\n\r\n      // Center text in background\r\n      label.text.layout = {\r\n        x: layout.x + (layout.width / 2) - (text_bounds.width / 2),\r\n        y: layout.y + (layout.height / 2) - (text_bounds.height / 2) + text_y_adjustment\r\n      };\r\n    },\r\n\r\n    _handleCollisions: function(chart, labels) {\r\n      labels.forEach(function(series, seriesIndex) {\r\n        // Check through remaining series for collisions\r\n        labels.slice(seriesIndex + 1).forEach(function(compareSeries) {\r\n          compareSeries.forEach(function(compareLabel) {\r\n            series.forEach(function(label) {\r\n              var overlapping = checkForOverlap(label, compareLabel);\r\n              var not_grouped = notGrouped(label, compareLabel);\r\n\r\n              if (overlapping && not_grouped)\r\n                groupLabels(label, compareLabel);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      function checkForOverlap(labelA, labelB) {\r\n        var a = getEdges(labelA);\r\n        var b = getEdges(labelB);\r\n\r\n        var contained_LR = (b.left < a.left && b.right > a.right);\r\n        var contained_TB = (b.bottom < a.bottom && b.top > a.top);\r\n        var overlap_LR = (b.left >= a.left && b.left < a.right) || (b.right > a.left && b.right <= a.right) || contained_LR;\r\n        var overlap_TB = (b.top >= a.top && b.top < a.bottom) || (b.bottom > a.top && b.bottom <= a.bottom) || contained_TB;\r\n\r\n        return overlap_LR && overlap_TB;\r\n\r\n        function getEdges(label) {\r\n          return {\r\n            left: label.x,\r\n            right: label.x + label.width,\r\n            top: label.y,\r\n            bottom: label.y + label.height\r\n          };\r\n        }\r\n      }\r\n\r\n      function notGrouped(labelA, labelB) {\r\n        return !groupIncludes(labelA.group, labelB) && !groupIncludes(labelB.group, labelA);\r\n      }\r\n\r\n      function groupIncludes(group, label) {\r\n        return group && group.labels.indexOf(label) > -1;\r\n      }\r\n\r\n      function groupLabels(labelA, labelB) {\r\n        if (labelA.group && labelB.group) {\r\n          // Move labelB group labels into labelA group\r\n          objectEach(labelB.group.labels, function(label) {\r\n            labelA.group.labels.push(label);\r\n            label.group = labelA.group;\r\n          });\r\n\r\n          updateGroupPositions(labelA.group);\r\n        }\r\n        else if (labelA.group) {\r\n          addLabelToGroup(labelB, labelA.group);\r\n        }\r\n        else if (labelB.group) {\r\n          addLabelToGroup(labelA, labelB.group);\r\n        }\r\n        else {\r\n          var group = {labels: []};\r\n          addLabelToGroup(labelA, group);\r\n          addLabelToGroup(labelB, group);\r\n        }\r\n      }\r\n\r\n      function addLabelToGroup(label, group) {\r\n        group.labels.push(label);\r\n        label.group = group;\r\n        label.originalY = label.y;\r\n\r\n        updateGroupPositions(group);\r\n      }\r\n\r\n      function updateGroupPositions(group) {\r\n        function reset(label) {\r\n          // Reset to original y\r\n          label.y = label.originalY;\r\n          return label;\r\n        }\r\n        function sortY(a, b) {\r\n          if (a.y < b.y)\r\n            return -1;\r\n          else if (a.y > b.y)\r\n            return 1;\r\n          else\r\n            return 0;\r\n        }\r\n\r\n        var byY = group.labels.map(reset).sort(sortY).reverse();\r\n\r\n        byY.forEach(function(label, index) {\r\n          var prev = first(byY, index);\r\n          var overlap;\r\n\r\n          for (var i = prev.length - 1; i >= 0; i--) {\r\n            if (checkForOverlap(label, prev[i])) {\r\n              overlap = prev[i];\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (overlap) {\r\n            // Design goal is to maintain y-ordering:\r\n            // even if overlap is not top-most element,\r\n            // still need to position above top-most\r\n            label.y = prev[prev.length - 1].y - label.height;\r\n          }\r\n            \r\n        });\r\n      }\r\n    },\r\n\r\n    _setLayout: function(chart, label) {\r\n      label.bg.selection\r\n        .attr('transform', translate(label.bg.layout.x, label.bg.layout.y))\r\n        .attr('width', label.bg.layout.width)\r\n        .attr('height', label.bg.layout.height);\r\n\r\n      label.text.selection\r\n        .attr('transform', translate(label.text.layout.x, label.text.layout.y));\r\n\r\n      // Position label and set opacity to fade-in\r\n      label.selection\r\n        .attr('transform', translate(label.x, label.y))\r\n        .attr('opacity', 0);\r\n    }\r\n  }, {\r\n    z_index: 150\r\n  });\r\n\r\n  var labels = createHelper('Labels');\n\n  /**\r\n    (in-progress)\r\n\r\n    @class HoverLabels\r\n  */\r\n  var Mixed$3 = mixin(Labels, Hover);\r\n  var HoverLabels = Mixed$3.extend({\r\n    initialize: function(options) {\r\n      Mixed$3.prototype.initialize.call(this, options);\r\n      this.on('attach', function() {\r\n        this.container.on('mouseenter:point', this.onMouseEnterPoint.bind(this));\r\n        this.container.on('mouseleave:point', this.onMouseLeavePoint.bind(this));\r\n      }.bind(this));\r\n    },\r\n\r\n    /**\r\n      Maximum distance to find active points\r\n\r\n      @property hoverTolerance\r\n      @type Number\r\n      @default Infinity\r\n    */\r\n    hoverTolerance: property({\r\n      set: function(value) {\r\n        // Pass through hover tolerance to parent (if present)\r\n        if (this.parent && this.parent.hoverTolerance)\r\n          this.parent.hoverTolerance(value);\r\n      },\r\n      default_value: Infinity\r\n    }),\r\n\r\n    // Don't fade in labels, hidden until hover\r\n    transitionLabels: function() {},\r\n\r\n    onMouseEnterPoint: function(point) {\r\n      var label = this.findLabelForPoint(point);\r\n      if (label)\r\n        d3.select(label).attr('opacity', 1);\r\n    },\r\n    onMouseLeavePoint: function(point) {\r\n      var label = this.findLabelForPoint(point);\r\n      if (label)\r\n        d3.select(label).attr('opacity', 0);\r\n    },\r\n\r\n    findLabelForPoint: function(point) {\r\n      var labels = this.base.selectAll('g.chart-series').selectAll('g');\r\n      var chart = this;\r\n      var label;\r\n\r\n      labels.each(function(d, i, j) {\r\n        var series = chart.seriesData.call(this, d, i, j);\r\n        if (d === point.d && series === point.series)\r\n          label = this;\r\n      });\r\n\r\n      return label;\r\n    }\r\n  });\r\n\r\n  var hoverLabels = createHelper('HoverLabels');\n\n  /**\r\n    Bars chart with centered or adjacent display for single or series data.\r\n\r\n    To display bars for different series next to each other (adjacent),\r\n    use the `adjacent` option when creating the `xScale` (see example below).\r\n\r\n    ### Extending\r\n\r\n    To extend the `Bars` chart, the following methods are available:\r\n\r\n    - `barHeight`\r\n    - `barWidth`\r\n    - `barX`\r\n    - `barY`\r\n    - `barClass`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'Bars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class Bars\r\n    @extends Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer\r\n  */\r\n\r\n  var Mixed$1 = mixin(Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer);\r\n  var Bars = Mixed$1.extend({\r\n    initialize: function(options) {\r\n      Mixed$1.prototype.initialize.call(this, options);\r\n\r\n      this.on('before:draw', function() {\r\n        this.offset_axis = this.getOffsetAxis();\r\n      }.bind(this));\r\n\r\n      // Use standard series layer for extensibility\r\n      // (dataBind, insert, and events defined in prototype)\r\n      this.standardSeriesLayer('Bars', this.base.append('g').classed('chart-bars', true));\r\n      this.attachLabels();\r\n    },\r\n\r\n    barHeight: di(function(chart, d, i) {\r\n      var height = Math.abs(chart.y0() - chart.y.call(this, d, i)) - chart.barOffset();\r\n      return height > 0 ? height : 0;\r\n    }),\r\n    barWidth: di(function(chart) {\r\n      return chart.itemWidth();\r\n    }),\r\n    barX: di(function(chart, d, i) {\r\n      return chart.x.call(this, d, i) - chart.itemWidth() / 2;\r\n    }),\r\n    barY: di(function(chart, d, i) {\r\n      var y = chart.y.call(this, d, i);\r\n      var y0 = chart.y0();\r\n\r\n      return y < y0 ? y : y0 + chart.barOffset();\r\n    }),\r\n    bar0: di(function(chart, d, i) {\r\n      var y0 = chart.y0();\r\n      var offset = chart.barOffset();\r\n      return chart.y.call(this, d, i) <= y0 ? y0 - offset : y0 + offset;\r\n    }),\r\n    barClass: di(function(chart, d) {\r\n      return 'chart-bar' + (d['class'] ? ' ' + d['class'] : '');\r\n    }),\r\n\r\n    // Shift bars slightly to account for axis thickness\r\n    barOffset: function barOffset() {\r\n      if (this.offset_axis) {\r\n        var axis_thickness = parseInt(this.offset_axis.base.select('.domain').style('stroke-width')) || 0;\r\n        return axis_thickness / 2;\r\n      }\r\n      else {\r\n        return 0;\r\n      }\r\n    },\r\n\r\n    getOffsetAxis: function getOffsetAxis() {\r\n      var components = this.container && this.container.components();\r\n      return objectFind(components, function(component) {\r\n        if (component.type == 'Axis' && component.position() == 'bottom')\r\n          return component;\r\n      });\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('rect')\r\n        .data(data, this.key);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('rect')\r\n        .on('mouseenter', this.mouseEnterPoint)\r\n        .on('mouseleave', this.mouseLeavePoint);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onEnter: function onEnter(selection) {\r\n      selection\r\n        .attr('y', this.bar0)\r\n        .attr('height', 0);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('class', this.barClass)\r\n        .attr('style', this.itemStyle)\r\n        .attr('x', this.barX)\r\n        .attr('width', this.barWidth);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('y', this.barY)\r\n        .attr('height', this.barHeight);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onExitTransition: function onExitTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('y', this.bar0)\r\n        .attr('height', 0)\r\n        .remove();\r\n    }\r\n  });\r\n\r\n  var bars = createHelper('Bars');\n\n  /**\r\n    Bars chart with bars that group from left-to-right\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'HorizontalBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class HorizontalBars\r\n    @extends Bars, XYInverted\r\n  */\r\n  var HorizontalBars = mixin(Bars, XYInverted).extend({\r\n    barX: di(function(chart, d, i) {\r\n      var x = chart.x.call(this, d, i);\r\n      var x0 = chart.x0();\r\n\r\n      return x < x0 ? x : x0 + chart.barOffset();\r\n    }),\r\n    barY: di(function(chart, d, i) {\r\n      return chart.y.call(this, d, i) - chart.itemWidth() / 2;\r\n    }),\r\n    barWidth: di(function(chart, d, i) {\r\n      var width = Math.abs(chart.x0() - chart.x.call(this, d, i)) - chart.barOffset();\r\n      return width > 0 ? width : 0;\r\n    }),\r\n    barHeight: di(function(chart) {\r\n      return chart.itemWidth();\r\n    }),\r\n    bar0: di(function(chart, d, i) {\r\n      var x0 = chart.x0();\r\n      var offset = chart.barOffset();\r\n      return chart.x.call(this, d, i) >= x0 ? x0 + offset : x0 - offset;\r\n    }),\r\n\r\n    getOffsetAxis: function getOffsetAxis() {\r\n      var components = this.container && this.container.components();\r\n      return objectFind(components, function(component) {\r\n        if (component.type == 'Axis' && component.position() == 'left')\r\n          return component;\r\n      });\r\n    },\r\n\r\n    onEnter: function onEnter(selection) {\r\n      selection\r\n        .attr('x', this.bar0)\r\n        .attr('width', 0);\r\n    },\r\n\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('class', this.barClass)\r\n        .attr('style', this.itemStyle)\r\n        .attr('y', this.barY)\r\n        .attr('height', this.barHeight);\r\n    },\r\n\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('x', this.barX)\r\n        .attr('width', this.barWidth);\r\n    },\r\n\r\n    onExitTransition: function onExitTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('x', this.bar0)\r\n        .attr('width', 0)\r\n        .remove();\r\n    }\r\n  });\r\n\r\n  var horizontalBars = createHelper('HorizontalBars');\n\n  /**\r\n    Bars chart with values stacked on top of each other\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          stacked_output: {\r\n            type: 'StackedBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class StackedBars\r\n    @extends Bars\r\n  */\r\n  var StackedBars = Bars.extend({\r\n    transform: function(data) {\r\n      data = Bars.prototype.transform.call(this, data);\r\n\r\n      var grouped = {};\r\n      var x_key = this.xKey();\r\n      var y_key = this.yKey();\r\n      data = data.map(function(series) {\r\n        series = extend({}, series);\r\n        series.values = series.values.map(function(value) {\r\n          value = extend({}, value);\r\n          var x = value[x_key];\r\n          var y = value.__original_y = value[y_key];\r\n\r\n          if (!grouped[x])\r\n            grouped[x] = {pos: 0, neg: 0};\r\n\r\n          if (y >= 0) {\r\n            value.__previous = grouped[x].pos;\r\n            grouped[x].pos = value[y_key] = grouped[x].pos + y;\r\n          }\r\n          else {\r\n            value.__previous = grouped[x].neg;\r\n            grouped[x].neg = value[y_key] = grouped[x].neg + y;\r\n          }\r\n\r\n          return value;\r\n        }, this);\r\n\r\n        return series;\r\n      }, this);\r\n\r\n      return data;\r\n    },\r\n\r\n    barHeight: di(function(chart, d, i) {\r\n      var height = Math.abs(chart.yScale()(d.__previous) - chart.y.call(this, d, i));\r\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n      height = height - offset;\r\n      return height > 0 ? height : 0;\r\n    })\r\n  });\r\n\r\n  var stackedBars = createHelper('StackedBars');\n\n  /**\r\n    Horizontal Stacked Bars\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'HorizontalStackedBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class HorizontalStackedBars\r\n    @extends HorizontalBars\r\n  */\r\n  var HorizontalStackedBars = HorizontalBars.extend({\r\n    transform: function(data) {\r\n      data = StackedBars.prototype.transform.call(this, data);\r\n      data = HorizontalBars.prototype.transform.call(this, data);\r\n      return data;\r\n    },\r\n\r\n    barWidth: di(function(chart, d, i) {\r\n      var width = Math.abs(chart.yScale()(d.__previous) - chart.x.call(this, d, i));\r\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n      return width > 0 ? width - offset : 0;\r\n    }),\r\n    barX: di(function(chart, d, i) {\r\n      var x = chart.x.call(this, d, i);\r\n      var x0 = chart.yScale()(d.__previous);\r\n\r\n      return x < x0 ? x : x0 + chart.barOffset();\r\n    })\r\n  });\r\n\r\n  var horizontalStackedBars = createHelper('HorizontalStackedBars');\n\n  /**\r\n    Create an XY Lines chart with single or series data.\r\n\r\n    ### Extending\r\n\r\n    Great care has been taken in making the standard charts in d3.compose extensible.\r\n    To extend the `Lines` chart, the following methods are available:\r\n\r\n    - `createLine`\r\n    - `lineKey`\r\n    - `lineData`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    View the `Lines.js` source for the default implementation and more information on these methods.\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      return {\r\n        charts: {\r\n          input: {\r\n            type: 'Lines'\r\n            data: data.input,\r\n            // xScale: ...,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([1, 2, 3]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\r\n      {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\r\n    ]);\r\n    ```\r\n    @class Lines\r\n    @extends Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer\r\n  */\r\n  var Mixed = mixin(Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer);\r\n  var Lines = Mixed.extend({\r\n    initialize: function(options) {\r\n      Mixed.prototype.initialize.call(this, options);\r\n\r\n      this.lines = {};\r\n\r\n      // Use standard series layer for extensibility\r\n      // (dataBind, insert, and events defined in prototype)\r\n      this.standardSeriesLayer('Lines', this.base.append('g').classed('chart-lines', true));\r\n\r\n      this.attachLabels();\r\n    },\r\n\r\n    /**\r\n      Set interpolation mode for line\r\n\r\n      - See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\r\n      - Set to `null` or `'linear'` for no interpolation\r\n\r\n      @property interpolate\r\n      @type String\r\n      @default monotone\r\n    */\r\n    interpolate: property({\r\n      default_value: 'monotone'\r\n    }),\r\n\r\n    // Create line on insert (keyed by series/index)\r\n    createLine: di(function(chart, d, i, j) {\r\n      var key = chart.lineKey.call(this, d, i, j);\r\n      var line = chart.lines[key] = d3.svg.line()\r\n        .x(chart.x)\r\n        .y(chart.y);\r\n\r\n      var interpolate = d.interpolate || chart.interpolate();\r\n      if (interpolate)\r\n        line.interpolate(interpolate);\r\n    }),\r\n\r\n    // Get key for line (from series key or index)\r\n    lineKey: di(function(chart, d, i, j) {\r\n      var key = chart.seriesKey(chart.seriesData.call(this, d, i, j));\r\n      return key != null ? key : chart.seriesIndex.call(this, d, i, j);\r\n    }),\r\n\r\n    // Get data for line\r\n    lineData: di(function(chart, d, i, j) {\r\n      var key = chart.lineKey.call(this, d, i, j);\r\n      if (chart.lines[key])\r\n        return chart.lines[key](d);\r\n    }),\r\n\r\n    // Override StandardLayer\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('path')\r\n        .data(function(d, i, j) {\r\n          return [data.call(selection, d, i, j)];\r\n        });\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('path')\r\n        .classed('chart-line', true)\r\n        .each(this.createLine);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('d', this.lineData)\r\n        .attr('style', this.itemStyle);\r\n    }\r\n  });\r\n\r\n  var lines = createHelper('Lines');\n\n  /*\r\n    Extract layout from the given options\r\n\r\n    @param {Array} options\r\n    @return {Object} {data, items, layout}\r\n  */\r\n  function extractLayout(options) {\r\n    if (!options)\r\n      return;\r\n\r\n    var data = {\r\n      _charts: {},\r\n      _components: {}\r\n    };\r\n    var items = {};\r\n    var layout = [];\r\n    var charts = [];\r\n    var components = [];\r\n\r\n    // TEMP Idenfify charts from layered,\r\n    // eventually no distinction between charts and components\r\n    var found = {\r\n      row: false,\r\n      charts: false\r\n    };\r\n\r\n    // Components are added from inside-out\r\n    // so for position: top, position: left, use unshift\r\n    options.forEach(function(row, row_index) {\r\n      var row_components = [];\r\n\r\n      if (!Array.isArray(row))\r\n        row = [row];\r\n      if (row.length > 1)\r\n        found.row = true;\r\n\r\n      var row_layout = row.map(function(item, col_index) {\r\n        if (!item)\r\n          return;\r\n\r\n        if (item._layered) {\r\n          // Charts\r\n          found.charts = found.row = true;\r\n          var chart_ids = [];\r\n\r\n          item.items.forEach(function(chart, chart_index) {\r\n            if (!chart)\r\n              return;\r\n\r\n            chart = defaults({}, chart, {id: getId(row_index, col_index, chart_index)});\r\n\r\n            chart_ids.push(chart.id);\r\n            charts.push(chart);\r\n            items[chart.id] = chart;\r\n          });\r\n\r\n          return chart_ids;\r\n        }\r\n\r\n        var component = prepareComponent(item, row_index, col_index);\r\n        items[component.id] = component;\r\n\r\n        if (row.length > 1) {\r\n          if (!found.charts) {\r\n            // Left\r\n            setPosition(component, 'left');\r\n            row_components.unshift(component);\r\n          }\r\n          else {\r\n            // Right\r\n            setPosition(component, 'right');\r\n            row_components.push(component);\r\n          }\r\n        }\r\n        else {\r\n          if (!found.row) {\r\n            // Top\r\n            setPosition(component, 'top');\r\n            components.unshift(component);\r\n          }\r\n          else {\r\n            // Bottom\r\n            setPosition(component, 'bottom');\r\n            components.push(component);\r\n          }\r\n        }\r\n\r\n        return component.id;\r\n      });\r\n\r\n      if (row_components.length)\r\n        components = components.concat(row_components);\r\n\r\n      layout.push(row_layout);\r\n    });\r\n\r\n    charts.forEach(extractData('_charts'));\r\n    components.forEach(extractData('_components'));\r\n\r\n    return {\r\n      data: data,\r\n      items: items,\r\n      layout: layout,\r\n\r\n      charts: charts,\r\n      components: components\r\n    };\r\n\r\n    function prepareComponent(component, row_index, col_index) {\r\n      return defaults({}, component, {id: getId(row_index, col_index)});\r\n    }\r\n    function setPosition(component, position) {\r\n      if (component && isFunction(component.position))\r\n        component.position(position);\r\n      else\r\n        component.position = position;\r\n    }\r\n    function getId(row_index, col_index, layered_index) {\r\n      var id = 'item-' + (row_index + 1) + '-' + (col_index + 1);\r\n      if (layered_index != null)\r\n        id += '-' + (layered_index + 1);\r\n\r\n      return id;\r\n    }\r\n\r\n    function extractData(type) {\r\n      return function(item) {\r\n        if (item.data && !isFunction(item.data)) {\r\n          data[type][item.id] = item.data;\r\n          data[item.id] = item.data;\r\n          delete item.data;\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /*\r\n    Calculate component and chart coordinates for given layout\r\n  */\r\n  function calculateLayout(components, data, demux) {\r\n    var overall_layout = {top: [], right: [], bottom: [], left: []};\r\n    components.forEach(function(component) {\r\n      if (component.skip_layout || !component.getLayout)\r\n        return;\r\n\r\n      var layout = component.getLayout(demux(component.id, data));\r\n      var position = layout && layout.position;\r\n\r\n      if (!contains(['top', 'right', 'bottom', 'left'], position))\r\n        return;\r\n\r\n      overall_layout[position].push({\r\n        offset: position == 'top' || position == 'bottom' ? layout.height : layout.width,\r\n        component: component\r\n      });\r\n    });\r\n\r\n    return overall_layout;\r\n  }\r\n\r\n  /*\r\n    Apply calculated layout to charts and components\r\n  */\r\n  function applyLayout(layout, chart_position, width, height) {\r\n    layout.top.reduce(function(previous, part) {\r\n      var y = previous - part.offset;\r\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\r\n\r\n      return y;\r\n    }, chart_position.top);\r\n\r\n    layout.right.reduce(function(previous, part, index, parts) {\r\n      var previousPart = parts[index - 1] || {offset: 0};\r\n      var x = previous + previousPart.offset;\r\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\r\n\r\n      return x;\r\n    }, width - chart_position.right);\r\n\r\n    layout.bottom.reduce(function(previous, part, index, parts) {\r\n      var previousPart = parts[index - 1] || {offset: 0};\r\n      var y = previous + previousPart.offset;\r\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\r\n\r\n      return y;\r\n    }, height - chart_position.bottom);\r\n\r\n    layout.left.reduce(function(previous, part) {\r\n      var x = previous - part.offset;\r\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\r\n\r\n      return x;\r\n    }, chart_position.left);\r\n\r\n    function setLayout(component, x, y, options) {\r\n      if (component && isFunction(component.setLayout))\r\n        component.setLayout(x, y, options);\r\n    }\r\n  }\n\n  /**\r\n    Common base for creating overlays that includes helpers for positioning and show/hide.\r\n\r\n    ### Extending\r\n\r\n    Create an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust positioning, override `position`\r\n    - To adjust show/hide behavior, override `show`/`hide`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Overlay').extend('ClosestPoints', {\r\n      // TODO\r\n    });\r\n    ```\r\n    @class Overlay\r\n    @extends Component\r\n  */\r\n  var Overlay = Component.extend({\r\n    initialize: function(options) {\r\n      Component.prototype.initialize.call(this, options);\r\n      this.base.attr('style', this.style());\r\n    },\r\n    skip_layout: true,\r\n\r\n    /**\r\n      Overlay's top-left x-position in px from left\r\n\r\n      @property x\r\n      @type Number\r\n      @default 0\r\n    */\r\n    x: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Overlay's top-left y-position in px from top\r\n\r\n      @property y\r\n      @type Number\r\n      @default 0\r\n    */\r\n    y: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Whether overlay is currently hidden\r\n\r\n      @property hidden\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    hidden: property({\r\n      default_value: true\r\n    }),\r\n\r\n    /**\r\n      Overlays base styling\r\n      (default includes position and hidden)\r\n\r\n      @property style\r\n      @type String\r\n      @default set from x, y, and hidden\r\n    */\r\n    style: property({\r\n      default_value: function() {\r\n        var transform = translate(this.x() + 'px', this.y() + 'px');\r\n        var styles = {\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          '-webkit-transform': transform,\r\n          '-ms-transform': transform,\r\n          transform: transform\r\n        };\r\n\r\n        if (this.hidden())\r\n          styles.display = 'none';\r\n\r\n        return style(styles);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Position overlay layer at given x,y coordinates\r\n\r\n      @example\r\n      ```js\r\n      // Absolute, x: 100, y: 50\r\n      overlay.position(100, 50);\r\n      overlay.position({x: 100, y: 50});\r\n\r\n      // Relative-to-chart, x: 50, y: 40\r\n      overlay.position({chart: {x: 50, y: 40}});\r\n\r\n      // Relative-to-container, x: 75, y: 50\r\n      overlay.position({container: {x: 75, y: 50}});\r\n      ```\r\n      @method position\r\n      @param {Object|Number} position {x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left\r\n      @param {Number} [y] in px from top\r\n    */\r\n    // TODO This conflicts with component.position(), might need a rename\r\n    position: function(position, y) {\r\n      if (arguments.length > 1) {\r\n        position = {\r\n          x: position,\r\n          y: y\r\n        };\r\n      }\r\n      else {\r\n        if ('container' in position) {\r\n          position = this.getAbsolutePosition(position.container);\r\n        }\r\n        else if ('chart' in position) {\r\n          if (this.container) {\r\n            var chart = this.container.chartPosition();\r\n            position = this.getAbsolutePosition({\r\n              x: position.chart.x + chart.left,\r\n              y: position.chart.y + chart.top\r\n            });\r\n          }\r\n          else {\r\n            position = this.getAbsolutePosition(position.chart);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.x(position.x).y(position.y);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Show overlay (with `display: block`)\r\n\r\n      @method show\r\n    */\r\n    show: function() {\r\n      this.hidden(false);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Hide overlay (with `display: none`)\r\n\r\n      @method hide\r\n    */\r\n    hide: function() {\r\n      this.hidden(true);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Get absolute position from container position\r\n      (needed since container position uses viewBox and needs to be scaled to absolute position)\r\n\r\n      @method getAbsolutePosition\r\n      @param {Object} container_position ({x, y})\r\n      @return {Object} absolute {x, y} relative to container div\r\n    */\r\n    getAbsolutePosition: function(container_position) {\r\n      var container = this.container && this.container.container;\r\n\r\n      if (container && this.container.responsive()) {\r\n        var container_dimensions = dimensions(container);\r\n        var chart_width = this.container.width();\r\n        var chart_height = this.container.height();\r\n        var width_ratio = container_dimensions.width / chart_width;\r\n        var height_ratio = container_dimensions.height / chart_height;\r\n\r\n        return {\r\n          x: width_ratio * container_position.x,\r\n          y: height_ratio * container_position.y\r\n        };\r\n      }\r\n      else {\r\n        // Not attached so can't get actual dimensions\r\n        // fallback to container position\r\n        return container_position;\r\n      }\r\n    }\r\n  }, {\r\n    layer_type: 'overlay'\r\n  });\n\n  var default_compose_margins = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n  /**\r\n    Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\r\n    Using the `options` property, charts and components can be bound to data and customized to create dynamic charts.\r\n\r\n    @example\r\n    ```html\r\n    <div id=\"#chart\"></div>\r\n    ```\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Process data...\r\n\r\n      // Create shared scales\r\n      var scales = {\r\n        x: {data: data.input, key: 'x', adjacent: true},\r\n        y: {data: data.input, key: 'y'},\r\n        y2: {data: data.output, key: 'y'}\r\n      };\r\n\r\n      // Setup charts and components\r\n      var charts = [\r\n        d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\r\n        d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\r\n      ];\r\n\r\n      var title = d3c.title('d3.compose');\r\n      var xAxis = d3c.axis('xAxis', {scale: scales.x});\r\n      var yAxis = d3c.axis('yAxis', {scale: scales.y});\r\n      var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\r\n\r\n      // Layout charts and components\r\n      return [\r\n        title,\r\n        [yAxis, d3c.layered(charts), y2Axis],\r\n        xAxis\r\n      ];;\r\n    });\r\n\r\n    chart.draw({input: [...], output: [...]});\r\n    ```\r\n    @class Compose\r\n    @extends Base\r\n  */\r\n  var Compose = Base.extend({\r\n    initialize: function(options) {\r\n      Base.prototype.initialize.call(this, options);\r\n\r\n      // Responsive svg based on the following approach (embedded + padding hack)\r\n      // http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/\r\n      // (not enabled if selection is svg)\r\n      if (this.base.node().tagName != 'svg') {\r\n        this.container = this.base.append('div')\r\n          .attr('class', 'chart-compose-container');\r\n\r\n        this.base = this.container.append('svg')\r\n          .attr('xlmns', 'http://www.w3.org/2000/svg')\r\n          .attr('version', '1.1')\r\n          .attr('class', 'chart-compose');\r\n      }\r\n      else {\r\n        this.base.classed('chart-compose', true);\r\n      }\r\n\r\n      this.attachHoverListeners();\r\n    },\r\n\r\n    transform: function(data) {\r\n      // Save raw data for redraw\r\n      this.rawData(data);\r\n      return Base.prototype.transform.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Get/set the options `object/function` for the chart that takes `data` and\r\n      returns `[...layout]` for composing child charts and components.\r\n\r\n      @example\r\n      ```js\r\n      // get\r\n      chart.options();\r\n\r\n      // set (static)\r\n      chart.options([\r\n        // ...\r\n      ]);\r\n\r\n      // set (dynamic, takes data and returns options)\r\n      chart.options(function(data) {\r\n        // process data...\r\n\r\n        return [\r\n          // ...\r\n        ];\r\n      });\r\n\r\n      // Set directly from d3.chart creation\r\n      d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n      ```\r\n      @property options\r\n      @type Function|Object\r\n    */\r\n    options: property({\r\n      default_value: function() { return function() {}; },\r\n      set: function(options) {\r\n        // If options is plain object,\r\n        // return from generic options function\r\n        if (!isFunction(options)) {\r\n          return {\r\n            override: function() {\r\n              return options;\r\n            }\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Store raw data for container before it has been transformed\r\n    rawData: property(),\r\n\r\n    /**\r\n      Margins between edge of container and components/chart\r\n\r\n      @example\r\n      ```js\r\n      chart.margins({top: 10, right: 20, bottom: 10, left: 20});\r\n      ```\r\n      @property margins\r\n      @type Object {top, right, bottom, left}\r\n      @default {top: 10, right: 10, bottom: 10, left: 10}\r\n    */\r\n    margins: property({\r\n      default_value: default_compose_margins,\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values, default_compose_margins)\r\n        };\r\n      }\r\n    }),\r\n\r\n    // Chart position\r\n    chartPosition: property({\r\n      default_value: {top: 0, right: 0, bottom: 0, left: 0},\r\n      set: function(values) {\r\n        return {\r\n          override: defaults({}, values, {top: 0, right: 0, bottom: 0, left: 0})\r\n        };\r\n      },\r\n      get: function(values) {\r\n        values.width = this._width() - values.right - values.left;\r\n        values.height = this._height() - values.bottom - values.top;\r\n\r\n        return values;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set overall width of chart\r\n\r\n      @property width\r\n      @type Number\r\n    */\r\n    width: property({\r\n      default_value: null\r\n    }),\r\n\r\n    /**\r\n      Get/set overall height of chart\r\n\r\n      @property height\r\n      @type Number\r\n    */\r\n    height: property({\r\n      default_value: null\r\n    }),\r\n\r\n    _width: function() {\r\n      var width = this.width();\r\n      return width != null ? width : Base.prototype.width.call(this);\r\n    },\r\n    _height: function() {\r\n      var height = this.height();\r\n      return height != null ? height : Base.prototype.height.call(this);\r\n    },\r\n\r\n    /**\r\n      Enable responsive container + viewBox so that chart scales to fill width\r\n      (only works if selection is not an svg)\r\n\r\n      @property responsive\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    responsive: property({\r\n      default_value: true\r\n    }),\r\n\r\n    // Set svg viewBox attribute\r\n    viewBox: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.width() && this.height())\r\n          return '0 0 ' + this.width() + ' ' + this.height();\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set svg preserveAspectRatio attribute\r\n    preserveAspectRatio: property({\r\n      default_value: function() {\r\n        if (this.responsive())\r\n          return 'xMidYMid meet';\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set container style\r\n    containerStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive()) {\r\n          var aspect_ratio = 1;\r\n          if (this.width() && this.height())\r\n            aspect_ratio = this.height() / this.width();\r\n\r\n          return style({\r\n            width: '100%',\r\n            height: 0,\r\n            'padding-top': (aspect_ratio * 100) + '%',\r\n            position: 'relative'\r\n          });\r\n        }\r\n        else {\r\n          return style({position: 'relative'});\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Set base style\r\n    baseStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.container) {\r\n          return style({\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0\r\n          });\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Set charts from options or get chart instances.\r\n      Each chart should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the chart.\r\n\r\n      @example\r\n      ```js\r\n      chart.charts([\r\n        {id: 'input', type: 'Bars'}, // options to pass to Bars chart\r\n        {id: 'output', type: 'Lines'} // options to pass to Lines chart\r\n      ]);\r\n      ```\r\n      @property charts\r\n      @type Array\r\n    */\r\n    charts: property({\r\n      set: function(chart_options, charts) {\r\n        // Store actual charts rather than options\r\n        return {\r\n          override: this._attachItems(chart_options, charts, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Set components from options or get components instances.\r\n      Each component should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the component.\r\n\r\n      @example\r\n      ```js\r\n      chart.components([\r\n        {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\r\n        {id: 'title', type: 'Title'} // options to pass to Title component\r\n      ])\r\n      ```\r\n      @property components\r\n      @type Array\r\n    */\r\n    components: property({\r\n      set: function(component_options, components) {\r\n        // Store actual components rather than options\r\n        return {\r\n          override: this._attachItems(component_options, components, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Delay start of transition by specified milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property delay\r\n      @type Number|Function\r\n      @default d3 default: 0\r\n    */\r\n    delay: property(),\r\n\r\n    /**\r\n      Transition duration in milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property duration\r\n      @type Number|Function\r\n      @default d3 default: 250ms\r\n    */\r\n    duration: property(),\r\n\r\n    /**\r\n      Transition ease function.\r\n      (applied to all charts and components as default)\r\n\r\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\r\n      - Note: arguments to pass to `d3.ease` are not supported\r\n\r\n      @property ease\r\n      @type String|Function\r\n      @default d3 default: 'cubic-in-out'\r\n    */\r\n    ease: property(),\r\n\r\n    /**\r\n      Draw chart with given data\r\n\r\n      @example\r\n      ```js\r\n      var chart = d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n\r\n      chart.draw([1, 2, 3]);\r\n\r\n      chart.draw({values: [1, 2, 3]});\r\n\r\n      chart.draw([\r\n        {values: [1, 2, 3]},\r\n        {values: [4, 5, 6]}\r\n      ]);\r\n      ```\r\n      @method draw\r\n      @param {Any} data\r\n    */\r\n    draw: function(data) {\r\n      var config = this._prepareConfig(this.options(), data);\r\n      if (!config)\r\n        config = {data: {_charts: {}, _components: {}}, layout: [], charts: [], components: []};\r\n\r\n      // Set charts and components from config\r\n      this.charts(config.charts);\r\n      this.components(config.components);\r\n\r\n      // Add config data\r\n      data = {\r\n        original: data,\r\n        config: config.data\r\n      };\r\n      this.data(data);\r\n\r\n      this._setDimensions();\r\n\r\n      // Layout components\r\n      this.layout(config.layout, data);\r\n\r\n      // Full draw now that everything has been laid out\r\n      d3.chart().prototype.draw.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Redraw chart with current data\r\n\r\n      @method redraw\r\n    */\r\n    redraw: function() {\r\n      if (this.rawData())\r\n        this.draw(this.rawData().original);\r\n    },\r\n\r\n    demux: function(name, data) {\r\n      if (!data || !data.config || !data.original)\r\n        return data;\r\n\r\n      if (findById(this.charts(), name) && data.config._charts[name])\r\n        return data.config._charts[name];\r\n      else if (findById(this.components(), name) && data.config._components[name])\r\n        return data.config._components[name];\r\n      else\r\n        return data.original;\r\n    },\r\n\r\n    // Create chart layer (for laying out charts)\r\n    createChartLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create component layer\r\n    createComponentLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-component-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create overlay layer\r\n    createOverlayLayer: function() {\r\n      if (!this.container)\r\n        throw new Error('Cannot create overlay layer if original selection \"d3.select(...).chart(\\'Compose\\')\" is an svg. Use a div instead for responsive and overlay support.');\r\n\r\n      return this.container.append('div')\r\n        .attr('class', 'chart-overlay-layer');\r\n    },\r\n\r\n    // Layout components and charts for given data\r\n    layout: function(layout, data) {\r\n      // 1. Place chart layers\r\n      this._positionChartLayers();\r\n\r\n      // 2. Extract layout from components\r\n      layout = this._extractLayout(data);\r\n\r\n      // 3. Set chart position from layout\r\n      var chart_position = extend({}, this.margins());\r\n      objectEach(layout, function(parts, key) {\r\n        parts.forEach(function(part) {\r\n          chart_position[key] += part.offset || 0;\r\n        });\r\n      });\r\n      this.chartPosition(chart_position);\r\n\r\n      // 4. Position layers with layout\r\n      this.positionLayers(layout);\r\n    },\r\n\r\n    attachHoverListeners: function() {\r\n      // For responsive, listen on container div and calculate enter/exit for base from bounding rectangle\r\n      // For non-responsive, bounding rectangle is container so calculations still apply\r\n\r\n      var trigger = this.trigger.bind(this);\r\n      var chartPosition = this.chartPosition.bind(this);\r\n      var container = this.container || this.base;\r\n      var base = this.base.node();\r\n      var chart_position, bounds, was_inside;\r\n\r\n      container.on('mouseenter', function() {\r\n        // Calculate chart position and bounds on enter and cache during move\r\n        chart_position = chartPosition();\r\n        bounds = getBounds();\r\n\r\n        was_inside = inside(bounds);\r\n        if (was_inside)\r\n          enter();\r\n      });\r\n      container.on('mousemove', function() {\r\n        // Mousemove may fire before mouseenter in IE\r\n        if (!chart_position || !bounds) {\r\n          chart_position = chartPosition();\r\n          bounds = getBounds();\r\n        }\r\n\r\n        var is_inside = inside(bounds);\r\n        if (was_inside && is_inside)\r\n          move();\r\n        else if (was_inside)\r\n          leave();\r\n        else if (is_inside)\r\n          enter();\r\n\r\n        was_inside = is_inside;\r\n      });\r\n      container.on('mouseleave', function() {\r\n        if (was_inside) {\r\n          was_inside = false;\r\n          leave();\r\n        }\r\n      });\r\n\r\n      function inside() {\r\n        var mouse = d3.mouse(document.documentElement);\r\n        return mouse[0] >= bounds.left && mouse[0] <= bounds.right && mouse[1] >= bounds.top && mouse[1] <= bounds.bottom;\r\n      }\r\n      function enter() {\r\n        trigger('mouseenter', translateToXY(d3.mouse(base)));\r\n      }\r\n      function move() {\r\n        trigger('mousemove', translateToXY(d3.mouse(base)));\r\n      }\r\n      function leave() {\r\n        trigger('mouseleave');\r\n      }\r\n\r\n      function translateToXY(coordinates) {\r\n        var x = coordinates[0];\r\n        var y = coordinates[1];\r\n        var chart_x = x - chart_position.left;\r\n        var chart_y = y - chart_position.top;\r\n\r\n        // Set at chart bounds if outside of chart\r\n        if (x > (chart_position.left + chart_position.width))\r\n          chart_x = chart_position.width;\r\n        else if (x < chart_position.left)\r\n          chart_x = 0;\r\n\r\n        if (y > (chart_position.top + chart_position.height))\r\n          chart_y = chart_position.height;\r\n        else if (y < chart_position.top)\r\n          chart_y = 0;\r\n\r\n        return {\r\n          container: {x: x, y: y},\r\n          chart: {x: chart_x, y: chart_y}\r\n        };\r\n      }\r\n\r\n      function getBounds() {\r\n        var scroll_y = 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;\r\n\r\n        bounds = extend({}, base.getBoundingClientRect());\r\n        bounds.top += scroll_y;\r\n        bounds.bottom += scroll_y;\r\n\r\n        return bounds;\r\n      }\r\n    },\r\n\r\n    // Attach chart/component child item with id\r\n    attach: function(id, item) {\r\n      item.id = id;\r\n      item.base.attr('data-id', id);\r\n      item.container = this;\r\n\r\n      Base.prototype.attach.call(this, id, item);\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('attach');\r\n    },\r\n\r\n    // Detach chart/component child item by id\r\n    detach: function(id, item) {\r\n      item.base.remove();\r\n\r\n      delete this._attached[id];\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('detach');\r\n    },\r\n\r\n    // Position chart and component layers\r\n    positionLayers: function(layout) {\r\n      this._positionChartLayers();\r\n      this._positionComponents(layout);\r\n      this._positionByZIndex();\r\n    },\r\n\r\n    //\r\n    // Internal\r\n    //\r\n\r\n    _setDimensions: function() {\r\n      // Set container and svg dimensions\r\n      // (if original selection is svg, no container and skip responsiveness)\r\n      if (this.container) {\r\n        this.container\r\n          .attr('style', this.containerStyle());\r\n      }\r\n\r\n      this.base\r\n        .attr('viewBox', this.viewBox())\r\n        .attr('preserveAspectRatio', this.preserveAspectRatio())\r\n        .attr('style', this.baseStyle())\r\n        .attr('width', this.responsive() ? null : this.width())\r\n        .attr('height', this.responsive() ? null : this.height());\r\n    },\r\n\r\n    _attachItems: function(items, container, context) {\r\n      items = items || [];\r\n      container = container || [];\r\n\r\n      // Remove charts that are no longer needed\r\n      var remove_ids = difference(pluck(container, 'id'), pluck(items, 'id'));\r\n      remove_ids.forEach(function(remove_id) {\r\n        context.detach(remove_id, findById(container, remove_id));\r\n      });\r\n\r\n      // Create or update charts\r\n      return items.map(function(options) {\r\n        // TODO May not have id, might need to auto-generate\r\n        // (might be during another step)\r\n        var id = options.id;\r\n        var item = findById(container, id);\r\n\r\n        if (options instanceof d3.chart()) {\r\n          // If chart instance, replace with instance\r\n          if (item)\r\n            context.detach(id, item);\r\n\r\n          context.attach(id, options);\r\n          return options;\r\n        }\r\n        else {\r\n          // TEMP Changing position has nasty side effects, disable for now\r\n          var changed_position = item && !(item instanceof Overlay) && item.position && options.position && item.position() != options.position;\r\n\r\n          if (item && (item.type != options.type || changed_position)) {\r\n            // If chart type has changed, detach and re-create\r\n            context.detach(id, item);\r\n            item = undefined;\r\n          }\r\n\r\n          if (!item) {\r\n            var Item = d3.chart(options.type);\r\n\r\n            if (!Item)\r\n              throw new Error('No registered d3.chart found for ' + options.type);\r\n\r\n            var layer_options = {z_index: Item.z_index || 0};\r\n            var createLayer = {\r\n              'chart': 'createChartLayer',\r\n              'component': 'createComponentLayer',\r\n              'overlay': 'createOverlayLayer'\r\n            }[Item.layer_type];\r\n\r\n            if (!createLayer)\r\n              throw new Error('Unrecognized layer type \"' + Item.layer_type + '\" for ' + options.type);\r\n\r\n            var base = context[createLayer](layer_options);\r\n\r\n            item = new Item(base, options);\r\n            item.type = options.type;\r\n\r\n            context.attach(id, item);\r\n          }\r\n          else {\r\n            item.options(options);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      });\r\n    },\r\n\r\n    _prepareConfig: function(options, data) {\r\n      return extractLayout(options(data));\r\n    },\r\n\r\n    _positionChartLayers: function() {\r\n      var position = this.chartPosition();\r\n      this.base.selectAll('.chart-layer')\r\n        .attr('transform', translate(position.left, position.top))\r\n        .attr('width', position.width)\r\n        .attr('height', position.height);\r\n    },\r\n\r\n    _positionComponents: function(layout) {\r\n      var chart_position = this.chartPosition();\r\n      var width = this._width();\r\n      var height = this._height();\r\n\r\n      applyLayout(layout, chart_position, width, height);\r\n    },\r\n\r\n    _positionByZIndex: function() {\r\n      var layers = this.base.selectAll('.chart-layer, .chart-component-layer')[0];\r\n\r\n      // Sort by z-index\r\n      function setZIndex(layer) {\r\n        return {\r\n          layer: layer,\r\n          zIndex: parseInt(d3.select(layer).attr('data-zIndex')) || 0\r\n        };\r\n      }\r\n      function sortZIndex(a, b) {\r\n        if (a.zIndex < b.zIndex)\r\n          return -1;\r\n        else if (a.zIndex > b.zIndex)\r\n          return 1;\r\n        else\r\n          return 0;\r\n      }\r\n      function getLayer(wrapped) {\r\n        return wrapped.layer;\r\n      }\r\n\r\n      layers = layers.map(setZIndex).sort(sortZIndex).map(getLayer);\r\n\r\n      // Move layers to z-index order\r\n      layers.forEach(function(layer) {\r\n        if (layer && layer.parentNode && layer.parentNode.appendChild)\r\n          layer.parentNode.appendChild(layer);\r\n      });\r\n    },\r\n\r\n    _extractLayout: function(data) {\r\n      return calculateLayout(this.components(), data, this.demux.bind(this));\r\n    }\r\n  });\r\n\r\n  // TODO Find better place for this\r\n  function layered(items) {\r\n    if (!Array.isArray(items))\r\n      items = Array.prototype.slice.call(arguments);\r\n\r\n    return {_layered: true, items: items};\r\n  }\r\n\r\n  function findById(items, id) {\r\n    return find(items, function(item) {\r\n      return item.id == id;\r\n    });\r\n  }\n\n  // Export charts/components to d3.chart\r\n  utils.extend(d3.chart(), {\r\n    Base: Base,\r\n    Chart: Chart,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose,\r\n    Lines: Lines,\r\n    Bars: Bars,\r\n    StackedBars: StackedBars,\r\n    HorizontalBars: HorizontalBars,\r\n    HorizontalStackedBars: HorizontalStackedBars,\r\n    Labels: Labels,\r\n    HoverLabels: HoverLabels,\r\n    Text: Text,\r\n    Title: Title,\r\n    Axis: Axis,\r\n    AxisTitle: AxisTitle,\r\n    Legend: Legend,\r\n    InsetLegend: InsetLegend,\r\n    Gridlines: Gridlines\r\n  });\r\n\r\n  var d3c = d3.compose = {\r\n    VERSION: '0.15.20',\r\n    utils: utils,\r\n    helpers: helpers,\r\n    Base: Base,\r\n    Chart: Chart,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose,\r\n    layered: layered,\r\n\r\n    mixins: mixins,\r\n\r\n    Lines: Lines,\r\n    lines: lines,\r\n    Bars: Bars,\r\n    bars: bars,\r\n    StackedBars: StackedBars,\r\n    stackedBars: stackedBars,\r\n    HorizontalBars: HorizontalBars,\r\n    horizontalBars: horizontalBars,\r\n    HorizontalStackedBars: HorizontalStackedBars,\r\n    horizontalStackedBars: horizontalStackedBars,\r\n    Labels: Labels,\r\n    labels: labels,\r\n    HoverLabels: HoverLabels,\r\n    hoverLabels: hoverLabels,\r\n\r\n    Text: Text,\r\n    text: text,\r\n    Title: Title,\r\n    title: title,\r\n    Axis: Axis,\r\n    axis: axis,\r\n    AxisTitle: AxisTitle,\r\n    axisTitle: axisTitle,\r\n    Legend: Legend,\r\n    legend: legend,\r\n    InsetLegend: InsetLegend,\r\n    insetLegend: insetLegend,\r\n    Gridlines: Gridlines,\r\n    gridlines: gridlines\r\n  };\n\n  return d3c;\n\n}));"]}