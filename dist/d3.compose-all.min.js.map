{"version":3,"sources":["d3.compose-all.js"],"names":["global","factory","exports","module","require","define","amd","d3c","d3","d3_chart","this","createLayer","chart","type","name","selection","layer","series","events","forEach","event","method","split","map","str","charAt","toUpperCase","slice","join","dataBind","data","onDataBind","insert","onInsert","_extend","target","extensions","undefined_only","i","length","key","contains","arr","item","indexOf","compact","filter","difference","a","b","value","defaults","call","arguments","extend","flatten","reduce","memo","concat","find","fn","context","first","n","Array","prototype","isBoolean","obj","isObject","isNumber","toString","isString","isUndefined","objectEach","keys","Object","objectFind","pluck","objs","uniq","result","push","inherits","Child","Parent","create","constructor","enumerable","writeable","configurable","setPrototypeOf","__proto__","valueOrDefault","default_value","property","options","console","warn","id","unique_index","get","properties","isFunction","set","validate","Error","JSON","stringify","previous","response","override","after","__properties","is_property","set_from_options","mixin","mixins","initializes","transforms","mixed","mix","initialize","args","apply","init","transform","trans","bind","stack","padding","direction","origin","min_height","min_width","elements","attr","d","next_position","element_dimensions","getBBox","spacing_width","max","width","spacing_height","height","x","y","translate","createScale","scale","time","linear","domain","setDomain","centered","adjacent","addCentered","addPadding","getValue","isSeriesData","values","min_value","min","original","series_count","series_index","range_band","rangeBand","isFinite","original_range","range","rangeBands","dimensions","client","clientDimensions","attrDimensions","isSVG","bbox","bboxDimensions","element","node","clientWidth","clientHeight","window","getComputedStyle","styles","parseFloat","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","isNaN","ex","nodeName","rotate","degrees","center","rotation","alignText","line_height","offset","element_style","css_font_size","css_line_height","css_adjustment","height_adjustment","first_item","isArray","getMax","series_data","extent","series_max","Infinity","getMin","series_min","style","keyValues","getMargins","margins","default_margins","top","right","bottom","left","di","callback","wrapped","j","undefined","_is_di","bindDi","diFn","bindAllDi","getParentData","_parent_data","parent","parentNode","select","createHelper","checkProp","definition","createPrepare","steps","base","props","step","createDraw","prepared","prepareSteps","selected","exit","update","enter","merge","remove","curry","createTransition","duration","delay","ease","getLayer","empty","append","Base","_layers","_attached","_events","getPoints","getPoint","sort","meta","getClosestPoints","points","position","tolerance","getDistance","Math","sqrt","pow","setDistance","point","distance","closePoints","sortPoints","by_distance","updateActive","active","closest","container","active_keys","closest_keys","trigger","prepareMargins$2","default_legend_margins","prepareLegendData","charts","combined_data","chart_id","find_chart","exclude_from_legend","chart_data","demux","legend_data","index","getLegendData","prepareLegend","class","swatchClass","createSwatch","selectAll","groups","pointer-events","swatchDimensions","visibility","size","swatch","each","text","stackDirection","sizes","item_size","getTransform","translation","relative_to_x","relative_to","relative_to_y","prepareText","textAlign","middle","verticalAlign","drawText","text_selection","anchor","textOptions","default_options","prepareMargins","defaultMargins","default_margin","margins_by_position","title","prepareMargins$1","defaultMargins$1","axisTitle","prepareScales","xScale","orientation","XY","getDefaultXScale","setXScaleRange","yScale","getDefaultYScale","setYScaleRange","prepareAxis","axis","orient","ticks","tickValues","tickSize","innerTickSize","outerTickSize","tickPadding","tickFormat","transition","prepareGridlines","gridlines","drawAxis","createAxis","svg","array_extensions","getLabelOverhang","overhangs","extractLayout","prepareComponent","component","row_index","col_index","getId","setPosition","layered_index","extractData","_charts","_components","items","layout","components","found","row","row_components","row_layout","_layered","chart_ids","chart_index","unshift","calculateLayout","overall_layout","skip_layout","getLayout","applyLayout","chart_position","setLayout","part","parts","previousPart","layered","findById","StandardLayer","standardLayer","standardSeriesLayer","onEnter","onUpdate","onMerge","onExit","Int8Array","utils","types","string","number","array","object","any","architecture","prepareProps","prop","getDefault","attach","Type","attached","draw","detach","helpers","Transition","setupTransition","on","setScales","normalizeData","xKey","yKey","xValue","seriesIndex","yValue","x0","y0","x_scale","y_scale","d3Chart","attachment","unlayer","once","off","isProperty","unset","proto_props","static_props","hasOwnProperty","Component","prepareLayout","actual_dimensions","z_index","layer_type","Hover","onMouseEnter","onMouseMove","onMouseLeave","seriesData","mouseEnterPoint","mouseLeavePoint","HoverPoints","hoverTolerance","Labels$1","attachLabels","labels","LabelsClass","_labels","proxyLabelMethods","display","LabelsXY","XYInverted","XYValues","adjacentWidth","seriesCount","layeredWidth","itemWidth","Series","seriesKey","seriesValues","seriesClass","itemStyle","seriesLayer","Labels","Mixed$7","Gridlines","drawLine","x1","x2","y1","y2","chartPosition","hide","tick_values","ticks_args","onMergeTransition","drawLegend","Mixed$6","Legend","prepare","render","classed","swatches","direction_by_position","default","swatch_dimensions","registerSwatch","chart_types","chart_type","legend","InsetLegend","insetLegend","Mixed$4","Text","Title","rotate_by_position","AxisTitle","Mixed$5","Axis","gridlines_layer","label_overhang","Chart","Mixed$2","format","y_value","alignment","labelText","label","__original_y","labelClass","insertLabels","mergeLabels","layoutLabels","transitionLabels","getOptions","label_position","label_options","_prepareLabel","_calculateLayout","_handleCollisions","_setLayout","bg","text_bounds","text_y_adjustment","checkForOverlap","labelA","labelB","getEdges","contained_LR","contained_TB","overlap_LR","overlap_TB","groupLabels","group","updateGroupPositions","addLabelToGroup","originalY","reset","sortY","byY","reverse","overlap","prev","compareSeries","compareLabel","Mixed$3","HoverLabels","onMouseEnterPoint","onMouseLeavePoint","findLabelForPoint","hoverLabels","Mixed$1","Bars","offset_axis","getOffsetAxis","barHeight","abs","barOffset","barWidth","barX","barY","bar0","barClass","axis_thickness","parseInt","onExitTransition","bars","HorizontalBars","horizontalBars","StackedBars","grouped","x_key","y_key","pos","neg","__previous","stackedBars","HorizontalStackedBars","horizontalStackedBars","Mixed","Lines","lines","interpolate","createLine","lineKey","line","lineData","Overlay","hidden","-webkit-transform","-ms-transform","getAbsolutePosition","show","container_position","responsive","container_dimensions","chart_width","chart_height","width_ratio","height_ratio","default_compose_margins","Compose","tagName","attachHoverListeners","rawData","_width","_height","viewBox","preserveAspectRatio","containerStyle","aspect_ratio","padding-top","baseStyle","chart_options","_attachItems","component_options","config","_prepareConfig","_setDimensions","redraw","createChartLayer","createComponentLayer","createOverlayLayer","_positionChartLayers","_extractLayout","positionLayers","inside","mouse","document","documentElement","bounds","translateToXY","move","leave","coordinates","chart_x","chart_y","getBounds","scroll_y","scrollY","scrollTop","getBoundingClientRect","was_inside","is_inside","_positionComponents","_positionByZIndex","remove_ids","remove_id","changed_position","Item","layer_options","overlay","setZIndex","zIndex","sortZIndex","layers","appendChild","compose","VERSION"],"mappings":"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","file":"d3.compose-all.min.js","sourcesContent":["/*!\n * d3.compose - Compose complex, data-driven visualizations from reusable charts and components with d3\n * v0.15.12 - https://github.com/CSNW/d3.compose - license: MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3'), require('d3.chart')) :\n  typeof define === 'function' && define.amd ? define(['d3', 'd3.chart'], factory) :\n  global.d3c = factory(global.d3,global.d3_chart);\n}(this, function (d3,d3_chart) { 'use strict';\n\n  d3 = 'default' in d3 ? d3['default'] : d3;\n\n  /**\n    Mixin to create standard layer to make extending charts straightforward.\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n      initialize: function() {\n        this.standardLayer('main', this.base.append('g'))\n        // dataBind, insert, events are defined on prototype\n      },\n\n      onDataBind: function(selection, data) {\n        // ...\n      },\n      onInsert: function(selection) {\n        // ...\n      },\n      onEnter: function(selection) {\n        // ...\n      },\n      onUpdateTransition: function(selection) {\n        // ...\n      },\n      // all d3.chart events are available: onMerge, onExit, ...\n    }));\n    ```\n    @class StandardLayer\n    @namespace mixins\n  */\n  var StandardLayer = {\n    /**\n      extension of `layer()` that uses standard methods on prototype for extensibility.\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n        initialize: function() {\n          this.standardLayer('circles', this.base.append('g'));\n        }\n\n        // onDataBind, onInsert, etc. work with \"circles\" layer\n      }));\n      ```\n      @method standardLayer\n      @param {String} name\n      @param {d3.selection} selection\n    */\n    standardLayer: function standardLayer(name, selection) {\n      return createLayer(this, 'layer', name, selection);\n    },\n\n    /**\n      extension of `seriesLayer()` that uses standard methods on prototype for extensibility.\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n        initialize: function() {\n          this.standardSeriesLayer('circles', this.base.append('g'));\n        },\n\n        // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n      }));\n      ```\n      @method standardSeriesLayer\n      @param {String} name\n      @param {d3.selection} selection\n    */\n    standardSeriesLayer: function standardSeriesLayer(name, selection) {\n      return createLayer(this, 'series', name, selection);\n    },\n\n    /**\n      Called for standard layer's `dataBind`\n\n      @method onDataBind\n      @param {d3.selection} selection\n      @param {Any} data\n      @return {d3.selection}\n    */\n    onDataBind: function onDataBind(/* selection, data */) {},\n\n    /**\n      Called for standard layer's `insert`\n\n      @method onInsert\n      @param {d3.selection} selection\n      @return {d3.selection}\n    */\n    onInsert: function onInsert(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['enter']`\n\n      @method onEnter\n      @param {d3.selection} selection\n    */\n    onEnter: function onEnter(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['enter:transition']`\n\n      @method onEnterTransition\n      @param {d3.selection} selection\n    */\n    // onEnterTransition: function onEnterTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['update']`\n\n      @method onUpdate\n      @param {d3.selection} selection\n    */\n    onUpdate: function onUpdate(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['update']`\n\n      @method onUpdateTransition\n      @param {d3.selection} selection\n    */\n    // onUpdateTransition: function onUpdateTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['merge']`\n\n      @method onMerge\n      @param {d3.selection} selection\n    */\n    onMerge: function onMerge(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['merge:transition']`\n\n      @method onMergeTransition\n      @param {d3.selection} selection\n    */\n    // onMergeTransition: function onMergeTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['exit']`\n\n      @method onExit\n      @param {d3.selection} selection\n    */\n    onExit: function onExit(/* selection */) {}\n\n    /**\n      Call for standard layer's `events['exit:transition']`\n\n      @method onExitTransition\n      @param {d3.selection} selection\n    */\n    // onExitTransition: function onExitTransition(selection) {},\n  };\n\n  function createLayer(chart, type, name, selection) {\n    var layer = {\n      layer: 'layer',\n      series: 'seriesLayer'\n    }[type];\n\n    if (layer && chart[layer]) {\n      var events = {};\n      [\n        'enter',\n        'enter:transition',\n        'update',\n        'update:transition',\n        'merge',\n        'merge:transition',\n        'exit',\n        'exit:transition'\n      ].forEach(function(event) {\n        var method = 'on' + event.split(':').map(function capitalize(str) {\n          return str.charAt(0).toUpperCase() + str.slice(1);\n        }).join('');\n\n        // Only create events if chart method exists as empty transition events can cause unforeseen issues\n        if (chart[method]) {\n          events[event] = function() {\n            this.chart()[method](this);\n          };\n        }\n      });\n\n      return chart[layer](name, selection, {\n        dataBind: function(data) {\n          return this.chart().onDataBind(this, data);\n        },\n        insert: function() {\n          return this.chart().onInsert(this);\n        },\n        events: events\n      });\n    }\n  }\n\n  // Many utils inlined from Underscore.js\r\n  // 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n\r\n  var slice = Array.prototype.slice;\r\n  var toString = Object.prototype.toString;\r\n\r\n  function _extend(target, extensions, undefined_only) {\r\n    for (var i = 0, length = extensions.length; i < length; i++) {\r\n      for (var key in extensions[i]) {\r\n        if (!undefined_only || target[key] === void 0)\r\n          target[key] = extensions[i][key];\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  function contains(arr, item) {\r\n    return arr.indexOf(item) >= 0;\r\n  }\r\n\r\n  function compact(arr) {\r\n    return arr.filter(function(item) {\r\n      return item;\r\n    });\r\n  }\r\n\r\n  function difference(a, b) {\r\n    return a.filter(function(value) {\r\n      return b.indexOf(value) < 0;\r\n    });\r\n  }\r\n\r\n  function defaults(target) {\r\n    return _extend(target, slice.call(arguments, 1), true);\r\n  }\r\n\r\n  function extend(target) {\r\n    return _extend(target, slice.call(arguments, 1));\r\n  }\r\n\r\n  function flatten(arr) {\r\n    // Assumes all items in arr are arrays and only flattens one level\r\n    return arr.reduce(function(memo, item) {\r\n      return memo.concat(item);\r\n    }, []);\r\n  }\r\n\r\n  function find(arr, fn, context) {\r\n    if (!arr) return;\r\n    for (var i = 0, length = arr.length; i < length; i++) {\r\n      if (fn.call(context, arr[i], i, arr))\r\n        return arr[i];\r\n    }\r\n  }\r\n\r\n  function first(arr, n) {\r\n    if (arr == null) return void 0;\r\n    if (n == null) return arr[0];\r\n    return Array.prototype.slice.call(arr, 0, n);\r\n  }\r\n\r\n  function isBoolean(obj) {\r\n    return obj === true || obj === false;\r\n  }\r\n  function isObject(obj) {\r\n    var type = typeof obj;\r\n    return type === 'function' || type === 'object' && !!obj;\r\n  }\r\n  function isNumber(obj) {\r\n    return toString.call(obj) === '[object Number]';\r\n  }\r\n  function isString(obj) {\r\n    return toString.call(obj) === '[object String]';\r\n  }\r\n  function isUndefined(obj) {\r\n    return obj === void 0;\r\n  }\r\n\r\n  var isFunction = function(obj) {\r\n    return toString.call(obj) === '[object Function]';\r\n  };\r\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\r\n    isFunction = function(obj) {\r\n      return typeof obj == 'function' || false;\r\n    };\r\n  }\r\n\r\n  function objectEach(obj, fn, context) {\r\n    if (!obj) return;\r\n    var keys = Object.keys(obj);\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      fn.call(context, obj[keys[i]], keys[i], obj);\r\n    }\r\n  }\r\n\r\n  function objectFind(obj, fn, context) {\r\n    if (!obj) return;\r\n    var keys = Object.keys(obj);\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      if (fn.call(context, obj[keys[i]], keys[i], obj))\r\n        return obj[keys[i]];\r\n    }\r\n  }\r\n\r\n  function pluck(objs, key) {\r\n    if (!objs) return [];\r\n    return objs.map(function(obj) {\r\n      return obj[key];\r\n    });\r\n  }\r\n\r\n  function uniq(arr) {\r\n    var result = [];\r\n    for (var i = 0, length = arr.length; i < length; i++) {\r\n      if (result.indexOf(arr[i]) < 0)\r\n        result.push(arr[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function inherits(Child, Parent) {\r\n    Child.prototype = Object.create(Parent.prototype, {\r\n      constructor: {\r\n        value: Child,\r\n        enumerable: false,\r\n        writeable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n\r\n    if (Object.setPrototypeOf) {\r\n      Object.setPrototypeOf(Child, Parent);\r\n    }\r\n    else {\r\n      Child.__proto__ = Parent; //eslint-disable-line no-proto\r\n\r\n      // __proto__ isn't supported in IE,\r\n      // use one-time copy of static properties to approximate\r\n      defaults(Child, Parent);\r\n    }\r\n  }\r\n\r\n  // If value isn't `undefined`, return `value`, otherwise use `default_value`\r\n  //\r\n  // @method valueOrDefault\r\n  // @param {Any} [value]\r\n  // @param {Any} default_value\r\n  // @return {Any}\r\n  function valueOrDefault(value, default_value) {\r\n    return !isUndefined(value) ? value : default_value;\r\n  }\r\n\r\n  var utils = {\r\n    slice: slice,\r\n    toString: toString,\r\n    contains: contains,\r\n    compact: compact,\r\n    difference: difference,\r\n    defaults: defaults,\r\n    extend: extend,\r\n    flatten: flatten,\r\n    find: find,\r\n    first: first,\r\n    isBoolean: isBoolean,\r\n    isFunction: isFunction,\r\n    isObject: isObject,\r\n    isNumber: isNumber,\r\n    isString: isString,\r\n    isUndefined: isUndefined,\r\n    objectEach: objectEach,\r\n    objectFind: objectFind,\r\n    pluck: pluck,\r\n    uniq: uniq,\r\n    inherits: inherits,\r\n    valueOrDefault: valueOrDefault\r\n  };\n\n  var unique_index = 0;\n\n  /**\n    Helper for creating properties for charts/components\n\n    @example\n    ```javascript\n    var Custom = d3.chart('Chart').extend('Custom', {\n      // Create property that's stored internally as 'simple'\n      simple: property()\n    });\n    var custom; // = new Custom(...);\n\n    // set\n    custom.simple('Howdy');\n\n    // get\n    console.log(custom.simple()); // -> 'Howdy'\n\n    // Advanced\n    // --------\n    // Default values:\n    Custom.prototype.message = property({\n      default_value: 'Howdy!'\n    });\n\n    console.log(custom.message()); // -> 'Howdy!'\n    custom.message('Goodbye');\n    console.log(custom.message()); // -> 'Goodbye'\n\n    // Set to undefined to reset to default value\n    custom.message(undefined);\n    console.log(custom.message()); // -> 'Howdy!'\n\n    // Computed default value:\n    Custom.property.computed = property({\n      default_value: function() {\n        // \"this\" = Custom instance\n        return this.message();\n      }\n    });\n\n    // Function default value:\n    // For function default_values, wrap in function to differentiate from computed\n    Custom.property.fn = property({\n      default_value: function() {\n        return function defaultFn() {};\n      }\n      // The following would be incorrectly evaluated\n      // default_value: function defaultFn() {}\n    })\n\n    // Custom getter:\n    Custom.prototype.exclaimed = property({\n      get: function(value) {\n        // Value is the underlying set value\n        return value + '!';\n      }\n    });\n\n    custom.exclaimed('Howdy');\n    console.log(custom.exclaimed()); // -> 'Howdy!'\n\n    // Custom setter:\n    Custom.prototype.feeling = property({\n      set: function(value, previous) {\n        if (value == 'Hate') {\n          // To override value, return Object with override specified\n          return {\n            override: 'Love',\n\n            // To do something after override, use after callback\n            after: function() {\n              console.log('After: ' + this.feeling()); // -> 'After: Love'\n            }\n          };\n        }\n      }\n\n      custom.feeling('Hate'); // -> 'After: Love'\n      console.log(custom.feeling()); // -> 'Love'\n    });\n    ```\n    @method property\n    @for helpers\n    @param {Object} [options]\n    @param {Any} [options.default_value] default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.\n    @param {Function} [options.get] `function(value) {return ...}` getter, where `value` is the stored value and return desired value\n    @param {Function} [options.set] `function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set\n    @param {Object} [options.context=this] context to evaluate get/set/after functions\n    @return {Function} `()`: get, `(value)`: set\n  */\n  function property(options) {\n    // DEPRECATED: name as first argument\n    if (arguments.length == 2) {\n      if (typeof console != 'undefined' && console.warn)\n        console.warn('DEPRECATED - name argument for property is no longer supported will be removed in the next version of d3.compose');\n      options = arguments[1];\n    }\n\n    options = options || {};\n    var id = 'property_' + unique_index++;\n\n    var property = function(value) {//eslint-disable-line no-shadow\n      var properties = this.__properties = this.__properties || {};\n      var context = valueOrDefault(property.context, this);\n\n      if (arguments.length)\n        return set.call(this);\n      else\n        return get.call(this);\n\n      function get() {\n        value = properties[id];\n\n        if (isUndefined(value)) {\n          // Use default value and unwrap if it's a function\n          value = property.default_value;\n          if (isFunction(value))\n            value = value.call(context);\n        }\n\n        return isFunction(options.get) ? options.get.call(context, value) : value;\n      }\n\n      function set() {\n        // Validate\n        if (isFunction(options.validate) && !isUndefined(value) && !options.validate.call(context, value))\n          throw new Error('Invalid value for property: ' + JSON.stringify(value));\n\n        var previous = properties[id];\n        properties[id] = value;\n\n        if (isFunction(options.set) && !isUndefined(value)) {\n          var response = options.set.call(context, value, previous);\n\n          if (response && 'override' in response)\n            properties[id] = response.override;\n          if (response && isFunction(response.after))\n            response.after.call(context, properties[id]);\n        }\n\n        return this;\n      }\n    };\n\n    // For checking if function is a property\n    property.is_property = true;\n    property.id = id;\n    property.set_from_options = valueOrDefault(options.set_from_options, true);\n    property.default_value = options.default_value;\n    property.context = options.context;\n    property.options = options;\n\n    return property;\n  }\n\n  /**\n    Combine mixins with Parent super class for extension\n\n    @example\n    ```js\n    var a = {transform: function() {}, a: 1};\n    var b = {initialize: function() {}, b: 2};\n    var c = {c: 3};\n\n    var Custom = mixin(Chart, a, b, c).extend({\n      initialize: function(options) {\n        this._super.initialize.call(this, options);\n        // d\n      },\n      transform: function(data) {\n        data = this._super.transform.call(this, data);\n        // d\n      }\n    });\n\n    // initialize: Chart, b, d\n    // transform: Chart, a, d\n    ```\n    @method mixin\n    @for helpers\n    @param {Function} Parent\n    @param {...Object} ...mixins\n    @return {Function}\n  */\n  function mixin(Parent/*, ...mixins*/) {\n    var mixins = slice.call(arguments, 1);\n    var initializes = [];\n    var transforms = [];\n    var mixed = {};\n\n    mixins.forEach(function(mix) {\n      objectEach(mix, function(value, key) {\n        if (key == 'initialize')\n          initializes.push(value);\n        else if (key == 'transform')\n          transforms.push(value);\n        else\n          mixed[key] = value;\n      });\n    });\n\n    if (initializes.length) {\n      mixed.initialize = function initialize() {\n        var args = slice.call(arguments);\n        Parent.prototype.initialize.apply(this, args);\n        initializes.forEach(function(init) {\n          init.apply(this, args);\n        }, this);\n      };\n    }\n\n    if (transforms.length) {\n      mixed.transform = function transform(data) {\n        data = Parent.prototype.transform.call(this, data);\n        return transforms.reduce(function(memo, trans) {\n          return trans.call(this, memo);\n        }.bind(this), data);\n      };\n    }\n\n    return Parent.extend(mixed);\n  }\n\n  /**\r\n    Stack given array of elements vertically or horizontally\r\n\r\n    @example\r\n    ```js\r\n    // Stack all text elements vertically, from the top, with 0px padding\r\n    d3.selectAll('text').call(helpers.stack())\r\n\r\n    // Stack all text elements horizontally, from the right, with 5px padding\r\n    d3.selectAll('text').call(helpers.stack({\r\n      direction: 'horizontal',\r\n      origin: 'right',\r\n      padding: 5\r\n    }));\r\n    ```\r\n    @method stack\r\n    @for helpers\r\n    @param {Object} [options]\r\n    @param {String} [options.direction=vertical] `\"vertical\"` or `\"horizontal\"`\r\n    @param {String} [options.origin] `\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)\r\n    @param {Number} [options.padding=0] padding (in px) between elements\r\n    @param {Number} [options.min_height=0] minimum spacing height (for vertical stacking)\r\n    @param {Number} [options.min_width=0]  minimum spacing width (for horizontal stacking)\r\n    @return {Function}\r\n  */\r\n  function stack(options) {\r\n    options = extend({\r\n      direction: 'vertical',\r\n      origin: 'top',\r\n      padding: 0,\r\n      min_height: 0,\r\n      min_width: 0\r\n    }, options);\r\n\r\n    // Ensure valid origin based on direction\r\n    if (options.direction == 'horizontal' && !(options.origin == 'left' || options.origin == 'right'))\r\n      options.origin = 'left';\r\n    else if (options.direction == 'vertical' && !(options.origin == 'top' || options.origin == 'bottom'))\r\n      options.origin = 'top';\r\n\r\n    function padding(i) {\r\n      return i > 0 && options.padding ? options.padding : 0;\r\n    }\r\n\r\n    return function(elements) {\r\n      if (elements && elements.attr) {\r\n        var previous = 0;\r\n\r\n        elements.attr('transform', function(d, i) {\r\n          var element_dimensions = this.getBBox();\r\n          var spacing_width = d3.max([element_dimensions.width, options.min_width]);\r\n          var spacing_height = d3.max([element_dimensions.height, options.min_height]);\r\n          var x = 0;\r\n          var y = 0;\r\n          var next_position;\r\n\r\n          if (options.direction == 'horizontal') {\r\n            next_position = previous + spacing_width + padding(i);\r\n\r\n            if (options.origin == 'left')\r\n              x = previous + padding(i);\r\n            else\r\n              x = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n          else {\r\n            next_position = previous + spacing_height + padding(i);\r\n\r\n            if (options.origin == 'top')\r\n              y = previous + padding(i);\r\n            else\r\n              y = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n\r\n          return translate(x, y);\r\n        });\r\n      }\r\n    };\r\n  }\n\n  /**\n    Create scale from options\n\n    @example\n    ```javascript\n    // Simple type, range, and domain\n    var scale = createScale({\n      type: 'linear',\n      domain: [0, 100],\n      range: [0, 500]\n    });\n\n    // Calculate domain for data\n    var scale = createScale({\n      type: 'log',\n      data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\n      key: 'y'\n    });\n\n    // Scale is passed through\n    var original = d3.scale.linear();\n    var scale = createScale(original);\n    scale === original;\n\n    // Set other properties by passing in \"arguments\" array\n    var scale = createScale({\n      type: 'ordinal',\n      domain: ['a', 'b', 'c', 'd', 'e'],\n      rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\n    });\n\n    // Use ordinal + adjacent for bar charts\n    var scale = createScale({\n      type: 'ordinal',\n      adjacent: true,\n      domain: ['a', 'b', 'c'],\n      series: 2 // Series count is required for adjacent if data isn't given\n    })\n    ```\n    @method createScale\n    @for helpers\n    @param {Object|Function} options (passing in `Function` returns original function with no changes)\n    @param {String} [options.type='linear'] Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`\n    @param {Array} [options.domain] Domain for scale\n    @param {Array} [options.range] Range for scale\n    @param {Any} [options.data] Used to dynamically set domain (with given value or key)\n    @param {Function} [options.value] \"di\"-function for getting value for data\n    @param {String} [options.key] Data key to extract value\n    @param {Boolean} [options.centered] For \"ordinal\" scales, use centered x-values\n    @param {Boolean} [options.adjacent] For \"ordinal\" + centered, set x-values for different series next to each other\n\n    - Requires series-index as second argument to scale, otherwise centered x-value is used\n    - Requires \"data\" or \"series\" options to determine number of series\n    @param {Number} [options.series] Used with \"adjacent\" if no \"data\" is given to set series count\n    @param {Number} [options.padding=0.1] For \"ordinal\" scales, set padding between different x-values\n    @param {Array...} [options....] Set any other scale properties with array of arguments to pass to property\n    @return {d3.Scale}\n  */\n  function createScale(options) {\n    options = options || {};\n\n    // If function, scale was passed in as options\n    if (isFunction(options))\n      return options;\n\n    // Create scale (using d3.time.scale() if type is 'time')\n    var scale;\n    if (options.type == 'time')\n      scale = d3.time.scale();\n    else if (d3.scale[options.type])\n      scale = d3.scale[options.type]();\n    else\n      scale = d3.scale.linear();\n\n    objectEach(options, function(value, key) {\n      if (scale[key]) {\n        // If option is standard property (domain or range), pass in directly\n        // otherwise, pass in as arguments\n        // (don't pass through internal options)\n        if (key == 'range' || key == 'domain')\n          scale[key](value);\n        else if (!contains(['type', 'data', 'value', 'key', 'centered', 'adjacent', 'series', 'padding'], key))\n          scale[key].apply(scale, value);\n      }\n    });\n\n    if (!options.domain && options.data && (options.key || options.value))\n      scale = setDomain(scale, options);\n\n    // Add centered and adjacent extensions to ordinal\n    // (centered by default for ordinal)\n    var centered = options.centered || (options.type == 'ordinal' && options.centered == null);\n    if (options.type == 'ordinal' && (centered || options.adjacent))\n      scale = addCentered(scale, options);\n\n    // Add padding extension to ordinal\n    if (options.type == 'ordinal' && (options.padding != null || centered || options.adjacent))\n      scale = addPadding(scale, options);\n\n    return scale;\n  }\n\n  function setDomain(scale, options) {\n    // Use value \"di\" or create for key\n    var getValue = options.value || function(d) {\n      return d[options.key];\n    };\n\n    // Enforce series data\n    var data = options.data;\n    if (!isSeriesData(data))\n      data = [{values: data}];\n\n    var domain;\n    if (options.type == 'ordinal') {\n      // Domain for ordinal is array of unique values\n      domain = uniq(flatten(data.map(function(series) {\n        if (series && series.values)\n          return series.values.map(getValue);\n      })));\n    }\n    else {\n      var min_value = min(data, getValue);\n\n      domain = [\n        min_value < 0 ? min_value : 0,\n        max(data, getValue)\n      ];\n    }\n\n    scale.domain(domain);\n    return scale;\n  }\n\n  function addCentered(original, options) {\n    // Get series count for adjacent\n    var series_count = options.series || (!isSeriesData(options.data) ? 1 : options.data.length);\n\n    // TODO Look into removing closure\n    var scale = (function(original, options, series_count) {//eslint-disable-line no-shadow\n      var context = function(value, series_index) {\n        var width = context.width();\n\n        if (!options.adjacent)\n          series_index = 0;\n\n        return original(value) + (0.5 * width) + (width * (series_index || 0));\n      };\n      extend(context, original, {\n        width: function() {\n          var range_band = context.rangeBand && context.rangeBand();\n          var width = isFinite(range_band) ? range_band : 0;\n\n          if (options.adjacent)\n            width = width / series_count;\n\n          return width;\n        }\n      });\n\n      // TODO test copy() behavior\n\n      return context;\n    })(original, options, series_count);\n\n    return scale;\n  }\n\n  function addPadding(scale, options) {\n    var padding = options.padding != null ? options.padding : 0.1;\n\n    var original_range = scale.range;\n    scale.range = function(range) {\n      if (!arguments.length) return original_range();\n\n      scale.rangeBands(\n        range,\n        padding,\n        padding / 2\n      );\n    };\n\n    if (options.range)\n      scale.range(options.range);\n\n    // TODO test copy() behavior\n    return scale;\n  }\n\n  /**\r\n    Helper for robustly determining width/height of given selector.\r\n    Checks dimensions from css, attributes, and bounding box.\r\n\r\n    @method dimensions\r\n    @for helpers\r\n    @param {d3.Selection} selection\r\n    @return {Object} `{width, height}`\r\n  */\r\n  function dimensions(selection) {\r\n    // 1. Get width/height set via css (only valid for svg and some other elements)\r\n    var client = clientDimensions(selection);\r\n\r\n    if (client.width && client.height)\r\n      return client;\r\n\r\n    // 2. Get width/height set via attribute\r\n    var attr = attrDimensions(selection);\r\n\r\n    if (isSVG(selection)) {\r\n      return {\r\n        width: client.width != null ? client.width : attr.width || 0,\r\n        height: client.height != null ? client.height : attr.height || 0\r\n      };\r\n    }\r\n    else {\r\n      var bbox = bboxDimensions(selection);\r\n\r\n      // Size set by css -> client (only valid for svg and some other elements)\r\n      // Size set by svg -> attr override or bounding_box\r\n      // -> Take maximum\r\n      return {\r\n        width: d3.max([client.width, attr.width || bbox.width]) || 0,\r\n        height: d3.max([client.height, attr.height || bbox.height]) || 0\r\n      };\r\n    }\r\n  }\r\n\r\n  function clientDimensions(selection) {\r\n    var element = selection.node();\r\n    var width = element && element.clientWidth;\r\n    var height = element && element.clientHeight;\r\n\r\n    // Issue: Firefox does not correctly calculate clientWidth/clientHeight for svg\r\n    //        calculate from css\r\n    //        http://stackoverflow.com/questions/13122790/how-to-get-svg-element-dimensions-in-firefox\r\n    //        Note: This makes assumptions about the box model in use and that width/height are not percent values\r\n    if (isSVG(selection) && (!element.clientWidth || !element.clientHeight) && typeof window !== 'undefined' && window.getComputedStyle) {\r\n      var styles = window.getComputedStyle(element);\r\n      height = parseFloat(styles.height) - parseFloat(styles.borderTopWidth) - parseFloat(styles.borderBottomWidth);\r\n      width = parseFloat(styles.width) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\r\n    }\r\n\r\n    return {\r\n      width: width && !isNaN(width) ? width : null,\r\n      height: height && !isNaN(height) ? height : null\r\n    };\r\n  }\r\n\r\n  function attrDimensions(selection) {\r\n    return {\r\n      width: selection && selection.attr && parseFloat(selection.attr('width')),\r\n      height: selection && selection.attr && parseFloat(selection.attr('height'))\r\n    };\r\n  }\r\n\r\n  function bboxDimensions(selection) {\r\n    var element = selection.node();\r\n    var bbox;\r\n    try {\r\n      bbox = element && typeof element.getBBox == 'function' && element.getBBox();\r\n    }\r\n    catch(ex) {\r\n      // Firefox throws error when calling getBBox when svg hasn't been displayed\r\n      // Ignore error and set to empty\r\n      bbox = {width: 0, height: 0};\r\n    }\r\n\r\n    return bbox;\r\n  }\r\n\r\n  function isSVG(selection) {\r\n    return selection.node().nodeName == 'svg';\r\n  }\n\n  /**\r\n    Translate by (x, y) distance\r\n\r\n    @example\r\n    ```javascript\r\n    translate(10, 15) == 'translate(10, 15)'\r\n    translate({x: 10, y: 15}) == 'translate(10, 15)'\r\n    ```\r\n    @method translate\r\n    @param {Number|Object} [x] value or `{x, y}`\r\n    @param {Number} [y]\r\n    @return {String}\r\n  */\r\n  function translate(x, y) {\r\n    if (isObject(x)) {\r\n      y = x.y;\r\n      x = x.x;\r\n    }\r\n\r\n    return 'translate(' + (x || 0) + ', ' + (y || 0) + ')';\r\n  }\r\n\r\n  /**\r\n    Rotate by degrees, with optional center\r\n\r\n    @method rotate\r\n    @param {Number} degrees\r\n    @param {Object} [center = {x: 0, y: 0}]\r\n    @return {String}\r\n  */\r\n  function rotate(degrees, center) {\r\n    var rotation = 'rotate(' + (degrees || 0);\r\n    if (center)\r\n      rotation += ' ' + (center.x || 0) + ',' + (center.y || 0);\r\n    rotation += ')';\r\n\r\n    return rotation;\r\n  }\r\n\r\n  /**\r\n    Find vertical offset to vertically align text\r\n    (needed due to lack of `alignment-baseline` support in Firefox)\r\n\r\n    @example\r\n    ```js\r\n    var label = d3.select('text');\r\n\r\n    // Place label vertically so that origin is top-left\r\n    var offset = alignText(label);\r\n    label.attr('transform', translate(0, offset));\r\n\r\n    // Center label for line-height of 20px\r\n    var offset = alignText(label, 20);\r\n    label.attr('transform', translate(0, offset));\r\n    ```\r\n    @method alignText\r\n    @param {element} element\r\n    @param {Number} [line_height]\r\n    @return {Number} offset\r\n  */\r\n  function alignText(element, line_height) {\r\n    var offset = 0;\r\n    try {\r\n      var height = element.getBBox().height;\r\n\r\n      var element_style = window.getComputedStyle(element);\r\n      var css_font_size = parseFloat(element_style['font-size']);\r\n      var css_line_height = parseFloat(element_style['line-height']);\r\n\r\n      // If line-height: normal, use estimate 1.14em\r\n      // (actual line-height depends on browser and font)\r\n      if (isNaN(css_line_height))\r\n        css_line_height = 1.15 * css_font_size;\r\n\r\n      var css_adjustment = -(css_line_height - css_font_size) / 2;\r\n\r\n      // Add additional line-height, if specified\r\n      var height_adjustment = 0;\r\n      if (line_height && line_height > 0)\r\n        height_adjustment = (line_height - height) / 2;\r\n\r\n      offset = height + (css_adjustment || 0) + (height_adjustment || 0);\r\n    }\r\n    catch (ex) {\r\n      // Errors can occur from getBBox and getComputedStyle\r\n      // No useful information for offset, do nothing\r\n    }\r\n\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n    Determine if given data is likely series data\r\n\r\n    @method isSeriesData\r\n    @param {Array} data\r\n    @return {Boolean}\r\n  */\r\n  function isSeriesData(data) {\r\n    var first_item = first(data);\r\n    return first_item && isObject(first_item) && Array.isArray(first_item.values);\r\n  }\r\n\r\n  /**\r\n    Get max for array/series by value di\r\n\r\n    @example\r\n    ```js\r\n    var data = [\r\n      {values: [{y: 1}, {y: 2}, {y: 3}]},\r\n      {values: [{y: 4}, {y: 2}, {y: 0}]}\r\n    ];\r\n    max(data, function(d, i) { return d.y; }); // -> 4\r\n    ```\r\n    @method max\r\n    @param {Array} data\r\n    @param {Function} getValue di function that returns value for given (d, i)\r\n    @return {Number}\r\n  */\r\n  function max(data, getValue) {\r\n    var getMax = function(series_data) {\r\n      return series_data && d3.extent(series_data, getValue)[1];\r\n    };\r\n\r\n    if (isSeriesData(data)) {\r\n      return data.reduce(function(memo, series) {\r\n        if (series && Array.isArray(series.values)) {\r\n          var series_max = getMax(series.values);\r\n          return series_max > memo ? series_max : memo;\r\n        }\r\n        else {\r\n          return memo;\r\n        }\r\n      }, -Infinity);\r\n    }\r\n    else {\r\n      return getMax(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n    Get min for array/series by value di\r\n\r\n    @example\r\n    ```js\r\n    var data = [\r\n      {values: [{x: 1}, {x: 2}, {x: 3}]},\r\n      {values: [{x: 4}, {x: 2}, {x: 0}]}\r\n    ];\r\n    min(data, function(d, i) { return d.x; }); // -> 0\r\n    ```\r\n    @method min\r\n    @param {Array} data\r\n    @param {Function} getValue di function that returns value for given (d, i)\r\n    @return {Number}\r\n  */\r\n  function min(data, getValue) {\r\n    var getMin = function(series_data) {\r\n      return series_data && d3.extent(series_data, getValue)[0];\r\n    };\r\n\r\n    if (isSeriesData(data)) {\r\n      return data.reduce(function(memo, series) {\r\n        if (series && Array.isArray(series.values)) {\r\n          var series_min = getMin(series.values);\r\n          return series_min < memo ? series_min : memo;\r\n        }\r\n        else {\r\n          return memo;\r\n        }\r\n      }, Infinity);\r\n    }\r\n    else {\r\n      return getMin(data);\r\n    }\r\n  }\r\n\r\n  // TODO Look into converting to d3's internal style handling\r\n  // Convert key,values to style string\r\n  //\r\n  // @example\r\n  // ```js\r\n  // style({color: 'red', display: 'block'}) -> color: red; display: block;\r\n  // ```\r\n  // @method style\r\n  // @param {Object} styles\r\n  // @return {String}\r\n  function style(styles) {\r\n    if (!styles)\r\n      return '';\r\n\r\n    var keyValues = [];\r\n    objectEach(styles, function(value, key) {\r\n      keyValues.push(key + ': ' + value);\r\n    });\r\n    styles = keyValues.join('; ');\r\n\r\n    return styles ? styles + ';' : '';\r\n  }\r\n\r\n  /**\r\n    Get formatted margins for varying input\r\n\r\n    @method getMargins\r\n    @example\r\n    ```js\r\n    getMargins(4);\r\n    // -> {top: 4, right: 4, bottom: 4, left: 4}\r\n\r\n    getMargins({top: 20}, {top: 8, bottom: 8});\r\n    // -> {top: 20, right: 0, bottom: 8, left: 0}\r\n    ```\r\n    @param {Number|Object} margins\r\n    @param {Object} default_margins\r\n    @return {Object}\r\n  */\r\n  function getMargins(margins, default_margins) {\r\n    if (isNumber(margins))\r\n      return {top: margins, right: margins, bottom: margins, left: margins};\r\n    else\r\n      return defaults({}, margins, default_margins, {top: 0, right: 0, bottom: 0, left: 0});\r\n  }\r\n\r\n  /**\r\n    Create wrapped `(d, i)` function that adds chart instance as first argument.\r\n    Wrapped function uses standard d3 arguments and context.\r\n\r\n    Note: in order to pass proper context to di-functions called within di-function\r\n    use `.call(this, d, i)` (where \"this\" is d3 context)\r\n\r\n    @example\r\n    ```javascript\r\n    d3.chart('Base').extend('Custom', {\r\n      initialize: function() {\r\n        this.base.select('point')\r\n          .attr('cx', this.x);\r\n        // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\r\n      },\r\n\r\n      x: di(function(chart, d, i) {\r\n        // \"this\" is standard d3 context: node\r\n        return chart.xScale()(chart.xValue.call(this, d, i));\r\n      })\r\n\r\n      // xScale, xValue...\r\n    });\r\n    ```\r\n    @method di\r\n    @param {Function} callback with `(chart, d, i)` arguments\r\n    @return {Function}\r\n  */\r\n  function di(callback) {\r\n    // Create intermediate wrapping in case it's called without binding\r\n    var wrapped = function wrapped(d, i, j) {\r\n      return callback.call(this, undefined, d, i, j);\r\n    };\r\n    wrapped._is_di = true;\r\n    wrapped.original = callback;\r\n\r\n    return wrapped;\r\n  }\r\n\r\n  function bindDi(diFn, chart) {\r\n    return function wrapped(d, i, j) {\r\n      return (diFn.original || diFn).call(this, chart, d, i, j);\r\n    };\r\n  }\r\n\r\n  // Bind all di-functions found in chart\r\n  function bindAllDi(chart) {\r\n    for (var key in chart) {\r\n      if (chart[key] && chart[key]._is_di)\r\n        chart[key] = bindDi(chart[key], chart);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n    Get parent data for element (used to get parent series for data point)\r\n\r\n    @example\r\n    ```js\r\n    var data = [{\r\n      name: 'Input',\r\n      values: [1, 2, 3]\r\n    }];\r\n\r\n    d3.selectAll('g')\r\n      .data(data)\r\n      .enter().append('g')\r\n        .selectAll('text')\r\n          .data(function(d) { return d.values; })\r\n          .enter().append('text')\r\n            .text(function(d) {\r\n              var series_data = getParentData(this);\r\n              return series_data.name + ': ' + d;\r\n            });\r\n\r\n    // Input: 1, Input: 2, Input: 3\r\n    ```\r\n    @method getParentData\r\n    @param {Element} element\r\n    @return {Any}\r\n  */\r\n  function getParentData(element) {\r\n    // @internal Shortcut if element + parentData needs to be mocked\r\n    if (element._parent_data)\r\n      return element._parent_data;\r\n\r\n    var parent = element && element.parentNode;\r\n    if (parent) {\r\n      var data = d3.select(parent).data();\r\n      return data && data[0];\r\n    }\r\n  }\r\n\r\n  function createHelper(type) {\r\n    return function(id, options) {\r\n      if (!options) {\r\n        options = id;\r\n        id = undefined;\r\n      }\r\n\r\n      return extend({id: id, type: type}, options);\r\n    };\r\n  }\r\n\r\n  var types = {\r\n    string: {},\r\n    number: {},\r\n    array: {},\r\n    object: {},\r\n    any: {}\r\n  };\r\n\r\n  function checkProp(value, definition) {\r\n    if (definition.validate && !definition.validate(value))\r\n      throw new Error('Invalid value for property: ' + JSON.stringify(value));\r\n  }\r\n\r\n  function createPrepare(steps) {\r\n    if (!Array.isArray(steps))\r\n      steps = Array.prototype.slice.call(arguments);\r\n\r\n    return function() {\r\n      var selection = this.base;\r\n      var context = this;\r\n\r\n      return steps.reduce(function(props, step) {\r\n        return step(selection, props, context);\r\n      }, this.props);\r\n    };\r\n  }\r\n\r\n  function createDraw(steps) {\r\n    return function(selection, props) {\r\n      var prepared = prepareSteps(steps, props);\r\n\r\n      // TODO transitions\r\n      var selected = prepared.select.call(selection);\r\n      selected.exit().call(prepared.exit);\r\n      selected.call(prepared.update);\r\n      selected.enter().call(prepared.enter);\r\n      selected.call(prepared.merge);\r\n    };\r\n  }\r\n\r\n  function prepareSteps(steps, props) {\r\n    steps = defaults({}, steps, {\r\n      select: function() { return this; },\r\n      enter: function() {},\r\n      update: function() {},\r\n      merge: function() {},\r\n      exit: function() { this.remove(); }\r\n    });\r\n    // TODO transitions\r\n\r\n    return {\r\n      select: curry(steps.select, props),\r\n      enter: curry(steps.enter, props),\r\n      update: curry(steps.update, props),\r\n      merge: curry(steps.merge, props),\r\n      exit: curry(steps.exit, props)\r\n    };\r\n  }\r\n\r\n  function curry(fn) {\r\n    var values = Array.prototype.slice.call(arguments, 1);\r\n\r\n    return function() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n      return fn.apply(this, values.concat(args));\r\n    };\r\n  }\r\n\r\n  function createTransition(props) {\r\n    return function() {\r\n      if (!isUndefined(props.duration))\r\n        this.duration(props.duration);\r\n      if (!isUndefined(props.delay))\r\n        this.delay(props.delay);\r\n      if (!isUndefined(props.ease))\r\n        this.ease(props.ease);\r\n    };\r\n  }\r\n\r\n  function getLayer(selection, id) {\r\n    var layer = selection.select('[data-layer=\"' + id + '\"]');\r\n    if (layer.empty())\r\n      layer = selection.append('g').attr('data-layer', id);\r\n\r\n    return layer;\r\n  }\r\n\r\n  // TODO Move to Chart/Base\r\n  var architecture = {\r\n    update: function(selection, props) {\r\n      this.base = selection;\r\n      this.props = this.prepareProps(props);\r\n    },\r\n    prepareProps: function(props) {\r\n      var properties = this.constructor && this.constructor.properties;\r\n      if (!properties)\r\n        return props;\r\n\r\n      var prepared = extend({}, props);\r\n\r\n      objectEach(properties, function(definition, key) {\r\n        var prop = prepared[key];\r\n\r\n        if (!isUndefined(prop))\r\n          checkProp(prop, definition);\r\n        else if (definition.getDefault)\r\n          prepared[key] = definition.getDefault(this.base, prepared, this);\r\n      }, this);\r\n\r\n      return prepared;\r\n    },\r\n    attach: function(id, Type, selection, props) {\r\n      var attached = this.attached[id];\r\n\r\n      if (attached)\r\n        attached.options(props);\r\n      else\r\n        attached = new Type(selection, props);\r\n\r\n      attached.draw();\r\n      this.attached[id] = attached;\r\n    },\r\n    detach: function(id) {\r\n      var attached = this.attached[id];\r\n      if (attached) {\r\n        attached.base.remove();\r\n        delete this.attached[id];\r\n      }\r\n    }\r\n  };\r\n\r\n  var helpers = {\r\n    property: property,\r\n    dimensions: dimensions,\r\n    translate: translate,\r\n    rotate: rotate,\r\n    alignText: alignText,\r\n    isSeriesData: isSeriesData,\r\n    max: max,\r\n    min: min,\r\n    createScale: createScale,\r\n    style: style,\r\n    getMargins: getMargins,\r\n    stack: stack,\r\n    di: di,\r\n    bindDi: bindDi,\r\n    bindAllDi: bindAllDi,\r\n    getParentData: getParentData,\r\n    mixin: mixin,\r\n    createHelper: createHelper,\r\n\r\n    types: types,\r\n    checkProp: checkProp,\r\n    createPrepare: createPrepare,\r\n    createDraw: createDraw,\r\n    createTransition: createTransition,\r\n    getLayer: getLayer\r\n  };\n\n  /**\n    Mixin for handling common transition behaviors\n\n    @class Transition\n    @namespace mixins\n  */\n  var Transition = {\n    /**\n      Delay start of transition by specified milliseconds.\n\n      @property delay\n      @type Number|Function\n      @default (use container value, if available)\n    */\n    delay: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.delay();\n      }\n    }),\n\n    /**\n      Transition duration in milliseconds.\n\n      @property duration\n      @type Number|Function\n      @default (use container value, if available)\n    */\n    duration: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.duration();\n      }\n    }),\n\n    /**\n      Transition ease function\n\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n      - Note: arguments to pass to `d3.ease` are not supported\n\n      @property ease\n      @type String|Function\n      @default (use container value, if available)\n    */\n    ease: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.ease();\n      }\n    }),\n\n    /**\n      Setup delay, duration, and ease for transition\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n        initialize: function() {\n          this.layer('circles', this.base, {\n            // ...\n            events: {\n              'merge:transition': function() {\n                // Set delay, duration, and ease from properties\n                this.chart().setupTransition(this);\n              }\n            }\n          });\n        }\n      }));\n      ```\n      @method setupTransition\n      @param {d3.selection} selection\n    */\n    setupTransition: function setupTransition(selection) {\n      var delay = this.delay();\n      var duration = this.duration();\n      var ease = this.ease();\n\n      if (!isUndefined(delay))\n        selection.delay(delay);\n      if (!isUndefined(duration))\n        selection.duration(duration);\n      if (!isUndefined(ease))\n        selection.ease(ease);\n    }\n  };\n\n  /**\n    Mixin for handling XY data\n\n    @class XY\n    @namespace mixins\n  */\n  var XY = {\n    initialize: function() {\n      // Set scale ranges once chart is ready to be rendered\n      this.on('before:draw', this.setScales.bind(this));\n    },\n\n    transform: function(data) {\n      data = data || [];\n\n      // Transform series data from values to x,y\n      if (isSeriesData(data)) {\n        data = data.map(function(series) {\n          return extend({}, series, {\n            values: series.values.map(normalizeData)\n          });\n        });\n      }\n      else if (Array.isArray(data)) {\n        data = data.map(normalizeData);\n      }\n\n      return data;\n\n      function normalizeData(point, index) {\n        if (!isObject(point))\n          point = {x: index, y: point};\n        else if (!Array.isArray(point) && isUndefined(point.x))\n          point.x = index;\n\n        return point;\n      }\n    },\n\n    /**\n      Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)\n\n      @property xScale\n      @type Object|d3.scale\n    */\n    xScale: property({\n      set: function(value) {\n        var scale = createScale(value);\n        this.setXScaleRange(scale);\n\n        return {\n          override: scale\n        };\n      },\n      get: function(scale) {\n        if (!scale) {\n          scale = this.getDefaultXScale();\n          this.setXScaleRange(scale);\n        }\n\n        return scale;\n      }\n    }),\n\n    /**\n      Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)\n\n      @property xScale\n      @type Object|d3.scale\n    */\n    yScale: property({\n      set: function(value) {\n        var scale = createScale(value);\n        this.setYScaleRange(scale);\n\n        return {\n          override: scale\n        };\n      },\n      get: function(scale) {\n        if (!scale) {\n          scale = this.getDefaultYScale();\n          this.setYScaleRange(scale);\n        }\n\n        return scale;\n      }\n    }),\n\n    /**\n      Key on data object for x-value\n\n      @property xKey\n      @type String\n      @default 'x'\n    */\n    xKey: property({\n      default_value: 'x'\n    }),\n\n    /**\n      Key on data object for y-value\n\n      @property yKey\n      @type String\n      @default 'y'\n    */\n    yKey: property({\n      default_value: 'y'\n    }),\n\n    /**\n      Get scaled x-value for given data-point\n\n      @method x\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    x: di(function(chart, d, i) {\n      var value = chart.xValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.xScale()(value, series_index));\n    }),\n\n    /**\n      Get scaled y-value for given data-point\n\n      @method y\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    y: di(function(chart, d, i) {\n      var value = chart.yValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.yScale()(value, series_index));\n    }),\n\n    /**\n      Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.\n\n      @method key\n      @param {Any} d\n      @param {Number} i\n      @return {Any}\n    */\n    key: di(function(chart, d, i) {\n      return valueOrDefault(d.key, chart.xValue.call(this, d, i));\n    }),\n\n    /**\n      Get scaled `x = 0` value\n\n      @method x0\n      @return {Number}\n    */\n    x0: function() {\n      return parseFloat(this.xScale()(0));\n    },\n\n    /**\n      Get scaled `y = 0` value\n\n      @method x0\n      @return {Number}\n    */\n    y0: function() {\n      return parseFloat(this.yScale()(0));\n    },\n\n    /**\n      Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.\n\n      @example\n      ```js\n      xValue({x: 10, y: 20}); // -> 10\n      xValue([10, 20]); // -> 10\n      ```\n      @method xValue\n      @param {Any} d\n      @return {Any}\n    */\n    xValue: di(function(chart, d) {\n      var key = chart.xKey();\n      if (d)\n        return key in d ? d[key] : d[0];\n    }),\n\n    /**\n      Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.\n\n      @example\n      ```js\n      yValue({x: 10, y: 20}); // -> 20\n      yValue([10, 20]); // -> 20\n      ```\n      @method yValue\n      @param {Any} d\n      @return {Any}\n    */\n    yValue: di(function(chart, d) {\n      var key = chart.yKey();\n      if (d)\n        return key in d ? d[key] : d[1];\n    }),\n\n    /**\n      Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)\n\n      @method setScales\n    */\n    setScales: function() {\n      this.setXScaleRange(this.xScale());\n      this.setYScaleRange(this.yScale());\n    },\n\n    /**\n      Set range (0, width) for given x-scale\n\n      @method setXScaleRange\n      @param {d3.scale} x_scale\n    */\n    setXScaleRange: function(x_scale) {\n      x_scale.range([0, this.width()]);\n    },\n\n    /**\n      Set range(height, 0) for given y-scale\n\n      @method setYScaleRange\n      @param {d3.scale} y_scale\n    */\n    setYScaleRange: function(y_scale) {\n      y_scale.range([this.height(), 0]);\n    },\n\n    /**\n      Get default x-scale: `{data: this.data(), key: 'x'}`\n\n      @method getDefaultXScale\n      @return {d3.scale}\n    */\n    getDefaultXScale: function() {\n      return createScale({\n        data: this.data(),\n        key: 'x'\n      });\n    },\n\n    /**\n      Get default y-scale: `{data: this.data(), key: 'y'}`\n\n      @method getDefaultYScale\n      @return {d3.scale}\n    */\n    getDefaultYScale: function() {\n      return createScale({\n        data: this.data(),\n        key: 'y'\n      });\n    }\n  };\n\n  var d3Chart = d3.chart();\r\n\r\n  // TEMP Clear namespace from mixins\r\n  /**\r\n    @namespace\r\n  */\r\n\r\n  /**\r\n    Shared functionality between all charts and components.\r\n\r\n    - Set properties automatically from `options`,\r\n    - Store fully transformed data\r\n    - Adds `\"before:draw\"` and `\"draw\"` events\r\n    - Standard `width` and `height` calculations\r\n\r\n    @class Base\r\n  */\r\n  function Base(selection, options) {\r\n    // d3.chart() constructor without transform and initialize cascade\r\n    this.base = selection;\r\n    this._layers = {};\r\n    this._attached = {};\r\n    this._events = {};\r\n\r\n    // Bind all di-functions to this chart\r\n    bindAllDi(this);\r\n\r\n    // Set options (and properties with set_from_options)\r\n    if (options)\r\n      this.options(options);\r\n\r\n    // Initialize Chart (relies on explicitly calling super in initialize)\r\n    this.initialize(options);\r\n  }\r\n\r\n  inherits(Base, d3Chart);\r\n\r\n  extend(Base.prototype, {\r\n    initialize: function() {},\r\n    transform: function(data) {\r\n      return data;\r\n    },\r\n    demux: function(name, data) { return data; },\r\n\r\n    // Add events to draw: \"before:draw\" and \"draw\"\r\n    draw: function(data) {\r\n      // Transform data (relies on explicitly calling super in transform)\r\n      data = this.transform(data);\r\n\r\n      // Store fully-transformed data for reference\r\n      this.data(data);\r\n\r\n      this.trigger('before:draw', data);\r\n\r\n      objectEach(this._layers, function(layer) {\r\n        layer.draw(data);\r\n      });\r\n      objectEach(this._attached, function(attachment, name) {\r\n        attachment.draw(this.demux(name, data));\r\n      }, this);\r\n\r\n      this.trigger('draw', data);\r\n    },\r\n\r\n    // Explicitly load d3.chart prototype\r\n    layer: d3Chart.prototype.layer,\r\n    unlayer: d3Chart.prototype.unlayer,\r\n    attach: d3Chart.prototype.attach,\r\n    on: d3Chart.prototype.on,\r\n    once: d3Chart.prototype.once,\r\n    off: d3Chart.prototype.off,\r\n    trigger: d3Chart.prototype.trigger,\r\n\r\n    /**\r\n      Store fully-transformed data for direct access from the chart\r\n\r\n      @property data\r\n      @type Any\r\n    */\r\n    data: property(),\r\n\r\n    /**\r\n      Overall options for chart/component, automatically setting any matching properties.\r\n\r\n      @example\r\n      ```js\r\n      var property = d3.compose.helpers.property;\r\n\r\n      d3.chart('Base').extend('HasProperties', {\r\n        a: property(),\r\n        b: property({\r\n          set: function(value) {\r\n            return {\r\n              override: value + '!'\r\n            };\r\n          }\r\n        })\r\n      });\r\n\r\n      var instance = d3.select('#chart')\r\n        .chart('HasProperties', {\r\n          a: 123,\r\n          b: 'Howdy',\r\n          c: true\r\n        });\r\n\r\n      // Equivalent to:\r\n      // d3.select(...)\r\n      //   .chart('HasProperties')\r\n      //   .options({...});\r\n\r\n      console.log(instance.a()); // -> 123\r\n      console.log(instance.b()); // -> Howdy!\r\n      console.log(instance.options().c); // -> true\r\n      ```\r\n      @property options\r\n      @type Object\r\n    */\r\n    options: property({\r\n      default_value: {},\r\n      set: function(options, previous) {\r\n        // Clear all unset options, except for data and options\r\n        if (previous) {\r\n          var unset = difference(Object.keys(previous), Object.keys(options));\r\n          unset.forEach(function(key) {\r\n            if (key != 'data' && key != 'options' && isProperty(this, key))\r\n              this[key](undefined);\r\n          }, this);\r\n        }\r\n\r\n        objectEach(options, function setFromOptions(value, key) {\r\n          if (isProperty(this, key))\r\n            this[key](value);\r\n        }, this);\r\n\r\n        function isProperty(chart, key) {\r\n          return chart[key] && chart[key].is_property && chart[key].set_from_options;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get width of `this.base`.\r\n      (Does not include `set` for setting width of `this.base`)\r\n\r\n      @method width\r\n      @return {Number}\r\n    */\r\n    width: function width() {\r\n      return dimensions(this.base).width;\r\n    },\r\n\r\n    /**\r\n      Get height of `this.base`.\r\n      (Does not include `set` for setting height of `this.base`)\r\n\r\n      @method height\r\n      @return {Number}\r\n    */\r\n    height: function height() {\r\n      return dimensions(this.base).height;\r\n    }\r\n  });\r\n\r\n  Base.extend = function(proto_props, static_props) {\r\n    // name may be first parameter for d3.chart usage\r\n    var name;\r\n    if (isString(proto_props)) {\r\n      name = proto_props;\r\n      proto_props = static_props;\r\n      static_props = arguments[2];\r\n    }\r\n\r\n    var Parent = this;\r\n    var Child;\r\n\r\n    if (proto_props && proto_props.hasOwnProperty('constructor')) {\r\n      Child = proto_props.constructor;\r\n\r\n      // inherits sets constructor, remove from proto_props\r\n      proto_props = extend({}, proto_props);\r\n      delete proto_props.constructor;\r\n    }\r\n    else {\r\n      Child = function() { return Parent.apply(this, arguments); };\r\n    }\r\n\r\n    inherits(Child, Parent);\r\n    if (static_props)\r\n      extend(Child, static_props);\r\n    if (proto_props)\r\n      extend(Child.prototype, proto_props);\r\n\r\n    // If name is given, register with d3.chart\r\n    if (name)\r\n      d3Chart[name] = Child;\r\n\r\n    return Child;\r\n  };\n\n  /**\r\n    Common base for creating components that includes helpers for positioning and layout.\r\n\r\n    ### Extending\r\n\r\n    `d3.chart('Component')` contains intelligent defaults and there are no required overrides.\r\n    Create a component just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\r\n    - To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('Key', {\r\n      initialize: function() {\r\n        this.layer('Key', this.base, {\r\n          dataBind: function(data) {\r\n            return this.selectAll('text')\r\n              .data(data);\r\n          },\r\n          insert: function() {\r\n            return this.append('text');\r\n          },\r\n          events: {\r\n            merge: function() {\r\n              this.text(this.chart().keyText)\r\n            }\r\n          }\r\n        })\r\n      },\r\n\r\n      keyText: helpers.di(function(chart, d, i) {\r\n        return d.abbr + ' = ' + d.value;\r\n      })\r\n    });\r\n    ```\r\n    @class Component\r\n    @extends Base\r\n  */\r\n  var Component = Base.extend({\r\n    /**\r\n      Component's position relative to chart\r\n      (top, right, bottom, left)\r\n\r\n      @property position\r\n      @type String\r\n      @default 'top'\r\n    */\r\n    position: property({\r\n      default_value: 'top',\r\n      validate: function(value) {\r\n        return contains(['top', 'right', 'bottom', 'left'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the width of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property width\r\n      @type Number\r\n      @default (actual width)\r\n    */\r\n    width: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).width;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the height of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property height\r\n      @type Number\r\n      @default (actual height)\r\n    */\r\n    height: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).height;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Margins (in pixels) around component\r\n\r\n      @property margins\r\n      @type Object\r\n      @default {top: 0, right: 0, bottom: 0, left: 0}\r\n    */\r\n    margins: property({\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values)\r\n        };\r\n      },\r\n      default_value: getMargins()\r\n    }),\r\n\r\n    /**\r\n      Center the component vertically/horizontally (depending on position)\r\n\r\n      @property centered\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    centered: property({\r\n      default_value: false\r\n    }),\r\n\r\n    /**\r\n      Skip component during layout calculations and positioning\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('NotLaidOut', {\r\n        skip_layout: true\r\n      });\r\n      ```\r\n      @attribute skip_layout\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    skip_layout: false,\r\n\r\n    /**\r\n      Perform any layout preparation required before getLayout (default is draw)\r\n      (override in prototype of extension)\r\n\r\n      Note: By default, components are double-drawn;\r\n      for every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\r\n      This can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        prepareLayout: function(data) {\r\n          // default: this.draw(data);\r\n          // so that getLayout has real dimensions\r\n\r\n          // -> custom preparation (if necessary)\r\n        }\r\n      })\r\n      ```\r\n      @method prepareLayout\r\n      @param {Any} data\r\n    */\r\n    prepareLayout: function(data) {\r\n      this.draw(data);\r\n    },\r\n\r\n    /**\r\n      Get layout details for use when laying out component\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        getLayout: function(data) {\r\n          var calculated_width, calculated_height;\r\n\r\n          // Perform custom calculations...\r\n\r\n          // Must return position, width, and height\r\n          return {\r\n            position: this.position(),\r\n            width: calculated_width,\r\n            height: calculated_height\r\n          };\r\n        }\r\n      });\r\n      ```\r\n      @method getLayout\r\n      @param {Any} data\r\n      @return {Object} position, width, and height for layout\r\n    */\r\n    getLayout: function(data) {\r\n      this.prepareLayout(data);\r\n\r\n      var margins = this.margins();\r\n      return {\r\n        position: this.position(),\r\n        width: this.width() + margins.left + margins.right,\r\n        height: this.height() + margins.top + margins.bottom\r\n      };\r\n    },\r\n\r\n    /**\r\n      Set layout of underlying base\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        setLayout: function(x, y, options) {\r\n          // Set layout of this.base...\r\n          // (the following is the default implementation)\r\n          var margins = this.margins();\r\n\r\n          // (handle this.centered())\r\n\r\n          this.base\r\n            .attr('transform', helpers.translate(x + margins.left, y + margins.top));\r\n          this.height(options && options.height);\r\n          this.width(options && options.width);\r\n        }\r\n      });\r\n      ```\r\n      @method setLayout\r\n      @param {Number} x position of base top-left\r\n      @param {Number} y position of base top-left\r\n      @param {Object} options\r\n        @param {Object} [options.height] height of component in layout\r\n        @param {Object} [options.width] width of component in layout\r\n    */\r\n    setLayout: function(x, y, options) {\r\n      var margins = this.margins();\r\n\r\n      if (this.centered()) {\r\n        var actual_dimensions = dimensions(this.base);\r\n        if ('height' in options)\r\n          y += (options.height - actual_dimensions.height) / 2;\r\n        else\r\n          y += margins.top;\r\n\r\n        if ('width' in options)\r\n          x += (options.width - actual_dimensions.width) / 2;\r\n        else\r\n          x += margins.left;\r\n      }\r\n      else {\r\n        x += margins.left;\r\n        y += margins.top;\r\n      }\r\n\r\n      this.base.attr('transform', translate(x, y));\r\n      this.height(options && options.height);\r\n      this.width(options && options.width);\r\n    }\r\n  }, {\r\n    properties: {\r\n      position: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['top', 'right', 'bottom', 'left'], value);\r\n        }\r\n      },\r\n      width: {\r\n        type: types.number,\r\n        getDefault: function(selection, props, context) {\r\n          // TODO Move to Component.prepare\r\n          var width = context.width();\r\n          return !isUndefined(width) ? width : dimensions(selection).width;\r\n        }\r\n      },\r\n      height: {\r\n        type: types.number,\r\n        getDefault: function(selection, props, context) {\r\n          // TODO Move to Component.prepare\r\n          var height = context.height();\r\n          return !isUndefined(height) ? height : dimensions(selection).height;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n      Default z-index for component\r\n      (Charts are 100 by default, so Component = 50 is below chart by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('AboveChartLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 150\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 50\r\n    */\r\n    z_index: 50,\r\n\r\n    /**\r\n      Set to `'chart'` to use chart layer for component.\r\n      (e.g. Axis uses chart layer to position with charts, but includes layout for ticks)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('ChartComponent', {\r\n        // ...\r\n      }, {\r\n        layer_type: 'chart'\r\n      });\r\n      ```\r\n      @attribute layer_type\r\n      @static\r\n      @type String\r\n      @default 'component'\r\n    */\r\n    layer_type: 'component'\r\n  });\n\n  /**\n    Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\n    and `getPoint` helper for adding helpful meta information to raw data point.\n\n    @class Hover\n    @namespace mixins\n  */\n  var Hover = {\n    initialize: function() {\n      this.on('attach', function() {\n        this.container.on('mouseenter', this.onMouseEnter.bind(this));\n        this.container.on('mousemove', this.onMouseMove.bind(this));\n        this.container.on('mouseleave', this.onMouseLeave.bind(this));\n      }.bind(this));\n    },\n\n    /**\n      Get point information for given data-point\n\n      @method getPoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n      @return {key, series, d, meta {chart, i, j, x, y}}\n    */\n    getPoint: di(function(chart, d, i, j) {\n      var key = chart.key && chart.key.call(this, d, i, j);\n      var series = chart.seriesData && chart.seriesData.call(this, d, i, j) || {};\n\n      return {\n        key: (series.key || j) + '.' + (key || i),\n        series: series,\n        d: d,\n        meta: {\n          chart: chart,\n          i: i,\n          j: j,\n          x: chart.x && chart.x.call(this, d, i, j),\n          y: chart.y && chart.y.call(this, d, i, j)\n        }\n      };\n    }),\n\n    /**\n      Call to trigger mouseenter:point when mouse enters data-point\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n        initialize: function() {\n          this.layer('bars', this.base, {\n            // dataBind...\n            insert: function() {\n              // Want to trigger enter/leave point\n              // when mouse enter/leaves bar (rect)\n              var chart = this.chart();\n              return this.append('rect')\n                .on('mouseenter', chart.mouseEnterPoint)\n                .on('mouseleave', chart.mouseLeavePoint);\n            }\n            // events...\n          })\n        }\n      }));\n      ```\n      @method mouseEnterPoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n    */\n    mouseEnterPoint: di(function(chart, d, i, j) {\n      chart.container.trigger('mouseenter:point', chart.getPoint.call(this, d, i, j));\n    }),\n\n    /**\n      Call to trigger mouseleave:point when mouse leaves data-point\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n        initialize: function() {\n          this.layer('bars', this.base, {\n            // dataBind...\n            insert: function() {\n              // Want to trigger enter/leave point\n              // when mouse enter/leaves bar (rect)\n              var chart = this.chart();\n              return this.append('rect')\n                .on('mouseenter', chart.mouseEnterPoint)\n                .on('mouseleave', chart.mouseLeavePoint);\n            }\n            // events...\n          })\n        }\n      }));\n      ```\n      @method mouseleavePoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n    */\n    mouseLeavePoint: di(function(chart, d, i, j) {\n      chart.container.trigger('mouseleave:point', chart.getPoint.call(this, d, i, j));\n    }),\n\n    /**\n      (Override) Called when mouse enters container\n\n      @method onMouseEnter\n      @param {Object} position (chart and container {x,y} position of mouse)\n      @param {Object} position.chart {x, y} position relative to chart origin\n      @param {Object} position.container {x, y} position relative to container origin\n    */\n    onMouseEnter: function(/* position */) {},\n\n    /**\n      (Override) Called when mouse moves within container\n\n      @method onMouseMove\n      @param {Object} position (chart and container {x,y} position of mouse)\n      @param {Object} position.chart {x, y} position relative to chart origin\n      @param {Object} position.container {x, y} position relative to container origin\n    */\n    onMouseMove: function(/* position */) {},\n\n    /**\n      (Override) Called when mouse leaves container\n\n      @method onMouseLeave\n    */\n    onMouseLeave: function() {}\n  };\n\n  /**\n    Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.\n\n    @class HoverPoints\n    @namespace mixins\n  */\n  var HoverPoints = {\n    initialize: function() {\n      var points, tolerance, active;\n\n      this.on('draw', function() {\n        // Clear cache on draw\n        points = null;\n      });\n\n      this.on('attach', function() {\n        var update = function update(position) {\n          var closest = [];\n          if (position)\n            closest = getClosestPoints(points, position.chart, tolerance);\n\n          updateActive(active, closest, this.container);\n          active = closest;\n        }.bind(this);\n\n        this.container.on('mouseenter', function(position) {\n          if (!points)\n            points = getPoints(this, this.data());\n\n          tolerance = this.hoverTolerance();\n          update(position);\n        }.bind(this));\n\n        this.container.on('mousemove', update);\n        this.container.on('mouseleave', update);\n      }.bind(this));\n    },\n\n    /**\n      Hover tolerance (in px) for calculating close points\n\n      @property hoverTolerance\n      @type Number\n      @default Infinity\n    */\n    hoverTolerance: property({\n      default_value: Infinity\n    })\n  };\n\n  function getPoints(chart, data) {\n    if (data) {\n      if (!isSeriesData(data))\n        data = [{values: data}];\n\n      return data.map(function(series, j) {\n        return series.values.map(function(d, i) {\n          return chart.getPoint.call({_parent_data: series}, d, i, j);\n        }).sort(function(a, b) {\n          // Sort by x\n          return a.meta.x - b.meta.x;\n        });\n      });\n    }\n  }\n\n  function getClosestPoints(points, position, tolerance) {\n    if (!points)\n      return [];\n\n    return compact(points.map(function(series) {\n      function setDistance(point) {\n        point.distance = getDistance(point.meta, position);\n        return point;\n      }\n      function closePoints(point) {\n        return point.distance < tolerance;\n      }\n      function sortPoints(a, b) {\n        if (a.distance < b.distance)\n          return -1;\n        else if (a.distance > b.distance)\n          return 1;\n        else\n          return 0;\n      }\n\n      var by_distance = series.map(setDistance).filter(closePoints).sort(sortPoints);\n\n      return by_distance[0];\n    }));\n\n    function getDistance(a, b) {\n      return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n    }\n  }\n\n  function updateActive(active, closest, container) {\n    var active_keys = pluck(active, 'key');\n    var closest_keys = pluck(closest, 'key');\n\n    objectEach(closest, function(point) {\n      if (contains(active_keys, point.key))\n        container.trigger('mousemove:point', point);\n      else\n        container.trigger('mouseenter:point', point);\n    });\n    objectEach(active, function(point) {\n      if (!contains(closest_keys, point.key))\n        container.trigger('mouseleave:point', point);\n    });\n  }\n\n  /**\n    Mixin for handling labels in charts\n\n    @class Labels\n    @namespace mixins\n  */\n  var Labels$1 = {\n    /**\n      Call during chart initialization to add labels to chart\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n        initialize: function() {\n          // this.layer()...\n\n          // Attach labels layer\n          this.attachLabels();\n        }\n      }));\n      ```\n      @method attachLabels\n    */\n    attachLabels: function() {\n      var options = this.labels();\n      options.parent = this;\n\n      var LabelsClass = d3.chart(options.type);\n      var base = this.base.append('g').attr('class', 'chart-labels');\n      var labels = this._labels = new LabelsClass(base, options);\n\n      // Proxy x and y to parent chart\n      this.proxyLabelMethods.forEach(function(method) {\n        labels[method] = this[method];\n      }, this);\n\n      this.on('draw', function(data) {\n        options = this.labels();\n        options.parent = this;\n\n        labels.options(options);\n\n        if (options.display !== false)\n          labels.draw(options.data || data);\n        else\n          labels.draw([]);\n      }.bind(this));\n    },\n\n    /**\n      Options passed to labels chart\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n        // ...\n      }));\n\n      // ...\n\n      chart.labels(true); // -> display labels with defaults\n      chart.labels(false); // -> hide labels\n      chart.labels({offset: 10}); // -> pass options to labels chart\n\n      d3.select('#chart')\n        .chart('Compose', function(data) {\n          return {\n            charts: {\n              custom: {labels: {offset: 10}}\n            }\n          };\n        });\n      ```\n      @property labels\n      @type Object\n    */\n    labels: property({\n      get: function(value) {\n        if (isBoolean(value))\n          value = {display: value};\n        else if (!value)\n          value = {display: false};\n\n        return defaults({}, value, {\n          type: 'Labels'\n        });\n      }\n    }),\n\n    // Array of methods to proxy on labels chart\n    proxyLabelMethods: []\n  };\n\n  /**\n    Mixin for handling labels in XY charts\n    (proxies `x` and `y` to properly place labels for XY charts)\n\n    @class LabelsXY\n    @namespace mixins\n    @extends Labels\n  */\n  var LabelsXY = extend({}, Labels$1, {\n    proxyLabelMethods: ['x', 'y']\n  });\n\n  /**\n    Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right\n\n    @class XYInverted\n    @namespace mixins\n  */\n  var XYInverted = {\n    /**\n      Get x-value for plotting (scaled y-value)\n\n      @method x\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    x: di(function(chart, d, i) {\n      var value = chart.yValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.yScale()(value, series_index));\n    }),\n\n    /**\n      Get y-value for plotting (scaled x-value)\n\n      @method y\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    y: di(function(chart, d, i) {\n      var value = chart.xValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.xScale()(value, series_index));\n    }),\n\n    /**\n      Get scaled y = 0 value (along x-axis)\n\n      @method x0\n      @return {Number}\n    */\n    x0: function() {\n      return parseFloat(this.yScale()(0));\n    },\n\n    /**\n      Get scaled x = 0 value (along y-axis)\n\n      @method x0\n      @return {Number}\n    */\n    y0: function() {\n      return parseFloat(this.xScale()(0));\n    },\n\n    /**\n      Set range (height, 0) for given x-scale\n\n      @method setXScaleRange\n      @param {d3.scale} x_scale\n    */\n    setXScaleRange: function(x_scale) {\n      x_scale.range([this.height(), 0]);\n    },\n\n    /**\n      Set range (0, width) for given y-scale\n\n      @method setYScaleRange\n      @param {d3.scale} y_scale\n    */\n    setYScaleRange: function(y_scale) {\n      y_scale.range([0, this.width()]);\n    }\n  };\n\n  /**\n    Mixin for charts of centered key,value data (x: index, y: value, key)\n\n    @class XYValues\n    @namespace mixins\n  */\n  var XYValues = {\n    /**\n      Determine width of data-point when displayed adjacent\n\n      @method adjacentWidth\n      @return {Number}\n    */\n    adjacentWidth: function() {\n      var series_count = this.seriesCount ? this.seriesCount() : 1;\n      return this.layeredWidth() / series_count;\n    },\n\n    /**\n      Determine layered width (width of group for adjacent)\n\n      @method layeredWidth\n      @return {Number}\n    */\n    layeredWidth: function() {\n      var range_band = this.xScale() && this.xScale().rangeBand && this.xScale().rangeBand();\n      var width = isFinite(range_band) ? range_band : 0;\n\n      return width;\n    },\n\n    /**\n      Determine item width based on series display type (adjacent or layered)\n\n      @method itemWidth\n      @return {Number}\n    */\n    itemWidth: function() {\n      var scale = this.xScale();\n      return scale && scale.width ? scale.width() : this.layeredWidth();\n    },\n\n    // Override default x-scale to use ordinal type\n    /**\n      Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`\n\n      @method getDefaultYScale\n      @return {d3.scale}\n    */\n    getDefaultXScale: function() {\n      return createScale({\n        type: 'ordinal',\n        data: this.data(),\n        key: 'x',\n        centered: true\n      });\n    }\n  };\n\n  /**\n    Mixin for handling series data\n\n    @class Series\n    @namespace mixins\n  */\n  var Series = {\n    /**\n      Get key for given series data\n\n      @method seriesKey\n      @param {Any} d Series object with `key`\n      @return {Any}\n    */\n    seriesKey: di(function(chart, d) {\n      return d.key;\n    }),\n\n    /**\n      Get values for given series data\n\n      @method seriesValues\n      @param {Any} d Series object with `values` array\n      @return {Array}\n    */\n    seriesValues: di(function(chart, d, i) {\n      // Store seriesIndex on series\n      d.seriesIndex = i;\n      return d.values;\n    }),\n\n    /**\n      Get class for given series data\n\n      @method seriesClass\n      @param {Any} d\n      @param {Number} i\n      @return {String}\n    */\n    seriesClass: di(function(chart, d, i) {\n      return 'chart-series chart-index-' + i + (d['class'] ? ' ' + d['class'] : '');\n    }),\n\n    /**\n      Get index for given data-point of series\n\n      @method seriesIndex\n      @param {Any} d\n      @param {Number} i\n    */\n    seriesIndex: di(function(chart, d, i) {\n      var series = chart.seriesData.call(this, d, i);\n      return series && series.seriesIndex || 0;\n    }),\n\n    /**\n      Get parent series data for given data-point\n\n      @method seriesData\n      @return {Any}\n    */\n    seriesData: di(function() {\n      return getParentData(this);\n    }),\n\n    /**\n      (di) Get style given series data or data-point\n      (Uses \"style\" object on `d`, if defined)\n\n      @method itemStyle\n      @param {Any} d\n      @param {Number} [i]\n      @param {Number} [j]\n      @return {String}\n    */\n    itemStyle: di(function(chart, d) {\n      return style(d.style) || null;\n    }),\n\n    /**\n      Get series count for chart\n\n      @method seriesCount\n      @return {Number}\n    */\n    seriesCount: function() {\n      var data = this.data();\n      return (data && isSeriesData(data)) ? data.length : 1;\n    },\n\n    /**\n      Extension of layer() that handles data-binding and layering for series data.\n\n      - Updates `dataBind` method to access underlying series values\n      - Creates group layer for each series in chart\n      - Should be used just like layer()\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n        initialize: function() {\n          this.seriesLayer('Circles', this.base, {\n            // Create group for each series on this.base\n            // and calls the following for each series item\n            // (entire layer is called twice: series-1 and series-2)\n\n            dataBind: function(data) {\n              // 1. data = [1, 2, 3]\n              // 2. data = [4, 5, 6]\n            },\n            insert: function() {\n              // Same as chart.layer\n              // (where \"this\" is series group layer)\n            },\n            events: {\n              // Same as chart.layer\n            }\n          });\n        }\n      }));\n\n      // ...\n\n      chart.draw([\n        {key: 'series-1', values: [1, 2, 3]},\n        {key: 'series-2', values: [4, 5, 6]}\n      ]);\n      ```\n      @method seriesLayer\n      @param {String} name\n      @param {Selection} selection\n      @param {Object} options (`dataBind` and `insert` required)\n      @return {d3.chart.layer}\n    */\n    seriesLayer: function(name, selection, options) {\n      if (options && options.dataBind) {\n        var dataBind = options.dataBind;\n\n        options.dataBind = function(data) {\n          var chart = this.chart();\n          var series = this.selectAll('g')\n            .data(data, chart.seriesKey);\n\n          series.enter()\n            .append('g');\n\n          series\n            .attr('class', chart.seriesClass)\n            .attr('style', chart.itemStyle);\n\n          // TODO Exit layer items then exit series layer\n          series.exit()\n            .remove();\n\n          series.chart = function() { return chart; };\n\n          return dataBind.call(series, chart.seriesValues);\n        };\n      }\n\n      return d3.chart().prototype.layer.call(this, name, selection, options);\n    },\n\n    // Ensure data is in series form\n    transform: function(data) {\n      return !isSeriesData(data) ? [{values: data}] : data;\n    }\n  };\n\n  var mixins = {\n    Series: Series,\n    XY: XY,\n    XYValues: XYValues,\n    XYInverted: XYInverted,\n    Labels: Labels$1,\n    LabelsXY: LabelsXY,\n    Hover: Hover,\n    HoverPoints: HoverPoints,\n    Transition: Transition,\n    StandardLayer: StandardLayer\n  };\n\n  /**\r\n    Gridlines component that draws major ticks for chart\r\n\r\n    Uses d3.axis extensions for ticks:\r\n\r\n    - `ticks`\r\n    - `tickValues`\r\n\r\n    ### Extending\r\n\r\n    To extend the `Gridlines` component, the following methods are available\r\n\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart').chart('Compose', function(data) {\r\n      var scales = {\r\n        x: {data: data, key: 'x'},\r\n        y: {data: data, key: 'y'}\r\n      };\r\n\r\n      var vertical = d3c.gridlines({\r\n        scale: scales.x,\r\n        orientation: 'vertical'\r\n      });\r\n      var horizontal = d3c.gridlines({\r\n        scale: scales.y,\r\n        orientation: 'horizontal'\r\n      });\r\n\r\n      return [\r\n        vertical,\r\n        horizontal\r\n      ];\r\n    });\r\n    ```\r\n    @class Gridlines\r\n  */\r\n  var Mixed$7 = mixin(Component, XY, Transition, StandardLayer);\r\n  var Gridlines = Mixed$7.extend({\r\n    initialize: function(options) {\r\n      Mixed$7.prototype.initialize.call(this, options);\r\n\r\n      // Proxy attach to parent for width/height\r\n      var parent = this.options().parent;\r\n      if (parent) {\r\n        this.parent = parent;\r\n\r\n        if (parent.container) {\r\n          this.container = parent.container;\r\n          this.trigger('attach');\r\n        }\r\n        else {\r\n          parent.on('attach', function() {\r\n            this.container = parent.container;\r\n            this.trigger('attach');\r\n          }.bind(this));\r\n        }\r\n      }\r\n\r\n      // Use standard layer for extensibility\r\n      this.standardLayer('Gridlines', this.base.append('g').attr('class', 'chart-gridlines'));\r\n    },\r\n\r\n    /**\r\n      Use horizontal, vertical gridlines\r\n\r\n      @property orientation\r\n      @type String\r\n      @default horizontal\r\n    */\r\n    orientation: property({\r\n      default_value: 'horizontal',\r\n      validate: function(value) {\r\n        return contains(['horizontal', 'vertical'], value);\r\n      },\r\n      set: function() {\r\n        // Update scale -> xScale/yScale when position changes\r\n        if (this.scale())\r\n          this.scale(this.scale());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Scale to use for gridlines.\r\n      Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used.\r\n\r\n      @example\r\n      ```js\r\n      // Set with d3.scale directly\r\n      gridlines.scale(d3.scale());\r\n\r\n      // or with Object passed to helpers.createScale\r\n      gridlines.scale({data: data, key: 'x'});\r\n      ```\r\n      @property scale\r\n      @type Object|d3.scale\r\n    */\r\n    scale: property({\r\n      set: function(value) {\r\n        if (this.orientation() == 'vertical') {\r\n          this.xScale(value);\r\n          value = this.xScale();\r\n        }\r\n        else {\r\n          this.yScale(value);\r\n          value = this.yScale();\r\n        }\r\n\r\n        return {\r\n          override: value\r\n        };\r\n      }\r\n    }),\r\n\r\n    // d3.axis extensions\r\n    ticks: property({\r\n      default_value: [10]\r\n    }),\r\n    tickValues: property(),\r\n\r\n    drawLine: di(function(chart, d) {\r\n      var x1, x2, y1, y2;\r\n      if (chart.orientation() == 'vertical') {\r\n        x1 = x2 = chart.xScale()(d);\r\n        y1 = 0;\r\n        y2 = chart.height();\r\n      }\r\n      else {\r\n        x1 = 0;\r\n        x2 = chart.width();\r\n        y1 = y2 = chart.yScale()(d);\r\n      }\r\n\r\n      d3.select(this)\r\n        .attr('x1', x1)\r\n        .attr('x2', x2)\r\n        .attr('y1', y1)\r\n        .attr('y2', y2);\r\n    }),\r\n\r\n    width: function width() {\r\n      // Use container's explicit chart width rather than component width (if available)\r\n      return this.container ? this.container.chartPosition().width : dimensions(this.base).width;\r\n    },\r\n    height: function height() {\r\n      // Use container's explicit chart height rather than component width (if available)\r\n      return this.container ? this.container.chartPosition().height : dimensions(this.base).width;\r\n    },\r\n\r\n    onDataBind: function onDataBind(selection, data) {\r\n      // [false] is given for display: false when attached from Axis\r\n      var hide = data && data[0] && data[0].y === false;\r\n\r\n      var tick_values = this.tickValues();\r\n      if (tick_values == null && !hide) {\r\n        // Get tick values from scale\r\n        var scale = this.orientation() == 'vertical' ? this.xScale() : this.yScale();\r\n        var ticks_args = this.ticks();\r\n\r\n        if (!ticks_args)\r\n          ticks_args = [10];\r\n        if (!Array.isArray(ticks_args))\r\n          ticks_args = [ticks_args];\r\n\r\n        tick_values = scale.ticks ? scale.ticks.apply(scale, ticks_args) : scale.domain();\r\n      }\r\n\r\n      return selection.selectAll('line').data(hide ? [] : tick_values);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('line')\r\n        .attr('class', 'chart-gridline');\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('opacity', 0)\r\n        .each(this.drawLine);\r\n    },\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      selection.attr('opacity', 1);\r\n    },\r\n    onExit: function onExit(selection) {\r\n      selection.remove();\r\n    },\r\n\r\n    skip_layout: true\r\n  }, {\r\n    layer_type: 'chart',\r\n    z_index: 55\r\n  });\r\n\r\n  var gridlines = createHelper('Gridlines');\n\n  var default_legend_margins = {top: 8, right: 8, bottom: 8, left: 8};\r\n\r\n  // TODO Define after Legend\r\n  // Possibly by passing into Legend/wrapping with Legend\r\n  var drawLegend = createDraw({\r\n    select: select,\r\n    enter: enter,\r\n    merge: merge\r\n  });\r\n\r\n  /**\r\n    Legend component that can automatically pull chart and series information from d3.compose\r\n\r\n    Notes:\r\n\r\n    - To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\r\n    - To exclude a series from the legend, use `exclude_from_legend = true` in series object\r\n    - To add swatch for custom chart, use `Legend.registerSwatch()`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var input = [{key: 'input', name: 'Input', values: data.input}];\r\n        var output = [\r\n          {key: 'output1', name: 'Output 1', values: data.output1},\r\n          {key: 'output2', name: 'Output 2', values: data.output2}\r\n        ];\r\n\r\n        var charts = [\r\n          d3c.lines('a', {data: input}), // ...\r\n          d3c.bars('b', {data: output}) // ...\r\n        ];\r\n        var legend = d3c.legend({charts: ['a', 'b']});\r\n\r\n        return [\r\n          [d3c.layered(charts), legend]\r\n        ];\r\n      });\r\n\r\n    // -> automatically creates legend from series data for 'a' and 'b'\r\n    //    (Lines Swatch) Input\r\n    //    (Bars Swatch) Output 1\r\n    //    (Bars Swatch) Output 2\r\n\r\n    // or, manually set data for legend\r\n    return [\r\n      d3c.legend({\r\n        data: [\r\n          {type: 'Lines', text: 'Input', class: 'series-index-0'},\r\n          {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\r\n          {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\r\n        ]\r\n      })\r\n    };\r\n    ```\r\n    @class Legend\r\n    @extends Component, StandardLayer\r\n  */\r\n  var Mixed$6 = mixin(Component, architecture);\r\n  var Legend = Mixed$6.extend({\r\n    prepare: createPrepare(\r\n      prepareMargins$2,\r\n      prepareLegendData,\r\n      prepareLegend\r\n    ),\r\n\r\n    render: function() {\r\n      // TODO Move to lifecycle\r\n      this.update(this.base, this.options());\r\n\r\n      var layer = getLayer(this.base, 'legend')\r\n        .classed('chart-legend', true);\r\n      var props = this.prepare();\r\n\r\n      drawLegend(layer, props);\r\n    },\r\n\r\n    swatchClass: function(props, context, d) {\r\n      return compact(['chart-legend-swatch', d['class']]).join(' ');\r\n    },\r\n\r\n    createSwatch: function(props, context, d, i) {\r\n      var swatches = context.constructor.swatches;\r\n      if (!swatches)\r\n        return;\r\n\r\n      var swatch = d && d.type && swatches[d.type] || swatches['default'];\r\n      if (!swatch)\r\n        return;\r\n\r\n      var selection = d3.select(this);\r\n      swatch.call(selection, context, d, i);\r\n    },\r\n\r\n    getLegendData: function(chart, series, series_index) {\r\n      return {\r\n        text: series.name || 'Series ' + (series_index + 1),\r\n        key: chart.id + '.' + (series.key || series_index),\r\n        type: chart.type,\r\n        'class': compact([\r\n          'chart-series',\r\n          'chart-index-' + series_index,\r\n          chart.options()['class'],\r\n          series['class']\r\n        ]).join(' ')\r\n      };\r\n    },\r\n\r\n    // TODO\r\n    // _itemDetails: function _itemDetails(d, i) {\r\n    //   return {\r\n    //     legend: this,\r\n    //     d: d,\r\n    //     i: i\r\n    //   };\r\n    // },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    initialize: function() {\r\n      Mixed$6.prototype.initialize.apply(this, arguments);\r\n      this.attached = {};\r\n    },\r\n    draw: function() {\r\n      this.render();\r\n    },\r\n    swatchDimensions: function() {\r\n      return this.props.swatchDimensions;\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Component.properties, {\r\n      /**\r\n        Array of chart keys from container to display in legend\r\n\r\n        @example\r\n        ```js\r\n        d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          var charts = [\r\n            {id: 'a'},\r\n            {id: 'b'},\r\n            {id: 'c'}\r\n          ];\r\n          var legend = d3c.legend({charts: ['a', 'c']});\r\n\r\n          return [\r\n            [d3c.layered(charts), legend]\r\n          ];\r\n        });\r\n        ```\r\n        @property charts\r\n        @type Array\r\n      */\r\n      charts: {\r\n        type: types.array\r\n      },\r\n\r\n      /**\r\n        Dimensions of \"swatch\" in px\r\n\r\n        @property swatchDimensions\r\n        @type Object\r\n        @default {width: 20, height: 20}\r\n      */\r\n      swatchDimensions: {\r\n        type: types.object,\r\n        getDefault: function() {\r\n          return {width: 20, height: 20};\r\n        }\r\n      },\r\n\r\n       /**\r\n        Margins (in pixels) around legend\r\n\r\n        @property margins\r\n        @type Object\r\n        @default {top: 8, right: 8, bottom: 8, left: 8}\r\n      */\r\n      margins: {\r\n        type: types.any,\r\n        getDefault: function() {\r\n          return default_legend_margins;\r\n        }\r\n      },\r\n\r\n      /**\r\n        Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\r\n        (Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")\r\n\r\n        @property stackDirection\r\n        @type String\r\n        @default (based on position)\r\n      */\r\n      stackDirection: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['vertical', 'horizontal'], value);\r\n        },\r\n        getDefault: function(selection, props) {\r\n          var direction_by_position = {\r\n            top: 'horizontal',\r\n            right: 'vertical',\r\n            bottom: 'horizontal',\r\n            left: 'vertical'\r\n          };\r\n          return direction_by_position[props.position];\r\n        }\r\n      }\r\n    }),\r\n\r\n    z_index: 200,\r\n    swatches: {\r\n      'default': function(chart) {\r\n        var swatch_dimensions = chart.swatchDimensions();\r\n\r\n        this.append('circle')\r\n          .attr('cx', swatch_dimensions.width / 2)\r\n          .attr('cy', swatch_dimensions.height / 2)\r\n          .attr('r', d3.min([swatch_dimensions.width, swatch_dimensions.height]) / 2)\r\n          .attr('class', 'chart-swatch');\r\n      }\r\n    },\r\n\r\n    /**\r\n      Register a swatch create function for the given chart type\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\r\n        var dimensions = chart.swatchDimensions();\r\n\r\n        return this.append('line')\r\n          .attr('x1', 0).attr('y1', dimensions.height / 2)\r\n          .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\r\n          .attr('class', 'chart-line');\r\n      });\r\n      ```\r\n      @method registerSwatch\r\n      @static\r\n      @param {Array|String} types Chart type(s)\r\n      @param {Function} create \"di\" function that inserts swatch\r\n    */\r\n    registerSwatch: function(chart_types, create) {\r\n      if (!Array.isArray(chart_types))\r\n        chart_types = [chart_types];\r\n\r\n      chart_types.forEach(function(chart_type) {\r\n        this.swatches[chart_type] = create;\r\n      }, this);\r\n    }\r\n  });\r\n\r\n  function prepareMargins$2(selection, props) {\r\n    return extend({}, props, {\r\n      margins: getMargins(props.margins, default_legend_margins)\r\n    });\r\n  }\r\n\r\n  function prepareLegendData(selection, props, context) {\r\n    // Pull legend data from charts, if specified\r\n    var data = props.data;\r\n    if (props.charts) {\r\n      var charts = context.container.charts();\r\n      data = props.charts.reduce(function(combined_data, chart_id) {\r\n        var chart = find(charts, function(find_chart) {\r\n          return find_chart.id == chart_id;\r\n        });\r\n\r\n        // Check for exclude from legend option\r\n        if (!chart || chart.exclude_from_legend || chart.options().exclude_from_legend)\r\n          return combined_data;\r\n\r\n        var chart_data = context.container.demux(chart_id, context.container.data());\r\n        if (!isSeriesData(chart_data))\r\n          chart_data = [{values: chart_data}];\r\n\r\n        var legend_data = chart_data.reduce(function(memo, series, index) {\r\n          if (series && !series.exclude_from_legend)\r\n            memo.push(context.getLegendData(chart, series, index));\r\n\r\n          return memo;\r\n        }, []);\r\n\r\n        return combined_data.concat(legend_data);\r\n      }, []);\r\n    }\r\n\r\n    return extend({}, props, {\r\n      data: data\r\n    });\r\n  }\r\n\r\n  function prepareLegend(selection, props, context) {\r\n    var data = props.data.map(function(d, i) {\r\n      return extend({}, d, {\r\n        'class': context.swatchClass(props, context, d, i)\r\n      });\r\n    });\r\n\r\n    return extend({}, props, {\r\n      data: data,\r\n      createSwatch: curry(context.createSwatch, props, context)\r\n    });\r\n  }\r\n\r\n  function select(props) {\r\n    return this.selectAll('.chart-legend-group')\r\n      .data(props.data, function(d) { return d.key; });\r\n  }\r\n\r\n  function enter(props) {\r\n    var groups = this.append('g')\r\n      .attr('class', 'chart-legend-group')\r\n      .style({'pointer-events': 'all'});\r\n      // TODO\r\n      // .on('mouseenter', function(d, i) {\r\n      //   this.container.trigger('mouseenter:legend', this._itemDetails(d, i));\r\n      // }.bind(this))\r\n      // .on('mousemove', function(d, i) {\r\n      //   this.container.trigger('mousemove:legend', this._itemDetails(d, i));\r\n      // }.bind(this))\r\n      // .on('mouseleave', function(d, i) {\r\n      //   this.container.trigger('mouseleave:legend', this._itemDetails(d, i));\r\n      // }.bind(this));\r\n\r\n    groups.append('g')\r\n      .attr('width', props.swatchDimensions.width)\r\n      .attr('height', props.swatchDimensions.height)\r\n      .attr('class', 'chart-legend-swatch');\r\n    groups.append('text')\r\n      .attr('class', 'chart-legend-label');\r\n\r\n    groups.append('rect')\r\n      .attr('class', 'chart-legend-hover')\r\n      .style({visibility: 'hidden'});\r\n  }\r\n\r\n  function merge(props) {\r\n    var size = props.swatchDimensions;\r\n    var swatch = this.select('.chart-legend-swatch');\r\n\r\n    swatch\r\n      .attr('class', function(d) { return d['class']; })\r\n      .selectAll('*').remove();\r\n\r\n    swatch.each(props.createSwatch);\r\n\r\n    this.select('.chart-legend-label')\r\n      .text(function(d) { return d.text; })\r\n      .each(function() {\r\n        // Vertically center text\r\n        var offset = alignText(this, size.height);\r\n        d3.select(this)\r\n          .attr('transform', translate(size.width + 5, offset));\r\n      });\r\n\r\n    // Position groups after positioning everything inside\r\n    this.call(stack({\r\n      direction: props.stackDirection,\r\n      origin: 'top',\r\n      padding: 5,\r\n      min_height: size.height,\r\n      min_width: size.width\r\n    }));\r\n\r\n    // Position hover listeners\r\n    var sizes = [];\r\n    this.each(function() {\r\n      sizes.push(this.getBBox());\r\n    });\r\n    this.select('.chart-legend-hover').each(function(d, i) {\r\n      var item_size = sizes[i];\r\n      var transform = null;\r\n\r\n      if (item_size.height > item_size.height) {\r\n        var offset = (item_size.height - item_size.height) / 2;\r\n        transform = translate(0, -offset);\r\n      }\r\n\r\n      d3.select(this)\r\n        .attr('width', item_size.width)\r\n        .attr('height', item_size.height)\r\n        .attr('transform', transform);\r\n    });\r\n  }\r\n\r\n  // Create line swatch for Line and LineValues\r\n  Legend.registerSwatch(['Lines'], function(chart) {\r\n    var swatch_dimensions = chart.swatchDimensions();\r\n\r\n    return this.append('line')\r\n      .attr('x1', 0).attr('y1', swatch_dimensions.height / 2)\r\n      .attr('x2', swatch_dimensions.width).attr('y2', swatch_dimensions.height / 2)\r\n      .attr('class', 'chart-line');\r\n  });\r\n\r\n  // Create bars swatch for Bars and StackedBars\r\n  Legend.registerSwatch(['Bars', 'StackedBars', 'HorizontalBars', 'HorizontalStackedBars'], function(chart) {\r\n    var swatch_dimensions = chart.swatchDimensions();\r\n\r\n    return this.append('rect')\r\n      .attr('x', 0).attr('y', 0)\r\n      .attr('width', swatch_dimensions.width).attr('height', swatch_dimensions.height)\r\n      .attr('class', 'chart-bar');\r\n  });\r\n\r\n  var legend = createHelper('Legend');\n\n  /**\r\n    Legend positioned within chart bounds.\r\n\r\n    @class InsetLegend\r\n    @extends Legend\r\n  */\r\n  var InsetLegend = Legend.extend({\r\n    render: function() {\r\n      Legend.prototype.render.call(this);\r\n\r\n      var layer = getLayer(this.base, 'legend');\r\n      var transform = getTransform(layer, this.props);\r\n\r\n      layer.attr('transform', transform);\r\n    },\r\n\r\n    skip_layout: true\r\n  }, {\r\n    properties: extend({}, Legend.properties, {\r\n      /**\r\n        Position legend within chart layer `{x, y, relative_to}`\r\n        Use `relative_to` to use x,y values relative to x-y origin\r\n        (e.g. `\"left-top\"` is default)\r\n\r\n        @example\r\n        ```js\r\n        d3.select('#chart')\r\n          .chart('Compose', function(data) {\r\n            return {\r\n              components: {\r\n                legend: {\r\n                  type: 'InsetLegend',\r\n                  // Position legend 10px away from right-bottom corner of chart\r\n                  translation: {x: 10, y: 10, relative_to: 'right-bottom'}\r\n                }\r\n              }\r\n            }\r\n          });\r\n        ```\r\n        @property translation\r\n        @type Object {x,y}\r\n        @default {x: 10, y: 10, relative_to: 'left-top'}\r\n      */\r\n      translation: {\r\n        type: types.object,\r\n        getDefault: function() {\r\n          return {x: 10, y: 0, relative_to: 'left-top'};\r\n        }\r\n      }\r\n    }),\r\n\r\n    layer_type: 'chart'\r\n  });\r\n\r\n  function getTransform(layer, props) {\r\n    var value = props.translation;\r\n    var x = value.x || 0;\r\n    var y = value.y || 0;\r\n    var relative_to_x = (value.relative_to && value.relative_to.split('-')[0]) || 'left';\r\n    var relative_to_y = (value.relative_to && value.relative_to.split('-')[1]) || 'top';\r\n    var size = dimensions(layer);\r\n\r\n    if (relative_to_x === 'right')\r\n      x = props.width - size.width - x;\r\n    if (relative_to_y === 'bottom')\r\n      y = props.height - size.height - y;\r\n\r\n    return translate(x, y);\r\n  }\r\n\r\n  var insetLegend = createHelper('InsetLegend');\n\n  /**\r\n    Add text to a chart.\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        return {\r\n          components: {\r\n            title: {\r\n              type: 'Text',\r\n              position: 'top'\r\n              text: 'Main Title',\r\n              textAlign: 'left',\r\n              'class': 'title'\r\n            },\r\n            notes: {\r\n              type: 'Text',\r\n              position: 'bottom',\r\n              text: 'Notes',\r\n              'class': 'notes'\r\n            }\r\n          }\r\n        };\r\n      });\r\n    ```\r\n    @class Text\r\n    @extends Component, StandardLayer\r\n  */\r\n  var Mixed$4 = mixin(Component, architecture);\r\n  var Text = Mixed$4.extend({\r\n    prepare: createPrepare(\r\n      prepareText\r\n    ),\r\n\r\n    render: function() {\r\n      // TODO Move to lifecycle\r\n      this.update(this.base, this.options());\r\n\r\n      var layer = getLayer(this.base, 'text')\r\n        .classed('chart-text', true);\r\n      var props = this.prepare();\r\n\r\n      drawText(layer, props);\r\n    },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    initialize: function() {\r\n      Mixed$4.prototype.initialize.apply(this, arguments);\r\n      this.attached = {};\r\n    },\r\n    draw: function() {\r\n      this.render();\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Component.properties, {\r\n      /**\r\n        Text to display\r\n\r\n        @property text\r\n        @type String\r\n      */\r\n      text: types.string,\r\n\r\n      /**\r\n        Rotation of text\r\n\r\n        @property rotation\r\n        @type Number\r\n        @default 0\r\n      */\r\n      rotation: {\r\n        type: types.number,\r\n        getDefault: function() {\r\n          return 0;\r\n        }\r\n      },\r\n\r\n      /**\r\n        Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)\r\n\r\n        @property textAlign\r\n        @type String\r\n        @default \"center\"\r\n      */\r\n      textAlign: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['left', 'center', 'right'], value);\r\n        },\r\n        getDefault: function() {\r\n          return 'center';\r\n        }\r\n      },\r\n\r\n      /**\r\n        text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)\r\n\r\n        @property anchor\r\n        @type String\r\n        @default (set by `textAlign`)\r\n      */\r\n      anchor: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['start', 'middle', 'end', 'inherit'], value);\r\n        },\r\n        getDefault: function(selection, props) {\r\n          return {\r\n            left: 'start',\r\n            center: 'middle',\r\n            right: 'end'\r\n          }[props.textAlign];\r\n        }\r\n      },\r\n\r\n      /**\r\n        Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)\r\n\r\n        @property verticalAlign\r\n        @type String\r\n        @default \"middle\"\r\n      */\r\n      verticalAlign: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['top', 'middle', 'bottom'], value);\r\n        },\r\n        getDefault: function() {\r\n          return 'middle';\r\n        }\r\n      },\r\n\r\n      /**\r\n        Style object containing styles for text\r\n\r\n        @property style\r\n        @type Object\r\n        @default {}\r\n      */\r\n      style: {\r\n        type: types.object,\r\n        getDefault: function() {\r\n          return {};\r\n        }\r\n      }\r\n    }),\r\n\r\n    z_index: 70\r\n  });\r\n\r\n  function prepareText(selection, props) {\r\n    // Calculate transform\r\n    var x = {\r\n      left: 0,\r\n      center: props.width / 2,\r\n      right: props.width\r\n    }[props.textAlign];\r\n    var y = {\r\n      top: 0,\r\n      middle: props.height / 2,\r\n      bottom: props.height\r\n    }[props.verticalAlign];\r\n\r\n    var translation = translate(x, y);\r\n    var rotation = rotate(props.rotation);\r\n    var transform = translation + ' ' + rotation;\r\n\r\n    return extend({}, props, {\r\n      transform: transform\r\n    });\r\n  }\r\n\r\n  function drawText(selection, props) {\r\n    var text_selection = selection.selectAll('text');\r\n\r\n    if (text_selection.empty())\r\n      text_selection = selection.append('text');\r\n\r\n    text_selection\r\n      .attr('transform', props.transform)\r\n      .attr('style', style(props.style))\r\n      .attr('text-anchor', props.anchor)\r\n      .attr('class', props['class'])\r\n      .text(props.text);\r\n  }\r\n\r\n  function textOptions(id, options, default_options) {\r\n    if (!options) {\r\n      options = id;\r\n      id = undefined;\r\n    }\r\n    if (isString(options))\r\n      options = {text: options};\r\n\r\n    return extend({id: id}, default_options, options);\r\n  }\r\n\r\n  function text(id, options) {\r\n    return textOptions(id, options, {type: 'Text'});\r\n  }\n\n  /**\r\n    Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)\r\n\r\n    @class Title\r\n    @extends Text\r\n  */\r\n  var Title = Text.extend({\r\n    prepare: createPrepare(\r\n      prepareMargins,\r\n      prepareText\r\n    ),\r\n\r\n    render: function() {\r\n      Text.prototype.render.call(this);\r\n      getLayer(this.base, 'text').classed('chart-title', true);\r\n    },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    margins: function() {\r\n      return this.props.margins;\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Text.properties, {\r\n      /**\r\n        Margins (in pixels) around Title\r\n\r\n        @property margins\r\n        @type Object\r\n        @default (set based on `position`)\r\n      */\r\n      margins: {\r\n        type: types.any,\r\n        getDefault: function(selection, props) {\r\n          return defaultMargins(props.position);\r\n        }\r\n      },\r\n\r\n      /**\r\n        Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).\r\n\r\n        @property rotation\r\n        @type Number\r\n        @default (set based on `position`)\r\n      */\r\n      rotation: extend({}, Text.properties.rotation, {\r\n        getDefault: function(selection, props) {\r\n          var rotate_by_position = {\r\n            right: 90,\r\n            left: -90\r\n          };\r\n\r\n          return rotate_by_position[props.position] || 0;\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  function prepareMargins(selection, props) {\r\n    return extend({}, props, {\r\n      margins: getMargins(props.margins, defaultMargins(props.position))\r\n    });\r\n  }\r\n\r\n  function defaultMargins(position) {\r\n    var default_margin = 8;\r\n    var margins_by_position = {\r\n      top: {top: default_margin, bottom: default_margin},\r\n      right: {right: default_margin, left: default_margin},\r\n      bottom: {top: default_margin, bottom: default_margin},\r\n      left: {right: default_margin, left: default_margin}\r\n    };\r\n    return getMargins(margins_by_position[position]);\r\n  }\r\n\r\n  function title(id, options) {\r\n    return textOptions(id, options, {type: 'Title'});\r\n  }\n\n  /**\r\n    Axis title component that extends Title with defaults (styling)\r\n\r\n    @class AxisTitle\r\n    @extends Title\r\n  */\r\n  var AxisTitle = Title.extend({\r\n    prepare: createPrepare(\r\n      prepareMargins$1,\r\n      prepareText\r\n    ),\r\n\r\n    setLayout: function(x, y, options) {\r\n      Title.prototype.setLayout.call(this, x, y, options);\r\n    },\r\n\r\n    render: function() {\r\n      Title.prototype.render.call(this);\r\n      getLayer(this.base, 'text')\r\n        .classed('chart-title', false)\r\n        .classed('chart-axis-title', true);\r\n    }\r\n  }, {\r\n    properties: extend({}, Title.properties, {\r\n      /**\r\n        Margins (in pixels) around axis title\r\n\r\n        @property margins\r\n        @type Object\r\n        @default (set based on `position`)\r\n      */\r\n      margins: extend({}, Title.properties.margins, {\r\n        getDefault: function(selection, props) {\r\n          return defaultMargins$1(props.position);\r\n        }\r\n      })\r\n    })\r\n  });\r\n\r\n  function prepareMargins$1(selection, props) {\r\n    return extend({}, props, {\r\n      margins: getMargins(props.margins, defaultMargins$1(props.position))\r\n    });\r\n  }\r\n\r\n  function defaultMargins$1(position) {\r\n    var default_margin = 8;\r\n    var margins_by_position = {\r\n      top: {top: default_margin / 2, bottom: default_margin},\r\n      right: {left: default_margin / 2, right: default_margin},\r\n      bottom: {bottom: default_margin / 2, top: default_margin},\r\n      left: {right: default_margin / 2, left: default_margin}\r\n    };\r\n\r\n    return getMargins(margins_by_position[position]);\r\n  }\r\n\r\n  function axisTitle(id, options) {\r\n    return textOptions(id, options, {type: 'AxisTitle'});\r\n  }\n\n  /**\r\n    Axis component for XY data (wraps `d3.axis`).\r\n\r\n    Available d3.axis extensions:\r\n\r\n    - `ticks`\r\n    - `tickValues`\r\n    - `tickSize`\r\n    - `innerTickSize`\r\n    - `outerTickSize`\r\n    - `tickPadding`\r\n    - `tickFormat`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var scales = {\r\n          x: {data: data, key: 'x'},\r\n          y: {data: data, key: 'y'}\r\n        };\r\n\r\n        var charts = [];\r\n        var xAxis = d3c.axis({scale: scales.x});\r\n        var yAxis = d3c.axis({scale: scales.y});\r\n\r\n        return [\r\n          // Display y-axis to left of charts\r\n          [yAxis, d3c.layered(charts)],\r\n\r\n          // Display x-axis below charts\r\n          xAxis\r\n        ];\r\n      });\r\n    ```\r\n    @class Axis\r\n    @extends Component, Transition\r\n  */\r\n  var Mixed$5 = mixin(Component, Transition, architecture);\r\n\r\n  var Axis = Mixed$5.extend({\r\n    prepare: createPrepare(\r\n      prepareScales,\r\n      prepareAxis,\r\n      prepareGridlines\r\n    ),\r\n\r\n    render: function() {\r\n      // TODO Move to lifecycle\r\n      // also, update is called on getLayout and render\r\n      // to get up-to-date width/height defaults in scales\r\n      // will need to move width/height and scale to prepare\r\n      // (rather than getDefaults)\r\n      this.update(this.base, this.options());\r\n\r\n      var props = this.prepare();\r\n      var layer = getLayer(this.base, 'axis')\r\n        .attr('class', 'chart-axis')\r\n        .attr('transform', props.transform);\r\n\r\n      if (props.gridlines) {\r\n        var gridlines_layer = getLayer(this.base, 'gridlines')\r\n          .attr('class', 'chart-axis-gridlines');\r\n        this.attach('gridlines', Gridlines, gridlines_layer, props.gridlines);\r\n      }\r\n      else {\r\n        this.detach('gridlines');\r\n      }\r\n\r\n      drawAxis(layer, {axis: props.axis, transition: props.transition});\r\n    },\r\n\r\n    getLayout: function() {\r\n      // TODO Move to lifecycle\r\n      this.update(this.base, this.options());\r\n\r\n      // Draw layout axis\r\n      var props = {\r\n        axis: this.prepare().axis\r\n      };\r\n      var layer = getLayer(this.base, 'layout')\r\n        .attr('class', 'chart-axis chart-layout')\r\n        .style({display: 'none'});\r\n\r\n      drawAxis(layer, props);\r\n\r\n      // Calculate layout\r\n      // (make layout axis visible for width calculations in Firefox)\r\n      layer.style({display: 'block'});\r\n\r\n      var label_overhang = getLabelOverhang(layer, this.props.orientation);\r\n\r\n      layer.style({display: 'none'});\r\n\r\n      return {\r\n        position: this.props.position,\r\n        width: label_overhang.width,\r\n        height: label_overhang.height\r\n      };\r\n    },\r\n    setLayout: function() {\r\n      // Axis is positioned as chart layer, so don't set layout\r\n    },\r\n\r\n    // === TODO Remove, compatibility with current system\r\n    initialize: function() {\r\n      Mixed$5.prototype.initialize.apply(this, arguments);\r\n      this.attached = {};\r\n    },\r\n    draw: function() {\r\n      this.render();\r\n    }\r\n    // ===\r\n  }, {\r\n    properties: extend({}, Component.properties, {\r\n      /**\r\n        Scale to pass to d3.axis\r\n\r\n        - If `xScale`/`yScale` are given, `scale` is set automatically based on `position`.\r\n        - Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used\r\n\r\n        @example\r\n        ```js\r\n        // Set with d3.scale directly\r\n        axis.scale(d3.scale());\r\n\r\n        // or with Object passed helpers.createScale\r\n        axis.scale({data: data, key: 'x'});\r\n\r\n        // For x0/y0 position, both xScale and yScale needed\r\n        // (scale is automatically set by position)\r\n        axis.xScale({domain: [0, 100]});\r\n        axis.yScale({domain: [0, 10]});\r\n        axis.position('y0');\r\n\r\n        // -> axis.scale() -> axis.xScale by default\r\n        ```\r\n        @property scale\r\n        @type Object|d3.scale\r\n      */\r\n      scale: types.any,\r\n\r\n      /**\r\n        {x,y} translation of axis relative to chart\r\n        (set by default based on position)\r\n\r\n        @property translation\r\n        @type Object\r\n        @default (set based on position)\r\n      */\r\n      translation: {\r\n        type: types.object,\r\n        getDefault: function(selection, props) {\r\n          return {\r\n            top: {x: 0, y: 0},\r\n            right: {x: props.width, y: 0},\r\n            bottom: {x: 0, y: props.height},\r\n            left: {x: 0, y: 0}\r\n          }[props.position];\r\n        }\r\n      },\r\n\r\n      /**\r\n        Axis orient for ticks\r\n        (set by default based on position)\r\n\r\n        @property orient\r\n        @type String\r\n        @default (set based on position)\r\n      */\r\n      orient: {\r\n        type: types.string,\r\n        getDefault: function(selection, props) {\r\n          return props.position;\r\n        }\r\n      },\r\n\r\n      /**\r\n        Axis orientation (vertical or horizonal)\r\n\r\n        @property orientation\r\n        @type String\r\n        @default (set based on position)\r\n      */\r\n      orientation: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['horizontal', 'vertical'], value);\r\n        },\r\n        getDefault: function(selection, props) {\r\n          return {\r\n            top: 'horizontal',\r\n            right: 'vertical',\r\n            bottom: 'horizontal',\r\n            left: 'vertical',\r\n            x0: 'vertical',\r\n            y0: 'horizontal'\r\n          }[props.position];\r\n        }\r\n      },\r\n\r\n      /**\r\n        Attach gridlines for axis\r\n        (`true` to show with default options, `{...}` to pass options to `Gridlines`)\r\n\r\n        @property gridlines\r\n        @type Boolean|Object\r\n        @default false\r\n      */\r\n      gridlines: types.any,\r\n\r\n      ticks: types.any,\r\n      tickValues: types.any,\r\n      tickSize: types.any,\r\n      innerTickSize: types.any,\r\n      outerTickSize: types.any,\r\n      tickPadding: types.any,\r\n      tickFormat: types.any\r\n    }),\r\n\r\n    layer_type: 'chart',\r\n    z_index: 60\r\n  });\r\n\r\n  // TODO Move to xy.prepare\r\n  function prepareScales(selection, props) {\r\n    var xScale = props.orientation == 'horizontal' ? props.scale : props.xScale;\r\n    if (!xScale)\r\n      xScale = XY.getDefaultXScale.call({data: function() { return props.data; }});\r\n\r\n    xScale = createScale(xScale);\r\n    XY.setXScaleRange.call({width: function() { return props.width; }}, xScale);\r\n\r\n    var yScale = props.orientation == 'vertical' ? props.scale : props.yScale;\r\n    if (!yScale)\r\n      yScale = XY.getDefaultYScale.call({data: function() { return props.data; }});\r\n\r\n    yScale = createScale(yScale);\r\n    XY.setYScaleRange.call({height: function() { return props.height; }}, yScale);\r\n\r\n    return extend({}, props, {\r\n      xScale: xScale,\r\n      yScale: yScale,\r\n      scale: props.orientation == 'vertical' ? yScale : xScale\r\n    });\r\n  }\r\n\r\n  function prepareAxis(selection, props, context) {\r\n    var axis = {\r\n      scale: props.scale,\r\n      orient: props.orient,\r\n      ticks: props.ticks,\r\n      tickValues: props.tickValues,\r\n      tickSize: props.tickSize,\r\n      innerTickSize: props.innerTickSize,\r\n      outerTickSize: props.outerTickSize,\r\n      tickPadding: props.tickPadding,\r\n      tickFormat: props.tickFormat\r\n    };\r\n    var transform = translate(props.translation);\r\n    var transition = {\r\n      // Pull properties from Transition mixin\r\n      duration: context.duration(),\r\n      delay: context.delay(),\r\n      ease: context.ease()\r\n    };\r\n\r\n    return extend({}, props, {\r\n      axis: axis,\r\n      transform: transform,\r\n      transition: transition\r\n    });\r\n  }\r\n\r\n  function prepareGridlines(selection, props, context) {\r\n    var gridlines = props.gridlines;\r\n\r\n    if (gridlines) {\r\n      if (isBoolean(gridlines))\r\n        gridlines = {};\r\n\r\n      gridlines = defaults({}, gridlines, {\r\n        parent: context,\r\n        xScale: props.xScale,\r\n        yScale: props.yScale,\r\n        ticks: props.ticks,\r\n        tickValues: props.tickValues,\r\n        orientation: props.orientation == 'horizontal' ? 'vertical' : 'horizontal'\r\n      });\r\n    }\r\n\r\n    return extend({}, props, {gridlines: gridlines});\r\n  }\r\n\r\n  function drawAxis(selection, props) {\r\n    var axis = createAxis(props.axis);\r\n\r\n    if (props.transition && !selection.selectAll('*').empty())\r\n      selection = selection.transition().call(createTransition(props.transition));\r\n\r\n    selection.call(axis);\r\n  }\r\n\r\n  function createAxis(props) {\r\n    var axis = d3.svg.axis();\r\n    var array_extensions = ['tickValues'];\r\n\r\n    objectEach(props, function(value, key) {\r\n      if (!isUndefined(value)) {\r\n        // If value is array, treat as arguments array\r\n        // otherwise, pass in directly\r\n        if (Array.isArray(value) && !contains(array_extensions, key))\r\n          axis[key].apply(axis, value);\r\n        else\r\n          axis[key](value);\r\n      }\r\n    });\r\n\r\n    return axis;\r\n  }\r\n\r\n  function getLabelOverhang(selection, orientation) {\r\n    // TODO Look into overhang relative to chartBase (for x0, y0)\r\n    var overhangs = {width: [0], height: [0]};\r\n\r\n    selection.selectAll('g').each(function() {\r\n      try {\r\n        // There are cases where getBBox may throw\r\n        // (e.g. not currently displayed in Firefox)\r\n        var bbox = this.getBBox();\r\n\r\n        if (orientation == 'horizontal')\r\n          overhangs.height.push(bbox.height);\r\n        else\r\n          overhangs.width.push(bbox.width);\r\n      }\r\n      catch (ex) {\r\n        // Ignore error\r\n      }\r\n    });\r\n\r\n    return {\r\n      width: d3.max(overhangs.width),\r\n      height: d3.max(overhangs.height)\r\n    };\r\n  }\r\n\r\n  var axis = createHelper('Axis');\n\n  /**\r\n    Common base for creating charts.\r\n    Standard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\r\n\r\n    ### Extending\r\n\r\n    To take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\r\n    and automatically setting properties from `options`, use `d3.compose.helpers.di`\r\n    and `d3.compose.helpers.property` when creating your chart.\r\n\r\n    @example\r\n    ```js\r\n    var helpers = d3.compose.helpers;\r\n\r\n    d3.chart('Chart').extend('Pie', {\r\n      initialize: function() {\r\n        // same as d3.chart\r\n      },\r\n      transform: function(data) {\r\n        // same as d3.chart\r\n      },\r\n\r\n      color: helpers.di(function(chart, d, i) {\r\n        // \"di\" function with parent chart injected (\"this\" = element)\r\n      }),\r\n\r\n      centered: helpers.property({\r\n        default_value: true\r\n        // can be automatically set from options object\r\n      })\r\n    });\r\n    ```\r\n    @class Chart\r\n    @extends Base\r\n  */\r\n  var Chart = Base.extend({}, {\r\n    /**\r\n      Default z-index for chart\r\n      (Components are 50 by default, so Chart = 100 is above component by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('BelowComponentLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 40\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 100\r\n    */\r\n    z_index: 100,\r\n    layer_type: 'chart'\r\n  });\n\n  /**\r\n    Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\r\n\r\n    ### Extending\r\n\r\n    To extend the `Labels` chart, the following methods are available:\r\n\r\n    - `insertLabels`\r\n    - `mergeLabels`\r\n    - `layoutLabels`\r\n    - `transitionLabels`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    View the `Labels.js` source for the default implementation and more information on these methods.\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      return {\r\n        charts: {\r\n          input: {\r\n            type: 'Lines',\r\n            data: data.input,\r\n            // xScale, yScale, other properties...\r\n\r\n            // Show labels with default properties\r\n            labels: true\r\n          },\r\n          output: {\r\n            type: 'Bars',\r\n            data: data.output,\r\n            // xScale, yScale, other properties...\r\n\r\n            // Pass options to labels\r\n            labels: {\r\n              offset: 2,\r\n              position: 'top',\r\n              style: {\r\n                'font-size': '14px'\r\n              },\r\n              format: d3.format(',0d')\r\n            }\r\n          },\r\n          labels: {\r\n            type: 'Labels',\r\n            data: data.labels,\r\n\r\n            // xScale, yScale, other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    chart.draw({\r\n      input: [1, 2, 3],\r\n      output: [10, 20, 30],\r\n      labels: [\r\n        {x: 0, y: 0},\r\n        {x: 0, y: 30, label: 'Override (y by default)'},\r\n        {x: 2, y: 0},\r\n        {x: 2, y: 30}\r\n      ]\r\n    });\r\n    ```\r\n    @class Labels\r\n    @extends Chart, Series, XY, Hover, Transition, StandardLayer\r\n  */\r\n  var Mixed$2 = mixin(Chart, Series, XY, Hover, Transition, StandardLayer);\r\n  var Labels = Mixed$2.extend({\r\n    initialize: function(options) {\r\n      Mixed$2.prototype.initialize.call(this, options);\r\n\r\n      // Proxy attach to parent for hover\r\n      var parent = this.options().parent;\r\n      if (parent) {\r\n        this.parent = parent;\r\n        parent.on('attach', function() {\r\n          this.container = parent.container;\r\n          this.trigger('attach');\r\n        }.bind(this));\r\n      }\r\n\r\n      // Use StandardLayer for extensibility\r\n      this.standardSeriesLayer('Labels', this.base);\r\n    },\r\n\r\n    transform: function(data) {\r\n      data = Mixed$2.prototype.transform.call(this, data);\r\n\r\n      if (!isSeriesData(data))\r\n        data = [{key: 'labels', name: 'Labels', values: data}];\r\n\r\n      // TODO Use ticks / domain from xScale\r\n      // ticks = scale.ticks ? scale.ticks.apply(scale, [10]) : scale.domain()\r\n      return data;\r\n    },\r\n\r\n    /**\r\n      Formatting function or string (string is passed to `d3.format`) for label values\r\n\r\n      @property format\r\n      @type String|Function\r\n    */\r\n    format: property({\r\n      set: function(value) {\r\n        if (isString(value)) {\r\n          return {\r\n            override: d3.format(value)\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Label position relative to data point\r\n      (top, right, bottom, or left)\r\n\r\n      Additionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\r\n      where `a` and `b` are `top`, `right`, `bottom`, or `left`\r\n\r\n      For more advanced positioning, a \"di\" function can be specified to set position per label\r\n\r\n      @example\r\n      ```js\r\n      labels.position('top'); // top for all values\r\n      labels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\r\n      labels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\r\n      ```\r\n      @property position\r\n      @type String|Function\r\n      @default top|bottom\r\n    */\r\n    position: property({\r\n      default_value: 'top|bottom',\r\n      get: function(value) {\r\n        if (isString(value) && value.indexOf('|') >= 0) {\r\n          var chart = this;\r\n          var parts = value.split('|');\r\n          return function(d, i, j) {\r\n            var y_value = chart.yValue.call(this, d, i, j);\r\n            return y_value >= 0 ? parts[0] : parts[1];\r\n          };\r\n        }\r\n        else {\r\n          return value;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Offset between data point and label\r\n      (if `Number` is given, offset is set based on position)\r\n\r\n      @property offset\r\n      @type Number|Object\r\n      @default 0\r\n    */\r\n    offset: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Padding between text and label background\r\n\r\n      @property padding\r\n      @type Number\r\n      @default 1\r\n    */\r\n    padding: property({default_value: 1}),\r\n\r\n    /**\r\n      Define text anchor (start, middle, or end)\r\n\r\n      (set by default based on label position)\r\n\r\n      @property anchor\r\n      @type String\r\n      @default middle\r\n    */\r\n    anchor: property({\r\n      validate: function(value) {\r\n        return contains(['start', 'middle', 'end'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Define text-alignment (top, middle, or bottom)\r\n\r\n      (set by default based on label position)\r\n\r\n      @property alignment\r\n      @type String\r\n      @default middle\r\n    */\r\n    alignment: property({\r\n      validate: function(value) {\r\n        return contains(['top', 'middle', 'bottom'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get label text for data-point (uses \"label\" property or y-value)\r\n\r\n      @method labelText\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {String}\r\n    */\r\n    labelText: di(function(chart, d, i) {\r\n      var value = valueOrDefault(d.label, valueOrDefault(d.__original_y, chart.yValue.call(this, d, i)));\r\n      var format = chart.format();\r\n\r\n      return format ? format(value) : value;\r\n    }),\r\n\r\n    /**\r\n      Get class for label group\r\n\r\n      @method labelClass\r\n      @param {Any} d\r\n      @param {Number} i\r\n      @return {String}\r\n    */\r\n    labelClass: di(function(chart, d) {\r\n      return 'chart-label' + (d['class'] ? ' ' + d['class'] : '');\r\n    }),\r\n\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('g')\r\n        .data(data, this.key);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('g')\r\n        .call(this.insertLabels);\r\n    },\r\n    onMerge: function onMerge(selection) {\r\n      selection.attr('class', this.labelClass);\r\n\r\n      this.mergeLabels(selection);\r\n      this.layoutLabels(selection);\r\n    },\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      // Transition labels into position\r\n      this.setupTransition(selection);\r\n      this.transitionLabels(selection);\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    insertLabels: function(selection) {\r\n      selection.append('rect')\r\n        .attr('class', 'chart-label-bg');\r\n      selection.append('text')\r\n        .attr('class', 'chart-label-text');\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    mergeLabels: function(selection) {\r\n      selection.selectAll('text')\r\n        .text(this.labelText);\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    layoutLabels: function(selection) {\r\n      // Calculate layout\r\n      var chart = this;\r\n      var labels = [];\r\n      var position = chart.position();\r\n      var values = {\r\n        offset: chart.offset(),\r\n        padding: chart.padding(),\r\n        anchor: chart.anchor(),\r\n        alignment: chart.alignment()\r\n      };\r\n\r\n      var options;\r\n      if (isString(position))\r\n        options = getOptions();\r\n\r\n      selection.each(function(d, i, j) {\r\n        if (!labels[j])\r\n          labels[j] = [];\r\n\r\n        // Store values for label and calculate layout\r\n        var label = chart._prepareLabel(chart, this, d, i, j);\r\n        labels[j].push(label);\r\n\r\n        var label_options = options || getOptions.call(chart, this, d, i, j);\r\n\r\n        chart._calculateLayout(chart, label_options, label);\r\n      });\r\n\r\n      // Collision detection\r\n      this._handleCollisions(chart, labels);\r\n\r\n      // Layout labels\r\n      labels.forEach(function(series) {\r\n        series.forEach(function(label) {\r\n          this._setLayout(chart, label);\r\n        }, this);\r\n      }, this);\r\n\r\n      function getOptions(element, d, i, j) {\r\n        var label_options = extend({}, values);\r\n        var label_position;\r\n\r\n        if (isFunction(position))\r\n          label_position = position.call(element, d, i, j);\r\n        else\r\n          label_position = position;\r\n\r\n        if (isNumber(label_options.offset)) {\r\n          var offset = {\r\n            top: {x: 0, y: -label_options.offset},\r\n            right: {x: label_options.offset, y: 0},\r\n            bottom: {x: 0, y: label_options.offset},\r\n            left: {x: -label_options.offset, y: 0}\r\n          }[label_position];\r\n\r\n          if (!offset)\r\n            offset = {x: 0, y: 0};\r\n\r\n          label_options.offset = offset;\r\n        }\r\n        if (isUndefined(label_options.anchor)) {\r\n          label_options.anchor = {\r\n            top: 'middle',\r\n            right: 'start',\r\n            bottom: 'middle',\r\n            left: 'end'\r\n          }[label_position];\r\n        }\r\n        if (isUndefined(label_options.alignment)) {\r\n          label_options.alignment = {\r\n            top: 'bottom',\r\n            right: 'middle',\r\n            bottom: 'top',\r\n            left: 'middle'\r\n          }[label_position];\r\n        }\r\n        return label_options;\r\n      }\r\n    },\r\n\r\n    // (Override for custom labels)\r\n    transitionLabels: function(selection) {\r\n      selection.attr('opacity', 1);\r\n    },\r\n\r\n    //\r\n    // Internal\r\n    //\r\n\r\n    _prepareLabel: function(chart, element, d, i) {\r\n      var selection = d3.select(element);\r\n      var text = selection.select('text');\r\n      var bg = selection.select('rect');\r\n\r\n      return {\r\n        x: chart.x.call(element, d, i),\r\n        y: chart.y.call(element, d, i),\r\n        element: element,\r\n        selection: selection,\r\n        text: {\r\n          element: text.node(),\r\n          selection: text\r\n        },\r\n        bg: {\r\n          element: bg.node(),\r\n          selection: bg\r\n        }\r\n      };\r\n    },\r\n\r\n    _calculateLayout: function(chart, options, label) {\r\n      var text_bounds = label.text.element.getBBox();\r\n\r\n      // Need to adjust text for line-height\r\n      var text_y_adjustment = alignText(label.text.element);\r\n\r\n      // Position background\r\n      var layout = label.bg.layout = {\r\n        x: options.offset.x,\r\n        y: options.offset.y,\r\n        width: text_bounds.width + (2 * options.padding),\r\n        height: text_bounds.height + (2 * options.padding)\r\n      };\r\n\r\n      // Set width / height of label\r\n      label.width = layout.width;\r\n      label.height = layout.height;\r\n\r\n      if (options.anchor == 'end')\r\n        label.x -= layout.width;\r\n      else if (options.anchor == 'middle')\r\n        label.x -= (layout.width / 2);\r\n\r\n      if (options.alignment == 'bottom')\r\n        label.y -= layout.height;\r\n      else if (options.alignment == 'middle')\r\n        label.y -= (layout.height / 2);\r\n\r\n      // Center text in background\r\n      label.text.layout = {\r\n        x: layout.x + (layout.width / 2) - (text_bounds.width / 2),\r\n        y: layout.y + (layout.height / 2) - (text_bounds.height / 2) + text_y_adjustment\r\n      };\r\n    },\r\n\r\n    _handleCollisions: function(chart, labels) {\r\n      labels.forEach(function(series, seriesIndex) {\r\n        // Check through remaining series for collisions\r\n        labels.slice(seriesIndex + 1).forEach(function(compareSeries) {\r\n          compareSeries.forEach(function(compareLabel) {\r\n            series.forEach(function(label) {\r\n              if (checkForOverlap(label, compareLabel))\r\n                groupLabels(label, compareLabel);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      function checkForOverlap(labelA, labelB) {\r\n        var a = getEdges(labelA);\r\n        var b = getEdges(labelB);\r\n\r\n        var contained_LR = (b.left < a.left && b.right > a.right);\r\n        var contained_TB = (b.bottom < a.bottom && b.top > a.top);\r\n        var overlap_LR = (b.left >= a.left && b.left < a.right) || (b.right > a.left && b.right <= a.right) || contained_LR;\r\n        var overlap_TB = (b.top >= a.top && b.top < a.bottom) || (b.bottom > a.top && b.bottom <= a.bottom) || contained_TB;\r\n\r\n        return overlap_LR && overlap_TB;\r\n\r\n        function getEdges(label) {\r\n          return {\r\n            left: label.x,\r\n            right: label.x + label.width,\r\n            top: label.y,\r\n            bottom: label.y + label.height\r\n          };\r\n        }\r\n      }\r\n\r\n      function groupLabels(labelA, labelB) {\r\n        if (labelA.group && labelB.group) {\r\n          // Move labelB group labels into labelA group\r\n          objectEach(labelB.group.labels, function(label) {\r\n            labelA.group.labels.push(label);\r\n            label.group = labelA.group;\r\n          });\r\n\r\n          updateGroupPositions(labelA.group);\r\n        }\r\n        else if (labelA.group) {\r\n          addLabelToGroup(labelB, labelA.group);\r\n        }\r\n        else if (labelB.group) {\r\n          addLabelToGroup(labelA, labelB.group);\r\n        }\r\n        else {\r\n          var group = {labels: []};\r\n          addLabelToGroup(labelA, group);\r\n          addLabelToGroup(labelB, group);\r\n        }\r\n      }\r\n\r\n      function addLabelToGroup(label, group) {\r\n        group.labels.push(label);\r\n        label.group = group;\r\n        label.originalY = label.y;\r\n\r\n        updateGroupPositions(group);\r\n      }\r\n\r\n      function updateGroupPositions(group) {\r\n        function reset(label) {\r\n          // Reset to original y\r\n          label.y = label.originalY;\r\n          return label;\r\n        }\r\n        function sortY(a, b) {\r\n          if (a.y < b.y)\r\n            return -1;\r\n          else if (a.y > b.y)\r\n            return 1;\r\n          else\r\n            return 0;\r\n        }\r\n\r\n        var byY = group.labels.map(reset).sort(sortY).reverse();\r\n\r\n        byY.forEach(function(label, index) {\r\n          var prev = first(byY, index);\r\n          var overlap;\r\n\r\n          for (var i = prev.length - 1; i >= 0; i--) {\r\n            if (checkForOverlap(label, prev[i])) {\r\n              overlap = prev[i];\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (overlap)\r\n            label.y = overlap.y - label.height;\r\n        });\r\n      }\r\n    },\r\n\r\n    _setLayout: function(chart, label) {\r\n      label.bg.selection\r\n        .attr('transform', translate(label.bg.layout.x, label.bg.layout.y))\r\n        .attr('width', label.bg.layout.width)\r\n        .attr('height', label.bg.layout.height);\r\n\r\n      label.text.selection\r\n        .attr('transform', translate(label.text.layout.x, label.text.layout.y));\r\n\r\n      // Position label and set opacity to fade-in\r\n      label.selection\r\n        .attr('transform', translate(label.x, label.y))\r\n        .attr('opacity', 0);\r\n    }\r\n  }, {\r\n    z_index: 150\r\n  });\r\n\r\n  var labels = createHelper('Labels');\n\n  /**\r\n    (in-progress)\r\n\r\n    @class HoverLabels\r\n  */\r\n  var Mixed$3 = mixin(Labels, Hover);\r\n  var HoverLabels = Mixed$3.extend({\r\n    initialize: function(options) {\r\n      Mixed$3.prototype.initialize.call(this, options);\r\n      this.on('attach', function() {\r\n        this.container.on('mouseenter:point', this.onMouseEnterPoint.bind(this));\r\n        this.container.on('mouseleave:point', this.onMouseLeavePoint.bind(this));\r\n      }.bind(this));\r\n    },\r\n\r\n    /**\r\n      Maximum distance to find active points\r\n\r\n      @property hoverTolerance\r\n      @type Number\r\n      @default Infinity\r\n    */\r\n    hoverTolerance: property({\r\n      set: function(value) {\r\n        // Pass through hover tolerance to parent (if present)\r\n        if (this.parent && this.parent.hoverTolerance)\r\n          this.parent.hoverTolerance(value);\r\n      },\r\n      default_value: Infinity\r\n    }),\r\n\r\n    // Don't fade in labels, hidden until hover\r\n    transitionLabels: function() {},\r\n\r\n    onMouseEnterPoint: function(point) {\r\n      var label = this.findLabelForPoint(point);\r\n      if (label)\r\n        d3.select(label).attr('opacity', 1);\r\n    },\r\n    onMouseLeavePoint: function(point) {\r\n      var label = this.findLabelForPoint(point);\r\n      if (label)\r\n        d3.select(label).attr('opacity', 0);\r\n    },\r\n\r\n    findLabelForPoint: function(point) {\r\n      var labels = this.base.selectAll('g.chart-series').selectAll('g');\r\n      var chart = this;\r\n      var label;\r\n\r\n      labels.each(function(d, i, j) {\r\n        var series = chart.seriesData.call(this, d, i, j);\r\n        if (d === point.d && series === point.series)\r\n          label = this;\r\n      });\r\n\r\n      return label;\r\n    }\r\n  });\r\n\r\n  var hoverLabels = createHelper('HoverLabels');\n\n  /**\r\n    Bars chart with centered or adjacent display for single or series data.\r\n\r\n    To display bars for different series next to each other (adjacent),\r\n    use the `adjacent` option when creating the `xScale` (see example below).\r\n\r\n    ### Extending\r\n\r\n    To extend the `Bars` chart, the following methods are available:\r\n\r\n    - `barHeight`\r\n    - `barWidth`\r\n    - `barX`\r\n    - `barY`\r\n    - `barClass`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'Bars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class Bars\r\n    @extends Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer\r\n  */\r\n\r\n  var Mixed$1 = mixin(Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer);\r\n  var Bars = Mixed$1.extend({\r\n    initialize: function(options) {\r\n      Mixed$1.prototype.initialize.call(this, options);\r\n\r\n      this.on('before:draw', function() {\r\n        this.offset_axis = this.getOffsetAxis();\r\n      }.bind(this));\r\n\r\n      // Use standard series layer for extensibility\r\n      // (dataBind, insert, and events defined in prototype)\r\n      this.standardSeriesLayer('Bars', this.base.append('g').classed('chart-bars', true));\r\n      this.attachLabels();\r\n    },\r\n\r\n    barHeight: di(function(chart, d, i) {\r\n      var height = Math.abs(chart.y0() - chart.y.call(this, d, i)) - chart.barOffset();\r\n      return height > 0 ? height : 0;\r\n    }),\r\n    barWidth: di(function(chart) {\r\n      return chart.itemWidth();\r\n    }),\r\n    barX: di(function(chart, d, i) {\r\n      return chart.x.call(this, d, i) - chart.itemWidth() / 2;\r\n    }),\r\n    barY: di(function(chart, d, i) {\r\n      var y = chart.y.call(this, d, i);\r\n      var y0 = chart.y0();\r\n\r\n      return y < y0 ? y : y0 + chart.barOffset();\r\n    }),\r\n    bar0: di(function(chart, d, i) {\r\n      var y0 = chart.y0();\r\n      var offset = chart.barOffset();\r\n      return chart.y.call(this, d, i) <= y0 ? y0 - offset : y0 + offset;\r\n    }),\r\n    barClass: di(function(chart, d) {\r\n      return 'chart-bar' + (d['class'] ? ' ' + d['class'] : '');\r\n    }),\r\n\r\n    // Shift bars slightly to account for axis thickness\r\n    barOffset: function barOffset() {\r\n      if (this.offset_axis) {\r\n        var axis_thickness = parseInt(this.offset_axis.base.select('.domain').style('stroke-width')) || 0;\r\n        return axis_thickness / 2;\r\n      }\r\n      else {\r\n        return 0;\r\n      }\r\n    },\r\n\r\n    getOffsetAxis: function getOffsetAxis() {\r\n      var components = this.container && this.container.components();\r\n      return objectFind(components, function(component) {\r\n        if (component.type == 'Axis' && component.position() == 'bottom')\r\n          return component;\r\n      });\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('rect')\r\n        .data(data, this.key);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('rect')\r\n        .on('mouseenter', this.mouseEnterPoint)\r\n        .on('mouseleave', this.mouseLeavePoint);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onEnter: function onEnter(selection) {\r\n      selection\r\n        .attr('y', this.bar0)\r\n        .attr('height', 0);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('class', this.barClass)\r\n        .attr('style', this.itemStyle)\r\n        .attr('x', this.barX)\r\n        .attr('width', this.barWidth);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('y', this.barY)\r\n        .attr('height', this.barHeight);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onExitTransition: function onExitTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('y', this.bar0)\r\n        .attr('height', 0)\r\n        .remove();\r\n    }\r\n  });\r\n\r\n  var bars = createHelper('Bars');\n\n  /**\r\n    Bars chart with bars that group from left-to-right\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'HorizontalBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class HorizontalBars\r\n    @extends Bars, XYInverted\r\n  */\r\n  var HorizontalBars = mixin(Bars, XYInverted).extend({\r\n    barX: di(function(chart, d, i) {\r\n      var x = chart.x.call(this, d, i);\r\n      var x0 = chart.x0();\r\n\r\n      return x < x0 ? x : x0 + chart.barOffset();\r\n    }),\r\n    barY: di(function(chart, d, i) {\r\n      return chart.y.call(this, d, i) - chart.itemWidth() / 2;\r\n    }),\r\n    barWidth: di(function(chart, d, i) {\r\n      var width = Math.abs(chart.x0() - chart.x.call(this, d, i)) - chart.barOffset();\r\n      return width > 0 ? width : 0;\r\n    }),\r\n    barHeight: di(function(chart) {\r\n      return chart.itemWidth();\r\n    }),\r\n    bar0: di(function(chart, d, i) {\r\n      var x0 = chart.x0();\r\n      var offset = chart.barOffset();\r\n      return chart.x.call(this, d, i) >= x0 ? x0 + offset : x0 - offset;\r\n    }),\r\n\r\n    getOffsetAxis: function getOffsetAxis() {\r\n      var components = this.container && this.container.components();\r\n      return objectFind(components, function(component) {\r\n        if (component.type == 'Axis' && component.position() == 'left')\r\n          return component;\r\n      });\r\n    },\r\n\r\n    onEnter: function onEnter(selection) {\r\n      selection\r\n        .attr('x', this.bar0)\r\n        .attr('width', 0);\r\n    },\r\n\r\n    onMerge: function onMerge(selection) {\r\n      selection\r\n        .attr('class', this.barClass)\r\n        .attr('style', this.itemStyle)\r\n        .attr('y', this.barY)\r\n        .attr('height', this.barHeight);\r\n    },\r\n\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('x', this.barX)\r\n        .attr('width', this.barWidth);\r\n    },\r\n\r\n    onExitTransition: function onExitTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('x', this.bar0)\r\n        .attr('width', 0)\r\n        .remove();\r\n    }\r\n  });\r\n\r\n  var horizontalBars = createHelper('HorizontalBars');\n\n  /**\r\n    Bars chart with values stacked on top of each other\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          stacked_output: {\r\n            type: 'StackedBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class StackedBars\r\n    @extends Bars\r\n  */\r\n  var StackedBars = Bars.extend({\r\n    transform: function(data) {\r\n      data = Bars.prototype.transform.call(this, data);\r\n\r\n      var grouped = {};\r\n      var x_key = this.xKey();\r\n      var y_key = this.yKey();\r\n      data = data.map(function(series) {\r\n        series = extend({}, series);\r\n        series.values = series.values.map(function(value) {\r\n          value = extend({}, value);\r\n          var x = value[x_key];\r\n          var y = value.__original_y = value[y_key];\r\n\r\n          if (!grouped[x])\r\n            grouped[x] = {pos: 0, neg: 0};\r\n\r\n          if (y >= 0) {\r\n            value.__previous = grouped[x].pos;\r\n            grouped[x].pos = value[y_key] = grouped[x].pos + y;\r\n          }\r\n          else {\r\n            value.__previous = grouped[x].neg;\r\n            grouped[x].neg = value[y_key] = grouped[x].neg + y;\r\n          }\r\n\r\n          return value;\r\n        }, this);\r\n\r\n        return series;\r\n      }, this);\r\n\r\n      return data;\r\n    },\r\n\r\n    barHeight: di(function(chart, d, i) {\r\n      var height = Math.abs(chart.yScale()(d.__previous) - chart.y.call(this, d, i));\r\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n      return height > 0 ? height - offset : 0;\r\n    })\r\n  });\r\n\r\n  var stackedBars = createHelper('StackedBars');\n\n  /**\r\n    Horizontal Stacked Bars\r\n\r\n    (See `Bars` for extensibility details)\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Display bars for different series next to each other (adjacent: true)\r\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\r\n\r\n      return {\r\n        charts: {\r\n          output: {\r\n            type: 'HorizontalStackedBars',\r\n            data: data.output,\r\n            xScale: xScale,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([10, 20, 30]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\r\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\r\n    ]);\r\n    ```\r\n    @class HorizontalStackedBars\r\n    @extends HorizontalBars\r\n  */\r\n  var HorizontalStackedBars = HorizontalBars.extend({\r\n    transform: function(data) {\r\n      data = StackedBars.prototype.transform.call(this, data);\r\n      data = HorizontalBars.prototype.transform.call(this, data);\r\n      return data;\r\n    },\r\n\r\n    barWidth: di(function(chart, d, i) {\r\n      var width = Math.abs(chart.yScale()(d.__previous) - chart.x.call(this, d, i));\r\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\r\n      return width > 0 ? width - offset : 0;\r\n    }),\r\n    barX: di(function(chart, d, i) {\r\n      var x = chart.x.call(this, d, i);\r\n      var x0 = chart.yScale()(d.__previous);\r\n\r\n      return x < x0 ? x : x0 + chart.barOffset();\r\n    })\r\n  });\r\n\r\n  var horizontalStackedBars = createHelper('HorizontalStackedBars');\n\n  /**\r\n    Create an XY Lines chart with single or series data.\r\n\r\n    ### Extending\r\n\r\n    Great care has been taken in making the standard charts in d3.compose extensible.\r\n    To extend the `Lines` chart, the following methods are available:\r\n\r\n    - `createLine`\r\n    - `lineKey`\r\n    - `lineData`\r\n    - `onDataBind`\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    View the `Lines.js` source for the default implementation and more information on these methods.\r\n\r\n    @example\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      return {\r\n        charts: {\r\n          input: {\r\n            type: 'Lines'\r\n            data: data.input,\r\n            // xScale: ...,\r\n            // yScale: ...,\r\n            // other properties...\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Single y-values\r\n    chart.draw([1, 2, 3]);\r\n\r\n    // Series (x,y) values\r\n    chart.draw([\r\n      {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\r\n      {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\r\n    ]);\r\n    ```\r\n    @class Lines\r\n    @extends Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer\r\n  */\r\n  var Mixed = mixin(Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer);\r\n  var Lines = Mixed.extend({\r\n    initialize: function(options) {\r\n      Mixed.prototype.initialize.call(this, options);\r\n\r\n      this.lines = {};\r\n\r\n      // Use standard series layer for extensibility\r\n      // (dataBind, insert, and events defined in prototype)\r\n      this.standardSeriesLayer('Lines', this.base.append('g').classed('chart-lines', true));\r\n\r\n      this.attachLabels();\r\n    },\r\n\r\n    /**\r\n      Set interpolation mode for line\r\n\r\n      - See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\r\n      - Set to `null` or `'linear'` for no interpolation\r\n\r\n      @property interpolate\r\n      @type String\r\n      @default monotone\r\n    */\r\n    interpolate: property({\r\n      default_value: 'monotone'\r\n    }),\r\n\r\n    // Create line on insert (keyed by series/index)\r\n    createLine: di(function(chart, d, i, j) {\r\n      var key = chart.lineKey.call(this, d, i, j);\r\n      var line = chart.lines[key] = d3.svg.line()\r\n        .x(chart.x)\r\n        .y(chart.y);\r\n\r\n      var interpolate = d.interpolate || chart.interpolate();\r\n      if (interpolate)\r\n        line.interpolate(interpolate);\r\n    }),\r\n\r\n    // Get key for line (from series key or index)\r\n    lineKey: di(function(chart, d, i, j) {\r\n      var key = chart.seriesKey(chart.seriesData.call(this, d, i, j));\r\n      return key != null ? key : chart.seriesIndex.call(this, d, i, j);\r\n    }),\r\n\r\n    // Get data for line\r\n    lineData: di(function(chart, d, i, j) {\r\n      var key = chart.lineKey.call(this, d, i, j);\r\n      if (chart.lines[key])\r\n        return chart.lines[key](d);\r\n    }),\r\n\r\n    // Override StandardLayer\r\n    onDataBind: function onDataBind(selection, data) {\r\n      return selection.selectAll('path')\r\n        .data(function(d, i, j) {\r\n          return [data.call(selection, d, i, j)];\r\n        });\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('path')\r\n        .classed('chart-line', true)\r\n        .each(this.createLine);\r\n    },\r\n\r\n    // Override StandardLayer\r\n    onMergeTransition: function onMergeTransition(selection) {\r\n      this.setupTransition(selection);\r\n\r\n      selection\r\n        .attr('d', this.lineData)\r\n        .attr('style', this.itemStyle);\r\n    }\r\n  });\r\n\r\n  var lines = createHelper('Lines');\n\n  /*\n    Extract layout from the given options\n\n    @param {Array} options\n    @return {Object} {data, items, layout}\n  */\n  function extractLayout(options) {\n    if (!options)\n      return;\n\n    var data = {\n      _charts: {},\n      _components: {}\n    };\n    var items = {};\n    var layout = [];\n    var charts = [];\n    var components = [];\n\n    // TEMP Idenfify charts from layered,\n    // eventually no distinction between charts and components\n    var found = {\n      row: false,\n      charts: false\n    };\n\n    // Components are added from inside-out\n    // so for position: top, position: left, use unshift\n    options.forEach(function(row, row_index) {\n      var row_components = [];\n\n      if (!Array.isArray(row))\n        row = [row];\n      if (row.length > 1)\n        found.row = true;\n\n      var row_layout = row.map(function(item, col_index) {\n        if (!item)\n          return;\n\n        if (item._layered) {\n          // Charts\n          found.charts = found.row = true;\n          var chart_ids = [];\n\n          item.items.forEach(function(chart, chart_index) {\n            if (!chart)\n              return;\n\n            chart = defaults({}, chart, {id: getId(row_index, col_index, chart_index)});\n\n            chart_ids.push(chart.id);\n            charts.push(chart);\n            items[chart.id] = chart;\n          });\n\n          return chart_ids;\n        }\n\n        var component = prepareComponent(item, row_index, col_index);\n        items[component.id] = component;\n\n        if (row.length > 1) {\n          if (!found.charts) {\n            // Left\n            setPosition(component, 'left');\n            row_components.unshift(component);\n          }\n          else {\n            // Right\n            setPosition(component, 'right');\n            row_components.push(component);\n          }\n        }\n        else {\n          if (!found.row) {\n            // Top\n            setPosition(component, 'top');\n            components.unshift(component);\n          }\n          else {\n            // Bottom\n            setPosition(component, 'bottom');\n            components.push(component);\n          }\n        }\n\n        return component.id;\n      });\n\n      if (row_components.length)\n        components = components.concat(row_components);\n\n      layout.push(row_layout);\n    });\n\n    charts.forEach(extractData('_charts'));\n    components.forEach(extractData('_components'));\n\n    return {\n      data: data,\n      items: items,\n      layout: layout,\n\n      charts: charts,\n      components: components\n    };\n\n    function prepareComponent(component, row_index, col_index) {\n      return defaults({}, component, {id: getId(row_index, col_index)});\n    }\n    function setPosition(component, position) {\n      if (component && isFunction(component.position))\n        component.position(position);\n      else\n        component.position = position;\n    }\n    function getId(row_index, col_index, layered_index) {\n      var id = 'item-' + (row_index + 1) + '-' + (col_index + 1);\n      if (layered_index != null)\n        id += '-' + (layered_index + 1);\n\n      return id;\n    }\n\n    function extractData(type) {\n      return function(item) {\n        if (item.data && !isFunction(item.data)) {\n          data[type][item.id] = item.data;\n          data[item.id] = item.data;\n          delete item.data;\n        }\n      };\n    }\n  }\n\n  /*\n    Calculate component and chart coordinates for given layout\n  */\n  function calculateLayout(components, data, demux) {\n    var overall_layout = {top: [], right: [], bottom: [], left: []};\n    components.forEach(function(component) {\n      if (component.skip_layout || !component.getLayout)\n        return;\n\n      var layout = component.getLayout(demux(component.id, data));\n      var position = layout && layout.position;\n\n      if (!contains(['top', 'right', 'bottom', 'left'], position))\n        return;\n\n      overall_layout[position].push({\n        offset: position == 'top' || position == 'bottom' ? layout.height : layout.width,\n        component: component\n      });\n    });\n\n    return overall_layout;\n  }\n\n  /*\n    Apply calculated layout to charts and components\n  */\n  function applyLayout(layout, chart_position, width, height) {\n    layout.top.reduce(function(previous, part) {\n      var y = previous - part.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, chart_position.top);\n\n    layout.right.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var x = previous + previousPart.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, width - chart_position.right);\n\n    layout.bottom.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var y = previous + previousPart.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, height - chart_position.bottom);\n\n    layout.left.reduce(function(previous, part) {\n      var x = previous - part.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, chart_position.left);\n\n    function setLayout(component, x, y, options) {\n      if (component && isFunction(component.setLayout))\n        component.setLayout(x, y, options);\n    }\n  }\n\n  /**\r\n    Common base for creating overlays that includes helpers for positioning and show/hide.\r\n\r\n    ### Extending\r\n\r\n    Create an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust positioning, override `position`\r\n    - To adjust show/hide behavior, override `show`/`hide`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Overlay').extend('ClosestPoints', {\r\n      // TODO\r\n    });\r\n    ```\r\n    @class Overlay\r\n    @extends Component\r\n  */\r\n  var Overlay = Component.extend({\r\n    initialize: function(options) {\r\n      Component.prototype.initialize.call(this, options);\r\n      this.base.attr('style', this.style());\r\n    },\r\n    skip_layout: true,\r\n\r\n    /**\r\n      Overlay's top-left x-position in px from left\r\n\r\n      @property x\r\n      @type Number\r\n      @default 0\r\n    */\r\n    x: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Overlay's top-left y-position in px from top\r\n\r\n      @property y\r\n      @type Number\r\n      @default 0\r\n    */\r\n    y: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Whether overlay is currently hidden\r\n\r\n      @property hidden\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    hidden: property({\r\n      default_value: true\r\n    }),\r\n\r\n    /**\r\n      Overlays base styling\r\n      (default includes position and hidden)\r\n\r\n      @property style\r\n      @type String\r\n      @default set from x, y, and hidden\r\n    */\r\n    style: property({\r\n      default_value: function() {\r\n        var transform = translate(this.x() + 'px', this.y() + 'px');\r\n        var styles = {\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          '-webkit-transform': transform,\r\n          '-ms-transform': transform,\r\n          transform: transform\r\n        };\r\n\r\n        if (this.hidden())\r\n          styles.display = 'none';\r\n\r\n        return style(styles);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Position overlay layer at given x,y coordinates\r\n\r\n      @example\r\n      ```js\r\n      // Absolute, x: 100, y: 50\r\n      overlay.position(100, 50);\r\n      overlay.position({x: 100, y: 50});\r\n\r\n      // Relative-to-chart, x: 50, y: 40\r\n      overlay.position({chart: {x: 50, y: 40}});\r\n\r\n      // Relative-to-container, x: 75, y: 50\r\n      overlay.position({container: {x: 75, y: 50}});\r\n      ```\r\n      @method position\r\n      @param {Object|Number} position {x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left\r\n      @param {Number} [y] in px from top\r\n    */\r\n    // TODO This conflicts with component.position(), might need a rename\r\n    position: function(position, y) {\r\n      if (arguments.length > 1) {\r\n        position = {\r\n          x: position,\r\n          y: y\r\n        };\r\n      }\r\n      else {\r\n        if ('container' in position) {\r\n          position = this.getAbsolutePosition(position.container);\r\n        }\r\n        else if ('chart' in position) {\r\n          if (this.container) {\r\n            var chart = this.container.chartPosition();\r\n            position = this.getAbsolutePosition({\r\n              x: position.chart.x + chart.left,\r\n              y: position.chart.y + chart.top\r\n            });\r\n          }\r\n          else {\r\n            position = this.getAbsolutePosition(position.chart);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.x(position.x).y(position.y);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Show overlay (with `display: block`)\r\n\r\n      @method show\r\n    */\r\n    show: function() {\r\n      this.hidden(false);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Hide overlay (with `display: none`)\r\n\r\n      @method hide\r\n    */\r\n    hide: function() {\r\n      this.hidden(true);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Get absolute position from container position\r\n      (needed since container position uses viewBox and needs to be scaled to absolute position)\r\n\r\n      @method getAbsolutePosition\r\n      @param {Object} container_position ({x, y})\r\n      @return {Object} absolute {x, y} relative to container div\r\n    */\r\n    getAbsolutePosition: function(container_position) {\r\n      var container = this.container && this.container.container;\r\n\r\n      if (container && this.container.responsive()) {\r\n        var container_dimensions = dimensions(container);\r\n        var chart_width = this.container.width();\r\n        var chart_height = this.container.height();\r\n        var width_ratio = container_dimensions.width / chart_width;\r\n        var height_ratio = container_dimensions.height / chart_height;\r\n\r\n        return {\r\n          x: width_ratio * container_position.x,\r\n          y: height_ratio * container_position.y\r\n        };\r\n      }\r\n      else {\r\n        // Not attached so can't get actual dimensions\r\n        // fallback to container position\r\n        return container_position;\r\n      }\r\n    }\r\n  }, {\r\n    layer_type: 'overlay'\r\n  });\n\n  var default_compose_margins = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n  /**\r\n    Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\r\n    Using the `options` property, charts and components can be bound to data and customized to create dynamic charts.\r\n\r\n    @example\r\n    ```html\r\n    <div id=\"#chart\"></div>\r\n    ```\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Process data...\r\n\r\n      // Create shared scales\r\n      var scales = {\r\n        x: {data: data.input, key: 'x', adjacent: true},\r\n        y: {data: data.input, key: 'y'},\r\n        y2: {data: data.output, key: 'y'}\r\n      };\r\n\r\n      // Setup charts and components\r\n      var charts = [\r\n        d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\r\n        d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\r\n      ];\r\n\r\n      var title = d3c.title('d3.compose');\r\n      var xAxis = d3c.axis('xAxis', {scale: scales.x});\r\n      var yAxis = d3c.axis('yAxis', {scale: scales.y});\r\n      var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\r\n\r\n      // Layout charts and components\r\n      return [\r\n        title,\r\n        [yAxis, d3c.layered(charts), y2Axis],\r\n        xAxis\r\n      ];;\r\n    });\r\n\r\n    chart.draw({input: [...], output: [...]});\r\n    ```\r\n    @class Compose\r\n    @extends Base\r\n  */\r\n  var Compose = Base.extend({\r\n    initialize: function(options) {\r\n      Base.prototype.initialize.call(this, options);\r\n\r\n      // Responsive svg based on the following approach (embedded + padding hack)\r\n      // http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/\r\n      // (not enabled if selection is svg)\r\n      if (this.base.node().tagName != 'svg') {\r\n        this.container = this.base.append('div')\r\n          .attr('class', 'chart-compose-container');\r\n\r\n        this.base = this.container.append('svg')\r\n          .attr('xlmns', 'http://www.w3.org/2000/svg')\r\n          .attr('version', '1.1')\r\n          .attr('class', 'chart-compose');\r\n      }\r\n      else {\r\n        this.base.classed('chart-compose', true);\r\n      }\r\n\r\n      this.attachHoverListeners();\r\n    },\r\n\r\n    transform: function(data) {\r\n      // Save raw data for redraw\r\n      this.rawData(data);\r\n      return Base.prototype.transform.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Get/set the options `object/function` for the chart that takes `data` and\r\n      returns `[...layout]` for composing child charts and components.\r\n\r\n      @example\r\n      ```js\r\n      // get\r\n      chart.options();\r\n\r\n      // set (static)\r\n      chart.options([\r\n        // ...\r\n      ]);\r\n\r\n      // set (dynamic, takes data and returns options)\r\n      chart.options(function(data) {\r\n        // process data...\r\n\r\n        return [\r\n          // ...\r\n        ];\r\n      });\r\n\r\n      // Set directly from d3.chart creation\r\n      d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n      ```\r\n      @property options\r\n      @type Function|Object\r\n    */\r\n    options: property({\r\n      default_value: function() { return function() {}; },\r\n      set: function(options) {\r\n        // If options is plain object,\r\n        // return from generic options function\r\n        if (!isFunction(options)) {\r\n          return {\r\n            override: function() {\r\n              return options;\r\n            }\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Store raw data for container before it has been transformed\r\n    rawData: property(),\r\n\r\n    /**\r\n      Margins between edge of container and components/chart\r\n\r\n      @example\r\n      ```js\r\n      chart.margins({top: 10, right: 20, bottom: 10, left: 20});\r\n      ```\r\n      @property margins\r\n      @type Object {top, right, bottom, left}\r\n      @default {top: 10, right: 10, bottom: 10, left: 10}\r\n    */\r\n    margins: property({\r\n      default_value: default_compose_margins,\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values, default_compose_margins)\r\n        };\r\n      }\r\n    }),\r\n\r\n    // Chart position\r\n    chartPosition: property({\r\n      default_value: {top: 0, right: 0, bottom: 0, left: 0},\r\n      set: function(values) {\r\n        return {\r\n          override: defaults({}, values, {top: 0, right: 0, bottom: 0, left: 0})\r\n        };\r\n      },\r\n      get: function(values) {\r\n        values.width = this._width() - values.right - values.left;\r\n        values.height = this._height() - values.bottom - values.top;\r\n\r\n        return values;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set overall width of chart\r\n\r\n      @property width\r\n      @type Number\r\n    */\r\n    width: property({\r\n      default_value: null\r\n    }),\r\n\r\n    /**\r\n      Get/set overall height of chart\r\n\r\n      @property height\r\n      @type Number\r\n    */\r\n    height: property({\r\n      default_value: null\r\n    }),\r\n\r\n    _width: function() {\r\n      var width = this.width();\r\n      return width != null ? width : Base.prototype.width.call(this);\r\n    },\r\n    _height: function() {\r\n      var height = this.height();\r\n      return height != null ? height : Base.prototype.height.call(this);\r\n    },\r\n\r\n    /**\r\n      Enable responsive container + viewBox so that chart scales to fill width\r\n      (only works if selection is not an svg)\r\n\r\n      @property responsive\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    responsive: property({\r\n      default_value: true\r\n    }),\r\n\r\n    // Set svg viewBox attribute\r\n    viewBox: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.width() && this.height())\r\n          return '0 0 ' + this.width() + ' ' + this.height();\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set svg preserveAspectRatio attribute\r\n    preserveAspectRatio: property({\r\n      default_value: function() {\r\n        if (this.responsive())\r\n          return 'xMidYMid meet';\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set container style\r\n    containerStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive()) {\r\n          var aspect_ratio = 1;\r\n          if (this.width() && this.height())\r\n            aspect_ratio = this.height() / this.width();\r\n\r\n          return style({\r\n            width: '100%',\r\n            height: 0,\r\n            'padding-top': (aspect_ratio * 100) + '%',\r\n            position: 'relative'\r\n          });\r\n        }\r\n        else {\r\n          return style({position: 'relative'});\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Set base style\r\n    baseStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.container) {\r\n          return style({\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0\r\n          });\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Set charts from options or get chart instances.\r\n      Each chart should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the chart.\r\n\r\n      @example\r\n      ```js\r\n      chart.charts([\r\n        {id: 'input', type: 'Bars'}, // options to pass to Bars chart\r\n        {id: 'output', type: 'Lines'} // options to pass to Lines chart\r\n      ]);\r\n      ```\r\n      @property charts\r\n      @type Array\r\n    */\r\n    charts: property({\r\n      set: function(chart_options, charts) {\r\n        // Store actual charts rather than options\r\n        return {\r\n          override: this._attachItems(chart_options, charts, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Set components from options or get components instances.\r\n      Each component should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the component.\r\n\r\n      @example\r\n      ```js\r\n      chart.components([\r\n        {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\r\n        {id: 'title', type: 'Title'} // options to pass to Title component\r\n      ])\r\n      ```\r\n      @property components\r\n      @type Array\r\n    */\r\n    components: property({\r\n      set: function(component_options, components) {\r\n        // Store actual components rather than options\r\n        return {\r\n          override: this._attachItems(component_options, components, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Delay start of transition by specified milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property delay\r\n      @type Number|Function\r\n      @default d3 default: 0\r\n    */\r\n    delay: property(),\r\n\r\n    /**\r\n      Transition duration in milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property duration\r\n      @type Number|Function\r\n      @default d3 default: 250ms\r\n    */\r\n    duration: property(),\r\n\r\n    /**\r\n      Transition ease function.\r\n      (applied to all charts and components as default)\r\n\r\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\r\n      - Note: arguments to pass to `d3.ease` are not supported\r\n\r\n      @property ease\r\n      @type String|Function\r\n      @default d3 default: 'cubic-in-out'\r\n    */\r\n    ease: property(),\r\n\r\n    /**\r\n      Draw chart with given data\r\n\r\n      @example\r\n      ```js\r\n      var chart = d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n\r\n      chart.draw([1, 2, 3]);\r\n\r\n      chart.draw({values: [1, 2, 3]});\r\n\r\n      chart.draw([\r\n        {values: [1, 2, 3]},\r\n        {values: [4, 5, 6]}\r\n      ]);\r\n      ```\r\n      @method draw\r\n      @param {Any} data\r\n    */\r\n    draw: function(data) {\r\n      var config = this._prepareConfig(this.options(), data);\r\n      if (!config)\r\n        config = {data: {_charts: {}, _components: {}}, layout: [], charts: [], components: []};\r\n\r\n      // Set charts and components from config\r\n      this.charts(config.charts);\r\n      this.components(config.components);\r\n\r\n      // Add config data\r\n      data = {\r\n        original: data,\r\n        config: config.data\r\n      };\r\n      this.data(data);\r\n\r\n      this._setDimensions();\r\n\r\n      // Layout components\r\n      this.layout(config.layout, data);\r\n\r\n      // Full draw now that everything has been laid out\r\n      d3.chart().prototype.draw.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Redraw chart with current data\r\n\r\n      @method redraw\r\n    */\r\n    redraw: function() {\r\n      if (this.rawData())\r\n        this.draw(this.rawData().original);\r\n    },\r\n\r\n    demux: function(name, data) {\r\n      if (!data || !data.config || !data.original)\r\n        return data;\r\n\r\n      if (findById(this.charts(), name) && data.config._charts[name])\r\n        return data.config._charts[name];\r\n      else if (findById(this.components(), name) && data.config._components[name])\r\n        return data.config._components[name];\r\n      else\r\n        return data.original;\r\n    },\r\n\r\n    // Create chart layer (for laying out charts)\r\n    createChartLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create component layer\r\n    createComponentLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-component-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create overlay layer\r\n    createOverlayLayer: function() {\r\n      if (!this.container)\r\n        throw new Error('Cannot create overlay layer if original selection \"d3.select(...).chart(\\'Compose\\')\" is an svg. Use a div instead for responsive and overlay support.');\r\n\r\n      return this.container.append('div')\r\n        .attr('class', 'chart-overlay-layer');\r\n    },\r\n\r\n    // Layout components and charts for given data\r\n    layout: function(layout, data) {\r\n      // 1. Place chart layers\r\n      this._positionChartLayers();\r\n\r\n      // 2. Extract layout from components\r\n      layout = this._extractLayout(data);\r\n\r\n      // 3. Set chart position from layout\r\n      var chart_position = extend({}, this.margins());\r\n      objectEach(layout, function(parts, key) {\r\n        parts.forEach(function(part) {\r\n          chart_position[key] += part.offset || 0;\r\n        });\r\n      });\r\n      this.chartPosition(chart_position);\r\n\r\n      // 4. Position layers with layout\r\n      this.positionLayers(layout);\r\n    },\r\n\r\n    attachHoverListeners: function() {\r\n      // For responsive, listen on container div and calculate enter/exit for base from bounding rectangle\r\n      // For non-responsive, bounding rectangle is container so calculations still apply\r\n\r\n      var trigger = this.trigger.bind(this);\r\n      var chartPosition = this.chartPosition.bind(this);\r\n      var container = this.container || this.base;\r\n      var base = this.base.node();\r\n      var chart_position, bounds, was_inside;\r\n\r\n      container.on('mouseenter', function() {\r\n        // Calculate chart position and bounds on enter and cache during move\r\n        chart_position = chartPosition();\r\n        bounds = getBounds();\r\n\r\n        was_inside = inside(bounds);\r\n        if (was_inside)\r\n          enter();\r\n      });\r\n      container.on('mousemove', function() {\r\n        // Mousemove may fire before mouseenter in IE\r\n        if (!chart_position || !bounds) {\r\n          chart_position = chartPosition();\r\n          bounds = getBounds();\r\n        }\r\n\r\n        var is_inside = inside(bounds);\r\n        if (was_inside && is_inside)\r\n          move();\r\n        else if (was_inside)\r\n          leave();\r\n        else if (is_inside)\r\n          enter();\r\n\r\n        was_inside = is_inside;\r\n      });\r\n      container.on('mouseleave', function() {\r\n        if (was_inside) {\r\n          was_inside = false;\r\n          leave();\r\n        }\r\n      });\r\n\r\n      function inside() {\r\n        var mouse = d3.mouse(document.documentElement);\r\n        return mouse[0] >= bounds.left && mouse[0] <= bounds.right && mouse[1] >= bounds.top && mouse[1] <= bounds.bottom;\r\n      }\r\n      function enter() {\r\n        trigger('mouseenter', translateToXY(d3.mouse(base)));\r\n      }\r\n      function move() {\r\n        trigger('mousemove', translateToXY(d3.mouse(base)));\r\n      }\r\n      function leave() {\r\n        trigger('mouseleave');\r\n      }\r\n\r\n      function translateToXY(coordinates) {\r\n        var x = coordinates[0];\r\n        var y = coordinates[1];\r\n        var chart_x = x - chart_position.left;\r\n        var chart_y = y - chart_position.top;\r\n\r\n        // Set at chart bounds if outside of chart\r\n        if (x > (chart_position.left + chart_position.width))\r\n          chart_x = chart_position.width;\r\n        else if (x < chart_position.left)\r\n          chart_x = 0;\r\n\r\n        if (y > (chart_position.top + chart_position.height))\r\n          chart_y = chart_position.height;\r\n        else if (y < chart_position.top)\r\n          chart_y = 0;\r\n\r\n        return {\r\n          container: {x: x, y: y},\r\n          chart: {x: chart_x, y: chart_y}\r\n        };\r\n      }\r\n\r\n      function getBounds() {\r\n        var scroll_y = 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;\r\n\r\n        bounds = extend({}, base.getBoundingClientRect());\r\n        bounds.top += scroll_y;\r\n        bounds.bottom += scroll_y;\r\n\r\n        return bounds;\r\n      }\r\n    },\r\n\r\n    // Attach chart/component child item with id\r\n    attach: function(id, item) {\r\n      item.id = id;\r\n      item.base.attr('data-id', id);\r\n      item.container = this;\r\n\r\n      Base.prototype.attach.call(this, id, item);\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('attach');\r\n    },\r\n\r\n    // Detach chart/component child item by id\r\n    detach: function(id, item) {\r\n      item.base.remove();\r\n\r\n      delete this._attached[id];\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('detach');\r\n    },\r\n\r\n    // Position chart and component layers\r\n    positionLayers: function(layout) {\r\n      this._positionChartLayers();\r\n      this._positionComponents(layout);\r\n      this._positionByZIndex();\r\n    },\r\n\r\n    //\r\n    // Internal\r\n    //\r\n\r\n    _setDimensions: function() {\r\n      // Set container and svg dimensions\r\n      // (if original selection is svg, no container and skip responsiveness)\r\n      if (this.container) {\r\n        this.container\r\n          .attr('style', this.containerStyle());\r\n      }\r\n\r\n      this.base\r\n        .attr('viewBox', this.viewBox())\r\n        .attr('preserveAspectRatio', this.preserveAspectRatio())\r\n        .attr('style', this.baseStyle())\r\n        .attr('width', this.responsive() ? null : this.width())\r\n        .attr('height', this.responsive() ? null : this.height());\r\n    },\r\n\r\n    _attachItems: function(items, container, context) {\r\n      items = items || [];\r\n      container = container || [];\r\n\r\n      // Remove charts that are no longer needed\r\n      var remove_ids = difference(pluck(container, 'id'), pluck(items, 'id'));\r\n      remove_ids.forEach(function(remove_id) {\r\n        context.detach(remove_id, findById(container, remove_id));\r\n      });\r\n\r\n      // Create or update charts\r\n      return items.map(function(options) {\r\n        // TODO May not have id, might need to auto-generate\r\n        // (might be during another step)\r\n        var id = options.id;\r\n        var item = findById(container, id);\r\n\r\n        if (options instanceof d3.chart()) {\r\n          // If chart instance, replace with instance\r\n          if (item)\r\n            context.detach(id, item);\r\n\r\n          context.attach(id, options);\r\n          return options;\r\n        }\r\n        else {\r\n          // TEMP Changing position has nasty side effects, disable for now\r\n          var changed_position = item && !(item instanceof Overlay) && item.position && options.position && item.position() != options.position;\r\n\r\n          if (item && (item.type != options.type || changed_position)) {\r\n            // If chart type has changed, detach and re-create\r\n            context.detach(id, item);\r\n            item = undefined;\r\n          }\r\n\r\n          if (!item) {\r\n            var Item = d3.chart(options.type);\r\n\r\n            if (!Item)\r\n              throw new Error('No registered d3.chart found for ' + options.type);\r\n\r\n            var layer_options = {z_index: Item.z_index || 0};\r\n            var createLayer = {\r\n              'chart': 'createChartLayer',\r\n              'component': 'createComponentLayer',\r\n              'overlay': 'createOverlayLayer'\r\n            }[Item.layer_type];\r\n\r\n            if (!createLayer)\r\n              throw new Error('Unrecognized layer type \"' + Item.layer_type + '\" for ' + options.type);\r\n\r\n            var base = context[createLayer](layer_options);\r\n\r\n            item = new Item(base, options);\r\n            item.type = options.type;\r\n\r\n            context.attach(id, item);\r\n          }\r\n          else {\r\n            item.options(options);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      });\r\n    },\r\n\r\n    _prepareConfig: function(options, data) {\r\n      return extractLayout(options(data));\r\n    },\r\n\r\n    _positionChartLayers: function() {\r\n      var position = this.chartPosition();\r\n      this.base.selectAll('.chart-layer')\r\n        .attr('transform', translate(position.left, position.top))\r\n        .attr('width', position.width)\r\n        .attr('height', position.height);\r\n    },\r\n\r\n    _positionComponents: function(layout) {\r\n      var chart_position = this.chartPosition();\r\n      var width = this._width();\r\n      var height = this._height();\r\n\r\n      applyLayout(layout, chart_position, width, height);\r\n    },\r\n\r\n    _positionByZIndex: function() {\r\n      var layers = this.base.selectAll('.chart-layer, .chart-component-layer')[0];\r\n\r\n      // Sort by z-index\r\n      function setZIndex(layer) {\r\n        return {\r\n          layer: layer,\r\n          zIndex: parseInt(d3.select(layer).attr('data-zIndex')) || 0\r\n        };\r\n      }\r\n      function sortZIndex(a, b) {\r\n        if (a.zIndex < b.zIndex)\r\n          return -1;\r\n        else if (a.zIndex > b.zIndex)\r\n          return 1;\r\n        else\r\n          return 0;\r\n      }\r\n      function getLayer(wrapped) {\r\n        return wrapped.layer;\r\n      }\r\n\r\n      layers = layers.map(setZIndex).sort(sortZIndex).map(getLayer);\r\n\r\n      // Move layers to z-index order\r\n      layers.forEach(function(layer) {\r\n        if (layer && layer.parentNode && layer.parentNode.appendChild)\r\n          layer.parentNode.appendChild(layer);\r\n      });\r\n    },\r\n\r\n    _extractLayout: function(data) {\r\n      return calculateLayout(this.components(), data, this.demux.bind(this));\r\n    }\r\n  });\r\n\r\n  // TODO Find better place for this\r\n  function layered(items) {\r\n    if (!Array.isArray(items))\r\n      items = Array.prototype.slice.call(arguments);\r\n\r\n    return {_layered: true, items: items};\r\n  }\r\n\r\n  function findById(items, id) {\r\n    return find(items, function(item) {\r\n      return item.id == id;\r\n    });\r\n  }\n\n  // Export charts/components to d3.chart\r\n  utils.extend(d3.chart(), {\r\n    Base: Base,\r\n    Chart: Chart,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose,\r\n    Lines: Lines,\r\n    Bars: Bars,\r\n    StackedBars: StackedBars,\r\n    HorizontalBars: HorizontalBars,\r\n    HorizontalStackedBars: HorizontalStackedBars,\r\n    Labels: Labels,\r\n    HoverLabels: HoverLabels,\r\n    Text: Text,\r\n    Title: Title,\r\n    Axis: Axis,\r\n    AxisTitle: AxisTitle,\r\n    Legend: Legend,\r\n    InsetLegend: InsetLegend,\r\n    Gridlines: Gridlines\r\n  });\r\n\r\n  var d3c = d3.compose = {\r\n    VERSION: '0.15.12',\r\n    utils: utils,\r\n    helpers: helpers,\r\n    Base: Base,\r\n    Chart: Chart,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose,\r\n    layered: layered,\r\n\r\n    mixins: mixins,\r\n\r\n    Lines: Lines,\r\n    lines: lines,\r\n    Bars: Bars,\r\n    bars: bars,\r\n    StackedBars: StackedBars,\r\n    stackedBars: stackedBars,\r\n    HorizontalBars: HorizontalBars,\r\n    horizontalBars: horizontalBars,\r\n    HorizontalStackedBars: HorizontalStackedBars,\r\n    horizontalStackedBars: horizontalStackedBars,\r\n    Labels: Labels,\r\n    labels: labels,\r\n    HoverLabels: HoverLabels,\r\n    hoverLabels: hoverLabels,\r\n\r\n    Text: Text,\r\n    text: text,\r\n    Title: Title,\r\n    title: title,\r\n    Axis: Axis,\r\n    axis: axis,\r\n    AxisTitle: AxisTitle,\r\n    axisTitle: axisTitle,\r\n    Legend: Legend,\r\n    legend: legend,\r\n    InsetLegend: InsetLegend,\r\n    insetLegend: insetLegend,\r\n    Gridlines: Gridlines,\r\n    gridlines: gridlines\r\n  };\n\n  return d3c;\n\n}));"],"sourceRoot":"/source/"}