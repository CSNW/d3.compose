{"version":3,"sources":["d3.compose-all.min.js","d3.compose-all.js","../C:/dev/d3.compose/src/utils.js","../C:/dev/d3.compose/src/helpers/property.js","../C:/dev/d3.compose/src/helpers/dimensions.js","../C:/dev/d3.compose/src/helpers/create-scale.js","../C:/dev/d3.compose/src/helpers/mixin.js","../C:/dev/d3.compose/src/helpers/stack.js","../C:/dev/d3.compose/src/helpers.js","../C:/dev/d3.compose/src/Base.js","../C:/dev/d3.compose/src/layout.js","../C:/dev/d3.compose/src/Compose.js","../C:/dev/d3.compose/src/mixins/hover.js","../C:/dev/d3.compose/src/mixins/standard-layer.js","../C:/dev/d3.compose/src/components/Text.js","../C:/dev/d3.compose/src/components/Title.js","../C:/dev/d3.compose/src/components/AxisTitle.js","../C:/dev/d3.compose/src/Chart.js","../C:/dev/d3.compose/src/Component.js","../C:/dev/d3.compose/src/Overlay.js","../C:/dev/d3.compose/src/mixins/series.js","../C:/dev/d3.compose/src/mixins/xy.js","../C:/dev/d3.compose/src/mixins/xy-values.js","../C:/dev/d3.compose/src/mixins/xy-inverted.js","../C:/dev/d3.compose/src/mixins/labels.js","../C:/dev/d3.compose/src/mixins/transition.js","../C:/dev/d3.compose/src/mixins.js","../C:/dev/d3.compose/src/charts/Lines.js","../C:/dev/d3.compose/src/charts/Bars.js","../C:/dev/d3.compose/src/charts/StackedBars.js","../C:/dev/d3.compose/src/charts/HorizontalBars.js","../C:/dev/d3.compose/src/charts/HorizontalStackedBars.js","../C:/dev/d3.compose/src/charts/Labels.js","../C:/dev/d3.compose/src/charts/HoverLabels.js","../C:/dev/d3.compose/src/components/Gridlines.js","../C:/dev/d3.compose/src/components/Axis.js","../C:/dev/d3.compose/src/components/Legend.js","../C:/dev/d3.compose/src/components/InsetLegend.js","../C:/dev/d3.compose/d3.compose-all.js"],"names":["global","factory","exports","module","require","define","amd","d3c","d3","this","_extend","target","extensions","undefined_only","i","length","key","contains","arr","item","indexOf","compact","filter","difference","a","b","value","defaults","slice","call","arguments","extend","flatten","reduce","memo","concat","find","fn","context","first","n","Array","prototype","isBoolean","obj","isObject","type","isNumber","toString","isString","isUndefined","objectEach","keys","Object","objectFind","pluck","objs","map","uniq","result","push","inherits","Child","Parent","create","constructor","enumerable","writeable","configurable","setPrototypeOf","__proto__","valueOrDefault","default_value","property","options","console","warn","id","unique_index","get","properties","isFunction","set","validate","Error","JSON","stringify","previous","response","override","after","__properties","is_property","set_from_options","dimensions","selection","client","clientDimensions","width","height","attr","attrDimensions","isSVG","bbox","bboxDimensions","max","element","node","client_dimensions","clientWidth","clientHeight","window","getComputedStyle","styles","parseFloat","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","getBBox","ex","nodeName","createScale","scale","time","linear","apply","domain","data","setDomain","centered","adjacent","addCentered","padding","addPadding","getValue","d","isSeriesData","values","series","min_value","min","original","series_count","series_index","range_band","rangeBand","isFinite","original_range","range","rangeBands","mixin","mixins","initializes","transforms","mixed","forEach","mix","initialize","args","init","transform","trans","bind","stack","direction","origin","min_height","min_width","elements","next_position","element_dimensions","spacing_width","spacing_height","x","y","translate","rotate","degrees","center","rotation","alignText","line_height","offset","element_style","css_font_size","css_line_height","isNaN","css_adjustment","height_adjustment","first_item","isArray","getMax","series_data","extent","series_max","Infinity","getMin","series_min","src_helpers__style","keyValues","join","getMargins","margins","default_margins","top","right","bottom","left","di","callback","wrapped","j","undefined","_is_di","bindDi","diFn","chart","bindAllDi","getParentData","_parent_data","parent","parentNode","select","createHelper","Base","base","_layers","_attached","_events","extractLayout","prepareComponent","component","row_index","col_index","getId","setPosition","position","layered_index","extractData","_charts","_components","items","layout","charts","components","found","row","row_components","row_layout","_layered","chart_ids","chart_index","unshift","calculateLayout","demux","overall_layout","skip_layout","getLayout","applyLayout","chart_position","setLayout","part","index","parts","previousPart","layered","findById","getPoints","getPoint","sort","meta","getClosestPoints","points","tolerance","getDistance","Math","sqrt","pow","setDistance","point","distance","closePoints","sortPoints","by_distance","updateActive","active","closest","container","active_keys","closest_keys","trigger","createLayer","name","layer","events","event","method","split","str","charAt","toUpperCase","dataBind","onDataBind","insert","onInsert","textOptions","default_options","text","components_Title__defaultMargins","default_margin","margins_by_position","title","components_AxisTitle__defaultMargins","axisTitle","Int8Array","utils","helpers","style","Base__Chart","draw","attachment","unlayer","attach","on","once","off","isProperty","unset","proto_props","static_props","hasOwnProperty","src_Chart__Chart","z_index","layer_type","Chart","src_Chart","Component","prepareLayout","actual_dimensions","Overlay","hidden","-webkit-transform","-ms-transform","display","getAbsolutePosition","chartPosition","show","hide","container_position","responsive","container_dimensions","chart_width","chart_height","width_ratio","height_ratio","default_compose_margins","Compose","tagName","append","classed","attachHoverListeners","rawData","_width","_height","viewBox","preserveAspectRatio","containerStyle","aspect_ratio","padding-top","baseStyle","chart_options","_attachItems","component_options","delay","duration","ease","config","_prepareConfig","_setDimensions","redraw","createChartLayer","createComponentLayer","createOverlayLayer","_positionChartLayers","_extractLayout","positionLayers","inside","mouse","document","documentElement","bounds","enter","translateToXY","move","leave","coordinates","chart_x","chart_y","getBounds","scroll_y","scrollY","scrollTop","getBoundingClientRect","was_inside","is_inside","detach","remove","_positionComponents","_positionByZIndex","remove_ids","remove_id","changed_position","Item","layer_options","overlay","selectAll","setZIndex","zIndex","parseInt","sortZIndex","getLayer","layers","appendChild","Series","seriesKey","seriesValues","seriesIndex","seriesClass","seriesData","itemStyle","seriesCount","seriesLayer","exit","XY","setScales","normalizeData","xScale","setXScaleRange","getDefaultXScale","yScale","setYScaleRange","getDefaultYScale","xKey","yKey","xValue","yValue","x0","y0","x_scale","y_scale","XYValues","adjacentWidth","layeredWidth","itemWidth","XYInverted","mixins_labels__Labels","attachLabels","labels","LabelsClass","_labels","proxyLabelMethods","LabelsXY","Hover","onMouseEnter","onMouseMove","onMouseLeave","mouseEnterPoint","mouseLeavePoint","HoverPoints","update","hoverTolerance","Transition","setupTransition","StandardLayer","standardLayer","standardSeriesLayer","onEnter","onUpdate","onMerge","onExit","Labels","charts_Lines__Mixed","Lines","lines","interpolate","createLine","lineKey","line","svg","lineData","each","onMergeTransition","charts_Bars__Mixed","Bars","offset_axis","getOffsetAxis","barHeight","abs","barOffset","barWidth","barX","barY","bar0","barClass","axis_thickness","onExitTransition","bars","StackedBars","grouped","x_key","y_key","__original_y","pos","neg","__previous","stackedBars","HorizontalBars","horizontalBars","HorizontalStackedBars","horizontalStackedBars","charts_Labels__Mixed","charts_Labels__Labels","format","y_value","anchor","alignment","labelText","label","labelClass","insertLabels","mergeLabels","layoutLabels","transitionLabels","getOptions","label_position","label_options","_prepareLabel","_calculateLayout","_handleCollisions","_setLayout","bg","text_bounds","text_y_adjustment","checkForOverlap","labelA","labelB","getEdges","contained_LR","contained_TB","overlap_LR","overlap_TB","groupLabels","group","updateGroupPositions","addLabelToGroup","originalY","reset","sortY","byY","reverse","overlap","prev","compareSeries","compareLabel","charts_HoverLabels__Mixed","HoverLabels","onMouseEnterPoint","onMouseLeavePoint","findLabelForPoint","hoverLabels","components_Text__Mixed","Text","textAlign","verticalAlign","transformation","middle","translation","Title","rotate_by_position","components_Gridlines__Mixed","Gridlines","orientation","ticks","tickValues","drawLine","x1","x2","y1","y2","tick_values","ticks_args","gridlines","components_Axis__Mixed","Axis","axis","_layout_axis","axis_base","_layout_base","attachGridlines","orient","tickSize","innerTickSize","outerTickSize","tickPadding","tickFormat","_setupAxis","onUpdateTransition","label_overhang","_getLabelOverhang","gridlinesOptions","createGridlines","gridline_options","gridlines_options","_gridlines","array_extensions","overhangs","AxisTitle","default_legend_margins","components_Legend__Mixed","Legend","legend_base","swatchDimensions","stackDirection","direction_by_position","combined_data","chart_id","find_chart","exclude_from_legend","chart_data","legend_data","getLegendData","itemKey","itemText","swatchClass","createSwatch","swatches","groups","_itemDetails","swatch","sizes","size","shift","class","legend","default","swatch_dimensions","registerSwatch","types","InsetLegend","relative_to","relative_to_x","relative_to_y","insetLegend","compose","VERSION","d3_compose_all"],"mappings":"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","file":"d3.compose-all.min.js","sourcesContent":[null,"/*!\n * d3.compose - Compose complex, data-driven visualizations from reusable charts and components with d3\n * v0.15.9 - https://github.com/CSNW/d3.compose - license: MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3')) :\n  typeof define === 'function' && define.amd ? define(['d3'], factory) :\n  global.d3c = factory(global.d3)\n}(this, function (d3) { 'use strict';\n\n  // Many utils inlined from Underscore.js\n  // (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\n  var slice = Array.prototype.slice;\n  var toString = Object.prototype.toString;\n\n  function _extend(target, extensions, undefined_only) {\n    for (var i = 0, length = extensions.length; i < length; i++) {\n      for (var key in extensions[i]) {\n        if (!undefined_only || target[key] === void 0)\n          target[key] = extensions[i][key];\n      }\n    }\n\n    return target;\n  }\n\n  function contains(arr, item) {\n    return arr.indexOf(item) >= 0;\n  }\n\n  function compact(arr) {\n    return arr.filter(function(item) {\n      return item;\n    });\n  }\n\n  function difference(a, b) {\n    return a.filter(function(value) {\n      return b.indexOf(value) < 0;\n    });\n  }\n\n  function defaults(target) {\n    return _extend(target, slice.call(arguments, 1), true);\n  }\n\n  function extend(target) {\n    return _extend(target, slice.call(arguments, 1));\n  }\n\n  function flatten(arr) {\n    // Assumes all items in arr are arrays and only flattens one level\n    return arr.reduce(function(memo, item) {\n      return memo.concat(item);\n    }, []);\n  }\n\n  function find(arr, fn, context) {\n    if (!arr) return;\n    for (var i = 0, length = arr.length; i < length; i++) {\n      if (fn.call(context, arr[i], i, arr))\n        return arr[i];\n    }\n  }\n\n  function first(arr, n) {\n    if (arr == null) return void 0;\n    if (n == null) return arr[0];\n    return Array.prototype.slice.call(arr, 0, n);\n  }\n\n  function isBoolean(obj) {\n    return obj === true || obj === false;\n  }\n  function isObject(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n  function isNumber(obj) {\n    return toString.call(obj) === '[object Number]';\n  }\n  function isString(obj) {\n    return toString.call(obj) === '[object String]';\n  }\n  function isUndefined(obj) {\n    return obj === void 0;\n  }\n\n  var isFunction = function(obj) {\n    return toString.call(obj) === '[object Function]';\n  };\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  function objectEach(obj, fn, context) {\n    if (!obj) return;\n    var keys = Object.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      fn.call(context, obj[keys[i]], keys[i], obj);\n    }\n  }\n\n  function objectFind(obj, fn, context) {\n    if (!obj) return;\n    var keys = Object.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      if (fn.call(context, obj[keys[i]], keys[i], obj))\n        return obj[keys[i]];\n    }\n  }\n\n  function pluck(objs, key) {\n    if (!objs) return [];\n    return objs.map(function(obj) {\n      return obj[key];\n    });\n  }\n\n  function uniq(arr) {\n    var result = [];\n    for (var i = 0, length = arr.length; i < length; i++) {\n      if (result.indexOf(arr[i]) < 0)\n        result.push(arr[i]);\n    }\n    return result;\n  }\n\n  function inherits(Child, Parent) {\n    Child.prototype = Object.create(Parent.prototype, {\n      constructor: {\n        value: Child,\n        enumerable: false,\n        writeable: true,\n        configurable: true\n      }\n    });\n\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(Child, Parent);\n    }\n    else {\n      Child.__proto__ = Parent; //eslint-disable-line no-proto\n\n      // __proto__ isn't supported in IE,\n      // use one-time copy of static properties to approximate\n      defaults(Child, Parent);\n    }\n  }\n\n  // If value isn't `undefined`, return `value`, otherwise use `default_value`\n  //\n  // @method valueOrDefault\n  // @param {Any} [value]\n  // @param {Any} default_value\n  // @return {Any}\n  function valueOrDefault(value, default_value) {\n    return !isUndefined(value) ? value : default_value;\n  }\n\n  var utils = {\n    slice: slice,\n    toString: toString,\n    contains: contains,\n    compact: compact,\n    difference: difference,\n    defaults: defaults,\n    extend: extend,\n    flatten: flatten,\n    find: find,\n    first: first,\n    isBoolean: isBoolean,\n    isFunction: isFunction,\n    isObject: isObject,\n    isNumber: isNumber,\n    isString: isString,\n    isUndefined: isUndefined,\n    objectEach: objectEach,\n    objectFind: objectFind,\n    pluck: pluck,\n    uniq: uniq,\n    inherits: inherits,\n    valueOrDefault: valueOrDefault\n  };\n\n  var unique_index = 0;\n\n  /**\n    Helper for creating properties for charts/components\n\n    @example\n    ```javascript\n    var Custom = d3.chart('Chart').extend('Custom', {\n      // Create property that's stored internally as 'simple'\n      simple: property()\n    });\n    var custom; // = new Custom(...);\n\n    // set\n    custom.simple('Howdy');\n\n    // get\n    console.log(custom.simple()); // -> 'Howdy'\n\n    // Advanced\n    // --------\n    // Default values:\n    Custom.prototype.message = property({\n      default_value: 'Howdy!'\n    });\n\n    console.log(custom.message()); // -> 'Howdy!'\n    custom.message('Goodbye');\n    console.log(custom.message()); // -> 'Goodbye'\n\n    // Set to undefined to reset to default value\n    custom.message(undefined);\n    console.log(custom.message()); // -> 'Howdy!'\n\n    // Computed default value:\n    Custom.property.computed = property({\n      default_value: function() {\n        // \"this\" = Custom instance\n        return this.message();\n      }\n    });\n\n    // Function default value:\n    // For function default_values, wrap in function to differentiate from computed\n    Custom.property.fn = property({\n      default_value: function() {\n        return function defaultFn() {};\n      }\n      // The following would be incorrectly evaluated\n      // default_value: function defaultFn() {}\n    })\n\n    // Custom getter:\n    Custom.prototype.exclaimed = property({\n      get: function(value) {\n        // Value is the underlying set value\n        return value + '!';\n      }\n    });\n\n    custom.exclaimed('Howdy');\n    console.log(custom.exclaimed()); // -> 'Howdy!'\n\n    // Custom setter:\n    Custom.prototype.feeling = property({\n      set: function(value, previous) {\n        if (value == 'Hate') {\n          // To override value, return Object with override specified\n          return {\n            override: 'Love',\n\n            // To do something after override, use after callback\n            after: function() {\n              console.log('After: ' + this.feeling()); // -> 'After: Love'\n            }\n          };\n        }\n      }\n\n      custom.feeling('Hate'); // -> 'After: Love'\n      console.log(custom.feeling()); // -> 'Love'\n    });\n    ```\n    @method property\n    @for helpers\n    @param {Object} [options]\n    @param {Any} [options.default_value] default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.\n    @param {Function} [options.get] `function(value) {return ...}` getter, where `value` is the stored value and return desired value\n    @param {Function} [options.set] `function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set\n    @param {Object} [options.context=this] context to evaluate get/set/after functions\n    @return {Function} `()`: get, `(value)`: set\n  */\n  function property(options) {\n    // DEPRECATED: name as first argument\n    if (arguments.length == 2) {\n      if (typeof console != 'undefined' && console.warn)\n        console.warn('DEPRECATED - name argument for property is no longer supported will be removed in the next version of d3.compose');\n      options = arguments[1];\n    }\n\n    options = options || {};\n    var id = 'property_' + unique_index++;\n\n    var property = function(value) {//eslint-disable-line no-shadow\n      var properties = this.__properties = this.__properties || {};\n      var context = valueOrDefault(property.context, this);\n\n      if (arguments.length)\n        return set.call(this);\n      else\n        return get.call(this);\n\n      function get() {\n        value = properties[id];\n\n        if (isUndefined(value)) {\n          // Use default value and unwrap if it's a function\n          value = property.default_value;\n          if (isFunction(value))\n            value = value.call(context);\n        }\n\n        return isFunction(options.get) ? options.get.call(context, value) : value;\n      }\n\n      function set() {\n        // Validate\n        if (isFunction(options.validate) && !isUndefined(value) && !options.validate.call(context, value))\n          throw new Error('Invalid value for property: ' + JSON.stringify(value));\n\n        var previous = properties[id];\n        properties[id] = value;\n\n        if (isFunction(options.set) && !isUndefined(value)) {\n          var response = options.set.call(context, value, previous);\n\n          if (response && 'override' in response)\n            properties[id] = response.override;\n          if (response && isFunction(response.after))\n            response.after.call(context, properties[id]);\n        }\n\n        return this;\n      }\n    };\n\n    // For checking if function is a property\n    property.is_property = true;\n    property.id = id;\n    property.set_from_options = valueOrDefault(options.set_from_options, true);\n    property.default_value = options.default_value;\n    property.context = options.context;\n    property.options = options;\n\n    return property;\n  }\n\n  /**\n    Helper for robustly determining width/height of given selector.\n    Checks dimensions from css, attributes, and bounding box.\n\n    @method dimensions\n    @for helpers\n    @param {d3.Selection} selection\n    @return {Object} `{width, height}`\n  */\n  function dimensions(selection) {\n    // 1. Get width/height set via css (only valid for svg and some other elements)\n    var client = clientDimensions(selection);\n\n    if (client.width && client.height)\n      return client;\n\n    // 2. Get width/height set via attribute\n    var attr = attrDimensions(selection);\n\n    if (isSVG(selection)) {\n      return {\n        width: client.width != null ? client.width : attr.width || 0,\n        height: client.height != null ? client.height : attr.height || 0\n      };\n    }\n    else {\n      var bbox = bboxDimensions(selection);\n\n      // Size set by css -> client (only valid for svg and some other elements)\n      // Size set by svg -> attr override or bounding_box\n      // -> Take maximum\n      return {\n        width: d3.max([client.width, attr.width || bbox.width]) || 0,\n        height: d3.max([client.height, attr.height || bbox.height]) || 0\n      };\n    }\n  }\n\n  function clientDimensions(selection) {\n    var element = selection.node();\n\n    var client_dimensions = {\n      width: element && element.clientWidth,\n      height: element && element.clientHeight\n    };\n\n    // Issue: Firefox does not correctly calculate clientWidth/clientHeight for svg\n    //        calculate from css\n    //        http://stackoverflow.com/questions/13122790/how-to-get-svg-element-dimensions-in-firefox\n    //        Note: This makes assumptions about the box model in use and that width/height are not percent values\n    if (isSVG(selection) && (!element.clientWidth || !element.clientHeight) && typeof window !== 'undefined' && window.getComputedStyle) {\n      var styles = window.getComputedStyle(element);\n      client_dimensions.height = parseFloat(styles.height) - parseFloat(styles.borderTopWidth) - parseFloat(styles.borderBottomWidth);\n      client_dimensions.width = parseFloat(styles.width) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\n    }\n\n    return client_dimensions;\n  }\n\n  function attrDimensions(selection) {\n    return {\n      width: selection && selection.attr && parseFloat(selection.attr('width')),\n      height: selection && selection.attr && parseFloat(selection.attr('height'))\n    };\n  }\n\n  function bboxDimensions(selection) {\n    var element = selection.node();\n    var bbox;\n    try {\n      bbox = element && typeof element.getBBox == 'function' && element.getBBox();\n    }\n    catch(ex) {\n      // Firefox throws error when calling getBBox when svg hasn't been displayed\n      // Ignore error and set to empty\n      bbox = {width: 0, height: 0};\n    }\n\n    return bbox;\n  }\n\n  function isSVG(selection) {\n    return selection.node().nodeName == 'svg';\n  }\n\n  /**\n    Create scale from options\n\n    @example\n    ```javascript\n    // Simple type, range, and domain\n    var scale = createScale({\n      type: 'linear',\n      domain: [0, 100],\n      range: [0, 500]\n    });\n\n    // Calculate domain for data\n    var scale = createScale({\n      type: 'log',\n      data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\n      key: 'y'\n    });\n\n    // Scale is passed through\n    var original = d3.scale.linear();\n    var scale = createScale(original);\n    scale === original;\n\n    // Set other properties by passing in \"arguments\" array\n    var scale = createScale({\n      type: 'ordinal',\n      domain: ['a', 'b', 'c', 'd', 'e'],\n      rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\n    });\n\n    // Use ordinal + adjacent for bar charts\n    var scale = createScale({\n      type: 'ordinal',\n      adjacent: true,\n      domain: ['a', 'b', 'c'],\n      series: 2 // Series count is required for adjacent if data isn't given\n    })\n    ```\n    @method createScale\n    @for helpers\n    @param {Object|Function} options (passing in `Function` returns original function with no changes)\n    @param {String} [options.type='linear'] Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`\n    @param {Array} [options.domain] Domain for scale\n    @param {Array} [options.range] Range for scale\n    @param {Any} [options.data] Used to dynamically set domain (with given value or key)\n    @param {Function} [options.value] \"di\"-function for getting value for data\n    @param {String} [options.key] Data key to extract value\n    @param {Boolean} [options.centered] For \"ordinal\" scales, use centered x-values\n    @param {Boolean} [options.adjacent] For \"ordinal\" + centered, set x-values for different series next to each other\n\n    - Requires series-index as second argument to scale, otherwise centered x-value is used\n    - Requires \"data\" or \"series\" options to determine number of series\n    @param {Number} [options.series] Used with \"adjacent\" if no \"data\" is given to set series count\n    @param {Number} [options.padding=0.1] For \"ordinal\" scales, set padding between different x-values\n    @param {Array...} [options....] Set any other scale properties with array of arguments to pass to property\n    @return {d3.Scale}\n  */\n  function createScale(options) {\n    options = options || {};\n\n    // If function, scale was passed in as options\n    if (isFunction(options))\n      return options;\n\n    // Create scale (using d3.time.scale() if type is 'time')\n    var scale;\n    if (options.type == 'time')\n      scale = d3.time.scale();\n    else if (d3.scale[options.type])\n      scale = d3.scale[options.type]();\n    else\n      scale = d3.scale.linear();\n\n    objectEach(options, function(value, key) {\n      if (scale[key]) {\n        // If option is standard property (domain or range), pass in directly\n        // otherwise, pass in as arguments\n        // (don't pass through internal options)\n        if (key == 'range' || key == 'domain')\n          scale[key](value);\n        else if (!contains(['type', 'data', 'value', 'key', 'centered', 'adjacent', 'series', 'padding'], key))\n          scale[key].apply(scale, value);\n      }\n    });\n\n    if (!options.domain && options.data && (options.key || options.value))\n      scale = setDomain(scale, options);\n\n    // Add centered and adjacent extensions to ordinal\n    // (centered by default for ordinal)\n    var centered = options.centered || (options.type == 'ordinal' && options.centered == null);\n    if (options.type == 'ordinal' && (centered || options.adjacent))\n      scale = addCentered(scale, options);\n\n    // Add padding extension to ordinal\n    if (options.type == 'ordinal' && (options.padding != null || centered || options.adjacent))\n      scale = addPadding(scale, options);\n\n    return scale;\n  }\n\n  function setDomain(scale, options) {\n    // Use value \"di\" or create for key\n    var getValue = options.value || function(d) {\n      return d[options.key];\n    };\n\n    // Enforce series data\n    var data = options.data;\n    if (!isSeriesData(data))\n      data = [{values: data}];\n\n    var domain;\n    if (options.type == 'ordinal') {\n      // Domain for ordinal is array of unique values\n      domain = uniq(flatten(data.map(function(series) {\n        if (series && series.values)\n          return series.values.map(getValue);\n      })));\n    }\n    else {\n      var min_value = min(data, getValue);\n\n      domain = [\n        min_value < 0 ? min_value : 0,\n        max(data, getValue)\n      ];\n    }\n\n    scale.domain(domain);\n    return scale;\n  }\n\n  function addCentered(original, options) {\n    // Get series count for adjacent\n    var series_count = options.series || (!isSeriesData(options.data) ? 1 : options.data.length);\n\n    // TODO Look into removing closure\n    var scale = (function(original, options, series_count) {//eslint-disable-line no-shadow\n      var context = function(value, series_index) {\n        var width = context.width();\n\n        if (!options.adjacent)\n          series_index = 0;\n\n        return original(value) + (0.5 * width) + (width * (series_index || 0));\n      };\n      extend(context, original, {\n        width: function() {\n          var range_band = context.rangeBand && context.rangeBand();\n          var width = isFinite(range_band) ? range_band : 0;\n\n          if (options.adjacent)\n            width = width / series_count;\n\n          return width;\n        }\n      });\n\n      // TODO test copy() behavior\n\n      return context;\n    })(original, options, series_count);\n\n    return scale;\n  }\n\n  function addPadding(scale, options) {\n    var padding = options.padding != null ? options.padding : 0.1;\n\n    var original_range = scale.range;\n    scale.range = function(range) {\n      if (!arguments.length) return original_range();\n\n      scale.rangeBands(\n        range,\n        padding,\n        padding / 2\n      );\n    };\n\n    if (options.range)\n      scale.range(options.range);\n\n    // TODO test copy() behavior\n    return scale;\n  }\n\n  /**\n    Combine mixins with Parent super class for extension\n\n    @example\n    ```js\n    var a = {transform: function() {}, a: 1};\n    var b = {initialize: function() {}, b: 2};\n    var c = {c: 3};\n\n    var Custom = mixin(Chart, a, b, c).extend({\n      initialize: function(options) {\n        this._super.initialize.call(this, options);\n        // d\n      },\n      transform: function(data) {\n        data = this._super.transform.call(this, data);\n        // d\n      }\n    });\n\n    // initialize: Chart, b, d\n    // transform: Chart, a, d\n    ```\n    @method mixin\n    @for helpers\n    @param {Function} Parent\n    @param {...Object} ...mixins\n    @return {Function}\n  */\n  function mixin(Parent/*, ...mixins*/) {\n    var mixins = slice.call(arguments, 1);\n    var initializes = [];\n    var transforms = [];\n    var mixed = {};\n\n    mixins.forEach(function(mix) {\n      objectEach(mix, function(value, key) {\n        if (key == 'initialize')\n          initializes.push(value);\n        else if (key == 'transform')\n          transforms.push(value);\n        else\n          mixed[key] = value;\n      });\n    });\n\n    if (initializes.length) {\n      mixed.initialize = function initialize() {\n        var args = slice.call(arguments);\n        Parent.prototype.initialize.apply(this, args);\n        initializes.forEach(function(init) {\n          init.apply(this, args);\n        }, this);\n      };\n    }\n\n    if (transforms.length) {\n      mixed.transform = function transform(data) {\n        data = Parent.prototype.transform.call(this, data);\n        return transforms.reduce(function(memo, trans) {\n          return trans.call(this, memo);\n        }.bind(this), data);\n      };\n    }\n\n    return Parent.extend(mixed);\n  }\n\n  /**\n    Stack given array of elements vertically or horizontally\n\n    @example\n    ```js\n    // Stack all text elements vertically, from the top, with 0px padding\n    d3.selectAll('text').call(helpers.stack())\n\n    // Stack all text elements horizontally, from the right, with 5px padding\n    d3.selectAll('text').call(helpers.stack({\n      direction: 'horizontal',\n      origin: 'right',\n      padding: 5\n    }));\n    ```\n    @method stack\n    @for helpers\n    @param {Object} [options]\n    @param {String} [options.direction=vertical] `\"vertical\"` or `\"horizontal\"`\n    @param {String} [options.origin] `\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)\n    @param {Number} [options.padding=0] padding (in px) between elements\n    @param {Number} [options.min_height=0] minimum spacing height (for vertical stacking)\n    @param {Number} [options.min_width=0]  minimum spacing width (for horizontal stacking)\n    @return {Function}\n  */\n  function stack(options) {\n    options = extend({\n      direction: 'vertical',\n      origin: 'top',\n      padding: 0,\n      min_height: 0,\n      min_width: 0\n    }, options);\n\n    // Ensure valid origin based on direction\n    if (options.direction == 'horizontal' && !(options.origin == 'left' || options.origin == 'right'))\n      options.origin = 'left';\n    else if (options.direction == 'vertical' && !(options.origin == 'top' || options.origin == 'bottom'))\n      options.origin = 'top';\n\n    function padding(i) {\n      return i > 0 && options.padding ? options.padding : 0;\n    }\n\n    return function(elements) {\n      if (elements && elements.attr) {\n        var previous = 0;\n\n        elements.attr('transform', function(d, i) {\n          var element_dimensions = this.getBBox();\n          var spacing_width = d3.max([element_dimensions.width, options.min_width]);\n          var spacing_height = d3.max([element_dimensions.height, options.min_height]);\n          var x = 0;\n          var y = 0;\n          var next_position;\n\n          if (options.direction == 'horizontal') {\n            next_position = previous + spacing_width + padding(i);\n\n            if (options.origin == 'left')\n              x = previous + padding(i);\n            else\n              x = next_position;\n\n            previous = next_position;\n          }\n          else {\n            next_position = previous + spacing_height + padding(i);\n\n            if (options.origin == 'top')\n              y = previous + padding(i);\n            else\n              y = next_position;\n\n            previous = next_position;\n          }\n\n          return translate(x, y);\n        });\n      }\n    };\n  }\n\n  /**\n    Translate by (x, y) distance\n\n    @example\n    ```javascript\n    translate(10, 15) == 'translate(10, 15)'\n    translate({x: 10, y: 15}) == 'translate(10, 15)'\n    ```\n    @method translate\n    @param {Number|Object} [x] value or `{x, y}`\n    @param {Number} [y]\n    @return {String}\n  */\n  function translate(x, y) {\n    if (isObject(x)) {\n      y = x.y;\n      x = x.x;\n    }\n\n    return 'translate(' + (x || 0) + ', ' + (y || 0) + ')';\n  }\n\n  /**\n    Rotate by degrees, with optional center\n\n    @method rotate\n    @param {Number} degrees\n    @param {Object} [center = {x: 0, y: 0}]\n    @return {String}\n  */\n  function rotate(degrees, center) {\n    var rotation = 'rotate(' + (degrees || 0);\n    if (center)\n      rotation += ' ' + (center.x || 0) + ',' + (center.y || 0);\n    rotation += ')';\n\n    return rotation;\n  }\n\n  /**\n    Find vertical offset to vertically align text\n    (needed due to lack of `alignment-baseline` support in Firefox)\n\n    @example\n    ```js\n    var label = d3.select('text');\n\n    // Place label vertically so that origin is top-left\n    var offset = alignText(label);\n    label.attr('transform', translate(0, offset));\n\n    // Center label for line-height of 20px\n    var offset = alignText(label, 20);\n    label.attr('transform', translate(0, offset));\n    ```\n    @method alignText\n    @param {element} element\n    @param {Number} [line_height]\n    @return {Number} offset\n  */\n  function alignText(element, line_height) {\n    var offset = 0;\n    try {\n      var height = element.getBBox().height;\n\n      var element_style = window.getComputedStyle(element);\n      var css_font_size = parseFloat(element_style['font-size']);\n      var css_line_height = parseFloat(element_style['line-height']);\n\n      // If line-height: normal, use estimate 1.14em\n      // (actual line-height depends on browser and font)\n      if (isNaN(css_line_height))\n        css_line_height = 1.15 * css_font_size;\n\n      var css_adjustment = -(css_line_height - css_font_size) / 2;\n\n      // Add additional line-height, if specified\n      var height_adjustment = 0;\n      if (line_height && line_height > 0)\n        height_adjustment = (line_height - height) / 2;\n\n      offset = height + (css_adjustment || 0) + (height_adjustment || 0);\n    }\n    catch (ex) {\n      // Errors can occur from getBBox and getComputedStyle\n      // No useful information for offset, do nothing\n    }\n\n    return offset;\n  }\n\n  /**\n    Determine if given data is likely series data\n\n    @method isSeriesData\n    @param {Array} data\n    @return {Boolean}\n  */\n  function isSeriesData(data) {\n    var first_item = first(data);\n    return first_item && isObject(first_item) && Array.isArray(first_item.values);\n  }\n\n  /**\n    Get max for array/series by value di\n\n    @example\n    ```js\n    var data = [\n      {values: [{y: 1}, {y: 2}, {y: 3}]},\n      {values: [{y: 4}, {y: 2}, {y: 0}]}\n    ];\n    max(data, function(d, i) { return d.y; }); // -> 4\n    ```\n    @method max\n    @param {Array} data\n    @param {Function} getValue di function that returns value for given (d, i)\n    @return {Number}\n  */\n  function max(data, getValue) {\n    var getMax = function(series_data) {\n      return series_data && d3.extent(series_data, getValue)[1];\n    };\n\n    if (isSeriesData(data)) {\n      return data.reduce(function(memo, series) {\n        if (series && Array.isArray(series.values)) {\n          var series_max = getMax(series.values);\n          return series_max > memo ? series_max : memo;\n        }\n        else {\n          return memo;\n        }\n      }, -Infinity);\n    }\n    else {\n      return getMax(data);\n    }\n  }\n\n  /**\n    Get min for array/series by value di\n\n    @example\n    ```js\n    var data = [\n      {values: [{x: 1}, {x: 2}, {x: 3}]},\n      {values: [{x: 4}, {x: 2}, {x: 0}]}\n    ];\n    min(data, function(d, i) { return d.x; }); // -> 0\n    ```\n    @method min\n    @param {Array} data\n    @param {Function} getValue di function that returns value for given (d, i)\n    @return {Number}\n  */\n  function min(data, getValue) {\n    var getMin = function(series_data) {\n      return series_data && d3.extent(series_data, getValue)[0];\n    };\n\n    if (isSeriesData(data)) {\n      return data.reduce(function(memo, series) {\n        if (series && Array.isArray(series.values)) {\n          var series_min = getMin(series.values);\n          return series_min < memo ? series_min : memo;\n        }\n        else {\n          return memo;\n        }\n      }, Infinity);\n    }\n    else {\n      return getMin(data);\n    }\n  }\n\n  // TODO Look into converting to d3's internal style handling\n  // Convert key,values to style string\n  //\n  // @example\n  // ```js\n  // style({color: 'red', display: 'block'}) -> color: red; display: block;\n  // ```\n  // @method style\n  // @param {Object} styles\n  // @return {String}\n  function src_helpers__style(styles) {\n    if (!styles)\n      return '';\n\n    var keyValues = [];\n    objectEach(styles, function(value, key) {\n      keyValues.push(key + ': ' + value);\n    });\n    styles = keyValues.join('; ');\n\n    return styles ? styles + ';' : '';\n  }\n\n  /**\n    Get formatted margins for varying input\n\n    @method getMargins\n    @example\n    ```js\n    getMargins(4);\n    // -> {top: 4, right: 4, bottom: 4, left: 4}\n\n    getMargins({top: 20}, {top: 8, bottom: 8});\n    // -> {top: 20, right: 0, bottom: 8, left: 0}\n    ```\n    @param {Number|Object} margins\n    @param {Object} default_margins\n    @return {Object}\n  */\n  function getMargins(margins, default_margins) {\n    if (isNumber(margins))\n      return {top: margins, right: margins, bottom: margins, left: margins};\n    else\n      return defaults({}, margins, default_margins, {top: 0, right: 0, bottom: 0, left: 0});\n  }\n\n  /**\n    Create wrapped `(d, i)` function that adds chart instance as first argument.\n    Wrapped function uses standard d3 arguments and context.\n\n    Note: in order to pass proper context to di-functions called within di-function\n    use `.call(this, d, i)` (where \"this\" is d3 context)\n\n    @example\n    ```javascript\n    d3.chart('Base').extend('Custom', {\n      initialize: function() {\n        this.base.select('point')\n          .attr('cx', this.x);\n        // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\n      },\n\n      x: di(function(chart, d, i) {\n        // \"this\" is standard d3 context: node\n        return chart.xScale()(chart.xValue.call(this, d, i));\n      })\n\n      // xScale, xValue...\n    });\n    ```\n    @method di\n    @param {Function} callback with `(chart, d, i)` arguments\n    @return {Function}\n  */\n  function di(callback) {\n    // Create intermediate wrapping in case it's called without binding\n    var wrapped = function wrapped(d, i, j) {\n      return callback.call(this, undefined, d, i, j);\n    };\n    wrapped._is_di = true;\n    wrapped.original = callback;\n\n    return wrapped;\n  }\n\n  function bindDi(diFn, chart) {\n    return function wrapped(d, i, j) {\n      return (diFn.original || diFn).call(this, chart, d, i, j);\n    };\n  }\n\n  // Bind all di-functions found in chart\n  function bindAllDi(chart) {\n    for (var key in chart) {\n      if (chart[key] && chart[key]._is_di)\n        chart[key] = bindDi(chart[key], chart);\n    }\n  }\n\n\n  /**\n    Get parent data for element (used to get parent series for data point)\n\n    @example\n    ```js\n    var data = [{\n      name: 'Input',\n      values: [1, 2, 3]\n    }];\n\n    d3.selectAll('g')\n      .data(data)\n      .enter().append('g')\n        .selectAll('text')\n          .data(function(d) { return d.values; })\n          .enter().append('text')\n            .text(function(d) {\n              var series_data = getParentData(this);\n              return series_data.name + ': ' + d;\n            });\n\n    // Input: 1, Input: 2, Input: 3\n    ```\n    @method getParentData\n    @param {Element} element\n    @return {Any}\n  */\n  function getParentData(element) {\n    // @internal Shortcut if element + parentData needs to be mocked\n    if (element._parent_data)\n      return element._parent_data;\n\n    var parent = element && element.parentNode;\n    if (parent) {\n      var data = d3.select(parent).data();\n      return data && data[0];\n    }\n  }\n\n  function createHelper(type) {\n    return function(id, options) {\n      if (!options) {\n        options = id;\n        id = undefined;\n      }\n\n      return extend({id: id, type: type}, options);\n    };\n  }\n\n  var helpers = {\n    property: property,\n    dimensions: dimensions,\n    translate: translate,\n    rotate: rotate,\n    alignText: alignText,\n    isSeriesData: isSeriesData,\n    max: max,\n    min: min,\n    createScale: createScale,\n    style: src_helpers__style,\n    getMargins: getMargins,\n    stack: stack,\n    di: di,\n    bindDi: bindDi,\n    bindAllDi: bindAllDi,\n    getParentData: getParentData,\n    mixin: mixin,\n    createHelper: createHelper\n  };\n\n  var Base__Chart = d3.chart();\n\n  // TEMP Clear namespace from mixins\n  /**\n    @namespace\n  */\n\n  /**\n    Shared functionality between all charts and components.\n\n    - Set properties automatically from `options`,\n    - Store fully transformed data\n    - Adds `\"before:draw\"` and `\"draw\"` events\n    - Standard `width` and `height` calculations\n\n    @class Base\n  */\n  function Base(selection, options) {\n    // d3.chart() constructor without transform and initialize cascade\n    this.base = selection;\n    this._layers = {};\n    this._attached = {};\n    this._events = {};\n\n    // Bind all di-functions to this chart\n    bindAllDi(this);\n\n    // Set options (and properties with set_from_options)\n    if (options)\n      this.options(options);\n\n    // Initialize Chart (relies on explicitly calling super in initialize)\n    this.initialize(options);\n  }\n\n  inherits(Base, Base__Chart);\n\n  extend(Base.prototype, {\n    initialize: function() {},\n    transform: function(data) {\n      return data;\n    },\n    demux: function(name, data) { return data; },\n\n    // Add events to draw: \"before:draw\" and \"draw\"\n    draw: function(data) {\n      // Transform data (relies on explicitly calling super in transform)\n      data = this.transform(data);\n\n      // Store fully-transformed data for reference\n      this.data(data);\n\n      this.trigger('before:draw', data);\n\n      objectEach(this._layers, function(layer) {\n        layer.draw(data);\n      });\n      objectEach(this._attached, function(attachment, name) {\n        attachment.draw(this.demux(name, data));\n      }, this);\n\n      this.trigger('draw', data);\n    },\n\n    // Explicitly load d3.chart prototype\n    layer: Base__Chart.prototype.layer,\n    unlayer: Base__Chart.prototype.unlayer,\n    attach: Base__Chart.prototype.attach,\n    on: Base__Chart.prototype.on,\n    once: Base__Chart.prototype.once,\n    off: Base__Chart.prototype.off,\n    trigger: Base__Chart.prototype.trigger,\n\n    /**\n      Store fully-transformed data for direct access from the chart\n\n      @property data\n      @type Any\n    */\n    data: property(),\n\n    /**\n      Overall options for chart/component, automatically setting any matching properties.\n\n      @example\n      ```js\n      var property = d3.compose.helpers.property;\n\n      d3.chart('Base').extend('HasProperties', {\n        a: property(),\n        b: property({\n          set: function(value) {\n            return {\n              override: value + '!'\n            };\n          }\n        })\n      });\n\n      var instance = d3.select('#chart')\n        .chart('HasProperties', {\n          a: 123,\n          b: 'Howdy',\n          c: true\n        });\n\n      // Equivalent to:\n      // d3.select(...)\n      //   .chart('HasProperties')\n      //   .options({...});\n\n      console.log(instance.a()); // -> 123\n      console.log(instance.b()); // -> Howdy!\n      console.log(instance.options().c); // -> true\n      ```\n      @property options\n      @type Object\n    */\n    options: property({\n      default_value: {},\n      set: function(options, previous) {\n        // Clear all unset options, except for data and options\n        if (previous) {\n          var unset = difference(Object.keys(previous), Object.keys(options));\n          unset.forEach(function(key) {\n            if (key != 'data' && key != 'options' && isProperty(this, key))\n              this[key](undefined);\n          }, this);\n        }\n\n        objectEach(options, function setFromOptions(value, key) {\n          if (isProperty(this, key))\n            this[key](value);\n        }, this);\n\n        function isProperty(chart, key) {\n          return chart[key] && chart[key].is_property && chart[key].set_from_options;\n        }\n      }\n    }),\n\n    /**\n      Get width of `this.base`.\n      (Does not include `set` for setting width of `this.base`)\n\n      @method width\n      @return {Number}\n    */\n    width: function width() {\n      return dimensions(this.base).width;\n    },\n\n    /**\n      Get height of `this.base`.\n      (Does not include `set` for setting height of `this.base`)\n\n      @method height\n      @return {Number}\n    */\n    height: function height() {\n      return dimensions(this.base).height;\n    }\n  });\n\n  Base.extend = function(proto_props, static_props) {\n    // name may be first parameter for d3.chart usage\n    var name;\n    if (isString(proto_props)) {\n      name = proto_props;\n      proto_props = static_props;\n      static_props = arguments[2];\n    }\n\n    var Parent = this;\n    var Child;\n\n    if (proto_props && proto_props.hasOwnProperty('constructor')) {\n      Child = proto_props.constructor;\n\n      // inherits sets constructor, remove from proto_props\n      proto_props = extend({}, proto_props);\n      delete proto_props.constructor;\n    }\n    else {\n      Child = function() { return Parent.apply(this, arguments); };\n    }\n\n    inherits(Child, Parent);\n    if (static_props)\n      extend(Child, static_props);\n    if (proto_props)\n      extend(Child.prototype, proto_props);\n\n    // If name is given, register with d3.chart\n    if (name)\n      Base__Chart[name] = Child;\n\n    return Child;\n  };\n\n  // Export to d3.chart\n  Base__Chart.Base = Base;\n\n  /**\n    Common base for creating charts.\n    Standard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\n\n    ### Extending\n\n    To take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\n    and automatically setting properties from `options`, use `d3.compose.helpers.di`\n    and `d3.compose.helpers.property` when creating your chart.\n\n    @example\n    ```js\n    var helpers = d3.compose.helpers;\n\n    d3.chart('Chart').extend('Pie', {\n      initialize: function() {\n        // same as d3.chart\n      },\n      transform: function(data) {\n        // same as d3.chart\n      },\n\n      color: helpers.di(function(chart, d, i) {\n        // \"di\" function with parent chart injected (\"this\" = element)\n      }),\n\n      centered: helpers.property({\n        default_value: true\n        // can be automatically set from options object\n      })\n    });\n    ```\n    @class Chart\n    @extends Base\n  */\n  var src_Chart__Chart = Base.extend({}, {\n    /**\n      Default z-index for chart\n      (Components are 50 by default, so Chart = 100 is above component by default)\n\n      @example\n      ```js\n      d3.chart('Chart').extend('BelowComponentLayers', {\n        // ...\n      }, {\n        z_index: 40\n      });\n      ```\n      @attribute z_index\n      @static\n      @type Number\n      @default 100\n    */\n    z_index: 100,\n    layer_type: 'chart'\n  });\n\n  d3.chart().Chart = src_Chart__Chart;\n  var src_Chart = src_Chart__Chart;\n\n  /**\n    Common base for creating components that includes helpers for positioning and layout.\n\n    ### Extending\n\n    `d3.chart('Component')` contains intelligent defaults and there are no required overrides.\n    Create a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n    - To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n    - To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`\n\n    @example\n    ```js\n    d3.chart('Component').extend('Key', {\n      initialize: function() {\n        this.layer('Key', this.base, {\n          dataBind: function(data) {\n            return this.selectAll('text')\n              .data(data);\n          },\n          insert: function() {\n            return this.append('text');\n          },\n          events: {\n            merge: function() {\n              this.text(this.chart().keyText)\n            }\n          }\n        })\n      },\n\n      keyText: helpers.di(function(chart, d, i) {\n        return d.abbr + ' = ' + d.value;\n      })\n    });\n    ```\n    @class Component\n    @extends Base\n  */\n  var Component = Base.extend({\n    /**\n      Component's position relative to chart\n      (top, right, bottom, left)\n\n      @property position\n      @type String\n      @default 'top'\n    */\n    position: property({\n      default_value: 'top',\n      validate: function(value) {\n        return contains(['top', 'right', 'bottom', 'left'], value);\n      }\n    }),\n\n    /**\n      Get/set the width of the component (in pixels)\n      (used in layout calculations)\n\n      @property width\n      @type Number\n      @default (actual width)\n    */\n    width: property({\n      default_value: function() {\n        return dimensions(this.base).width;\n      }\n    }),\n\n    /**\n      Get/set the height of the component (in pixels)\n      (used in layout calculations)\n\n      @property height\n      @type Number\n      @default (actual height)\n    */\n    height: property({\n      default_value: function() {\n        return dimensions(this.base).height;\n      }\n    }),\n\n    /**\n      Margins (in pixels) around component\n\n      @property margins\n      @type Object\n      @default {top: 0, right: 0, bottom: 0, left: 0}\n    */\n    margins: property({\n      set: function(values) {\n        return {\n          override: getMargins(values)\n        };\n      },\n      default_value: getMargins()\n    }),\n\n    /**\n      Center the component vertically/horizontally (depending on position)\n\n      @property centered\n      @type Boolean\n      @default false\n    */\n    centered: property({\n      default_value: false\n    }),\n\n    /**\n      Skip component during layout calculations and positioning\n      (override in prototype of extension)\n\n      @example\n      ```js\n      d3.chart('Component').extend('NotLaidOut', {\n        skip_layout: true\n      });\n      ```\n      @attribute skip_layout\n      @type Boolean\n      @default false\n    */\n    skip_layout: false,\n\n    /**\n      Perform any layout preparation required before getLayout (default is draw)\n      (override in prototype of extension)\n\n      Note: By default, components are double-drawn;\n      for every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\n      This can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.\n\n      @example\n      ```js\n      d3.chart('Component').extend('Custom', {\n        prepareLayout: function(data) {\n          // default: this.draw(data);\n          // so that getLayout has real dimensions\n\n          // -> custom preparation (if necessary)\n        }\n      })\n      ```\n      @method prepareLayout\n      @param {Any} data\n    */\n    prepareLayout: function(data) {\n      this.draw(data);\n    },\n\n    /**\n      Get layout details for use when laying out component\n      (override in prototype of extension)\n\n      @example\n      ```js\n      d3.chart('Component').extend('Custom', {\n        getLayout: function(data) {\n          var calculated_width, calculated_height;\n\n          // Perform custom calculations...\n\n          // Must return position, width, and height\n          return {\n            position: this.position(),\n            width: calculated_width,\n            height: calculated_height\n          };\n        }\n      });\n      ```\n      @method getLayout\n      @param {Any} data\n      @return {Object} position, width, and height for layout\n    */\n    getLayout: function(data) {\n      this.prepareLayout(data);\n\n      var margins = this.margins();\n      return {\n        position: this.position(),\n        width: this.width() + margins.left + margins.right,\n        height: this.height() + margins.top + margins.bottom\n      };\n    },\n\n    /**\n      Set layout of underlying base\n      (override in prototype of extension)\n\n      @example\n      ```js\n      d3.chart('Component').extend('Custom', {\n        setLayout: function(x, y, options) {\n          // Set layout of this.base...\n          // (the following is the default implementation)\n          var margins = this.margins();\n\n          // (handle this.centered())\n\n          this.base\n            .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n          this.height(options && options.height);\n          this.width(options && options.width);\n        }\n      });\n      ```\n      @method setLayout\n      @param {Number} x position of base top-left\n      @param {Number} y position of base top-left\n      @param {Object} options\n        @param {Object} [options.height] height of component in layout\n        @param {Object} [options.width] width of component in layout\n    */\n    setLayout: function(x, y, options) {\n      var margins = this.margins();\n\n      if (this.centered()) {\n        var actual_dimensions = dimensions(this.base);\n        if ('height' in options)\n          y += (options.height - actual_dimensions.height) / 2;\n        else\n          y += margins.top;\n\n        if ('width' in options)\n          x += (options.width - actual_dimensions.width) / 2;\n        else\n          x += margins.left;\n      }\n      else {\n        x += margins.left;\n        y += margins.top;\n      }\n\n      this.base.attr('transform', translate(x, y));\n      this.height(options && options.height);\n      this.width(options && options.width);\n    }\n  }, {\n    /**\n      Default z-index for component\n      (Charts are 100 by default, so Component = 50 is below chart by default)\n\n      @example\n      ```js\n      d3.chart('Component').extend('AboveChartLayers', {\n        // ...\n      }, {\n        z_index: 150\n      });\n      ```\n      @attribute z_index\n      @static\n      @type Number\n      @default 50\n    */\n    z_index: 50,\n\n    /**\n      Set to `'chart'` to use chart layer for component.\n      (e.g. Axis uses chart layer to position with charts, but includes layout for ticks)\n\n      @example\n      ```js\n      d3.chart('Component').extend('ChartComponent', {\n        // ...\n      }, {\n        layer_type: 'chart'\n      });\n      ```\n      @attribute layer_type\n      @static\n      @type String\n      @default 'component'\n    */\n    layer_type: 'component'\n  });\n\n  d3.chart().Component = Component;\n\n  /**\n    Common base for creating overlays that includes helpers for positioning and show/hide.\n\n    ### Extending\n\n    Create an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\n\n    - To adjust positioning, override `position`\n    - To adjust show/hide behavior, override `show`/`hide`\n\n    @example\n    ```js\n    d3.chart('Overlay').extend('ClosestPoints', {\n      // TODO\n    });\n    ```\n    @class Overlay\n    @extends Component\n  */\n  var Overlay = Component.extend({\n    initialize: function(options) {\n      Component.prototype.initialize.call(this, options);\n      this.base.attr('style', this.style());\n    },\n    skip_layout: true,\n\n    /**\n      Overlay's top-left x-position in px from left\n\n      @property x\n      @type Number\n      @default 0\n    */\n    x: property({\n      default_value: 0\n    }),\n\n    /**\n      Overlay's top-left y-position in px from top\n\n      @property y\n      @type Number\n      @default 0\n    */\n    y: property({\n      default_value: 0\n    }),\n\n    /**\n      Whether overlay is currently hidden\n\n      @property hidden\n      @type Boolean\n      @default true\n    */\n    hidden: property({\n      default_value: true\n    }),\n\n    /**\n      Overlays base styling\n      (default includes position and hidden)\n\n      @property style\n      @type String\n      @default set from x, y, and hidden\n    */\n    style: property({\n      default_value: function() {\n        var transform = translate(this.x() + 'px', this.y() + 'px');\n        var styles = {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          '-webkit-transform': transform,\n          '-ms-transform': transform,\n          transform: transform\n        };\n\n        if (this.hidden())\n          styles.display = 'none';\n\n        return src_helpers__style(styles);\n      }\n    }),\n\n    /**\n      Position overlay layer at given x,y coordinates\n\n      @example\n      ```js\n      // Absolute, x: 100, y: 50\n      overlay.position(100, 50);\n      overlay.position({x: 100, y: 50});\n\n      // Relative-to-chart, x: 50, y: 40\n      overlay.position({chart: {x: 50, y: 40}});\n\n      // Relative-to-container, x: 75, y: 50\n      overlay.position({container: {x: 75, y: 50}});\n      ```\n      @method position\n      @param {Object|Number} position {x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left\n      @param {Number} [y] in px from top\n    */\n    // TODO This conflicts with component.position(), might need a rename\n    position: function(position, y) {\n      if (arguments.length > 1) {\n        position = {\n          x: position,\n          y: y\n        };\n      }\n      else {\n        if ('container' in position) {\n          position = this.getAbsolutePosition(position.container);\n        }\n        else if ('chart' in position) {\n          if (this.container) {\n            var chart = this.container.chartPosition();\n            position = this.getAbsolutePosition({\n              x: position.chart.x + chart.left,\n              y: position.chart.y + chart.top\n            });\n          }\n          else {\n            position = this.getAbsolutePosition(position.chart);\n          }\n        }\n      }\n\n      this.x(position.x).y(position.y);\n      this.base.attr('style', this.style());\n    },\n\n    /**\n      Show overlay (with `display: block`)\n\n      @method show\n    */\n    show: function() {\n      this.hidden(false);\n      this.base.attr('style', this.style());\n    },\n\n    /**\n      Hide overlay (with `display: none`)\n\n      @method hide\n    */\n    hide: function() {\n      this.hidden(true);\n      this.base.attr('style', this.style());\n    },\n\n    /**\n      Get absolute position from container position\n      (needed since container position uses viewBox and needs to be scaled to absolute position)\n\n      @method getAbsolutePosition\n      @param {Object} container_position ({x, y})\n      @return {Object} absolute {x, y} relative to container div\n    */\n    getAbsolutePosition: function(container_position) {\n      var container = this.container && this.container.container;\n\n      if (container && this.container.responsive()) {\n        var container_dimensions = dimensions(container);\n        var chart_width = this.container.width();\n        var chart_height = this.container.height();\n        var width_ratio = container_dimensions.width / chart_width;\n        var height_ratio = container_dimensions.height / chart_height;\n\n        return {\n          x: width_ratio * container_position.x,\n          y: height_ratio * container_position.y\n        };\n      }\n      else {\n        // Not attached so can't get actual dimensions\n        // fallback to container position\n        return container_position;\n      }\n    }\n  }, {\n    layer_type: 'overlay'\n  });\n\n  d3.chart().Overlay = Overlay;\n\n  /*\n    Extract layout from the given options\n\n    @param {Array} options\n    @return {Object} {data, items, layout}\n  */\n  function extractLayout(options) {\n    if (!options)\n      return;\n\n    var data = {\n      _charts: {},\n      _components: {}\n    };\n    var items = {};\n    var layout = [];\n    var charts = [];\n    var components = [];\n\n    // TEMP Idenfify charts from layered,\n    // eventually no distinction between charts and components\n    var found = {\n      row: false,\n      charts: false\n    };\n\n    // Components are added from inside-out\n    // so for position: top, position: left, use unshift\n    options.forEach(function(row, row_index) {\n      var row_components = [];\n\n      if (!Array.isArray(row))\n        row = [row];\n      if (row.length > 1)\n        found.row = true;\n\n      var row_layout = row.map(function(item, col_index) {\n        if (!item)\n          return;\n\n        if (item._layered) {\n          // Charts\n          found.charts = found.row = true;\n          var chart_ids = [];\n\n          item.items.forEach(function(chart, chart_index) {\n            if (!chart)\n              return;\n\n            chart = defaults({}, chart, {id: getId(row_index, col_index, chart_index)});\n\n            chart_ids.push(chart.id);\n            charts.push(chart);\n            items[chart.id] = chart;\n          });\n\n          return chart_ids;\n        }\n\n        var component = prepareComponent(item, row_index, col_index);\n        items[component.id] = component;\n\n        if (row.length > 1) {\n          if (!found.charts) {\n            // Left\n            setPosition(component, 'left');\n            row_components.unshift(component);\n          }\n          else {\n            // Right\n            setPosition(component, 'right');\n            row_components.push(component);\n          }\n        }\n        else {\n          if (!found.row) {\n            // Top\n            setPosition(component, 'top');\n            components.unshift(component);\n          }\n          else {\n            // Bottom\n            setPosition(component, 'bottom');\n            components.push(component);\n          }\n        }\n\n        return component.id;\n      });\n\n      if (row_components.length)\n        components = components.concat(row_components);\n\n      layout.push(row_layout);\n    });\n\n    charts.forEach(extractData('_charts'));\n    components.forEach(extractData('_components'));\n\n    return {\n      data: data,\n      items: items,\n      layout: layout,\n\n      charts: charts,\n      components: components\n    };\n\n    function prepareComponent(component, row_index, col_index) {\n      return defaults({}, component, {id: getId(row_index, col_index)});\n    }\n    function setPosition(component, position) {\n      if (component && isFunction(component.position))\n        component.position(position);\n      else\n        component.position = position;\n    }\n    function getId(row_index, col_index, layered_index) {\n      var id = 'item-' + (row_index + 1) + '-' + (col_index + 1);\n      if (layered_index != null)\n        id += '-' + (layered_index + 1);\n\n      return id;\n    }\n\n    function extractData(type) {\n      return function(item) {\n        if (item.data && !isFunction(item.data)) {\n          data[type][item.id] = item.data;\n          data[item.id] = item.data;\n          delete item.data;\n        }\n      };\n    }\n  }\n\n  /*\n    Calculate component and chart coordinates for given layout\n  */\n  function calculateLayout(components, data, demux) {\n    var overall_layout = {top: [], right: [], bottom: [], left: []};\n    components.forEach(function(component) {\n      if (component.skip_layout || !component.getLayout)\n        return;\n\n      var layout = component.getLayout(demux(component.id, data));\n      var position = layout && layout.position;\n\n      if (!contains(['top', 'right', 'bottom', 'left'], position))\n        return;\n\n      overall_layout[position].push({\n        offset: position == 'top' || position == 'bottom' ? layout.height : layout.width,\n        component: component\n      });\n    });\n\n    return overall_layout;\n  }\n\n  /*\n    Apply calculated layout to charts and components\n  */\n  function applyLayout(layout, chart_position, width, height) {\n    layout.top.reduce(function(previous, part) {\n      var y = previous - part.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, chart_position.top);\n\n    layout.right.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var x = previous + previousPart.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, width - chart_position.right);\n\n    layout.bottom.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var y = previous + previousPart.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, height - chart_position.bottom);\n\n    layout.left.reduce(function(previous, part) {\n      var x = previous - part.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, chart_position.left);\n\n    function setLayout(component, x, y, options) {\n      if (component && isFunction(component.setLayout))\n        component.setLayout(x, y, options);\n    }\n  }\n\n  var default_compose_margins = {top: 10, right: 10, bottom: 10, left: 10};\n\n  /**\n    Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\n    Using the `options` property, charts and components can be bound to data and customized to create dynamic charts.\n\n    @example\n    ```html\n    <div id=\"#chart\"></div>\n    ```\n    ```js\n    var chart = d3.select('#chart').chart('Compose', function(data) {\n      // Process data...\n\n      // Create shared scales\n      var scales = {\n        x: {data: data.input, key: 'x', adjacent: true},\n        y: {data: data.input, key: 'y'},\n        y2: {data: data.output, key: 'y'}\n      };\n\n      // Setup charts and components\n      var charts = [\n        d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\n        d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\n      ];\n\n      var title = d3c.title('d3.compose');\n      var xAxis = d3c.axis('xAxis', {scale: scales.x});\n      var yAxis = d3c.axis('yAxis', {scale: scales.y});\n      var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\n\n      // Layout charts and components\n      return [\n        title,\n        [yAxis, d3c.layered(charts), y2Axis],\n        xAxis\n      ];;\n    });\n\n    chart.draw({input: [...], output: [...]});\n    ```\n    @class Compose\n    @extends Base\n  */\n  var Compose = Base.extend({\n    initialize: function(options) {\n      Base.prototype.initialize.call(this, options);\n\n      // Responsive svg based on the following approach (embedded + padding hack)\n      // http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/\n      // (not enabled if selection is svg)\n      if (this.base.node().tagName != 'svg') {\n        this.container = this.base.append('div')\n          .attr('class', 'chart-compose-container');\n\n        this.base = this.container.append('svg')\n          .attr('xlmns', 'http://www.w3.org/2000/svg')\n          .attr('version', '1.1')\n          .attr('class', 'chart-compose');\n      }\n      else {\n        this.base.classed('chart-compose', true);\n      }\n\n      this.attachHoverListeners();\n    },\n\n    transform: function(data) {\n      // Save raw data for redraw\n      this.rawData(data);\n      return Base.prototype.transform.call(this, data);\n    },\n\n    /**\n      Get/set the options `object/function` for the chart that takes `data` and\n      returns `[...layout]` for composing child charts and components.\n\n      @example\n      ```js\n      // get\n      chart.options();\n\n      // set (static)\n      chart.options([\n        // ...\n      ]);\n\n      // set (dynamic, takes data and returns options)\n      chart.options(function(data) {\n        // process data...\n\n        return [\n          // ...\n        ];\n      });\n\n      // Set directly from d3.chart creation\n      d3.select('#chart')\n        .chart('Compose', function(data) {\n          // ...\n        });\n      ```\n      @property options\n      @type Function|Object\n    */\n    options: property({\n      default_value: function() { return function() {}; },\n      set: function(options) {\n        // If options is plain object,\n        // return from generic options function\n        if (!isFunction(options)) {\n          return {\n            override: function() {\n              return options;\n            }\n          };\n        }\n      }\n    }),\n\n    // Store raw data for container before it has been transformed\n    rawData: property(),\n\n    /**\n      Margins between edge of container and components/chart\n\n      @example\n      ```js\n      chart.margins({top: 10, right: 20, bottom: 10, left: 20});\n      ```\n      @property margins\n      @type Object {top, right, bottom, left}\n      @default {top: 10, right: 10, bottom: 10, left: 10}\n    */\n    margins: property({\n      default_value: default_compose_margins,\n      set: function(values) {\n        return {\n          override: getMargins(values, default_compose_margins)\n        };\n      }\n    }),\n\n    // Chart position\n    chartPosition: property({\n      default_value: {top: 0, right: 0, bottom: 0, left: 0},\n      set: function(values) {\n        return {\n          override: defaults({}, values, {top: 0, right: 0, bottom: 0, left: 0})\n        };\n      },\n      get: function(values) {\n        values.width = this._width() - values.right - values.left;\n        values.height = this._height() - values.bottom - values.top;\n\n        return values;\n      }\n    }),\n\n    /**\n      Get/set overall width of chart\n\n      @property width\n      @type Number\n    */\n    width: property({\n      default_value: null\n    }),\n\n    /**\n      Get/set overall height of chart\n\n      @property height\n      @type Number\n    */\n    height: property({\n      default_value: null\n    }),\n\n    _width: function() {\n      var width = this.width();\n      return width != null ? width : Base.prototype.width.call(this);\n    },\n    _height: function() {\n      var height = this.height();\n      return height != null ? height : Base.prototype.height.call(this);\n    },\n\n    /**\n      Enable responsive container + viewBox so that chart scales to fill width\n      (only works if selection is not an svg)\n\n      @property responsive\n      @type Boolean\n      @default true\n    */\n    responsive: property({\n      default_value: true\n    }),\n\n    // Set svg viewBox attribute\n    viewBox: property({\n      default_value: function() {\n        if (this.responsive() && this.width() && this.height())\n          return '0 0 ' + this.width() + ' ' + this.height();\n        else\n          return null;\n      }\n    }),\n\n    // Set svg preserveAspectRatio attribute\n    preserveAspectRatio: property({\n      default_value: function() {\n        if (this.responsive())\n          return 'xMidYMid meet';\n        else\n          return null;\n      }\n    }),\n\n    // Set container style\n    containerStyle: property({\n      default_value: function() {\n        if (this.responsive()) {\n          var aspect_ratio = 1;\n          if (this.width() && this.height())\n            aspect_ratio = this.height() / this.width();\n\n          return src_helpers__style({\n            width: '100%',\n            height: 0,\n            'padding-top': (aspect_ratio * 100) + '%',\n            position: 'relative'\n          });\n        }\n        else {\n          return src_helpers__style({position: 'relative'});\n        }\n      }\n    }),\n\n    // Set base style\n    baseStyle: property({\n      default_value: function() {\n        if (this.responsive() && this.container) {\n          return src_helpers__style({\n            position: 'absolute',\n            top: 0,\n            left: 0\n          });\n        }\n        else {\n          return null;\n        }\n      }\n    }),\n\n    /**\n      Set charts from options or get chart instances.\n      Each chart should use a unique key so that updates are passed to the existing chart\n      (otherwise they are recreated on update).\n      The `type` option must be a registered `d3.chart` and all other options are passed to the chart.\n\n      @example\n      ```js\n      chart.charts([\n        {id: 'input', type: 'Bars'}, // options to pass to Bars chart\n        {id: 'output', type: 'Lines'} // options to pass to Lines chart\n      ]);\n      ```\n      @property charts\n      @type Array\n    */\n    charts: property({\n      set: function(chart_options, charts) {\n        // Store actual charts rather than options\n        return {\n          override: this._attachItems(chart_options, charts, this)\n        };\n      },\n      default_value: []\n    }),\n\n    /**\n      Set components from options or get components instances.\n      Each component should use a unique key so that updates are passed to the existing chart\n      (otherwise they are recreated on update).\n      The `type` option must be a registered `d3.chart` and all other options are passed to the component.\n\n      @example\n      ```js\n      chart.components([\n        {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\n        {id: 'title', type: 'Title'} // options to pass to Title component\n      ])\n      ```\n      @property components\n      @type Array\n    */\n    components: property({\n      set: function(component_options, components) {\n        // Store actual components rather than options\n        return {\n          override: this._attachItems(component_options, components, this)\n        };\n      },\n      default_value: []\n    }),\n\n    /**\n      Delay start of transition by specified milliseconds.\n      (applied to all charts and components as default)\n\n      @property delay\n      @type Number|Function\n      @default d3 default: 0\n    */\n    delay: property(),\n\n    /**\n      Transition duration in milliseconds.\n      (applied to all charts and components as default)\n\n      @property duration\n      @type Number|Function\n      @default d3 default: 250ms\n    */\n    duration: property(),\n\n    /**\n      Transition ease function.\n      (applied to all charts and components as default)\n\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n      - Note: arguments to pass to `d3.ease` are not supported\n\n      @property ease\n      @type String|Function\n      @default d3 default: 'cubic-in-out'\n    */\n    ease: property(),\n\n    /**\n      Draw chart with given data\n\n      @example\n      ```js\n      var chart = d3.select('#chart')\n        .chart('Compose', function(data) {\n          // ...\n        });\n\n      chart.draw([1, 2, 3]);\n\n      chart.draw({values: [1, 2, 3]});\n\n      chart.draw([\n        {values: [1, 2, 3]},\n        {values: [4, 5, 6]}\n      ]);\n      ```\n      @method draw\n      @param {Any} data\n    */\n    draw: function(data) {\n      var config = this._prepareConfig(this.options(), data);\n      if (!config)\n        config = {data: {_charts: {}, _components: {}}, layout: [], charts: [], components: []};\n\n      // Set charts and components from config\n      this.charts(config.charts);\n      this.components(config.components);\n\n      // Add config data\n      data = {\n        original: data,\n        config: config.data\n      };\n      this.data(data);\n\n      this._setDimensions();\n\n      // Layout components\n      this.layout(config.layout, data);\n\n      // Full draw now that everything has been laid out\n      d3.chart().prototype.draw.call(this, data);\n    },\n\n    /**\n      Redraw chart with current data\n\n      @method redraw\n    */\n    redraw: function() {\n      if (this.rawData())\n        this.draw(this.rawData().original);\n    },\n\n    demux: function(name, data) {\n      if (!data || !data.config || !data.original)\n        return data;\n\n      if (findById(this.charts(), name) && data.config._charts[name])\n        return data.config._charts[name];\n      else if (findById(this.components(), name) && data.config._components[name])\n        return data.config._components[name];\n      else\n        return data.original;\n    },\n\n    // Create chart layer (for laying out charts)\n    createChartLayer: function(options) {\n      return this.base.append('g')\n        .attr('class', 'chart-layer')\n        .attr('data-zIndex', options && options.z_index);\n    },\n\n    // Create component layer\n    createComponentLayer: function(options) {\n      return this.base.append('g')\n        .attr('class', 'chart-component-layer')\n        .attr('data-zIndex', options && options.z_index);\n    },\n\n    // Create overlay layer\n    createOverlayLayer: function() {\n      if (!this.container)\n        throw new Error('Cannot create overlay layer if original selection \"d3.select(...).chart(\\'Compose\\')\" is an svg. Use a div instead for responsive and overlay support.');\n\n      return this.container.append('div')\n        .attr('class', 'chart-overlay-layer');\n    },\n\n    // Layout components and charts for given data\n    layout: function(layout, data) {\n      // 1. Place chart layers\n      this._positionChartLayers();\n\n      // 2. Extract layout from components\n      layout = this._extractLayout(data);\n\n      // 3. Set chart position from layout\n      var chart_position = extend({}, this.margins());\n      objectEach(layout, function(parts, key) {\n        parts.forEach(function(part) {\n          chart_position[key] += part.offset || 0;\n        });\n      });\n      this.chartPosition(chart_position);\n\n      // 4. Position layers with layout\n      this.positionLayers(layout);\n    },\n\n    attachHoverListeners: function() {\n      // For responsive, listen on container div and calculate enter/exit for base from bounding rectangle\n      // For non-responsive, bounding rectangle is container so calculations still apply\n\n      var trigger = this.trigger.bind(this);\n      var chartPosition = this.chartPosition.bind(this);\n      var container = this.container || this.base;\n      var base = this.base.node();\n      var chart_position, bounds, was_inside;\n\n      container.on('mouseenter', function() {\n        // Calculate chart position and bounds on enter and cache during move\n        chart_position = chartPosition();\n        bounds = getBounds();\n\n        was_inside = inside(bounds);\n        if (was_inside)\n          enter();\n      });\n      container.on('mousemove', function() {\n        // Mousemove may fire before mouseenter in IE\n        if (!chart_position || !bounds) {\n          chart_position = chartPosition();\n          bounds = getBounds();\n        }\n\n        var is_inside = inside(bounds);\n        if (was_inside && is_inside)\n          move();\n        else if (was_inside)\n          leave();\n        else if (is_inside)\n          enter();\n\n        was_inside = is_inside;\n      });\n      container.on('mouseleave', function() {\n        if (was_inside) {\n          was_inside = false;\n          leave();\n        }\n      });\n\n      function inside() {\n        var mouse = d3.mouse(document.documentElement);\n        return mouse[0] >= bounds.left && mouse[0] <= bounds.right && mouse[1] >= bounds.top && mouse[1] <= bounds.bottom;\n      }\n      function enter() {\n        trigger('mouseenter', translateToXY(d3.mouse(base)));\n      }\n      function move() {\n        trigger('mousemove', translateToXY(d3.mouse(base)));\n      }\n      function leave() {\n        trigger('mouseleave');\n      }\n\n      function translateToXY(coordinates) {\n        var x = coordinates[0];\n        var y = coordinates[1];\n        var chart_x = x - chart_position.left;\n        var chart_y = y - chart_position.top;\n\n        // Set at chart bounds if outside of chart\n        if (x > (chart_position.left + chart_position.width))\n          chart_x = chart_position.width;\n        else if (x < chart_position.left)\n          chart_x = 0;\n\n        if (y > (chart_position.top + chart_position.height))\n          chart_y = chart_position.height;\n        else if (y < chart_position.top)\n          chart_y = 0;\n\n        return {\n          container: {x: x, y: y},\n          chart: {x: chart_x, y: chart_y}\n        };\n      }\n\n      function getBounds() {\n        var scroll_y = 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;\n\n        bounds = extend({}, base.getBoundingClientRect());\n        bounds.top += scroll_y;\n        bounds.bottom += scroll_y;\n\n        return bounds;\n      }\n    },\n\n    // Attach chart/component child item with id\n    attach: function(id, item) {\n      item.id = id;\n      item.base.attr('data-id', id);\n      item.container = this;\n\n      Base.prototype.attach.call(this, id, item);\n\n      if (item && isFunction(item.trigger))\n        item.trigger('attach');\n    },\n\n    // Detach chart/component child item by id\n    detach: function(id, item) {\n      item.base.remove();\n\n      delete this._attached[id];\n\n      if (item && isFunction(item.trigger))\n        item.trigger('detach');\n    },\n\n    // Position chart and component layers\n    positionLayers: function(layout) {\n      this._positionChartLayers();\n      this._positionComponents(layout);\n      this._positionByZIndex();\n    },\n\n    //\n    // Internal\n    //\n\n    _setDimensions: function() {\n      // Set container and svg dimensions\n      // (if original selection is svg, no container and skip responsiveness)\n      if (this.container) {\n        this.container\n          .attr('style', this.containerStyle());\n      }\n\n      this.base\n        .attr('viewBox', this.viewBox())\n        .attr('preserveAspectRatio', this.preserveAspectRatio())\n        .attr('style', this.baseStyle())\n        .attr('width', this.responsive() ? null : this.width())\n        .attr('height', this.responsive() ? null : this.height());\n    },\n\n    _attachItems: function(items, container, context) {\n      items = items || [];\n      container = container || [];\n\n      // Remove charts that are no longer needed\n      var remove_ids = difference(pluck(container, 'id'), pluck(items, 'id'));\n      remove_ids.forEach(function(remove_id) {\n        context.detach(remove_id, findById(container, remove_id));\n      });\n\n      // Create or update charts\n      return items.map(function(options) {\n        // TODO May not have id, might need to auto-generate\n        // (might be during another step)\n        var id = options.id;\n        var item = findById(container, id);\n\n        if (options instanceof d3.chart()) {\n          // If chart instance, replace with instance\n          if (item)\n            context.detach(id, item);\n\n          context.attach(id, options);\n          return options;\n        }\n        else {\n          // TEMP Changing position has nasty side effects, disable for now\n          var changed_position = item && !(item instanceof Overlay) && item.position && options.position && item.position() != options.position;\n\n          if (item && (item.type != options.type || changed_position)) {\n            // If chart type has changed, detach and re-create\n            context.detach(id, item);\n            item = undefined;\n          }\n\n          if (!item) {\n            var Item = d3.chart(options.type);\n\n            if (!Item)\n              throw new Error('No registered d3.chart found for ' + options.type);\n\n            var layer_options = {z_index: Item.z_index || 0};\n            var createLayer = {\n              'chart': 'createChartLayer',\n              'component': 'createComponentLayer',\n              'overlay': 'createOverlayLayer'\n            }[Item.layer_type];\n\n            if (!createLayer)\n              throw new Error('Unrecognized layer type \"' + Item.layer_type + '\" for ' + options.type);\n\n            var base = context[createLayer](layer_options);\n\n            item = new Item(base, options);\n            item.type = options.type;\n\n            context.attach(id, item);\n          }\n          else {\n            item.options(options);\n          }\n\n          return item;\n        }\n      });\n    },\n\n    _prepareConfig: function(options, data) {\n      return extractLayout(options(data));\n    },\n\n    _positionChartLayers: function() {\n      var position = this.chartPosition();\n      this.base.selectAll('.chart-layer')\n        .attr('transform', translate(position.left, position.top))\n        .attr('width', position.width)\n        .attr('height', position.height);\n    },\n\n    _positionComponents: function(layout) {\n      var chart_position = this.chartPosition();\n      var width = this._width();\n      var height = this._height();\n\n      applyLayout(layout, chart_position, width, height);\n    },\n\n    _positionByZIndex: function() {\n      var layers = this.base.selectAll('.chart-layer, .chart-component-layer')[0];\n\n      // Sort by z-index\n      function setZIndex(layer) {\n        return {\n          layer: layer,\n          zIndex: parseInt(d3.select(layer).attr('data-zIndex')) || 0\n        };\n      }\n      function sortZIndex(a, b) {\n        if (a.zIndex < b.zIndex)\n          return -1;\n        else if (a.zIndex > b.zIndex)\n          return 1;\n        else\n          return 0;\n      }\n      function getLayer(wrapped) {\n        return wrapped.layer;\n      }\n\n      layers = layers.map(setZIndex).sort(sortZIndex).map(getLayer);\n\n      // Move layers to z-index order\n      layers.forEach(function(layer) {\n        if (layer && layer.parentNode && layer.parentNode.appendChild)\n          layer.parentNode.appendChild(layer);\n      });\n    },\n\n    _extractLayout: function(data) {\n      return calculateLayout(this.components(), data, this.demux.bind(this));\n    }\n  });\n\n  // TODO Find better place for this\n  function layered(items) {\n    if (!Array.isArray(items))\n      items = Array.prototype.slice.call(arguments);\n\n    return {_layered: true, items: items};\n  }\n\n  function findById(items, id) {\n    return find(items, function(item) {\n      return item.id == id;\n    });\n  }\n\n  d3.chart().Compose = Compose;\n\n  /**\n    Mixin for handling series data\n\n    @class Series\n    @namespace mixins\n  */\n  var Series = {\n    /**\n      Get key for given series data\n\n      @method seriesKey\n      @param {Any} d Series object with `key`\n      @return {Any}\n    */\n    seriesKey: di(function(chart, d) {\n      return d.key;\n    }),\n\n    /**\n      Get values for given series data\n\n      @method seriesValues\n      @param {Any} d Series object with `values` array\n      @return {Array}\n    */\n    seriesValues: di(function(chart, d, i) {\n      // Store seriesIndex on series\n      d.seriesIndex = i;\n      return d.values;\n    }),\n\n    /**\n      Get class for given series data\n\n      @method seriesClass\n      @param {Any} d\n      @param {Number} i\n      @return {String}\n    */\n    seriesClass: di(function(chart, d, i) {\n      return 'chart-series chart-index-' + i + (d['class'] ? ' ' + d['class'] : '');\n    }),\n\n    /**\n      Get index for given data-point of series\n\n      @method seriesIndex\n      @param {Any} d\n      @param {Number} i\n    */\n    seriesIndex: di(function(chart, d, i) {\n      var series = chart.seriesData.call(this, d, i);\n      return series && series.seriesIndex || 0;\n    }),\n\n    /**\n      Get parent series data for given data-point\n\n      @method seriesData\n      @return {Any}\n    */\n    seriesData: di(function() {\n      return getParentData(this);\n    }),\n\n    /**\n      (di) Get style given series data or data-point\n      (Uses \"style\" object on `d`, if defined)\n\n      @method itemStyle\n      @param {Any} d\n      @param {Number} [i]\n      @param {Number} [j]\n      @return {String}\n    */\n    itemStyle: di(function(chart, d) {\n      return src_helpers__style(d.style) || null;\n    }),\n\n    /**\n      Get series count for chart\n\n      @method seriesCount\n      @return {Number}\n    */\n    seriesCount: function() {\n      var data = this.data();\n      return (data && isSeriesData(data)) ? data.length : 1;\n    },\n\n    /**\n      Extension of layer() that handles data-binding and layering for series data.\n\n      - Updates `dataBind` method to access underlying series values\n      - Creates group layer for each series in chart\n      - Should be used just like layer()\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n        initialize: function() {\n          this.seriesLayer('Circles', this.base, {\n            // Create group for each series on this.base\n            // and calls the following for each series item\n            // (entire layer is called twice: series-1 and series-2)\n\n            dataBind: function(data) {\n              // 1. data = [1, 2, 3]\n              // 2. data = [4, 5, 6]\n            },\n            insert: function() {\n              // Same as chart.layer\n              // (where \"this\" is series group layer)\n            },\n            events: {\n              // Same as chart.layer\n            }\n          });\n        }\n      }));\n\n      // ...\n\n      chart.draw([\n        {key: 'series-1', values: [1, 2, 3]},\n        {key: 'series-2', values: [4, 5, 6]}\n      ]);\n      ```\n      @method seriesLayer\n      @param {String} name\n      @param {Selection} selection\n      @param {Object} options (`dataBind` and `insert` required)\n      @return {d3.chart.layer}\n    */\n    seriesLayer: function(name, selection, options) {\n      if (options && options.dataBind) {\n        var dataBind = options.dataBind;\n\n        options.dataBind = function(data) {\n          var chart = this.chart();\n          var series = this.selectAll('g')\n            .data(data, chart.seriesKey);\n\n          series.enter()\n            .append('g');\n\n          series\n            .attr('class', chart.seriesClass)\n            .attr('style', chart.itemStyle);\n\n          // TODO Exit layer items then exit series layer\n          series.exit()\n            .remove();\n\n          series.chart = function() { return chart; };\n\n          return dataBind.call(series, chart.seriesValues);\n        };\n      }\n\n      return d3.chart().prototype.layer.call(this, name, selection, options);\n    },\n\n    // Ensure data is in series form\n    transform: function(data) {\n      return !isSeriesData(data) ? [{values: data}] : data;\n    }\n  };\n\n  /**\n    Mixin for handling XY data\n\n    @class XY\n    @namespace mixins\n  */\n  var XY = {\n    initialize: function() {\n      // Set scale ranges once chart is ready to be rendered\n      this.on('before:draw', this.setScales.bind(this));\n    },\n\n    transform: function(data) {\n      data = data || [];\n\n      // Transform series data from values to x,y\n      if (isSeriesData(data)) {\n        data = data.map(function(series) {\n          return extend({}, series, {\n            values: series.values.map(normalizeData)\n          });\n        });\n      }\n      else if (Array.isArray(data)) {\n        data = data.map(normalizeData);\n      }\n\n      return data;\n\n      function normalizeData(point, index) {\n        if (!isObject(point))\n          point = {x: index, y: point};\n        else if (!Array.isArray(point) && isUndefined(point.x))\n          point.x = index;\n\n        return point;\n      }\n    },\n\n    /**\n      Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)\n\n      @property xScale\n      @type Object|d3.scale\n    */\n    xScale: property({\n      set: function(value) {\n        var scale = createScale(value);\n        this.setXScaleRange(scale);\n\n        return {\n          override: scale\n        };\n      },\n      get: function(scale) {\n        if (!scale) {\n          scale = this.getDefaultXScale();\n          this.setXScaleRange(scale);\n        }\n\n        return scale;\n      }\n    }),\n\n    /**\n      Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)\n\n      @property xScale\n      @type Object|d3.scale\n    */\n    yScale: property({\n      set: function(value) {\n        var scale = createScale(value);\n        this.setYScaleRange(scale);\n\n        return {\n          override: scale\n        };\n      },\n      get: function(scale) {\n        if (!scale) {\n          scale = this.getDefaultYScale();\n          this.setYScaleRange(scale);\n        }\n\n        return scale;\n      }\n    }),\n\n    /**\n      Key on data object for x-value\n\n      @property xKey\n      @type String\n      @default 'x'\n    */\n    xKey: property({\n      default_value: 'x'\n    }),\n\n    /**\n      Key on data object for y-value\n\n      @property yKey\n      @type String\n      @default 'y'\n    */\n    yKey: property({\n      default_value: 'y'\n    }),\n\n    /**\n      Get scaled x-value for given data-point\n\n      @method x\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    x: di(function(chart, d, i) {\n      var value = chart.xValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.xScale()(value, series_index));\n    }),\n\n    /**\n      Get scaled y-value for given data-point\n\n      @method y\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    y: di(function(chart, d, i) {\n      var value = chart.yValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.yScale()(value, series_index));\n    }),\n\n    /**\n      Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.\n\n      @method key\n      @param {Any} d\n      @param {Number} i\n      @return {Any}\n    */\n    key: di(function(chart, d, i) {\n      return valueOrDefault(d.key, chart.xValue.call(this, d, i));\n    }),\n\n    /**\n      Get scaled `x = 0` value\n\n      @method x0\n      @return {Number}\n    */\n    x0: function() {\n      return parseFloat(this.xScale()(0));\n    },\n\n    /**\n      Get scaled `y = 0` value\n\n      @method x0\n      @return {Number}\n    */\n    y0: function() {\n      return parseFloat(this.yScale()(0));\n    },\n\n    /**\n      Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.\n\n      @example\n      ```js\n      xValue({x: 10, y: 20}); // -> 10\n      xValue([10, 20]); // -> 10\n      ```\n      @method xValue\n      @param {Any} d\n      @return {Any}\n    */\n    xValue: di(function(chart, d) {\n      var key = chart.xKey();\n      if (d)\n        return key in d ? d[key] : d[0];\n    }),\n\n    /**\n      Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.\n\n      @example\n      ```js\n      yValue({x: 10, y: 20}); // -> 20\n      yValue([10, 20]); // -> 20\n      ```\n      @method yValue\n      @param {Any} d\n      @return {Any}\n    */\n    yValue: di(function(chart, d) {\n      var key = chart.yKey();\n      if (d)\n        return key in d ? d[key] : d[1];\n    }),\n\n    /**\n      Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)\n\n      @method setScales\n    */\n    setScales: function() {\n      this.setXScaleRange(this.xScale());\n      this.setYScaleRange(this.yScale());\n    },\n\n    /**\n      Set range (0, width) for given x-scale\n\n      @method setXScaleRange\n      @param {d3.scale} x_scale\n    */\n    setXScaleRange: function(x_scale) {\n      x_scale.range([0, this.width()]);\n    },\n\n    /**\n      Set range(height, 0) for given y-scale\n\n      @method setYScaleRange\n      @param {d3.scale} y_scale\n    */\n    setYScaleRange: function(y_scale) {\n      y_scale.range([this.height(), 0]);\n    },\n\n    /**\n      Get default x-scale: `{data: this.data(), key: 'x'}`\n\n      @method getDefaultXScale\n      @return {d3.scale}\n    */\n    getDefaultXScale: function() {\n      return createScale({\n        data: this.data(),\n        key: 'x'\n      });\n    },\n\n    /**\n      Get default y-scale: `{data: this.data(), key: 'y'}`\n\n      @method getDefaultYScale\n      @return {d3.scale}\n    */\n    getDefaultYScale: function() {\n      return createScale({\n        data: this.data(),\n        key: 'y'\n      });\n    }\n  };\n\n  /**\n    Mixin for charts of centered key,value data (x: index, y: value, key)\n\n    @class XYValues\n    @namespace mixins\n  */\n  var XYValues = {\n    /**\n      Determine width of data-point when displayed adjacent\n\n      @method adjacentWidth\n      @return {Number}\n    */\n    adjacentWidth: function() {\n      var series_count = this.seriesCount ? this.seriesCount() : 1;\n      return this.layeredWidth() / series_count;\n    },\n\n    /**\n      Determine layered width (width of group for adjacent)\n\n      @method layeredWidth\n      @return {Number}\n    */\n    layeredWidth: function() {\n      var range_band = this.xScale() && this.xScale().rangeBand && this.xScale().rangeBand();\n      var width = isFinite(range_band) ? range_band : 0;\n\n      return width;\n    },\n\n    /**\n      Determine item width based on series display type (adjacent or layered)\n\n      @method itemWidth\n      @return {Number}\n    */\n    itemWidth: function() {\n      var scale = this.xScale();\n      return scale && scale.width ? scale.width() : this.layeredWidth();\n    },\n\n    // Override default x-scale to use ordinal type\n    /**\n      Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`\n\n      @method getDefaultYScale\n      @return {d3.scale}\n    */\n    getDefaultXScale: function() {\n      return createScale({\n        type: 'ordinal',\n        data: this.data(),\n        key: 'x',\n        centered: true\n      });\n    }\n  };\n\n  /**\n    Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right\n\n    @class XYInverted\n    @namespace mixins\n  */\n  var XYInverted = {\n    /**\n      Get x-value for plotting (scaled y-value)\n\n      @method x\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    x: di(function(chart, d, i) {\n      var value = chart.yValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.yScale()(value, series_index));\n    }),\n\n    /**\n      Get y-value for plotting (scaled x-value)\n\n      @method y\n      @param {Any} d\n      @param {Number} i\n      @return {Number}\n    */\n    y: di(function(chart, d, i) {\n      var value = chart.xValue.call(this, d, i);\n      var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n      return parseFloat(chart.xScale()(value, series_index));\n    }),\n\n    /**\n      Get scaled y = 0 value (along x-axis)\n\n      @method x0\n      @return {Number}\n    */\n    x0: function() {\n      return parseFloat(this.yScale()(0));\n    },\n\n    /**\n      Get scaled x = 0 value (along y-axis)\n\n      @method x0\n      @return {Number}\n    */\n    y0: function() {\n      return parseFloat(this.xScale()(0));\n    },\n\n    /**\n      Set range (height, 0) for given x-scale\n\n      @method setXScaleRange\n      @param {d3.scale} x_scale\n    */\n    setXScaleRange: function(x_scale) {\n      x_scale.range([this.height(), 0]);\n    },\n\n    /**\n      Set range (0, width) for given y-scale\n\n      @method setYScaleRange\n      @param {d3.scale} y_scale\n    */\n    setYScaleRange: function(y_scale) {\n      y_scale.range([0, this.width()]);\n    }\n  };\n\n  /**\n    Mixin for handling labels in charts\n\n    @class Labels\n    @namespace mixins\n  */\n  var mixins_labels__Labels = {\n    /**\n      Call during chart initialization to add labels to chart\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n        initialize: function() {\n          // this.layer()...\n\n          // Attach labels layer\n          this.attachLabels();\n        }\n      }));\n      ```\n      @method attachLabels\n    */\n    attachLabels: function() {\n      var options = this.labels();\n      options.parent = this;\n\n      var LabelsClass = d3.chart(options.type);\n      var base = this.base.append('g').attr('class', 'chart-labels');\n      var labels = this._labels = new LabelsClass(base, options);\n\n      // Proxy x and y to parent chart\n      this.proxyLabelMethods.forEach(function(method) {\n        labels[method] = this[method];\n      }, this);\n\n      this.on('draw', function(data) {\n        options = this.labels();\n        options.parent = this;\n\n        labels.options(options);\n\n        if (options.display !== false)\n          labels.draw(options.data || data);\n        else\n          labels.draw([]);\n      }.bind(this));\n    },\n\n    /**\n      Options passed to labels chart\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n        // ...\n      }));\n\n      // ...\n\n      chart.labels(true); // -> display labels with defaults\n      chart.labels(false); // -> hide labels\n      chart.labels({offset: 10}); // -> pass options to labels chart\n\n      d3.select('#chart')\n        .chart('Compose', function(data) {\n          return {\n            charts: {\n              custom: {labels: {offset: 10}}\n            }\n          };\n        });\n      ```\n      @property labels\n      @type Object\n    */\n    labels: property({\n      get: function(value) {\n        if (isBoolean(value))\n          value = {display: value};\n        else if (!value)\n          value = {display: false};\n\n        return defaults({}, value, {\n          type: 'Labels'\n        });\n      }\n    }),\n\n    // Array of methods to proxy on labels chart\n    proxyLabelMethods: []\n  };\n\n  /**\n    Mixin for handling labels in XY charts\n    (proxies `x` and `y` to properly place labels for XY charts)\n\n    @class LabelsXY\n    @namespace mixins\n    @extends Labels\n  */\n  var LabelsXY = extend({}, mixins_labels__Labels, {\n    proxyLabelMethods: ['x', 'y']\n  });\n\n  /**\n    Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\n    and `getPoint` helper for adding helpful meta information to raw data point.\n\n    @class Hover\n    @namespace mixins\n  */\n  var Hover = {\n    initialize: function() {\n      this.on('attach', function() {\n        this.container.on('mouseenter', this.onMouseEnter.bind(this));\n        this.container.on('mousemove', this.onMouseMove.bind(this));\n        this.container.on('mouseleave', this.onMouseLeave.bind(this));\n      }.bind(this));\n    },\n\n    /**\n      Get point information for given data-point\n\n      @method getPoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n      @return {key, series, d, meta {chart, i, j, x, y}}\n    */\n    getPoint: di(function(chart, d, i, j) {\n      var key = chart.key && chart.key.call(this, d, i, j);\n      var series = chart.seriesData && chart.seriesData.call(this, d, i, j) || {};\n\n      return {\n        key: (series.key || j) + '.' + (key || i),\n        series: series,\n        d: d,\n        meta: {\n          chart: chart,\n          i: i,\n          j: j,\n          x: chart.x && chart.x.call(this, d, i, j),\n          y: chart.y && chart.y.call(this, d, i, j)\n        }\n      };\n    }),\n\n    /**\n      Call to trigger mouseenter:point when mouse enters data-point\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n        initialize: function() {\n          this.layer('bars', this.base, {\n            // dataBind...\n            insert: function() {\n              // Want to trigger enter/leave point\n              // when mouse enter/leaves bar (rect)\n              var chart = this.chart();\n              return this.append('rect')\n                .on('mouseenter', chart.mouseEnterPoint)\n                .on('mouseleave', chart.mouseLeavePoint);\n            }\n            // events...\n          })\n        }\n      }));\n      ```\n      @method mouseEnterPoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n    */\n    mouseEnterPoint: di(function(chart, d, i, j) {\n      chart.container.trigger('mouseenter:point', chart.getPoint.call(this, d, i, j));\n    }),\n\n    /**\n      Call to trigger mouseleave:point when mouse leaves data-point\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n        initialize: function() {\n          this.layer('bars', this.base, {\n            // dataBind...\n            insert: function() {\n              // Want to trigger enter/leave point\n              // when mouse enter/leaves bar (rect)\n              var chart = this.chart();\n              return this.append('rect')\n                .on('mouseenter', chart.mouseEnterPoint)\n                .on('mouseleave', chart.mouseLeavePoint);\n            }\n            // events...\n          })\n        }\n      }));\n      ```\n      @method mouseleavePoint\n      @param {Any} d\n      @param {Number} i\n      @param {Number} j\n    */\n    mouseLeavePoint: di(function(chart, d, i, j) {\n      chart.container.trigger('mouseleave:point', chart.getPoint.call(this, d, i, j));\n    }),\n\n    /**\n      (Override) Called when mouse enters container\n\n      @method onMouseEnter\n      @param {Object} position (chart and container {x,y} position of mouse)\n      @param {Object} position.chart {x, y} position relative to chart origin\n      @param {Object} position.container {x, y} position relative to container origin\n    */\n    onMouseEnter: function(/* position */) {},\n\n    /**\n      (Override) Called when mouse moves within container\n\n      @method onMouseMove\n      @param {Object} position (chart and container {x,y} position of mouse)\n      @param {Object} position.chart {x, y} position relative to chart origin\n      @param {Object} position.container {x, y} position relative to container origin\n    */\n    onMouseMove: function(/* position */) {},\n\n    /**\n      (Override) Called when mouse leaves container\n\n      @method onMouseLeave\n    */\n    onMouseLeave: function() {}\n  };\n\n  /**\n    Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.\n\n    @class HoverPoints\n    @namespace mixins\n  */\n  var HoverPoints = {\n    initialize: function() {\n      var points, tolerance, active;\n\n      this.on('draw', function() {\n        // Clear cache on draw\n        points = null;\n      });\n\n      this.on('attach', function() {\n        var update = function update(position) {\n          var closest = [];\n          if (position)\n            closest = getClosestPoints(points, position.chart, tolerance);\n\n          updateActive(active, closest, this.container);\n          active = closest;\n        }.bind(this);\n\n        this.container.on('mouseenter', function(position) {\n          if (!points)\n            points = getPoints(this, this.data());\n\n          tolerance = this.hoverTolerance();\n          update(position);\n        }.bind(this));\n\n        this.container.on('mousemove', update);\n        this.container.on('mouseleave', update);\n      }.bind(this));\n    },\n\n    /**\n      Hover tolerance (in px) for calculating close points\n\n      @property hoverTolerance\n      @type Number\n      @default Infinity\n    */\n    hoverTolerance: property({\n      default_value: Infinity\n    })\n  };\n\n  function getPoints(chart, data) {\n    if (data) {\n      if (!isSeriesData(data))\n        data = [{values: data}];\n\n      return data.map(function(series, j) {\n        return series.values.map(function(d, i) {\n          return chart.getPoint.call({_parent_data: series}, d, i, j);\n        }).sort(function(a, b) {\n          // Sort by x\n          return a.meta.x - b.meta.x;\n        });\n      });\n    }\n  }\n\n  function getClosestPoints(points, position, tolerance) {\n    if (!points)\n      return [];\n\n    return compact(points.map(function(series) {\n      function setDistance(point) {\n        point.distance = getDistance(point.meta, position);\n        return point;\n      }\n      function closePoints(point) {\n        return point.distance < tolerance;\n      }\n      function sortPoints(a, b) {\n        if (a.distance < b.distance)\n          return -1;\n        else if (a.distance > b.distance)\n          return 1;\n        else\n          return 0;\n      }\n\n      var by_distance = series.map(setDistance).filter(closePoints).sort(sortPoints);\n\n      return by_distance[0];\n    }));\n\n    function getDistance(a, b) {\n      return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n    }\n  }\n\n  function updateActive(active, closest, container) {\n    var active_keys = pluck(active, 'key');\n    var closest_keys = pluck(closest, 'key');\n\n    objectEach(closest, function(point) {\n      if (contains(active_keys, point.key))\n        container.trigger('mousemove:point', point);\n      else\n        container.trigger('mouseenter:point', point);\n    });\n    objectEach(active, function(point) {\n      if (!contains(closest_keys, point.key))\n        container.trigger('mouseleave:point', point);\n    });\n  }\n\n  /**\n    Mixin for handling common transition behaviors\n\n    @class Transition\n    @namespace mixins\n  */\n  var Transition = {\n    /**\n      Delay start of transition by specified milliseconds.\n\n      @property delay\n      @type Number|Function\n      @default (use container value, if available)\n    */\n    delay: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.delay();\n      }\n    }),\n\n    /**\n      Transition duration in milliseconds.\n\n      @property duration\n      @type Number|Function\n      @default (use container value, if available)\n    */\n    duration: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.duration();\n      }\n    }),\n\n    /**\n      Transition ease function\n\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n      - Note: arguments to pass to `d3.ease` are not supported\n\n      @property ease\n      @type String|Function\n      @default (use container value, if available)\n    */\n    ease: property({\n      default_value: function() {\n        return this.container && this.container.delay && this.container.ease();\n      }\n    }),\n\n    /**\n      Setup delay, duration, and ease for transition\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n        initialize: function() {\n          this.layer('circles', this.base, {\n            // ...\n            events: {\n              'merge:transition': function() {\n                // Set delay, duration, and ease from properties\n                this.chart().setupTransition(this);\n              }\n            }\n          });\n        }\n      }));\n      ```\n      @method setupTransition\n      @param {d3.selection} selection\n    */\n    setupTransition: function setupTransition(selection) {\n      var delay = this.delay();\n      var duration = this.duration();\n      var ease = this.ease();\n\n      if (!isUndefined(delay))\n        selection.delay(delay);\n      if (!isUndefined(duration))\n        selection.duration(duration);\n      if (!isUndefined(ease))\n        selection.ease(ease);\n    }\n  };\n\n  /**\n    Mixin to create standard layer to make extending charts straightforward.\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n      initialize: function() {\n        this.standardLayer('main', this.base.append('g'))\n        // dataBind, insert, events are defined on prototype\n      },\n\n      onDataBind: function(selection, data) {\n        // ...\n      },\n      onInsert: function(selection) {\n        // ...\n      },\n      onEnter: function(selection) {\n        // ...\n      },\n      onUpdateTransition: function(selection) {\n        // ...\n      },\n      // all d3.chart events are available: onMerge, onExit, ...\n    }));\n    ```\n    @class StandardLayer\n    @namespace mixins\n  */\n  var StandardLayer = {\n    /**\n      extension of `layer()` that uses standard methods on prototype for extensibility.\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n        initialize: function() {\n          this.standardLayer('circles', this.base.append('g'));\n        }\n\n        // onDataBind, onInsert, etc. work with \"circles\" layer\n      }));\n      ```\n      @method standardLayer\n      @param {String} name\n      @param {d3.selection} selection\n    */\n    standardLayer: function standardLayer(name, selection) {\n      return createLayer(this, 'layer', name, selection);\n    },\n\n    /**\n      extension of `seriesLayer()` that uses standard methods on prototype for extensibility.\n\n      @example\n      ```js\n      d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n        initialize: function() {\n          this.standardSeriesLayer('circles', this.base.append('g'));\n        },\n\n        // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n      }));\n      ```\n      @method standardSeriesLayer\n      @param {String} name\n      @param {d3.selection} selection\n    */\n    standardSeriesLayer: function standardSeriesLayer(name, selection) {\n      return createLayer(this, 'series', name, selection);\n    },\n\n    /**\n      Called for standard layer's `dataBind`\n\n      @method onDataBind\n      @param {d3.selection} selection\n      @param {Any} data\n      @return {d3.selection}\n    */\n    onDataBind: function onDataBind(/* selection, data */) {},\n\n    /**\n      Called for standard layer's `insert`\n\n      @method onInsert\n      @param {d3.selection} selection\n      @return {d3.selection}\n    */\n    onInsert: function onInsert(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['enter']`\n\n      @method onEnter\n      @param {d3.selection} selection\n    */\n    onEnter: function onEnter(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['enter:transition']`\n\n      @method onEnterTransition\n      @param {d3.selection} selection\n    */\n    // onEnterTransition: function onEnterTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['update']`\n\n      @method onUpdate\n      @param {d3.selection} selection\n    */\n    onUpdate: function onUpdate(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['update']`\n\n      @method onUpdateTransition\n      @param {d3.selection} selection\n    */\n    // onUpdateTransition: function onUpdateTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['merge']`\n\n      @method onMerge\n      @param {d3.selection} selection\n    */\n    onMerge: function onMerge(/* selection */) {},\n\n    /**\n      Call for standard layer's `events['merge:transition']`\n\n      @method onMergeTransition\n      @param {d3.selection} selection\n    */\n    // onMergeTransition: function onMergeTransition(selection) {},\n\n    /**\n      Call for standard layer's `events['exit']`\n\n      @method onExit\n      @param {d3.selection} selection\n    */\n    onExit: function onExit(/* selection */) {}\n\n    /**\n      Call for standard layer's `events['exit:transition']`\n\n      @method onExitTransition\n      @param {d3.selection} selection\n    */\n    // onExitTransition: function onExitTransition(selection) {},\n  };\n\n  function createLayer(chart, type, name, selection) {\n    var layer = {\n      layer: 'layer',\n      series: 'seriesLayer'\n    }[type];\n\n    if (layer && chart[layer]) {\n      var events = {};\n      [\n        'enter',\n        'enter:transition',\n        'update',\n        'update:transition',\n        'merge',\n        'merge:transition',\n        'exit',\n        'exit:transition'\n      ].forEach(function(event) {\n        var method = 'on' + event.split(':').map(function capitalize(str) {\n          return str.charAt(0).toUpperCase() + str.slice(1);\n        }).join('');\n\n        // Only create events if chart method exists as empty transition events can cause unforeseen issues\n        if (chart[method]) {\n          events[event] = function() {\n            this.chart()[method](this);\n          };\n        }\n      });\n\n      return chart[layer](name, selection, {\n        dataBind: function(data) {\n          return this.chart().onDataBind(this, data);\n        },\n        insert: function() {\n          return this.chart().onInsert(this);\n        },\n        events: events\n      });\n    }\n  }\n\n  var mixins = {\n    Series: Series,\n    XY: XY,\n    XYValues: XYValues,\n    XYInverted: XYInverted,\n    Labels: mixins_labels__Labels,\n    LabelsXY: LabelsXY,\n    Hover: Hover,\n    HoverPoints: HoverPoints,\n    Transition: Transition,\n    StandardLayer: StandardLayer\n  };\n\n  /**\n    Create an XY Lines chart with single or series data.\n\n    ### Extending\n\n    Great care has been taken in making the standard charts in d3.compose extensible.\n    To extend the `Lines` chart, the following methods are available:\n\n    - `createLine`\n    - `lineKey`\n    - `lineData`\n    - `onDataBind`\n    - `onInsert`\n    - `onEnter`\n    - `onEnterTransition`\n    - `onUpdate`\n    - `onUpdateTransition`\n    - `onMerge`\n    - `onMergeTransition`\n    - `onExit`\n    - `onExitTransition`\n\n    View the `Lines.js` source for the default implementation and more information on these methods.\n\n    @example\n    ```js\n    var chart = d3.select('#chart').chart('Compose', function(data) {\n      return {\n        charts: {\n          input: {\n            type: 'Lines'\n            data: data.input,\n            // xScale: ...,\n            // yScale: ...,\n            // other properties...\n          }\n        }\n      };\n    });\n\n    // Single y-values\n    chart.draw([1, 2, 3]);\n\n    // Series (x,y) values\n    chart.draw([\n      {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\n      {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\n    ]);\n    ```\n    @class Lines\n    @extends Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer\n  */\n  var charts_Lines__Mixed = mixin(src_Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer);\n  var Lines = charts_Lines__Mixed.extend({\n    initialize: function(options) {\n      charts_Lines__Mixed.prototype.initialize.call(this, options);\n\n      this.lines = {};\n\n      // Use standard series layer for extensibility\n      // (dataBind, insert, and events defined in prototype)\n      this.standardSeriesLayer('Lines', this.base.append('g').classed('chart-lines', true));\n\n      this.attachLabels();\n    },\n\n    /**\n      Set interpolation mode for line\n\n      - See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\n      - Set to `null` or `'linear'` for no interpolation\n\n      @property interpolate\n      @type String\n      @default monotone\n    */\n    interpolate: property({\n      default_value: 'monotone'\n    }),\n\n    // Create line on insert (keyed by series/index)\n    createLine: di(function(chart, d, i, j) {\n      var key = chart.lineKey.call(this, d, i, j);\n      var line = chart.lines[key] = d3.svg.line()\n        .x(chart.x)\n        .y(chart.y);\n\n      var interpolate = d.interpolate || chart.interpolate();\n      if (interpolate)\n        line.interpolate(interpolate);\n    }),\n\n    // Get key for line (from series key or index)\n    lineKey: di(function(chart, d, i, j) {\n      var key = chart.seriesKey(chart.seriesData.call(this, d, i, j));\n      return key != null ? key : chart.seriesIndex.call(this, d, i, j);\n    }),\n\n    // Get data for line\n    lineData: di(function(chart, d, i, j) {\n      var key = chart.lineKey.call(this, d, i, j);\n      if (chart.lines[key])\n        return chart.lines[key](d);\n    }),\n\n    // Override StandardLayer\n    onDataBind: function onDataBind(selection, data) {\n      return selection.selectAll('path')\n        .data(function(d, i, j) {\n          return [data.call(selection, d, i, j)];\n        });\n    },\n\n    // Override StandardLayer\n    onInsert: function onInsert(selection) {\n      return selection.append('path')\n        .classed('chart-line', true)\n        .each(this.createLine);\n    },\n\n    // Override StandardLayer\n    onMergeTransition: function onMergeTransition(selection) {\n      this.setupTransition(selection);\n\n      selection\n        .attr('d', this.lineData)\n        .attr('style', this.itemStyle);\n    }\n  });\n\n  var lines = createHelper('Lines');\n\n  d3.chart().Lines = Lines;\n\n  /**\n    Bars chart with centered or adjacent display for single or series data.\n\n    To display bars for different series next to each other (adjacent),\n    use the `adjacent` option when creating the `xScale` (see example below).\n\n    ### Extending\n\n    To extend the `Bars` chart, the following methods are available:\n\n    - `barHeight`\n    - `barWidth`\n    - `barX`\n    - `barY`\n    - `barClass`\n    - `onDataBind`\n    - `onInsert`\n    - `onEnter`\n    - `onEnterTransition`\n    - `onUpdate`\n    - `onUpdateTransition`\n    - `onMerge`\n    - `onMergeTransition`\n    - `onExit`\n    - `onExitTransition`\n\n    @example\n    ```js\n    var chart = d3.select('#chart').chart('Compose', function(data) {\n      // Display bars for different series next to each other (adjacent: true)\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n      return {\n        charts: {\n          output: {\n            type: 'Bars',\n            data: data.output,\n            xScale: xScale,\n            // yScale: ...,\n            // other properties...\n          }\n        }\n      };\n    });\n\n    // Single y-values\n    chart.draw([10, 20, 30]);\n\n    // Series (x,y) values\n    chart.draw([\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n    ]);\n    ```\n    @class Bars\n    @extends Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer\n  */\n\n  var charts_Bars__Mixed = mixin(src_Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer);\n  var Bars = charts_Bars__Mixed.extend({\n    initialize: function(options) {\n      charts_Bars__Mixed.prototype.initialize.call(this, options);\n\n      this.on('before:draw', function() {\n        this.offset_axis = this.getOffsetAxis();\n      }.bind(this));\n\n      // Use standard series layer for extensibility\n      // (dataBind, insert, and events defined in prototype)\n      this.standardSeriesLayer('Bars', this.base.append('g').classed('chart-bars', true));\n      this.attachLabels();\n    },\n\n    barHeight: di(function(chart, d, i) {\n      var height = Math.abs(chart.y0() - chart.y.call(this, d, i)) - chart.barOffset();\n      return height > 0 ? height : 0;\n    }),\n    barWidth: di(function(chart) {\n      return chart.itemWidth();\n    }),\n    barX: di(function(chart, d, i) {\n      return chart.x.call(this, d, i) - chart.itemWidth() / 2;\n    }),\n    barY: di(function(chart, d, i) {\n      var y = chart.y.call(this, d, i);\n      var y0 = chart.y0();\n\n      return y < y0 ? y : y0 + chart.barOffset();\n    }),\n    bar0: di(function(chart, d, i) {\n      var y0 = chart.y0();\n      var offset = chart.barOffset();\n      return chart.y.call(this, d, i) <= y0 ? y0 - offset : y0 + offset;\n    }),\n    barClass: di(function(chart, d) {\n      return 'chart-bar' + (d['class'] ? ' ' + d['class'] : '');\n    }),\n\n    // Shift bars slightly to account for axis thickness\n    barOffset: function barOffset() {\n      if (this.offset_axis) {\n        var axis_thickness = parseInt(this.offset_axis.base.select('.domain').style('stroke-width')) || 0;\n        return axis_thickness / 2;\n      }\n      else {\n        return 0;\n      }\n    },\n\n    getOffsetAxis: function getOffsetAxis() {\n      var components = this.container && this.container.components();\n      return objectFind(components, function(component) {\n        if (component.type == 'Axis' && component.position() == 'bottom')\n          return component;\n      });\n    },\n\n    // Override StandardLayer\n    onDataBind: function onDataBind(selection, data) {\n      return selection.selectAll('rect')\n        .data(data, this.key);\n    },\n\n    // Override StandardLayer\n    onInsert: function onInsert(selection) {\n      return selection.append('rect')\n        .on('mouseenter', this.mouseEnterPoint)\n        .on('mouseleave', this.mouseLeavePoint);\n    },\n\n    // Override StandardLayer\n    onEnter: function onEnter(selection) {\n      selection\n        .attr('y', this.bar0)\n        .attr('height', 0);\n    },\n\n    // Override StandardLayer\n    onMerge: function onMerge(selection) {\n      selection\n        .attr('class', this.barClass)\n        .attr('style', this.itemStyle)\n        .attr('x', this.barX)\n        .attr('width', this.barWidth);\n    },\n\n    // Override StandardLayer\n    onMergeTransition: function onMergeTransition(selection) {\n      this.setupTransition(selection);\n\n      selection\n        .attr('y', this.barY)\n        .attr('height', this.barHeight);\n    },\n\n    // Override StandardLayer\n    onExitTransition: function onExitTransition(selection) {\n      this.setupTransition(selection);\n\n      selection\n        .attr('y', this.bar0)\n        .attr('height', 0)\n        .remove();\n    }\n  });\n\n  var bars = createHelper('Bars');\n\n  d3.chart().Bars = Bars;\n\n  /**\n    Bars chart with values stacked on top of each other\n\n    (See `Bars` for extensibility details)\n\n    @example\n    ```js\n    var chart = d3.select('#chart').chart('Compose', function(data) {\n      // Display bars for different series next to each other (adjacent: true)\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n      return {\n        charts: {\n          stacked_output: {\n            type: 'StackedBars',\n            data: data.output,\n            xScale: xScale,\n            // yScale: ...,\n            // other properties...\n          }\n        }\n      };\n    });\n\n    // Single y-values\n    chart.draw([10, 20, 30]);\n\n    // Series (x,y) values\n    chart.draw([\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n    ]);\n    ```\n    @class StackedBars\n    @extends Bars\n  */\n  var StackedBars = Bars.extend({\n    transform: function(data) {\n      data = Bars.prototype.transform.call(this, data);\n\n      var grouped = {};\n      var x_key = this.xKey();\n      var y_key = this.yKey();\n      data = data.map(function(series) {\n        series = extend({}, series);\n        series.values = series.values.map(function(value) {\n          value = extend({}, value);\n          var x = value[x_key];\n          var y = value.__original_y = value[y_key];\n\n          if (!grouped[x])\n            grouped[x] = {pos: 0, neg: 0};\n\n          if (y >= 0) {\n            value.__previous = grouped[x].pos;\n            grouped[x].pos = value[y_key] = grouped[x].pos + y;\n          }\n          else {\n            value.__previous = grouped[x].neg;\n            grouped[x].neg = value[y_key] = grouped[x].neg + y;\n          }\n\n          return value;\n        }, this);\n\n        return series;\n      }, this);\n\n      return data;\n    },\n\n    barHeight: di(function(chart, d, i) {\n      var height = Math.abs(chart.yScale()(d.__previous) - chart.y.call(this, d, i));\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\n      return height > 0 ? height - offset : 0;\n    })\n  });\n\n  var stackedBars = createHelper('StackedBars');\n\n  d3.chart().StackedBars = StackedBars;\n\n  /**\n    Bars chart with bars that group from left-to-right\n\n    (See `Bars` for extensibility details)\n\n    @example\n    ```js\n    var chart = d3.select('#chart').chart('Compose', function(data) {\n      // Display bars for different series next to each other (adjacent: true)\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n      return {\n        charts: {\n          output: {\n            type: 'HorizontalBars',\n            data: data.output,\n            xScale: xScale,\n            // yScale: ...,\n            // other properties...\n          }\n        }\n      };\n    });\n\n    // Single y-values\n    chart.draw([10, 20, 30]);\n\n    // Series (x,y) values\n    chart.draw([\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n    ]);\n    ```\n    @class HorizontalBars\n    @extends Bars, XYInverted\n  */\n  var HorizontalBars = mixin(Bars, XYInverted).extend({\n    barX: di(function(chart, d, i) {\n      var x = chart.x.call(this, d, i);\n      var x0 = chart.x0();\n\n      return x < x0 ? x : x0 + chart.barOffset();\n    }),\n    barY: di(function(chart, d, i) {\n      return chart.y.call(this, d, i) - chart.itemWidth() / 2;\n    }),\n    barWidth: di(function(chart, d, i) {\n      var width = Math.abs(chart.x0() - chart.x.call(this, d, i)) - chart.barOffset();\n      return width > 0 ? width : 0;\n    }),\n    barHeight: di(function(chart) {\n      return chart.itemWidth();\n    }),\n    bar0: di(function(chart, d, i) {\n      var x0 = chart.x0();\n      var offset = chart.barOffset();\n      return chart.x.call(this, d, i) >= x0 ? x0 + offset : x0 - offset;\n    }),\n\n    getOffsetAxis: function getOffsetAxis() {\n      var components = this.container && this.container.components();\n      return objectFind(components, function(component) {\n        if (component.type == 'Axis' && component.position() == 'left')\n          return component;\n      });\n    },\n\n    onEnter: function onEnter(selection) {\n      selection\n        .attr('x', this.bar0)\n        .attr('width', 0);\n    },\n\n    onMerge: function onMerge(selection) {\n      selection\n        .attr('class', this.barClass)\n        .attr('style', this.itemStyle)\n        .attr('y', this.barY)\n        .attr('height', this.barHeight);\n    },\n\n    onMergeTransition: function onMergeTransition(selection) {\n      this.setupTransition(selection);\n\n      selection\n        .attr('x', this.barX)\n        .attr('width', this.barWidth);\n    },\n\n    onExitTransition: function onExitTransition(selection) {\n      this.setupTransition(selection);\n\n      selection\n        .attr('x', this.bar0)\n        .attr('width', 0)\n        .remove();\n    }\n  });\n\n  var horizontalBars = createHelper('HorizontalBars');\n\n  d3.chart().HorizontalBars = HorizontalBars;\n\n  /**\n    Horizontal Stacked Bars\n\n    (See `Bars` for extensibility details)\n\n    @example\n    ```js\n    var chart = d3.select('#chart').chart('Compose', function(data) {\n      // Display bars for different series next to each other (adjacent: true)\n      var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n      return {\n        charts: {\n          output: {\n            type: 'HorizontalStackedBars',\n            data: data.output,\n            xScale: xScale,\n            // yScale: ...,\n            // other properties...\n          }\n        }\n      };\n    });\n\n    // Single y-values\n    chart.draw([10, 20, 30]);\n\n    // Series (x,y) values\n    chart.draw([\n      {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n      {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n    ]);\n    ```\n    @class HorizontalStackedBars\n    @extends HorizontalBars\n  */\n  var HorizontalStackedBars = HorizontalBars.extend({\n    transform: function(data) {\n      data = StackedBars.prototype.transform.call(this, data);\n      data = HorizontalBars.prototype.transform.call(this, data);\n      return data;\n    },\n\n    barWidth: di(function(chart, d, i) {\n      var width = Math.abs(chart.yScale()(d.__previous) - chart.x.call(this, d, i));\n      var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\n      return width > 0 ? width - offset : 0;\n    }),\n    barX: di(function(chart, d, i) {\n      var x = chart.x.call(this, d, i);\n      var x0 = chart.yScale()(d.__previous);\n\n      return x < x0 ? x : x0 + chart.barOffset();\n    })\n  });\n\n  var horizontalStackedBars = createHelper('HorizontalStackedBars');\n\n  d3.chart().HorizontalStackedBars = HorizontalStackedBars;\n\n  /**\n    Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\n\n    ### Extending\n\n    To extend the `Labels` chart, the following methods are available:\n\n    - `insertLabels`\n    - `mergeLabels`\n    - `layoutLabels`\n    - `transitionLabels`\n    - `onDataBind`\n    - `onInsert`\n    - `onEnter`\n    - `onEnterTransition`\n    - `onUpdate`\n    - `onUpdateTransition`\n    - `onMerge`\n    - `onMergeTransition`\n    - `onExit`\n    - `onExitTransition`\n\n    View the `Labels.js` source for the default implementation and more information on these methods.\n\n    @example\n    ```js\n    var chart = d3.select('#chart').chart('Compose', function(data) {\n      return {\n        charts: {\n          input: {\n            type: 'Lines',\n            data: data.input,\n            // xScale, yScale, other properties...\n\n            // Show labels with default properties\n            labels: true\n          },\n          output: {\n            type: 'Bars',\n            data: data.output,\n            // xScale, yScale, other properties...\n\n            // Pass options to labels\n            labels: {\n              offset: 2,\n              position: 'top',\n              style: {\n                'font-size': '14px'\n              },\n              format: d3.format(',0d')\n            }\n          },\n          labels: {\n            type: 'Labels',\n            data: data.labels,\n\n            // xScale, yScale, other properties...\n          }\n        }\n      };\n    });\n\n    chart.draw({\n      input: [1, 2, 3],\n      output: [10, 20, 30],\n      labels: [\n        {x: 0, y: 0},\n        {x: 0, y: 30, label: 'Override (y by default)'},\n        {x: 2, y: 0},\n        {x: 2, y: 30}\n      ]\n    });\n    ```\n    @class Labels\n    @extends Chart, Series, XY, Hover, Transition, StandardLayer\n  */\n  var charts_Labels__Mixed = mixin(src_Chart, Series, XY, Hover, Transition, StandardLayer);\n  var charts_Labels__Labels = charts_Labels__Mixed.extend({\n    initialize: function(options) {\n      charts_Labels__Mixed.prototype.initialize.call(this, options);\n\n      // Proxy attach to parent for hover\n      var parent = this.options().parent;\n      if (parent) {\n        this.parent = parent;\n        parent.on('attach', function() {\n          this.container = parent.container;\n          this.trigger('attach');\n        }.bind(this));\n      }\n\n      // Use StandardLayer for extensibility\n      this.standardSeriesLayer('Labels', this.base);\n    },\n\n    transform: function(data) {\n      data = charts_Labels__Mixed.prototype.transform.call(this, data);\n\n      if (!isSeriesData(data))\n        data = [{key: 'labels', name: 'Labels', values: data}];\n\n      // TODO Use ticks / domain from xScale\n      // ticks = scale.ticks ? scale.ticks.apply(scale, [10]) : scale.domain()\n      return data;\n    },\n\n    /**\n      Formatting function or string (string is passed to `d3.format`) for label values\n\n      @property format\n      @type String|Function\n    */\n    format: property({\n      set: function(value) {\n        if (isString(value)) {\n          return {\n            override: d3.format(value)\n          };\n        }\n      }\n    }),\n\n    /**\n      Label position relative to data point\n      (top, right, bottom, or left)\n\n      Additionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\n      where `a` and `b` are `top`, `right`, `bottom`, or `left`\n\n      For more advanced positioning, a \"di\" function can be specified to set position per label\n\n      @example\n      ```js\n      labels.position('top'); // top for all values\n      labels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\n      labels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\n      ```\n      @property position\n      @type String|Function\n      @default top|bottom\n    */\n    position: property({\n      default_value: 'top|bottom',\n      get: function(value) {\n        if (isString(value) && value.indexOf('|') >= 0) {\n          var chart = this;\n          var parts = value.split('|');\n          return function(d, i, j) {\n            var y_value = chart.yValue.call(this, d, i, j);\n            return y_value >= 0 ? parts[0] : parts[1];\n          };\n        }\n        else {\n          return value;\n        }\n      }\n    }),\n\n    /**\n      Offset between data point and label\n      (if `Number` is given, offset is set based on position)\n\n      @property offset\n      @type Number|Object\n      @default 0\n    */\n    offset: property({\n      default_value: 0\n    }),\n\n    /**\n      Padding between text and label background\n\n      @property padding\n      @type Number\n      @default 1\n    */\n    padding: property({default_value: 1}),\n\n    /**\n      Define text anchor (start, middle, or end)\n\n      (set by default based on label position)\n\n      @property anchor\n      @type String\n      @default middle\n    */\n    anchor: property({\n      validate: function(value) {\n        return contains(['start', 'middle', 'end'], value);\n      }\n    }),\n\n    /**\n      Define text-alignment (top, middle, or bottom)\n\n      (set by default based on label position)\n\n      @property alignment\n      @type String\n      @default middle\n    */\n    alignment: property({\n      validate: function(value) {\n        return contains(['top', 'middle', 'bottom'], value);\n      }\n    }),\n\n    /**\n      Get label text for data-point (uses \"label\" property or y-value)\n\n      @method labelText\n      @param {Any} d\n      @param {Number} i\n      @return {String}\n    */\n    labelText: di(function(chart, d, i) {\n      var value = valueOrDefault(d.label, valueOrDefault(d.__original_y, chart.yValue.call(this, d, i)));\n      var format = chart.format();\n\n      return format ? format(value) : value;\n    }),\n\n    /**\n      Get class for label group\n\n      @method labelClass\n      @param {Any} d\n      @param {Number} i\n      @return {String}\n    */\n    labelClass: di(function(chart, d) {\n      return 'chart-label' + (d['class'] ? ' ' + d['class'] : '');\n    }),\n\n    onDataBind: function onDataBind(selection, data) {\n      return selection.selectAll('g')\n        .data(data, this.key);\n    },\n    onInsert: function onInsert(selection) {\n      return selection.append('g')\n        .call(this.insertLabels);\n    },\n    onMerge: function onMerge(selection) {\n      selection.attr('class', this.labelClass);\n\n      this.mergeLabels(selection);\n      this.layoutLabels(selection);\n    },\n    onMergeTransition: function onMergeTransition(selection) {\n      // Transition labels into position\n      this.setupTransition(selection);\n      this.transitionLabels(selection);\n    },\n\n    // (Override for custom labels)\n    insertLabels: function(selection) {\n      selection.append('rect')\n        .attr('class', 'chart-label-bg');\n      selection.append('text')\n        .attr('class', 'chart-label-text');\n    },\n\n    // (Override for custom labels)\n    mergeLabels: function(selection) {\n      selection.selectAll('text')\n        .text(this.labelText);\n    },\n\n    // (Override for custom labels)\n    layoutLabels: function(selection) {\n      // Calculate layout\n      var chart = this;\n      var labels = [];\n      var position = chart.position();\n      var values = {\n        offset: chart.offset(),\n        padding: chart.padding(),\n        anchor: chart.anchor(),\n        alignment: chart.alignment()\n      };\n\n      var options;\n      if (isString(position))\n        options = getOptions();\n\n      selection.each(function(d, i, j) {\n        if (!labels[j])\n          labels[j] = [];\n\n        // Store values for label and calculate layout\n        var label = chart._prepareLabel(chart, this, d, i, j);\n        labels[j].push(label);\n\n        var label_options = options || getOptions.call(chart, this, d, i, j);\n\n        chart._calculateLayout(chart, label_options, label);\n      });\n\n      // Collision detection\n      this._handleCollisions(chart, labels);\n\n      // Layout labels\n      labels.forEach(function(series) {\n        series.forEach(function(label) {\n          this._setLayout(chart, label);\n        }, this);\n      }, this);\n\n      function getOptions(element, d, i, j) {\n        var label_options = extend({}, values);\n        var label_position;\n\n        if (isFunction(position))\n          label_position = position.call(element, d, i, j);\n        else\n          label_position = position;\n\n        if (isNumber(label_options.offset)) {\n          var offset = {\n            top: {x: 0, y: -label_options.offset},\n            right: {x: label_options.offset, y: 0},\n            bottom: {x: 0, y: label_options.offset},\n            left: {x: -label_options.offset, y: 0}\n          }[label_position];\n\n          if (!offset)\n            offset = {x: 0, y: 0};\n\n          label_options.offset = offset;\n        }\n        if (isUndefined(label_options.anchor)) {\n          label_options.anchor = {\n            top: 'middle',\n            right: 'start',\n            bottom: 'middle',\n            left: 'end'\n          }[label_position];\n        }\n        if (isUndefined(label_options.alignment)) {\n          label_options.alignment = {\n            top: 'bottom',\n            right: 'middle',\n            bottom: 'top',\n            left: 'middle'\n          }[label_position];\n        }\n        return label_options;\n      }\n    },\n\n    // (Override for custom labels)\n    transitionLabels: function(selection) {\n      selection.attr('opacity', 1);\n    },\n\n    //\n    // Internal\n    //\n\n    _prepareLabel: function(chart, element, d, i) {\n      var selection = d3.select(element);\n      var text = selection.select('text');\n      var bg = selection.select('rect');\n\n      return {\n        x: chart.x.call(element, d, i),\n        y: chart.y.call(element, d, i),\n        element: element,\n        selection: selection,\n        text: {\n          element: text.node(),\n          selection: text\n        },\n        bg: {\n          element: bg.node(),\n          selection: bg\n        }\n      };\n    },\n\n    _calculateLayout: function(chart, options, label) {\n      var text_bounds = label.text.element.getBBox();\n\n      // Need to adjust text for line-height\n      var text_y_adjustment = alignText(label.text.element);\n\n      // Position background\n      var layout = label.bg.layout = {\n        x: options.offset.x,\n        y: options.offset.y,\n        width: text_bounds.width + (2 * options.padding),\n        height: text_bounds.height + (2 * options.padding)\n      };\n\n      // Set width / height of label\n      label.width = layout.width;\n      label.height = layout.height;\n\n      if (options.anchor == 'end')\n        label.x -= layout.width;\n      else if (options.anchor == 'middle')\n        label.x -= (layout.width / 2);\n\n      if (options.alignment == 'bottom')\n        label.y -= layout.height;\n      else if (options.alignment == 'middle')\n        label.y -= (layout.height / 2);\n\n      // Center text in background\n      label.text.layout = {\n        x: layout.x + (layout.width / 2) - (text_bounds.width / 2),\n        y: layout.y + (layout.height / 2) - (text_bounds.height / 2) + text_y_adjustment\n      };\n    },\n\n    _handleCollisions: function(chart, labels) {\n      labels.forEach(function(series, seriesIndex) {\n        // Check through remaining series for collisions\n        labels.slice(seriesIndex + 1).forEach(function(compareSeries) {\n          compareSeries.forEach(function(compareLabel) {\n            series.forEach(function(label) {\n              if (checkForOverlap(label, compareLabel))\n                groupLabels(label, compareLabel);\n            });\n          });\n        });\n      });\n\n      function checkForOverlap(labelA, labelB) {\n        var a = getEdges(labelA);\n        var b = getEdges(labelB);\n\n        var contained_LR = (b.left < a.left && b.right > a.right);\n        var contained_TB = (b.bottom < a.bottom && b.top > a.top);\n        var overlap_LR = (b.left >= a.left && b.left < a.right) || (b.right > a.left && b.right <= a.right) || contained_LR;\n        var overlap_TB = (b.top >= a.top && b.top < a.bottom) || (b.bottom > a.top && b.bottom <= a.bottom) || contained_TB;\n\n        return overlap_LR && overlap_TB;\n\n        function getEdges(label) {\n          return {\n            left: label.x,\n            right: label.x + label.width,\n            top: label.y,\n            bottom: label.y + label.height\n          };\n        }\n      }\n\n      function groupLabels(labelA, labelB) {\n        if (labelA.group && labelB.group) {\n          // Move labelB group labels into labelA group\n          objectEach(labelB.group.labels, function(label) {\n            labelA.group.labels.push(label);\n            label.group = labelA.group;\n          });\n\n          updateGroupPositions(labelA.group);\n        }\n        else if (labelA.group) {\n          addLabelToGroup(labelB, labelA.group);\n        }\n        else if (labelB.group) {\n          addLabelToGroup(labelA, labelB.group);\n        }\n        else {\n          var group = {labels: []};\n          addLabelToGroup(labelA, group);\n          addLabelToGroup(labelB, group);\n        }\n      }\n\n      function addLabelToGroup(label, group) {\n        group.labels.push(label);\n        label.group = group;\n        label.originalY = label.y;\n\n        updateGroupPositions(group);\n      }\n\n      function updateGroupPositions(group) {\n        function reset(label) {\n          // Reset to original y\n          label.y = label.originalY;\n          return label;\n        }\n        function sortY(a, b) {\n          if (a.y < b.y)\n            return -1;\n          else if (a.y > b.y)\n            return 1;\n          else\n            return 0;\n        }\n\n        var byY = group.labels.map(reset).sort(sortY).reverse();\n\n        byY.forEach(function(label, index) {\n          var prev = first(byY, index);\n          var overlap;\n\n          for (var i = prev.length - 1; i >= 0; i--) {\n            if (checkForOverlap(label, prev[i])) {\n              overlap = prev[i];\n              break;\n            }\n          }\n\n          if (overlap)\n            label.y = overlap.y - label.height;\n        });\n      }\n    },\n\n    _setLayout: function(chart, label) {\n      label.bg.selection\n        .attr('transform', translate(label.bg.layout.x, label.bg.layout.y))\n        .attr('width', label.bg.layout.width)\n        .attr('height', label.bg.layout.height);\n\n      label.text.selection\n        .attr('transform', translate(label.text.layout.x, label.text.layout.y));\n\n      // Position label and set opacity to fade-in\n      label.selection\n        .attr('transform', translate(label.x, label.y))\n        .attr('opacity', 0);\n    }\n  }, {\n    z_index: 150\n  });\n\n  var labels = createHelper('Labels');\n\n  d3.chart().Labels = charts_Labels__Labels;\n\n  /**\n    (in-progress)\n\n    @class HoverLabels\n  */\n  var charts_HoverLabels__Mixed = mixin(charts_Labels__Labels, Hover);\n  var HoverLabels = charts_HoverLabels__Mixed.extend({\n    initialize: function(options) {\n      charts_HoverLabels__Mixed.prototype.initialize.call(this, options);\n      this.on('attach', function() {\n        this.container.on('mouseenter:point', this.onMouseEnterPoint.bind(this));\n        this.container.on('mouseleave:point', this.onMouseLeavePoint.bind(this));\n      }.bind(this));\n    },\n\n    /**\n      Maximum distance to find active points\n\n      @property hoverTolerance\n      @type Number\n      @default Infinity\n    */\n    hoverTolerance: property({\n      set: function(value) {\n        // Pass through hover tolerance to parent (if present)\n        if (this.parent && this.parent.hoverTolerance)\n          this.parent.hoverTolerance(value);\n      },\n      default_value: Infinity\n    }),\n\n    // Don't fade in labels, hidden until hover\n    transitionLabels: function() {},\n\n    onMouseEnterPoint: function(point) {\n      var label = this.findLabelForPoint(point);\n      if (label)\n        d3.select(label).attr('opacity', 1);\n    },\n    onMouseLeavePoint: function(point) {\n      var label = this.findLabelForPoint(point);\n      if (label)\n        d3.select(label).attr('opacity', 0);\n    },\n\n    findLabelForPoint: function(point) {\n      var labels = this.base.selectAll('g.chart-series').selectAll('g');\n      var chart = this;\n      var label;\n\n      labels.each(function(d, i, j) {\n        var series = chart.seriesData.call(this, d, i, j);\n        if (d === point.d && series === point.series)\n          label = this;\n      });\n\n      return label;\n    }\n  });\n\n  var hoverLabels = createHelper('HoverLabels');\n\n  d3.chart().HoverLabels = HoverLabels;\n\n  /**\n    Add text to a chart.\n\n    ### Extending\n\n    To extend the `Text` component, the following methods are available:\n\n    - `onDataBind`\n    - `onInsert`\n    - `onEnter`\n    - `onEnterTransition`\n    - `onUpdate`\n    - `onUpdateTransition`\n    - `onMerge`\n    - `onMergeTransition`\n    - `onExit`\n    - `onExitTransition`\n\n    @example\n    ```js\n    d3.select('#chart')\n      .chart('Compose', function(data) {\n        return {\n          components: {\n            title: {\n              type: 'Text',\n              position: 'top'\n              text: 'Main Title',\n              textAlign: 'left',\n              'class': 'title'\n            },\n            notes: {\n              type: 'Text',\n              position: 'bottom',\n              text: 'Notes',\n              'class': 'notes'\n            }\n          }\n        };\n      });\n    ```\n    @class Text\n    @extends Component, StandardLayer\n  */\n  var components_Text__Mixed = mixin(Component, StandardLayer);\n  var Text = components_Text__Mixed.extend({\n    initialize: function(options) {\n      components_Text__Mixed.prototype.initialize.call(this, options);\n\n      // Use standard layer for extensibility\n      this.standardLayer('Text', this.base.append('g').classed('chart-text', true));\n    },\n\n    /**\n      Text to display\n\n      @property text\n      @type String\n    */\n    text: property(),\n\n    /**\n      Rotation of text\n\n      @property rotation\n      @type Number\n      @default 0\n    */\n    rotation: property({\n      default_value: 0\n    }),\n\n    /**\n      Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)\n\n      @property textAlign\n      @type String\n      @default \"center\"\n    */\n    textAlign: property({\n      default_value: 'center',\n      validate: function(value) {\n        return contains(['left', 'center', 'right'], value);\n      }\n    }),\n\n    /**\n      text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)\n\n      @property anchor\n      @type String\n      @default (set by `textAlign`)\n    */\n    anchor: property({\n      default_value: function() {\n        return {\n          left: 'start',\n          center: 'middle',\n          right: 'end'\n        }[this.textAlign()];\n      },\n      validate: function(value) {\n        return contains(['start', 'middle', 'end', 'inherit'], value);\n      }\n    }),\n\n    /**\n      Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)\n\n      @property verticalAlign\n      @type String\n      @default \"middle\"\n    */\n    verticalAlign: property({\n      default_value: 'middle',\n      validate: function(value) {\n        return contains(['top', 'middle', 'bottom'], value);\n      }\n    }),\n\n    /**\n      Style object containing styles for text\n\n      @property style\n      @type Object\n      @default {}\n    */\n    style: property({\n      default_value: {},\n      get: function(value) {\n        return src_helpers__style(value) || null;\n      }\n    }),\n\n    onDataBind: function onDataBind(selection) {\n      return selection.selectAll('text')\n        .data([0]);\n    },\n    onInsert: function onInsert(selection) {\n      return selection.append('text');\n    },\n    onMerge: function onMerge(selection) {\n      selection\n        .attr('transform', this.transformation())\n        .attr('style', this.style())\n        .attr('text-anchor', this.anchor())\n        .attr('class', this.options()['class'])\n        .text(this.text());\n    },\n\n    transformation: function() {\n      var x = {\n        left: 0,\n        center: this.width() / 2,\n        right: this.width()\n      }[this.textAlign()];\n      var y = {\n        top: 0,\n        middle: this.height() / 2,\n        bottom: this.height()\n      }[this.verticalAlign()];\n\n      var translation = translate(x, y);\n      var rotation = rotate(this.rotation());\n\n      return translation + ' ' + rotation;\n    }\n  }, {\n    z_index: 70\n  });\n\n  function textOptions(id, options, default_options) {\n    if (!options) {\n      options = id;\n      id = undefined;\n    }\n    if (isString(options))\n      options = {text: options};\n\n    return extend({id: id}, default_options, options);\n  }\n\n  function text(id, options) {\n    return textOptions(id, options, {type: 'Text'});\n  }\n\n  d3.chart().Text = Text;\n\n  /**\n    Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)\n\n    @class Title\n    @extends Text\n  */\n  var Title = Text.extend({\n    initialize: function(options) {\n      Text.prototype.initialize.call(this, options);\n      this.base.select('.chart-text').classed('chart-title', true);\n    },\n\n    /**\n      Margins (in pixels) around Title\n\n      @property margins\n      @type Object\n      @default (set based on `position`)\n    */\n    margins: property({\n      set: function(values) {\n        return {\n          override: getMargins(values, components_Title__defaultMargins(this.position()))\n        };\n      },\n      default_value: function() {\n        return components_Title__defaultMargins(this.position());\n      }\n    }),\n\n    /**\n      Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).\n\n      @property rotation\n      @type Number\n      @default (set based on `position`)\n    */\n    rotation: property({\n      default_value: function() {\n        var rotate_by_position = {\n          right: 90,\n          left: -90\n        };\n\n        return rotate_by_position[this.position()] || 0;\n      }\n    })\n  });\n\n  function components_Title__defaultMargins(position) {\n    var default_margin = 8;\n    var margins_by_position = {\n      top: {top: default_margin, bottom: default_margin},\n      right: {right: default_margin, left: default_margin},\n      bottom: {top: default_margin, bottom: default_margin},\n      left: {right: default_margin, left: default_margin}\n    };\n    return getMargins(margins_by_position[position]);\n  }\n\n  function title(id, options) {\n    return textOptions(id, options, {type: 'Title'});\n  }\n\n  d3.chart().Title = Title;\n\n  /**\n    Gridlines component that draws major ticks for chart\n\n    Uses d3.axis extensions for ticks:\n\n    - `ticks`\n    - `tickValues`\n\n    ### Extending\n\n    To extend the `Gridlines` component, the following methods are available\n\n    - `onInsert`\n    - `onEnter`\n    - `onEnterTransition`\n    - `onUpdate`\n    - `onUpdateTransition`\n    - `onMerge`\n    - `onMergeTransition`\n    - `onExit`\n    - `onExitTransition`\n\n    @example\n    ```js\n    d3.select('#chart').chart('Compose', function(data) {\n      var scales = {\n        x: {data: data, key: 'x'},\n        y: {data: data, key: 'y'}\n      };\n\n      var vertical = d3c.gridlines({\n        scale: scales.x,\n        orientation: 'vertical'\n      });\n      var horizontal = d3c.gridlines({\n        scale: scales.y,\n        orientation: 'horizontal'\n      });\n\n      return [\n        vertical,\n        horizontal\n      ];\n    });\n    ```\n    @class Gridlines\n  */\n  var components_Gridlines__Mixed = mixin(Component, XY, Transition, StandardLayer);\n  var Gridlines = components_Gridlines__Mixed.extend({\n    initialize: function(options) {\n      components_Gridlines__Mixed.prototype.initialize.call(this, options);\n\n      // Proxy attach to parent for width/height\n      var parent = this.options().parent;\n      if (parent) {\n        this.parent = parent;\n\n        if (parent.container) {\n          this.container = parent.container;\n          this.trigger('attach');\n        }\n        else {\n          parent.on('attach', function() {\n            this.container = parent.container;\n            this.trigger('attach');\n          }.bind(this));\n        }\n      }\n\n      // Use standard layer for extensibility\n      this.standardLayer('Gridlines', this.base.append('g').attr('class', 'chart-gridlines'));\n    },\n\n    /**\n      Use horizontal, vertical gridlines\n\n      @property orientation\n      @type String\n      @default horizontal\n    */\n    orientation: property({\n      default_value: 'horizontal',\n      validate: function(value) {\n        return contains(['horizontal', 'vertical'], value);\n      },\n      set: function() {\n        // Update scale -> xScale/yScale when position changes\n        if (this.scale())\n          this.scale(this.scale());\n      }\n    }),\n\n    /**\n      Scale to use for gridlines.\n      Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used.\n\n      @example\n      ```js\n      // Set with d3.scale directly\n      gridlines.scale(d3.scale());\n\n      // or with Object passed to helpers.createScale\n      gridlines.scale({data: data, key: 'x'});\n      ```\n      @property scale\n      @type Object|d3.scale\n    */\n    scale: property({\n      set: function(value) {\n        if (this.orientation() == 'vertical') {\n          this.xScale(value);\n          value = this.xScale();\n        }\n        else {\n          this.yScale(value);\n          value = this.yScale();\n        }\n\n        return {\n          override: value\n        };\n      }\n    }),\n\n    // d3.axis extensions\n    ticks: property({\n      default_value: [10]\n    }),\n    tickValues: property(),\n\n    drawLine: di(function(chart, d) {\n      var x1, x2, y1, y2;\n      if (chart.orientation() == 'vertical') {\n        x1 = x2 = chart.xScale()(d);\n        y1 = 0;\n        y2 = chart.height();\n      }\n      else {\n        x1 = 0;\n        x2 = chart.width();\n        y1 = y2 = chart.yScale()(d);\n      }\n\n      d3.select(this)\n        .attr('x1', x1)\n        .attr('x2', x2)\n        .attr('y1', y1)\n        .attr('y2', y2);\n    }),\n\n    width: function width() {\n      // Use container's explicit chart width rather than component width (if available)\n      return this.container ? this.container.chartPosition().width : dimensions(this.base).width;\n    },\n    height: function height() {\n      // Use container's explicit chart height rather than component width (if available)\n      return this.container ? this.container.chartPosition().height : dimensions(this.base).width;\n    },\n\n    onDataBind: function onDataBind(selection, data) {\n      // [false] is given for display: false when attached from Axis\n      var hide = data && data[0] && data[0].y === false;\n\n      var tick_values = this.tickValues();\n      if (tick_values == null && !hide) {\n        // Get tick values from scale\n        var scale = this.orientation() == 'vertical' ? this.xScale() : this.yScale();\n        var ticks_args = this.ticks();\n\n        if (!ticks_args)\n          ticks_args = [10];\n        if (!Array.isArray(ticks_args))\n          ticks_args = [ticks_args];\n\n        tick_values = scale.ticks ? scale.ticks.apply(scale, ticks_args) : scale.domain();\n      }\n\n      return selection.selectAll('line').data(hide ? [] : tick_values);\n    },\n    onInsert: function onInsert(selection) {\n      return selection.append('line')\n        .attr('class', 'chart-gridline');\n    },\n    onMerge: function onMerge(selection) {\n      selection\n        .attr('opacity', 0)\n        .each(this.drawLine);\n    },\n    onMergeTransition: function onMergeTransition(selection) {\n      selection.attr('opacity', 1);\n    },\n    onExit: function onExit(selection) {\n      selection.remove();\n    },\n\n    skip_layout: true\n  }, {\n    layer_type: 'chart',\n    z_index: 55\n  });\n\n  var gridlines = createHelper('Gridlines');\n\n  d3.chart().Gridlines = Gridlines;\n\n  /**\r\n    Axis component for XY data (wraps `d3.axis`).\r\n\r\n    Available d3.axis extensions:\r\n\r\n    - `ticks`\r\n    - `tickValues`\r\n    - `tickSize`\r\n    - `innerTickSize`\r\n    - `outerTickSize`\r\n    - `tickPadding`\r\n    - `tickFormat`\r\n\r\n    ### Extending\r\n\r\n    To extend the `Axis` component, the following methods are available:\r\n\r\n    - `onInsert`\r\n    - `onEnter`\r\n    - `onEnterTransition`\r\n    - `onUpdate`\r\n    - `onUpdateTransition`\r\n    - `onMerge`\r\n    - `onMergeTransition`\r\n    - `onExit`\r\n    - `onExitTransition`\r\n\r\n    @example\r\n    ```js\r\n    d3.select('#chart')\r\n      .chart('Compose', function(data) {\r\n        var scales = {\r\n          x: {data: data, key: 'x'},\r\n          y: {data: data, key: 'y'}\r\n        };\r\n\r\n        var charts = [];\r\n        var xAxis = d3c.axis({scale: scales.x});\r\n        var yAxis = d3c.axis({scale: scales.y});\r\n\r\n        return [\r\n          // Display y-axis to left of charts\r\n          [yAxis, d3c.layered(charts)],\r\n\r\n          // Display x-axis below charts\r\n          xAxis\r\n        ];\r\n      });\r\n    ```\r\n    @class Axis\r\n    @extends Component, XY, Transition, StandardLayer\r\n  */\r\n  var components_Axis__Mixed = mixin(Component, XY, Transition, StandardLayer);\r\n  var Axis = components_Axis__Mixed.extend({\r\n    initialize: function(options) {\r\n      components_Axis__Mixed.prototype.initialize.call(this, options);\r\n\r\n      // Create two axes (so that layout and transitions work)\r\n      // 1. Display and transitions\r\n      // 2. Layout (draw to get width, but separate so that transitions aren't affected)\r\n      this.axis = d3.svg.axis();\r\n      this._layout_axis = d3.svg.axis();\r\n\r\n      this.axis_base = this.base.append('g').attr('class', 'chart-axis');\r\n      this._layout_base = this.base.append('g')\r\n        .attr('class', 'chart-axis chart-layout')\r\n        .append('g')\r\n          .style('display', 'none');\r\n\r\n      // Use standard layer for extensibility\r\n      this.standardLayer('Axis', this.axis_base);\r\n\r\n      // Setup gridlines\r\n      this.attachGridlines();\r\n    },\r\n\r\n    /**\r\n      Scale to pass to d3.axis\r\n\r\n      - If `xScale`/`yScale` are given, `scale` is set automatically based on `position`.\r\n      - Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used\r\n\r\n      @example\r\n      ```js\r\n      // Set with d3.scale directly\r\n      axis.scale(d3.scale());\r\n\r\n      // or with Object passed helpers.createScale\r\n      axis.scale({data: data, key: 'x'});\r\n\r\n      // For x0/y0 position, both xScale and yScale needed\r\n      // (scale is automatically set by position)\r\n      axis.xScale({domain: [0, 100]});\r\n      axis.yScale({domain: [0, 10]});\r\n      axis.position('y0');\r\n\r\n      // -> axis.scale() -> axis.xScale by default\r\n      ```\r\n      @property scale\r\n      @type Object|d3.scale\r\n    */\r\n    scale: property({\r\n      set: function(value) {\r\n        if (this.orientation() == 'vertical') {\r\n          this.yScale(value);\r\n          value = this.yScale();\r\n        }\r\n        else {\r\n          this.xScale(value);\r\n          value = this.xScale();\r\n        }\r\n\r\n        return {\r\n          override: value\r\n        };\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Position axis relative to chart\r\n      (top, right, bottom, left)\r\n\r\n      Note: x0 and y0 are currently disabled for more testing\r\n\r\n      @property position\r\n      @type String\r\n      @default bottom\r\n    */\r\n    position: property({\r\n      default_value: 'bottom',\r\n      validate: function(value) {\r\n        return contains(['top', 'right', 'bottom', 'left'], value);\r\n      },\r\n      set: function() {\r\n        // Update scale -> xScale/yScale when position changes\r\n        if (this.scale())\r\n          this.scale(this.scale());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      {x,y} translation of axis relative to chart\r\n      (set by default based on position)\r\n\r\n      @property translation\r\n      @type Object\r\n      @default (set based on position)\r\n    */\r\n    translation: property({\r\n      default_value: function() {\r\n        switch (this.position()) {\r\n          case 'top':\r\n            return {x: 0, y: 0};\r\n          case 'right':\r\n            return {x: this.width(), y: 0};\r\n          case 'bottom':\r\n            return {x: 0, y: this.height()};\r\n          case 'left':\r\n            return {x: 0, y: 0};\r\n          case 'x0':\r\n            return {x: this.x0(), y: 0};\r\n          case 'y0':\r\n            return {x: 0, y: this.y0()};\r\n        }\r\n      },\r\n      get: function(value) {\r\n        return translate(value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Axis orient for ticks\r\n      (set by default based on position)\r\n\r\n      @property orient\r\n      @type String\r\n      @default (set based on position)\r\n    */\r\n    orient: property({\r\n      default_value: function() {\r\n        var orient = this.position();\r\n\r\n        if (orient == 'x0')\r\n          orient = 'left';\r\n        else if (orient == 'y0')\r\n          orient = 'bottom';\r\n\r\n        return orient;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Axis orientation (vertical or horizonal)\r\n\r\n      @property orientation\r\n      @type String\r\n      @default (set based on position)\r\n    */\r\n    orientation: property({\r\n      validate: function(value) {\r\n        return contains(['horizontal', 'vertical'], value);\r\n      },\r\n      default_value: function() {\r\n        return {\r\n          top: 'horizontal',\r\n          right: 'vertical',\r\n          bottom: 'horizontal',\r\n          left: 'vertical',\r\n          x0: 'vertical',\r\n          y0: 'horizontal'\r\n        }[this.position()];\r\n      },\r\n      set: function() {\r\n        // Update scale -> xScale/yScale when orientation changes\r\n        if (this.scale())\r\n          this.scale(this.scale());\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Attach gridlines for axis\r\n      (`true` to show with default options, `{...}` to pass options to `Gridlines`)\r\n\r\n      @property gridlines\r\n      @type Boolean|Object\r\n      @default false\r\n    */\r\n    gridlines: property({\r\n      get: function(value) {\r\n        if (isBoolean(value))\r\n          value = {display: value};\r\n        else if (!value)\r\n          value = {display: false};\r\n\r\n        return value;\r\n      }\r\n    }),\r\n\r\n    // d3.axis extensions\r\n    ticks: property(),\r\n    tickValues: property(),\r\n    tickSize: property(),\r\n    innerTickSize: property(),\r\n    outerTickSize: property(),\r\n    tickPadding: property(),\r\n    tickFormat: property(),\r\n\r\n    onDataBind: function onDataBind(selection) {\r\n      // Setup axis (scale and properties)\r\n      this._setupAxis(this.axis);\r\n\r\n      // Force addition of just one axis with dummy data array\r\n      // (Axis will be drawn using underlying chart scales)\r\n      return selection.selectAll('g').data([0]);\r\n    },\r\n    onInsert: function onInsert(selection) {\r\n      return selection.append('g');\r\n    },\r\n    onEnter: function onEnter(selection) {\r\n      // Render axis\r\n      selection.call(this.axis);\r\n    },\r\n    onMerge: function onUpdate(selection) {\r\n      // Position axis\r\n      selection.attr('transform', this.translation());\r\n    },\r\n    onUpdateTransition: function onUpdateTransition(selection) {\r\n      // Render axis (with transition)\r\n      this.setupTransition(selection);\r\n\r\n      selection.call(this.axis);\r\n    },\r\n    onExit: function onExit(selection) {\r\n      selection.selectAll('g').remove();\r\n    },\r\n\r\n    getLayout: function() {\r\n      // Draw layout axis\r\n      this.setScales();\r\n      this._setupAxis(this._layout_axis);\r\n      this._layout_base.call(this._layout_axis);\r\n\r\n      // Calculate layout\r\n      // (make layout axis visible for width calculations in Firefox)\r\n      this._layout_base.style('display', 'block');\r\n\r\n      var label_overhang = this._getLabelOverhang();\r\n\r\n      this._layout_base.style('display', 'none');\r\n\r\n      return {\r\n        position: this.position(),\r\n        width: label_overhang.width,\r\n        height: label_overhang.height\r\n      };\r\n    },\r\n    setLayout: function() {\r\n      // Axis is positioned as chart layer, so don't set layout\r\n      return;\r\n    },\r\n\r\n    attachGridlines: function() {\r\n      var gridlines_options = gridlinesOptions(this);\r\n      var gridlines = this._gridlines = gridlines_options.display && createGridlines(this, gridlines_options);\r\n\r\n      this.on('draw', function() {\r\n        gridlines_options = gridlinesOptions(this);\r\n\r\n        if (gridlines)\r\n          gridlines.options(gridlines_options);\r\n        else if (gridlines_options.display)\r\n          gridlines = this._gridlines = createGridlines(this, gridlines_options);\r\n\r\n        if (gridlines && gridlines_options.display)\r\n          gridlines.draw();\r\n        else if (gridlines)\r\n          gridlines.draw([false]);\r\n      }.bind(this));\r\n\r\n      function gridlinesOptions(axis) {\r\n        return defaults({}, axis.gridlines(), {\r\n          parent: axis,\r\n          xScale: axis.xScale(),\r\n          yScale: axis.yScale(),\r\n          ticks: axis.ticks(),\r\n          tickValues: axis.tickValues(),\r\n          orientation: axis.orientation() == 'horizontal' ? 'vertical' : 'horizontal'\r\n        });\r\n      }\r\n\r\n      function createGridlines(axis, gridline_options) {\r\n        var base = axis.base.append('g').attr('class', 'chart-axis-gridlines');\r\n        return new Gridlines(base, gridline_options);\r\n      }\r\n    },\r\n\r\n    _setupAxis: function(axis) {\r\n      // Setup axis\r\n      if (this.orientation() == 'vertical')\r\n        axis.scale(this.yScale());\r\n      else\r\n        axis.scale(this.xScale());\r\n\r\n      var extensions = ['orient', 'ticks', 'tickValues', 'tickSize', 'innerTickSize', 'outerTickSize', 'tickPadding', 'tickFormat'];\r\n      var array_extensions = ['tickValues'];\r\n      extensions.forEach(function(key) {\r\n        var value = this[key] && this[key]();\r\n        if (!isUndefined(value)) {\r\n          // If value is array, treat as arguments array\r\n          // otherwise, pass in directly\r\n          if (Array.isArray(value) && !contains(array_extensions, key))\r\n            axis[key].apply(axis, value);\r\n          else\r\n            axis[key](value);\r\n        }\r\n      }, this);\r\n    },\r\n\r\n    _getLabelOverhang: function() {\r\n      // TODO Look into overhang relative to chartBase (for x0, y0)\r\n      var overhangs = {width: [0], height: [0]};\r\n      var orientation = this.orientation();\r\n\r\n      this._layout_base.selectAll('g').each(function() {\r\n        try {\r\n          // There are cases where getBBox may throw\r\n          // (e.g. not currently displayed in Firefox)\r\n          var bbox = this.getBBox();\r\n\r\n          if (orientation == 'horizontal')\r\n            overhangs.height.push(bbox.height);\r\n          else\r\n            overhangs.width.push(bbox.width);\r\n        }\r\n        catch (ex) {\r\n          // Ignore error\r\n        }\r\n      });\r\n\r\n      return {\r\n        width: d3.max(overhangs.width),\r\n        height: d3.max(overhangs.height)\r\n      };\r\n    }\r\n  }, {\r\n    layer_type: 'chart',\r\n    z_index: 60\r\n  });\r\n\r\n  var axis = createHelper('Axis');\r\n\r\n  d3.chart().Axis = Axis;\n\n  /**\n    Axis title component that extends Title with defaults (styling)\n\n    @class AxisTitle\n    @extends Title\n  */\n  var AxisTitle = Title.extend({\n    initialize: function(options) {\n      Title.prototype.initialize.call(this, options);\n      this.base.select('.chart-text')\n        .classed('chart-title', false)\n        .classed('chart-axis-title', true);\n    },\n\n    /**\n      Margins (in pixels) around axis title\n\n      @property margins\n      @type Object\n      @default (set based on `position`)\n    */\n    margins: property({\n      set: function(values) {\n        return {\n          override: getMargins(values, components_AxisTitle__defaultMargins(this.position()))\n        };\n      },\n      default_value: function() {\n        return components_AxisTitle__defaultMargins(this.position());\n      }\n    })\n  });\n\n  function components_AxisTitle__defaultMargins(position) {\n    var default_margin = 8;\n    var margins_by_position = {\n      top: {top: default_margin / 2, bottom: default_margin},\n      right: {left: default_margin / 2, right: default_margin},\n      bottom: {bottom: default_margin / 2, top: default_margin},\n      left: {right: default_margin / 2, left: default_margin}\n    };\n\n    return getMargins(margins_by_position[position]);\n  }\n\n  function axisTitle(id, options) {\n    return textOptions(id, options, {type: 'AxisTitle'});\n  }\n\n  d3.chart().AxisTitle = AxisTitle;\n\n  var default_legend_margins = {top: 8, right: 8, bottom: 8, left: 8};\n\n  /**\n    Legend component that can automatically pull chart and series information from d3.compose\n\n    Notes:\n\n    - To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\n    - To exclude a series from the legend, use `exclude_from_legend = true` in series object\n    - To add swatch for custom chart, use `Legend.registerSwatch()`\n\n    ### Extending\n\n    To extend the `Legend` component, the following methods are available:\n\n    - `itemKey`\n    - `itemText`\n    - `swatchClass`\n    - `createSwatch`\n    - `onDataBind`\n    - `onInsert`\n    - `onEnter`\n    - `onEnterTransition`\n    - `onUpdate`\n    - `onUpdateTransition`\n    - `onMerge`\n    - `onMergeTransition`\n    - `onExit`\n    - `onExitTransition`\n\n    @example\n    ```js\n    d3.select('#chart')\n      .chart('Compose', function(data) {\n        var input = [{key: 'input', name: 'Input', values: data.input}];\n        var output = [\n          {key: 'output1', name: 'Output 1', values: data.output1},\n          {key: 'output2', name: 'Output 2', values: data.output2}\n        ];\n\n        var charts = [\n          d3c.lines('a', {data: input}), // ...\n          d3c.bars('b', {data: output}) // ...\n        ];\n        var legend = d3c.legend({charts: ['a', 'b']});\n\n        return [\n          [d3c.layered(charts), legend]\n        ];\n      });\n\n    // -> automatically creates legend from series data for 'a' and 'b'\n    //    (Lines Swatch) Input\n    //    (Bars Swatch) Output 1\n    //    (Bars Swatch) Output 2\n\n    // or, manually set data for legend\n    return [\n      d3c.legend({\n        data: [\n          {type: 'Lines', text: 'Input', class: 'series-index-0'},\n          {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\n          {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\n        ]\n      })\n    };\n    ```\n    @class Legend\n    @extends Component, StandardLayer\n  */\n  var components_Legend__Mixed = mixin(Component, StandardLayer);\n  var Legend = components_Legend__Mixed.extend({\n    initialize: function(options) {\n      components_Legend__Mixed.prototype.initialize.call(this, options);\n      this.legend_base = this.base.append('g').classed('chart-legend', true);\n      this.standardLayer('Legend', this.legend_base);\n    },\n\n    /**\n      Array of chart keys from container to display in legend\n\n      @example\n      ```js\n      d3.select('#chart')\n      .chart('Compose', function(data) {\n        var charts = [\n          {id: 'a'},\n          {id: 'b'},\n          {id: 'c'}\n        ];\n        var legend = d3c.legend({charts: ['a', 'c']});\n\n        return [\n          [d3c.layered(charts), legend]\n        ];\n      });\n      ```\n      @property charts\n      @type Array\n    */\n    charts: property(),\n\n    /**\n      Dimensions of \"swatch\" in px\n\n      @property swatchDimensions\n      @type Object\n      @default {width: 20, height: 20}\n    */\n    swatchDimensions: property({\n      default_value: {width: 20, height: 20}\n    }),\n\n    /**\n      Margins (in pixels) around legend\n\n      @property margins\n      @type Object\n      @default {top: 8, right: 8, bottom: 8, left: 8}\n    */\n    margins: property({\n      default_value: default_legend_margins,\n      set: function(values) {\n        return {\n          override: getMargins(values, default_legend_margins)\n        };\n      }\n    }),\n\n    /**\n      Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\n      (Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")\n\n      @property stackDirection\n      @type String\n      @default (based on position)\n    */\n    stackDirection: property({\n      validate: function(value) {\n        return contains(['vertical', 'horizontal'], value);\n      },\n      default_value: function() {\n        var direction_by_position = {\n          top: 'horizontal',\n          right: 'vertical',\n          bottom: 'horizontal',\n          left: 'vertical'\n        };\n        return direction_by_position[this.position()];\n      }\n    }),\n\n    transform: function(data) {\n      if (this.charts()) {\n        // Pull legend data from charts\n        var charts = this.container.charts();\n        data = this.charts().reduce(function(combined_data, chart_id) {\n          var chart = find(charts, function(find_chart) { return find_chart.id == chart_id; });\n\n          // Check for exclude from legend option\n          if (!chart || chart.exclude_from_legend || chart.options().exclude_from_legend)\n            return combined_data;\n\n          var chart_data = this.container.demux(chart_id, this.container.data());\n          if (!isSeriesData(chart_data))\n            chart_data = [chart_data];\n\n          var legend_data = chart_data.reduce(function(memo, series, index) {\n            // Check for exclude from legend option on series\n            if (series && !series.exclude_from_legend) {\n              memo.push(this.getLegendData(chart, series, index));\n            }\n\n            return memo;\n          }.bind(this), []);\n\n          return combined_data.concat(legend_data);\n        }.bind(this), []);\n      }\n\n      return data;\n    },\n\n    // Key for legend item (default is key from data)\n    itemKey: di(function(chart, d) {\n      return d.key;\n    }),\n\n    // Text for legend item (default is text from data)\n    itemText: di(function(chart, d) {\n      return d.text;\n    }),\n\n    // Class to apply to swatch (default is class from data)\n    swatchClass: di(function(chart, d) {\n      return compact(['chart-legend-swatch', d['class']]).join(' ');\n    }),\n\n    // Create swatch (using registered swatches based on type from data)\n    createSwatch: di(function(chart, d, i) {\n      var selection = d3.select(this);\n\n      // Clear existing swatch\n      selection.selectAll('*').remove();\n      selection\n        .attr('class', chart.swatchClass);\n\n      var swatches = Legend.swatches;\n      if (!swatches)\n        return;\n\n      if (d && d.type && swatches[d.type])\n        swatches[d.type].call(selection, chart, d, i);\n      else if (swatches['default'])\n        swatches['default'].call(selection, chart, d, i);\n    }),\n\n    onDataBind: function onDataBind(selection, data) {\n      return selection.selectAll('.chart-legend-group')\n        .data(data, this.itemKey);\n    },\n    onInsert: function onInsert(selection) {\n      var groups = selection.append('g')\n        .attr('class', 'chart-legend-group')\n        .style('pointer-events', 'all')\n        .on('mouseenter', function(d, i) {\n          this.container.trigger('mouseenter:legend', this._itemDetails(d, i));\n        }.bind(this))\n        .on('mousemove', function(d, i) {\n          this.container.trigger('mousemove:legend', this._itemDetails(d, i));\n        }.bind(this))\n        .on('mouseleave', function(d, i) {\n          this.container.trigger('mouseleave:legend', this._itemDetails(d, i));\n        }.bind(this));\n\n      groups.append('g')\n        .attr('width', this.swatchDimensions().width)\n        .attr('height', this.swatchDimensions().height)\n        .attr('class', 'chart-legend-swatch');\n      groups.append('text')\n        .attr('class', 'chart-legend-label');\n\n      groups.append('rect')\n        .attr('class', 'chart-legend-hover')\n        .style('visibility', 'hidden');\n\n      return groups;\n    },\n    onMerge: function onMerge(selection) {\n      var swatch = this.swatchDimensions();\n\n      selection.select('.chart-legend-swatch').each(this.createSwatch);\n\n      selection.select('.chart-legend-label')\n        .text(this.itemText)\n        .each(function() {\n          // Vertically center text\n          var offset = alignText(this, swatch.height);\n          d3.select(this)\n            .attr('transform', translate(swatch.width + 5, offset));\n        });\n\n      // Position groups after positioning everything inside\n      selection.call(stack({\n        direction: this.stackDirection(),\n        origin: 'top',\n        padding: 5,\n        min_height: swatch.height,\n        min_width: swatch.width\n      }));\n\n      // Position hover listeners\n      var sizes = [];\n      selection.each(function() {\n        sizes.push(this.getBBox());\n      });\n      selection.select('.chart-legend-hover').each(function() {\n        var size = sizes.shift();\n        d3.select(this)\n          .attr('width', size.width)\n          .attr('height', size.height);\n      });\n    },\n    onExit: function onExit(selection) {\n      selection.remove();\n    },\n\n    getLegendData: function getLegendData(chart, series, series_index) {\n      return {\n        text: series.name || 'Series ' + (series_index + 1),\n        key: chart.id + '.' + (series.key || series_index),\n        type: chart.type,\n        'class': compact([\n          'chart-series',\n          'chart-index-' + series_index,\n          chart.options()['class'],\n          series['class']\n        ]).join(' ')\n      };\n    },\n\n    _itemDetails: function _itemDetails(d, i) {\n      return {\n        legend: this,\n        d: d,\n        i: i\n      };\n    }\n  }, {\n    z_index: 200,\n    swatches: {\n      'default': function(chart) {\n        var swatch_dimensions = chart.swatchDimensions();\n\n        this.append('circle')\n          .attr('cx', swatch_dimensions.width / 2)\n          .attr('cy', swatch_dimensions.height / 2)\n          .attr('r', d3.min([swatch_dimensions.width, swatch_dimensions.height]) / 2)\n          .attr('class', 'chart-swatch');\n      }\n    },\n\n    /**\n      Register a swatch create function for the given chart type\n\n      @example\n      ```js\n      d3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\n        var dimensions = chart.swatchDimensions();\n\n        return this.append('line')\n          .attr('x1', 0).attr('y1', dimensions.height / 2)\n          .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\n          .attr('class', 'chart-line');\n      });\n      ```\n      @method registerSwatch\n      @static\n      @param {Array|String} types Chart type(s)\n      @param {Function} create \"di\" function that inserts swatch\n    */\n    registerSwatch: function(types, create) {\n      if (!Array.isArray(types))\n        types = [types];\n\n      types.forEach(function(type) {\n        this.swatches[type] = create;\n      }, this);\n    }\n  });\n\n  // Create line swatch for Line and LineValues\n  Legend.registerSwatch(['Lines'], function(chart) {\n    var swatch_dimensions = chart.swatchDimensions();\n\n    return this.append('line')\n      .attr('x1', 0).attr('y1', swatch_dimensions.height / 2)\n      .attr('x2', swatch_dimensions.width).attr('y2', swatch_dimensions.height / 2)\n      .attr('class', 'chart-line');\n  });\n\n  // Create bars swatch for Bars and StackedBars\n  Legend.registerSwatch(['Bars', 'StackedBars', 'HorizontalBars', 'HorizontalStackedBars'], function(chart) {\n    var swatch_dimensions = chart.swatchDimensions();\n\n    return this.append('rect')\n      .attr('x', 0).attr('y', 0)\n      .attr('width', swatch_dimensions.width).attr('height', swatch_dimensions.height)\n      .attr('class', 'chart-bar');\n  });\n\n  var legend = createHelper('Legend');\n\n  d3.chart().Legend = Legend;\n\n  /**\n    Legend positioned within chart bounds.\n\n    @class InsetLegend\n    @extends Legend\n  */\n  var InsetLegend = Legend.extend({\n    initialize: function(options) {\n      Legend.prototype.initialize.call(this, options);\n      this.on('draw', function() {\n        // Position legend on draw\n        // (Need actual width/height for relative_to)\n        var translation = this.translation();\n        this.legend_base.attr('transform', translate(translation.x, translation.y));\n      }.bind(this));\n    },\n\n    /**\n      Position legend within chart layer `{x, y, relative_to}`\n      Use `relative_to` to use x,y values relative to x-y origin\n      (e.g. `\"left-top\"` is default)\n\n      @example\n      ```js\n      d3.select('#chart')\n        .chart('Compose', function(data) {\n          return {\n            components: {\n              legend: {\n                type: 'InsetLegend',\n                // Position legend 10px away from right-bottom corner of chart\n                translation: {x: 10, y: 10, relative_to: 'right-bottom'}\n              }\n            }\n          }\n        });\n      ```\n      @property translation\n      @type Object {x,y}\n      @default {x: 10, y: 10, relative_to: 'left-top'}\n    */\n    translation: property({\n      default_value: {x: 10, y: 0, relative_to: 'left-top'},\n      get: function(value) {\n        var x = value.x || 0;\n        var y = value.y || 0;\n        var relative_to_x = (value.relative_to && value.relative_to.split('-')[0]) || 'left';\n        var relative_to_y = (value.relative_to && value.relative_to.split('-')[1]) || 'top';\n\n        if (relative_to_x === 'right') {\n          x = this.width() - dimensions(this.legend_base).width - x;\n        }\n        if (relative_to_y === 'bottom') {\n          y = this.height() - dimensions(this.legend_base).height - y;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      }\n    }),\n\n    skip_layout: true\n  }, {\n    layer_type: 'chart'\n  });\n\n  var insetLegend = createHelper('InsetLegend');\n\n  d3.chart().InsetLegend = InsetLegend;\n\n  var d3c = d3.compose = {\n    VERSION: '0.15.9',\n    utils: utils,\n    helpers: helpers,\n    Base: Base,\n    Chart: src_Chart,\n    Component: Component,\n    Overlay: Overlay,\n    Compose: Compose,\n    layered: layered,\n\n    mixins: mixins,\n\n    Lines: Lines,\n    lines: lines,\n    Bars: Bars,\n    bars: bars,\n    StackedBars: StackedBars,\n    stackedBars: stackedBars,\n    HorizontalBars: HorizontalBars,\n    horizontalBars: horizontalBars,\n    HorizontalStackedBars: HorizontalStackedBars,\n    horizontalStackedBars: horizontalStackedBars,\n    Labels: charts_Labels__Labels,\n    labels: labels,\n    HoverLabels: HoverLabels,\n    hoverLabels: hoverLabels,\n\n    Text: Text,\n    text: text,\n    Title: Title,\n    title: title,\n    Axis: Axis,\n    axis: axis,\n    AxisTitle: AxisTitle,\n    axisTitle: axisTitle,\n    Legend: Legend,\n    legend: legend,\n    InsetLegend: InsetLegend,\n    insetLegend: insetLegend,\n    Gridlines: Gridlines,\n    gridlines: gridlines\n  };\n\n  var d3_compose_all = d3c;\n\n  return d3_compose_all;\n\n}));\n","// Many utils inlined from Underscore.js\n// (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\nexport var slice = Array.prototype.slice;\nexport var toString = Object.prototype.toString;\n\nfunction _extend(target, extensions, undefined_only) {\n  for (var i = 0, length = extensions.length; i < length; i++) {\n    for (var key in extensions[i]) {\n      if (!undefined_only || target[key] === void 0)\n        target[key] = extensions[i][key];\n    }\n  }\n\n  return target;\n}\n\nexport function contains(arr, item) {\n  return arr.indexOf(item) >= 0;\n}\n\nexport function compact(arr) {\n  return arr.filter(function(item) {\n    return item;\n  });\n}\n\nexport function difference(a, b) {\n  return a.filter(function(value) {\n    return b.indexOf(value) < 0;\n  });\n}\n\nexport function defaults(target) {\n  return _extend(target, slice.call(arguments, 1), true);\n}\n\nexport function extend(target) {\n  return _extend(target, slice.call(arguments, 1));\n}\n\nexport function flatten(arr) {\n  // Assumes all items in arr are arrays and only flattens one level\n  return arr.reduce(function(memo, item) {\n    return memo.concat(item);\n  }, []);\n}\n\nexport function find(arr, fn, context) {\n  if (!arr) return;\n  for (var i = 0, length = arr.length; i < length; i++) {\n    if (fn.call(context, arr[i], i, arr))\n      return arr[i];\n  }\n}\n\nexport function first(arr, n) {\n  if (arr == null) return void 0;\n  if (n == null) return arr[0];\n  return Array.prototype.slice.call(arr, 0, n);\n}\n\nexport function isBoolean(obj) {\n  return obj === true || obj === false;\n}\nexport function isObject(obj) {\n  var type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n}\nexport function isNumber(obj) {\n  return toString.call(obj) === '[object Number]';\n}\nexport function isString(obj) {\n  return toString.call(obj) === '[object String]';\n}\nexport function isUndefined(obj) {\n  return obj === void 0;\n}\n\nexport var isFunction = function(obj) {\n  return toString.call(obj) === '[object Function]';\n};\nif (typeof /./ != 'function' && typeof Int8Array != 'object') {\n  isFunction = function(obj) {\n    return typeof obj == 'function' || false;\n  };\n}\n\nexport function objectEach(obj, fn, context) {\n  if (!obj) return;\n  var keys = Object.keys(obj);\n  for (var i = 0, length = keys.length; i < length; i++) {\n    fn.call(context, obj[keys[i]], keys[i], obj);\n  }\n}\n\nexport function objectFind(obj, fn, context) {\n  if (!obj) return;\n  var keys = Object.keys(obj);\n  for (var i = 0, length = keys.length; i < length; i++) {\n    if (fn.call(context, obj[keys[i]], keys[i], obj))\n      return obj[keys[i]];\n  }\n}\n\nexport function pluck(objs, key) {\n  if (!objs) return [];\n  return objs.map(function(obj) {\n    return obj[key];\n  });\n}\n\nexport function uniq(arr) {\n  var result = [];\n  for (var i = 0, length = arr.length; i < length; i++) {\n    if (result.indexOf(arr[i]) < 0)\n      result.push(arr[i]);\n  }\n  return result;\n}\n\nexport function inherits(Child, Parent) {\n  Child.prototype = Object.create(Parent.prototype, {\n    constructor: {\n      value: Child,\n      enumerable: false,\n      writeable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(Child, Parent);\n  }\n  else {\n    Child.__proto__ = Parent; //eslint-disable-line no-proto\n\n    // __proto__ isn't supported in IE,\n    // use one-time copy of static properties to approximate\n    defaults(Child, Parent);\n  }\n}\n\n// If value isn't `undefined`, return `value`, otherwise use `default_value`\n//\n// @method valueOrDefault\n// @param {Any} [value]\n// @param {Any} default_value\n// @return {Any}\nexport function valueOrDefault(value, default_value) {\n  return !isUndefined(value) ? value : default_value;\n}\n\nvar utils = {\n  slice: slice,\n  toString: toString,\n  contains: contains,\n  compact: compact,\n  difference: difference,\n  defaults: defaults,\n  extend: extend,\n  flatten: flatten,\n  find: find,\n  first: first,\n  isBoolean: isBoolean,\n  isFunction: isFunction,\n  isObject: isObject,\n  isNumber: isNumber,\n  isString: isString,\n  isUndefined: isUndefined,\n  objectEach: objectEach,\n  objectFind: objectFind,\n  pluck: pluck,\n  uniq: uniq,\n  inherits: inherits,\n  valueOrDefault: valueOrDefault\n};\nexport default utils;\n","import {\n  isFunction,\n  isUndefined,\n  valueOrDefault\n} from '../utils';\nvar unique_index = 0;\n\n/**\n  Helper for creating properties for charts/components\n\n  @example\n  ```javascript\n  var Custom = d3.chart('Chart').extend('Custom', {\n    // Create property that's stored internally as 'simple'\n    simple: property()\n  });\n  var custom; // = new Custom(...);\n\n  // set\n  custom.simple('Howdy');\n\n  // get\n  console.log(custom.simple()); // -> 'Howdy'\n\n  // Advanced\n  // --------\n  // Default values:\n  Custom.prototype.message = property({\n    default_value: 'Howdy!'\n  });\n\n  console.log(custom.message()); // -> 'Howdy!'\n  custom.message('Goodbye');\n  console.log(custom.message()); // -> 'Goodbye'\n\n  // Set to undefined to reset to default value\n  custom.message(undefined);\n  console.log(custom.message()); // -> 'Howdy!'\n\n  // Computed default value:\n  Custom.property.computed = property({\n    default_value: function() {\n      // \"this\" = Custom instance\n      return this.message();\n    }\n  });\n\n  // Function default value:\n  // For function default_values, wrap in function to differentiate from computed\n  Custom.property.fn = property({\n    default_value: function() {\n      return function defaultFn() {};\n    }\n    // The following would be incorrectly evaluated\n    // default_value: function defaultFn() {}\n  })\n\n  // Custom getter:\n  Custom.prototype.exclaimed = property({\n    get: function(value) {\n      // Value is the underlying set value\n      return value + '!';\n    }\n  });\n\n  custom.exclaimed('Howdy');\n  console.log(custom.exclaimed()); // -> 'Howdy!'\n\n  // Custom setter:\n  Custom.prototype.feeling = property({\n    set: function(value, previous) {\n      if (value == 'Hate') {\n        // To override value, return Object with override specified\n        return {\n          override: 'Love',\n\n          // To do something after override, use after callback\n          after: function() {\n            console.log('After: ' + this.feeling()); // -> 'After: Love'\n          }\n        };\n      }\n    }\n\n    custom.feeling('Hate'); // -> 'After: Love'\n    console.log(custom.feeling()); // -> 'Love'\n  });\n  ```\n  @method property\n  @for helpers\n  @param {Object} [options]\n  @param {Any} [options.default_value] default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.\n  @param {Function} [options.get] `function(value) {return ...}` getter, where `value` is the stored value and return desired value\n  @param {Function} [options.set] `function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set\n  @param {Object} [options.context=this] context to evaluate get/set/after functions\n  @return {Function} `()`: get, `(value)`: set\n*/\nexport default function property(options) {\n  // DEPRECATED: name as first argument\n  if (arguments.length == 2) {\n    if (typeof console != 'undefined' && console.warn)\n      console.warn('DEPRECATED - name argument for property is no longer supported will be removed in the next version of d3.compose');\n    options = arguments[1];\n  }\n\n  options = options || {};\n  var id = 'property_' + unique_index++;\n\n  var property = function(value) {//eslint-disable-line no-shadow\n    var properties = this.__properties = this.__properties || {};\n    var context = valueOrDefault(property.context, this);\n\n    if (arguments.length)\n      return set.call(this);\n    else\n      return get.call(this);\n\n    function get() {\n      value = properties[id];\n\n      if (isUndefined(value)) {\n        // Use default value and unwrap if it's a function\n        value = property.default_value;\n        if (isFunction(value))\n          value = value.call(context);\n      }\n\n      return isFunction(options.get) ? options.get.call(context, value) : value;\n    }\n\n    function set() {\n      // Validate\n      if (isFunction(options.validate) && !isUndefined(value) && !options.validate.call(context, value))\n        throw new Error('Invalid value for property: ' + JSON.stringify(value));\n\n      var previous = properties[id];\n      properties[id] = value;\n\n      if (isFunction(options.set) && !isUndefined(value)) {\n        var response = options.set.call(context, value, previous);\n\n        if (response && 'override' in response)\n          properties[id] = response.override;\n        if (response && isFunction(response.after))\n          response.after.call(context, properties[id]);\n      }\n\n      return this;\n    }\n  };\n\n  // For checking if function is a property\n  property.is_property = true;\n  property.id = id;\n  property.set_from_options = valueOrDefault(options.set_from_options, true);\n  property.default_value = options.default_value;\n  property.context = options.context;\n  property.options = options;\n\n  return property;\n}\n","import d3 from 'd3';\n\n/**\n  Helper for robustly determining width/height of given selector.\n  Checks dimensions from css, attributes, and bounding box.\n\n  @method dimensions\n  @for helpers\n  @param {d3.Selection} selection\n  @return {Object} `{width, height}`\n*/\nexport default function dimensions(selection) {\n  // 1. Get width/height set via css (only valid for svg and some other elements)\n  var client = clientDimensions(selection);\n\n  if (client.width && client.height)\n    return client;\n\n  // 2. Get width/height set via attribute\n  var attr = attrDimensions(selection);\n\n  if (isSVG(selection)) {\n    return {\n      width: client.width != null ? client.width : attr.width || 0,\n      height: client.height != null ? client.height : attr.height || 0\n    };\n  }\n  else {\n    var bbox = bboxDimensions(selection);\n\n    // Size set by css -> client (only valid for svg and some other elements)\n    // Size set by svg -> attr override or bounding_box\n    // -> Take maximum\n    return {\n      width: d3.max([client.width, attr.width || bbox.width]) || 0,\n      height: d3.max([client.height, attr.height || bbox.height]) || 0\n    };\n  }\n}\n\nfunction clientDimensions(selection) {\n  var element = selection.node();\n\n  var client_dimensions = {\n    width: element && element.clientWidth,\n    height: element && element.clientHeight\n  };\n\n  // Issue: Firefox does not correctly calculate clientWidth/clientHeight for svg\n  //        calculate from css\n  //        http://stackoverflow.com/questions/13122790/how-to-get-svg-element-dimensions-in-firefox\n  //        Note: This makes assumptions about the box model in use and that width/height are not percent values\n  if (isSVG(selection) && (!element.clientWidth || !element.clientHeight) && typeof window !== 'undefined' && window.getComputedStyle) {\n    var styles = window.getComputedStyle(element);\n    client_dimensions.height = parseFloat(styles.height) - parseFloat(styles.borderTopWidth) - parseFloat(styles.borderBottomWidth);\n    client_dimensions.width = parseFloat(styles.width) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\n  }\n\n  return client_dimensions;\n}\n\nfunction attrDimensions(selection) {\n  return {\n    width: selection && selection.attr && parseFloat(selection.attr('width')),\n    height: selection && selection.attr && parseFloat(selection.attr('height'))\n  };\n}\n\nfunction bboxDimensions(selection) {\n  var element = selection.node();\n  var bbox;\n  try {\n    bbox = element && typeof element.getBBox == 'function' && element.getBBox();\n  }\n  catch(ex) {\n    // Firefox throws error when calling getBBox when svg hasn't been displayed\n    // Ignore error and set to empty\n    bbox = {width: 0, height: 0};\n  }\n\n  return bbox;\n}\n\nfunction isSVG(selection) {\n  return selection.node().nodeName == 'svg';\n}\n","import d3 from 'd3';\nimport {\n  isFunction,\n  extend,\n  objectEach,\n  uniq,\n  contains,\n  flatten\n} from '../utils';\nimport {\n  min,\n  max,\n  isSeriesData\n} from '../helpers';\n\n/**\n  Create scale from options\n\n  @example\n  ```javascript\n  // Simple type, range, and domain\n  var scale = createScale({\n    type: 'linear',\n    domain: [0, 100],\n    range: [0, 500]\n  });\n\n  // Calculate domain for data\n  var scale = createScale({\n    type: 'log',\n    data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\n    key: 'y'\n  });\n\n  // Scale is passed through\n  var original = d3.scale.linear();\n  var scale = createScale(original);\n  scale === original;\n\n  // Set other properties by passing in \"arguments\" array\n  var scale = createScale({\n    type: 'ordinal',\n    domain: ['a', 'b', 'c', 'd', 'e'],\n    rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\n  });\n\n  // Use ordinal + adjacent for bar charts\n  var scale = createScale({\n    type: 'ordinal',\n    adjacent: true,\n    domain: ['a', 'b', 'c'],\n    series: 2 // Series count is required for adjacent if data isn't given\n  })\n  ```\n  @method createScale\n  @for helpers\n  @param {Object|Function} options (passing in `Function` returns original function with no changes)\n  @param {String} [options.type='linear'] Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`\n  @param {Array} [options.domain] Domain for scale\n  @param {Array} [options.range] Range for scale\n  @param {Any} [options.data] Used to dynamically set domain (with given value or key)\n  @param {Function} [options.value] \"di\"-function for getting value for data\n  @param {String} [options.key] Data key to extract value\n  @param {Boolean} [options.centered] For \"ordinal\" scales, use centered x-values\n  @param {Boolean} [options.adjacent] For \"ordinal\" + centered, set x-values for different series next to each other\n\n  - Requires series-index as second argument to scale, otherwise centered x-value is used\n  - Requires \"data\" or \"series\" options to determine number of series\n  @param {Number} [options.series] Used with \"adjacent\" if no \"data\" is given to set series count\n  @param {Number} [options.padding=0.1] For \"ordinal\" scales, set padding between different x-values\n  @param {Array...} [options....] Set any other scale properties with array of arguments to pass to property\n  @return {d3.Scale}\n*/\nexport default function createScale(options) {\n  options = options || {};\n\n  // If function, scale was passed in as options\n  if (isFunction(options))\n    return options;\n\n  // Create scale (using d3.time.scale() if type is 'time')\n  var scale;\n  if (options.type == 'time')\n    scale = d3.time.scale();\n  else if (d3.scale[options.type])\n    scale = d3.scale[options.type]();\n  else\n    scale = d3.scale.linear();\n\n  objectEach(options, function(value, key) {\n    if (scale[key]) {\n      // If option is standard property (domain or range), pass in directly\n      // otherwise, pass in as arguments\n      // (don't pass through internal options)\n      if (key == 'range' || key == 'domain')\n        scale[key](value);\n      else if (!contains(['type', 'data', 'value', 'key', 'centered', 'adjacent', 'series', 'padding'], key))\n        scale[key].apply(scale, value);\n    }\n  });\n\n  if (!options.domain && options.data && (options.key || options.value))\n    scale = setDomain(scale, options);\n\n  // Add centered and adjacent extensions to ordinal\n  // (centered by default for ordinal)\n  var centered = options.centered || (options.type == 'ordinal' && options.centered == null);\n  if (options.type == 'ordinal' && (centered || options.adjacent))\n    scale = addCentered(scale, options);\n\n  // Add padding extension to ordinal\n  if (options.type == 'ordinal' && (options.padding != null || centered || options.adjacent))\n    scale = addPadding(scale, options);\n\n  return scale;\n}\n\nfunction setDomain(scale, options) {\n  // Use value \"di\" or create for key\n  var getValue = options.value || function(d) {\n    return d[options.key];\n  };\n\n  // Enforce series data\n  var data = options.data;\n  if (!isSeriesData(data))\n    data = [{values: data}];\n\n  var domain;\n  if (options.type == 'ordinal') {\n    // Domain for ordinal is array of unique values\n    domain = uniq(flatten(data.map(function(series) {\n      if (series && series.values)\n        return series.values.map(getValue);\n    })));\n  }\n  else {\n    var min_value = min(data, getValue);\n\n    domain = [\n      min_value < 0 ? min_value : 0,\n      max(data, getValue)\n    ];\n  }\n\n  scale.domain(domain);\n  return scale;\n}\n\nfunction addCentered(original, options) {\n  // Get series count for adjacent\n  var series_count = options.series || (!isSeriesData(options.data) ? 1 : options.data.length);\n\n  // TODO Look into removing closure\n  var scale = (function(original, options, series_count) {//eslint-disable-line no-shadow\n    var context = function(value, series_index) {\n      var width = context.width();\n\n      if (!options.adjacent)\n        series_index = 0;\n\n      return original(value) + (0.5 * width) + (width * (series_index || 0));\n    };\n    extend(context, original, {\n      width: function() {\n        var range_band = context.rangeBand && context.rangeBand();\n        var width = isFinite(range_band) ? range_band : 0;\n\n        if (options.adjacent)\n          width = width / series_count;\n\n        return width;\n      }\n    });\n\n    // TODO test copy() behavior\n\n    return context;\n  })(original, options, series_count);\n\n  return scale;\n}\n\nfunction addPadding(scale, options) {\n  var padding = options.padding != null ? options.padding : 0.1;\n\n  var original_range = scale.range;\n  scale.range = function(range) {\n    if (!arguments.length) return original_range();\n\n    scale.rangeBands(\n      range,\n      padding,\n      padding / 2\n    );\n  };\n\n  if (options.range)\n    scale.range(options.range);\n\n  // TODO test copy() behavior\n  return scale;\n}\n","import {\n  objectEach,\n  slice\n} from '../utils';\n\n/**\n  Combine mixins with Parent super class for extension\n\n  @example\n  ```js\n  var a = {transform: function() {}, a: 1};\n  var b = {initialize: function() {}, b: 2};\n  var c = {c: 3};\n\n  var Custom = mixin(Chart, a, b, c).extend({\n    initialize: function(options) {\n      this._super.initialize.call(this, options);\n      // d\n    },\n    transform: function(data) {\n      data = this._super.transform.call(this, data);\n      // d\n    }\n  });\n\n  // initialize: Chart, b, d\n  // transform: Chart, a, d\n  ```\n  @method mixin\n  @for helpers\n  @param {Function} Parent\n  @param {...Object} ...mixins\n  @return {Function}\n*/\nexport default function mixin(Parent/*, ...mixins*/) {\n  var mixins = slice.call(arguments, 1);\n  var initializes = [];\n  var transforms = [];\n  var mixed = {};\n\n  mixins.forEach(function(mix) {\n    objectEach(mix, function(value, key) {\n      if (key == 'initialize')\n        initializes.push(value);\n      else if (key == 'transform')\n        transforms.push(value);\n      else\n        mixed[key] = value;\n    });\n  });\n\n  if (initializes.length) {\n    mixed.initialize = function initialize() {\n      var args = slice.call(arguments);\n      Parent.prototype.initialize.apply(this, args);\n      initializes.forEach(function(init) {\n        init.apply(this, args);\n      }, this);\n    };\n  }\n\n  if (transforms.length) {\n    mixed.transform = function transform(data) {\n      data = Parent.prototype.transform.call(this, data);\n      return transforms.reduce(function(memo, trans) {\n        return trans.call(this, memo);\n      }.bind(this), data);\n    };\n  }\n\n  return Parent.extend(mixed);\n}\n","import { extend } from '../utils';\nimport { translate } from '../helpers';\n\n/**\n  Stack given array of elements vertically or horizontally\n\n  @example\n  ```js\n  // Stack all text elements vertically, from the top, with 0px padding\n  d3.selectAll('text').call(helpers.stack())\n\n  // Stack all text elements horizontally, from the right, with 5px padding\n  d3.selectAll('text').call(helpers.stack({\n    direction: 'horizontal',\n    origin: 'right',\n    padding: 5\n  }));\n  ```\n  @method stack\n  @for helpers\n  @param {Object} [options]\n  @param {String} [options.direction=vertical] `\"vertical\"` or `\"horizontal\"`\n  @param {String} [options.origin] `\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)\n  @param {Number} [options.padding=0] padding (in px) between elements\n  @param {Number} [options.min_height=0] minimum spacing height (for vertical stacking)\n  @param {Number} [options.min_width=0]  minimum spacing width (for horizontal stacking)\n  @return {Function}\n*/\nexport default function stack(options) {\n  options = extend({\n    direction: 'vertical',\n    origin: 'top',\n    padding: 0,\n    min_height: 0,\n    min_width: 0\n  }, options);\n\n  // Ensure valid origin based on direction\n  if (options.direction == 'horizontal' && !(options.origin == 'left' || options.origin == 'right'))\n    options.origin = 'left';\n  else if (options.direction == 'vertical' && !(options.origin == 'top' || options.origin == 'bottom'))\n    options.origin = 'top';\n\n  function padding(i) {\n    return i > 0 && options.padding ? options.padding : 0;\n  }\n\n  return function(elements) {\n    if (elements && elements.attr) {\n      var previous = 0;\n\n      elements.attr('transform', function(d, i) {\n        var element_dimensions = this.getBBox();\n        var spacing_width = d3.max([element_dimensions.width, options.min_width]);\n        var spacing_height = d3.max([element_dimensions.height, options.min_height]);\n        var x = 0;\n        var y = 0;\n        var next_position;\n\n        if (options.direction == 'horizontal') {\n          next_position = previous + spacing_width + padding(i);\n\n          if (options.origin == 'left')\n            x = previous + padding(i);\n          else\n            x = next_position;\n\n          previous = next_position;\n        }\n        else {\n          next_position = previous + spacing_height + padding(i);\n\n          if (options.origin == 'top')\n            y = previous + padding(i);\n          else\n            y = next_position;\n\n          previous = next_position;\n        }\n\n        return translate(x, y);\n      });\n    }\n  };\n}\n","import d3 from 'd3';\nimport {\n  defaults,\n  extend,\n  first,\n  isNumber,\n  isObject,\n  objectEach\n} from './utils';\n\n/**\n  `d3.compose.helpers` includes general purpose helpers that are used throughout d3.compose.\n  Includes convenience functions for create charts/components (`property`, `di`, and `mixin`),\n  helpful calculations (`dimensions`, `max`, and `min`) and other common behavior.\n\n  @class helpers\n*/\n\nimport property from './helpers/property';\nimport dimensions from './helpers/dimensions';\nimport createScale from './helpers/create-scale';\nimport mixin from './helpers/mixin';\nimport stack from './helpers/stack';\n\n/**\n  Translate by (x, y) distance\n\n  @example\n  ```javascript\n  translate(10, 15) == 'translate(10, 15)'\n  translate({x: 10, y: 15}) == 'translate(10, 15)'\n  ```\n  @method translate\n  @param {Number|Object} [x] value or `{x, y}`\n  @param {Number} [y]\n  @return {String}\n*/\nexport function translate(x, y) {\n  if (isObject(x)) {\n    y = x.y;\n    x = x.x;\n  }\n\n  return 'translate(' + (x || 0) + ', ' + (y || 0) + ')';\n}\n\n/**\n  Rotate by degrees, with optional center\n\n  @method rotate\n  @param {Number} degrees\n  @param {Object} [center = {x: 0, y: 0}]\n  @return {String}\n*/\nexport function rotate(degrees, center) {\n  var rotation = 'rotate(' + (degrees || 0);\n  if (center)\n    rotation += ' ' + (center.x || 0) + ',' + (center.y || 0);\n  rotation += ')';\n\n  return rotation;\n}\n\n/**\n  Find vertical offset to vertically align text\n  (needed due to lack of `alignment-baseline` support in Firefox)\n\n  @example\n  ```js\n  var label = d3.select('text');\n\n  // Place label vertically so that origin is top-left\n  var offset = alignText(label);\n  label.attr('transform', translate(0, offset));\n\n  // Center label for line-height of 20px\n  var offset = alignText(label, 20);\n  label.attr('transform', translate(0, offset));\n  ```\n  @method alignText\n  @param {element} element\n  @param {Number} [line_height]\n  @return {Number} offset\n*/\nexport function alignText(element, line_height) {\n  var offset = 0;\n  try {\n    var height = element.getBBox().height;\n\n    var element_style = window.getComputedStyle(element);\n    var css_font_size = parseFloat(element_style['font-size']);\n    var css_line_height = parseFloat(element_style['line-height']);\n\n    // If line-height: normal, use estimate 1.14em\n    // (actual line-height depends on browser and font)\n    if (isNaN(css_line_height))\n      css_line_height = 1.15 * css_font_size;\n\n    var css_adjustment = -(css_line_height - css_font_size) / 2;\n\n    // Add additional line-height, if specified\n    var height_adjustment = 0;\n    if (line_height && line_height > 0)\n      height_adjustment = (line_height - height) / 2;\n\n    offset = height + (css_adjustment || 0) + (height_adjustment || 0);\n  }\n  catch (ex) {\n    // Errors can occur from getBBox and getComputedStyle\n    // No useful information for offset, do nothing\n  }\n\n  return offset;\n}\n\n/**\n  Determine if given data is likely series data\n\n  @method isSeriesData\n  @param {Array} data\n  @return {Boolean}\n*/\nexport function isSeriesData(data) {\n  var first_item = first(data);\n  return first_item && isObject(first_item) && Array.isArray(first_item.values);\n}\n\n/**\n  Get max for array/series by value di\n\n  @example\n  ```js\n  var data = [\n    {values: [{y: 1}, {y: 2}, {y: 3}]},\n    {values: [{y: 4}, {y: 2}, {y: 0}]}\n  ];\n  max(data, function(d, i) { return d.y; }); // -> 4\n  ```\n  @method max\n  @param {Array} data\n  @param {Function} getValue di function that returns value for given (d, i)\n  @return {Number}\n*/\nexport function max(data, getValue) {\n  var getMax = function(series_data) {\n    return series_data && d3.extent(series_data, getValue)[1];\n  };\n\n  if (isSeriesData(data)) {\n    return data.reduce(function(memo, series) {\n      if (series && Array.isArray(series.values)) {\n        var series_max = getMax(series.values);\n        return series_max > memo ? series_max : memo;\n      }\n      else {\n        return memo;\n      }\n    }, -Infinity);\n  }\n  else {\n    return getMax(data);\n  }\n}\n\n/**\n  Get min for array/series by value di\n\n  @example\n  ```js\n  var data = [\n    {values: [{x: 1}, {x: 2}, {x: 3}]},\n    {values: [{x: 4}, {x: 2}, {x: 0}]}\n  ];\n  min(data, function(d, i) { return d.x; }); // -> 0\n  ```\n  @method min\n  @param {Array} data\n  @param {Function} getValue di function that returns value for given (d, i)\n  @return {Number}\n*/\nexport function min(data, getValue) {\n  var getMin = function(series_data) {\n    return series_data && d3.extent(series_data, getValue)[0];\n  };\n\n  if (isSeriesData(data)) {\n    return data.reduce(function(memo, series) {\n      if (series && Array.isArray(series.values)) {\n        var series_min = getMin(series.values);\n        return series_min < memo ? series_min : memo;\n      }\n      else {\n        return memo;\n      }\n    }, Infinity);\n  }\n  else {\n    return getMin(data);\n  }\n}\n\n// TODO Look into converting to d3's internal style handling\n// Convert key,values to style string\n//\n// @example\n// ```js\n// style({color: 'red', display: 'block'}) -> color: red; display: block;\n// ```\n// @method style\n// @param {Object} styles\n// @return {String}\nexport function style(styles) {\n  if (!styles)\n    return '';\n\n  var keyValues = [];\n  objectEach(styles, function(value, key) {\n    keyValues.push(key + ': ' + value);\n  });\n  styles = keyValues.join('; ');\n\n  return styles ? styles + ';' : '';\n}\n\n/**\n  Get formatted margins for varying input\n\n  @method getMargins\n  @example\n  ```js\n  getMargins(4);\n  // -> {top: 4, right: 4, bottom: 4, left: 4}\n\n  getMargins({top: 20}, {top: 8, bottom: 8});\n  // -> {top: 20, right: 0, bottom: 8, left: 0}\n  ```\n  @param {Number|Object} margins\n  @param {Object} default_margins\n  @return {Object}\n*/\nexport function getMargins(margins, default_margins) {\n  if (isNumber(margins))\n    return {top: margins, right: margins, bottom: margins, left: margins};\n  else\n    return defaults({}, margins, default_margins, {top: 0, right: 0, bottom: 0, left: 0});\n}\n\n/**\n  Create wrapped `(d, i)` function that adds chart instance as first argument.\n  Wrapped function uses standard d3 arguments and context.\n\n  Note: in order to pass proper context to di-functions called within di-function\n  use `.call(this, d, i)` (where \"this\" is d3 context)\n\n  @example\n  ```javascript\n  d3.chart('Base').extend('Custom', {\n    initialize: function() {\n      this.base.select('point')\n        .attr('cx', this.x);\n      // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\n    },\n\n    x: di(function(chart, d, i) {\n      // \"this\" is standard d3 context: node\n      return chart.xScale()(chart.xValue.call(this, d, i));\n    })\n\n    // xScale, xValue...\n  });\n  ```\n  @method di\n  @param {Function} callback with `(chart, d, i)` arguments\n  @return {Function}\n*/\nexport function di(callback) {\n  // Create intermediate wrapping in case it's called without binding\n  var wrapped = function wrapped(d, i, j) {\n    return callback.call(this, undefined, d, i, j);\n  };\n  wrapped._is_di = true;\n  wrapped.original = callback;\n\n  return wrapped;\n}\n\nexport function bindDi(diFn, chart) {\n  return function wrapped(d, i, j) {\n    return (diFn.original || diFn).call(this, chart, d, i, j);\n  };\n}\n\n// Bind all di-functions found in chart\nexport function bindAllDi(chart) {\n  for (var key in chart) {\n    if (chart[key] && chart[key]._is_di)\n      chart[key] = bindDi(chart[key], chart);\n  }\n}\n\n\n/**\n  Get parent data for element (used to get parent series for data point)\n\n  @example\n  ```js\n  var data = [{\n    name: 'Input',\n    values: [1, 2, 3]\n  }];\n\n  d3.selectAll('g')\n    .data(data)\n    .enter().append('g')\n      .selectAll('text')\n        .data(function(d) { return d.values; })\n        .enter().append('text')\n          .text(function(d) {\n            var series_data = getParentData(this);\n            return series_data.name + ': ' + d;\n          });\n\n  // Input: 1, Input: 2, Input: 3\n  ```\n  @method getParentData\n  @param {Element} element\n  @return {Any}\n*/\nexport function getParentData(element) {\n  // @internal Shortcut if element + parentData needs to be mocked\n  if (element._parent_data)\n    return element._parent_data;\n\n  var parent = element && element.parentNode;\n  if (parent) {\n    var data = d3.select(parent).data();\n    return data && data[0];\n  }\n}\n\nexport function createHelper(type) {\n  return function(id, options) {\n    if (!options) {\n      options = id;\n      id = undefined;\n    }\n\n    return extend({id: id, type: type}, options);\n  };\n}\n\nvar helpers = {\n  property: property,\n  dimensions: dimensions,\n  translate: translate,\n  rotate: rotate,\n  alignText: alignText,\n  isSeriesData: isSeriesData,\n  max: max,\n  min: min,\n  createScale: createScale,\n  style: style,\n  getMargins: getMargins,\n  stack: stack,\n  di: di,\n  bindDi: bindDi,\n  bindAllDi: bindAllDi,\n  getParentData: getParentData,\n  mixin: mixin,\n  createHelper: createHelper\n};\n\nexport {\n  helpers as default,\n  property,\n  dimensions,\n  createScale,\n  mixin,\n  stack\n};\n","import d3 from 'd3';\nimport {\n  difference,\n  extend,\n  inherits,\n  isString,\n  objectEach\n} from './utils';\nimport {\n  property,\n  bindAllDi,\n  dimensions\n} from './helpers';\nvar Chart = d3.chart();\n\n// TEMP Clear namespace from mixins\n/**\n  @namespace\n*/\n\n/**\n  Shared functionality between all charts and components.\n\n  - Set properties automatically from `options`,\n  - Store fully transformed data\n  - Adds `\"before:draw\"` and `\"draw\"` events\n  - Standard `width` and `height` calculations\n\n  @class Base\n*/\nfunction Base(selection, options) {\n  // d3.chart() constructor without transform and initialize cascade\n  this.base = selection;\n  this._layers = {};\n  this._attached = {};\n  this._events = {};\n\n  // Bind all di-functions to this chart\n  bindAllDi(this);\n\n  // Set options (and properties with set_from_options)\n  if (options)\n    this.options(options);\n\n  // Initialize Chart (relies on explicitly calling super in initialize)\n  this.initialize(options);\n}\n\ninherits(Base, Chart);\n\nextend(Base.prototype, {\n  initialize: function() {},\n  transform: function(data) {\n    return data;\n  },\n  demux: function(name, data) { return data; },\n\n  // Add events to draw: \"before:draw\" and \"draw\"\n  draw: function(data) {\n    // Transform data (relies on explicitly calling super in transform)\n    data = this.transform(data);\n\n    // Store fully-transformed data for reference\n    this.data(data);\n\n    this.trigger('before:draw', data);\n\n    objectEach(this._layers, function(layer) {\n      layer.draw(data);\n    });\n    objectEach(this._attached, function(attachment, name) {\n      attachment.draw(this.demux(name, data));\n    }, this);\n\n    this.trigger('draw', data);\n  },\n\n  // Explicitly load d3.chart prototype\n  layer: Chart.prototype.layer,\n  unlayer: Chart.prototype.unlayer,\n  attach: Chart.prototype.attach,\n  on: Chart.prototype.on,\n  once: Chart.prototype.once,\n  off: Chart.prototype.off,\n  trigger: Chart.prototype.trigger,\n\n  /**\n    Store fully-transformed data for direct access from the chart\n\n    @property data\n    @type Any\n  */\n  data: property(),\n\n  /**\n    Overall options for chart/component, automatically setting any matching properties.\n\n    @example\n    ```js\n    var property = d3.compose.helpers.property;\n\n    d3.chart('Base').extend('HasProperties', {\n      a: property(),\n      b: property({\n        set: function(value) {\n          return {\n            override: value + '!'\n          };\n        }\n      })\n    });\n\n    var instance = d3.select('#chart')\n      .chart('HasProperties', {\n        a: 123,\n        b: 'Howdy',\n        c: true\n      });\n\n    // Equivalent to:\n    // d3.select(...)\n    //   .chart('HasProperties')\n    //   .options({...});\n\n    console.log(instance.a()); // -> 123\n    console.log(instance.b()); // -> Howdy!\n    console.log(instance.options().c); // -> true\n    ```\n    @property options\n    @type Object\n  */\n  options: property({\n    default_value: {},\n    set: function(options, previous) {\n      // Clear all unset options, except for data and options\n      if (previous) {\n        var unset = difference(Object.keys(previous), Object.keys(options));\n        unset.forEach(function(key) {\n          if (key != 'data' && key != 'options' && isProperty(this, key))\n            this[key](undefined);\n        }, this);\n      }\n\n      objectEach(options, function setFromOptions(value, key) {\n        if (isProperty(this, key))\n          this[key](value);\n      }, this);\n\n      function isProperty(chart, key) {\n        return chart[key] && chart[key].is_property && chart[key].set_from_options;\n      }\n    }\n  }),\n\n  /**\n    Get width of `this.base`.\n    (Does not include `set` for setting width of `this.base`)\n\n    @method width\n    @return {Number}\n  */\n  width: function width() {\n    return dimensions(this.base).width;\n  },\n\n  /**\n    Get height of `this.base`.\n    (Does not include `set` for setting height of `this.base`)\n\n    @method height\n    @return {Number}\n  */\n  height: function height() {\n    return dimensions(this.base).height;\n  }\n});\n\nBase.extend = function(proto_props, static_props) {\n  // name may be first parameter for d3.chart usage\n  var name;\n  if (isString(proto_props)) {\n    name = proto_props;\n    proto_props = static_props;\n    static_props = arguments[2];\n  }\n\n  var Parent = this;\n  var Child;\n\n  if (proto_props && proto_props.hasOwnProperty('constructor')) {\n    Child = proto_props.constructor;\n\n    // inherits sets constructor, remove from proto_props\n    proto_props = extend({}, proto_props);\n    delete proto_props.constructor;\n  }\n  else {\n    Child = function() { return Parent.apply(this, arguments); };\n  }\n\n  inherits(Child, Parent);\n  if (static_props)\n    extend(Child, static_props);\n  if (proto_props)\n    extend(Child.prototype, proto_props);\n\n  // If name is given, register with d3.chart\n  if (name)\n    Chart[name] = Child;\n\n  return Child;\n};\n\n// Export to d3.chart\nChart.Base = Base;\nexport default Base;\n","import {\n  contains,\n  defaults,\n  isFunction\n} from './utils';\n\n/*\n  Extract layout from the given options\n\n  @param {Array} options\n  @return {Object} {data, items, layout}\n*/\nexport function extractLayout(options) {\n  if (!options)\n    return;\n\n  var data = {\n    _charts: {},\n    _components: {}\n  };\n  var items = {};\n  var layout = [];\n  var charts = [];\n  var components = [];\n\n  // TEMP Idenfify charts from layered,\n  // eventually no distinction between charts and components\n  var found = {\n    row: false,\n    charts: false\n  };\n\n  // Components are added from inside-out\n  // so for position: top, position: left, use unshift\n  options.forEach(function(row, row_index) {\n    var row_components = [];\n\n    if (!Array.isArray(row))\n      row = [row];\n    if (row.length > 1)\n      found.row = true;\n\n    var row_layout = row.map(function(item, col_index) {\n      if (!item)\n        return;\n\n      if (item._layered) {\n        // Charts\n        found.charts = found.row = true;\n        var chart_ids = [];\n\n        item.items.forEach(function(chart, chart_index) {\n          if (!chart)\n            return;\n\n          chart = defaults({}, chart, {id: getId(row_index, col_index, chart_index)});\n\n          chart_ids.push(chart.id);\n          charts.push(chart);\n          items[chart.id] = chart;\n        });\n\n        return chart_ids;\n      }\n\n      var component = prepareComponent(item, row_index, col_index);\n      items[component.id] = component;\n\n      if (row.length > 1) {\n        if (!found.charts) {\n          // Left\n          setPosition(component, 'left');\n          row_components.unshift(component);\n        }\n        else {\n          // Right\n          setPosition(component, 'right');\n          row_components.push(component);\n        }\n      }\n      else {\n        if (!found.row) {\n          // Top\n          setPosition(component, 'top');\n          components.unshift(component);\n        }\n        else {\n          // Bottom\n          setPosition(component, 'bottom');\n          components.push(component);\n        }\n      }\n\n      return component.id;\n    });\n\n    if (row_components.length)\n      components = components.concat(row_components);\n\n    layout.push(row_layout);\n  });\n\n  charts.forEach(extractData('_charts'));\n  components.forEach(extractData('_components'));\n\n  return {\n    data: data,\n    items: items,\n    layout: layout,\n\n    charts: charts,\n    components: components\n  };\n\n  function prepareComponent(component, row_index, col_index) {\n    return defaults({}, component, {id: getId(row_index, col_index)});\n  }\n  function setPosition(component, position) {\n    if (component && isFunction(component.position))\n      component.position(position);\n    else\n      component.position = position;\n  }\n  function getId(row_index, col_index, layered_index) {\n    var id = 'item-' + (row_index + 1) + '-' + (col_index + 1);\n    if (layered_index != null)\n      id += '-' + (layered_index + 1);\n\n    return id;\n  }\n\n  function extractData(type) {\n    return function(item) {\n      if (item.data && !isFunction(item.data)) {\n        data[type][item.id] = item.data;\n        data[item.id] = item.data;\n        delete item.data;\n      }\n    };\n  }\n}\n\n/*\n  Calculate component and chart coordinates for given layout\n*/\nexport function calculateLayout(components, data, demux) {\n  var overall_layout = {top: [], right: [], bottom: [], left: []};\n  components.forEach(function(component) {\n    if (component.skip_layout || !component.getLayout)\n      return;\n\n    var layout = component.getLayout(demux(component.id, data));\n    var position = layout && layout.position;\n\n    if (!contains(['top', 'right', 'bottom', 'left'], position))\n      return;\n\n    overall_layout[position].push({\n      offset: position == 'top' || position == 'bottom' ? layout.height : layout.width,\n      component: component\n    });\n  });\n\n  return overall_layout;\n}\n\n/*\n  Apply calculated layout to charts and components\n*/\nexport function applyLayout(layout, chart_position, width, height) {\n  layout.top.reduce(function(previous, part) {\n    var y = previous - part.offset;\n    setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n    return y;\n  }, chart_position.top);\n\n  layout.right.reduce(function(previous, part, index, parts) {\n    var previousPart = parts[index - 1] || {offset: 0};\n    var x = previous + previousPart.offset;\n    setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n    return x;\n  }, width - chart_position.right);\n\n  layout.bottom.reduce(function(previous, part, index, parts) {\n    var previousPart = parts[index - 1] || {offset: 0};\n    var y = previous + previousPart.offset;\n    setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n    return y;\n  }, height - chart_position.bottom);\n\n  layout.left.reduce(function(previous, part) {\n    var x = previous - part.offset;\n    setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n    return x;\n  }, chart_position.left);\n\n  function setLayout(component, x, y, options) {\n    if (component && isFunction(component.setLayout))\n      component.setLayout(x, y, options);\n  }\n}\n","import d3 from 'd3';\nimport {\n  isFunction,\n  find,\n  defaults,\n  extend,\n  objectEach,\n  difference,\n  pluck\n} from './utils';\nimport {\n  getMargins,\n  property,\n  style,\n  translate\n} from './helpers';\nimport {\n  extractLayout,\n  calculateLayout,\n  applyLayout\n} from './layout';\nimport Base from './Base';\nimport Overlay from './Overlay';\nvar default_compose_margins = {top: 10, right: 10, bottom: 10, left: 10};\n\n/**\n  Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\n  Using the `options` property, charts and components can be bound to data and customized to create dynamic charts.\n\n  @example\n  ```html\n  <div id=\"#chart\"></div>\n  ```\n  ```js\n  var chart = d3.select('#chart').chart('Compose', function(data) {\n    // Process data...\n\n    // Create shared scales\n    var scales = {\n      x: {data: data.input, key: 'x', adjacent: true},\n      y: {data: data.input, key: 'y'},\n      y2: {data: data.output, key: 'y'}\n    };\n\n    // Setup charts and components\n    var charts = [\n      d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\n      d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\n    ];\n\n    var title = d3c.title('d3.compose');\n    var xAxis = d3c.axis('xAxis', {scale: scales.x});\n    var yAxis = d3c.axis('yAxis', {scale: scales.y});\n    var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\n\n    // Layout charts and components\n    return [\n      title,\n      [yAxis, d3c.layered(charts), y2Axis],\n      xAxis\n    ];;\n  });\n\n  chart.draw({input: [...], output: [...]});\n  ```\n  @class Compose\n  @extends Base\n*/\nvar Compose = Base.extend({\n  initialize: function(options) {\n    Base.prototype.initialize.call(this, options);\n\n    // Responsive svg based on the following approach (embedded + padding hack)\n    // http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/\n    // (not enabled if selection is svg)\n    if (this.base.node().tagName != 'svg') {\n      this.container = this.base.append('div')\n        .attr('class', 'chart-compose-container');\n\n      this.base = this.container.append('svg')\n        .attr('xlmns', 'http://www.w3.org/2000/svg')\n        .attr('version', '1.1')\n        .attr('class', 'chart-compose');\n    }\n    else {\n      this.base.classed('chart-compose', true);\n    }\n\n    this.attachHoverListeners();\n  },\n\n  transform: function(data) {\n    // Save raw data for redraw\n    this.rawData(data);\n    return Base.prototype.transform.call(this, data);\n  },\n\n  /**\n    Get/set the options `object/function` for the chart that takes `data` and\n    returns `[...layout]` for composing child charts and components.\n\n    @example\n    ```js\n    // get\n    chart.options();\n\n    // set (static)\n    chart.options([\n      // ...\n    ]);\n\n    // set (dynamic, takes data and returns options)\n    chart.options(function(data) {\n      // process data...\n\n      return [\n        // ...\n      ];\n    });\n\n    // Set directly from d3.chart creation\n    d3.select('#chart')\n      .chart('Compose', function(data) {\n        // ...\n      });\n    ```\n    @property options\n    @type Function|Object\n  */\n  options: property({\n    default_value: function() { return function() {}; },\n    set: function(options) {\n      // If options is plain object,\n      // return from generic options function\n      if (!isFunction(options)) {\n        return {\n          override: function() {\n            return options;\n          }\n        };\n      }\n    }\n  }),\n\n  // Store raw data for container before it has been transformed\n  rawData: property(),\n\n  /**\n    Margins between edge of container and components/chart\n\n    @example\n    ```js\n    chart.margins({top: 10, right: 20, bottom: 10, left: 20});\n    ```\n    @property margins\n    @type Object {top, right, bottom, left}\n    @default {top: 10, right: 10, bottom: 10, left: 10}\n  */\n  margins: property({\n    default_value: default_compose_margins,\n    set: function(values) {\n      return {\n        override: getMargins(values, default_compose_margins)\n      };\n    }\n  }),\n\n  // Chart position\n  chartPosition: property({\n    default_value: {top: 0, right: 0, bottom: 0, left: 0},\n    set: function(values) {\n      return {\n        override: defaults({}, values, {top: 0, right: 0, bottom: 0, left: 0})\n      };\n    },\n    get: function(values) {\n      values.width = this._width() - values.right - values.left;\n      values.height = this._height() - values.bottom - values.top;\n\n      return values;\n    }\n  }),\n\n  /**\n    Get/set overall width of chart\n\n    @property width\n    @type Number\n  */\n  width: property({\n    default_value: null\n  }),\n\n  /**\n    Get/set overall height of chart\n\n    @property height\n    @type Number\n  */\n  height: property({\n    default_value: null\n  }),\n\n  _width: function() {\n    var width = this.width();\n    return width != null ? width : Base.prototype.width.call(this);\n  },\n  _height: function() {\n    var height = this.height();\n    return height != null ? height : Base.prototype.height.call(this);\n  },\n\n  /**\n    Enable responsive container + viewBox so that chart scales to fill width\n    (only works if selection is not an svg)\n\n    @property responsive\n    @type Boolean\n    @default true\n  */\n  responsive: property({\n    default_value: true\n  }),\n\n  // Set svg viewBox attribute\n  viewBox: property({\n    default_value: function() {\n      if (this.responsive() && this.width() && this.height())\n        return '0 0 ' + this.width() + ' ' + this.height();\n      else\n        return null;\n    }\n  }),\n\n  // Set svg preserveAspectRatio attribute\n  preserveAspectRatio: property({\n    default_value: function() {\n      if (this.responsive())\n        return 'xMidYMid meet';\n      else\n        return null;\n    }\n  }),\n\n  // Set container style\n  containerStyle: property({\n    default_value: function() {\n      if (this.responsive()) {\n        var aspect_ratio = 1;\n        if (this.width() && this.height())\n          aspect_ratio = this.height() / this.width();\n\n        return style({\n          width: '100%',\n          height: 0,\n          'padding-top': (aspect_ratio * 100) + '%',\n          position: 'relative'\n        });\n      }\n      else {\n        return style({position: 'relative'});\n      }\n    }\n  }),\n\n  // Set base style\n  baseStyle: property({\n    default_value: function() {\n      if (this.responsive() && this.container) {\n        return style({\n          position: 'absolute',\n          top: 0,\n          left: 0\n        });\n      }\n      else {\n        return null;\n      }\n    }\n  }),\n\n  /**\n    Set charts from options or get chart instances.\n    Each chart should use a unique key so that updates are passed to the existing chart\n    (otherwise they are recreated on update).\n    The `type` option must be a registered `d3.chart` and all other options are passed to the chart.\n\n    @example\n    ```js\n    chart.charts([\n      {id: 'input', type: 'Bars'}, // options to pass to Bars chart\n      {id: 'output', type: 'Lines'} // options to pass to Lines chart\n    ]);\n    ```\n    @property charts\n    @type Array\n  */\n  charts: property({\n    set: function(chart_options, charts) {\n      // Store actual charts rather than options\n      return {\n        override: this._attachItems(chart_options, charts, this)\n      };\n    },\n    default_value: []\n  }),\n\n  /**\n    Set components from options or get components instances.\n    Each component should use a unique key so that updates are passed to the existing chart\n    (otherwise they are recreated on update).\n    The `type` option must be a registered `d3.chart` and all other options are passed to the component.\n\n    @example\n    ```js\n    chart.components([\n      {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\n      {id: 'title', type: 'Title'} // options to pass to Title component\n    ])\n    ```\n    @property components\n    @type Array\n  */\n  components: property({\n    set: function(component_options, components) {\n      // Store actual components rather than options\n      return {\n        override: this._attachItems(component_options, components, this)\n      };\n    },\n    default_value: []\n  }),\n\n  /**\n    Delay start of transition by specified milliseconds.\n    (applied to all charts and components as default)\n\n    @property delay\n    @type Number|Function\n    @default d3 default: 0\n  */\n  delay: property(),\n\n  /**\n    Transition duration in milliseconds.\n    (applied to all charts and components as default)\n\n    @property duration\n    @type Number|Function\n    @default d3 default: 250ms\n  */\n  duration: property(),\n\n  /**\n    Transition ease function.\n    (applied to all charts and components as default)\n\n    - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n    - Note: arguments to pass to `d3.ease` are not supported\n\n    @property ease\n    @type String|Function\n    @default d3 default: 'cubic-in-out'\n  */\n  ease: property(),\n\n  /**\n    Draw chart with given data\n\n    @example\n    ```js\n    var chart = d3.select('#chart')\n      .chart('Compose', function(data) {\n        // ...\n      });\n\n    chart.draw([1, 2, 3]);\n\n    chart.draw({values: [1, 2, 3]});\n\n    chart.draw([\n      {values: [1, 2, 3]},\n      {values: [4, 5, 6]}\n    ]);\n    ```\n    @method draw\n    @param {Any} data\n  */\n  draw: function(data) {\n    var config = this._prepareConfig(this.options(), data);\n    if (!config)\n      config = {data: {_charts: {}, _components: {}}, layout: [], charts: [], components: []};\n\n    // Set charts and components from config\n    this.charts(config.charts);\n    this.components(config.components);\n\n    // Add config data\n    data = {\n      original: data,\n      config: config.data\n    };\n    this.data(data);\n\n    this._setDimensions();\n\n    // Layout components\n    this.layout(config.layout, data);\n\n    // Full draw now that everything has been laid out\n    d3.chart().prototype.draw.call(this, data);\n  },\n\n  /**\n    Redraw chart with current data\n\n    @method redraw\n  */\n  redraw: function() {\n    if (this.rawData())\n      this.draw(this.rawData().original);\n  },\n\n  demux: function(name, data) {\n    if (!data || !data.config || !data.original)\n      return data;\n\n    if (findById(this.charts(), name) && data.config._charts[name])\n      return data.config._charts[name];\n    else if (findById(this.components(), name) && data.config._components[name])\n      return data.config._components[name];\n    else\n      return data.original;\n  },\n\n  // Create chart layer (for laying out charts)\n  createChartLayer: function(options) {\n    return this.base.append('g')\n      .attr('class', 'chart-layer')\n      .attr('data-zIndex', options && options.z_index);\n  },\n\n  // Create component layer\n  createComponentLayer: function(options) {\n    return this.base.append('g')\n      .attr('class', 'chart-component-layer')\n      .attr('data-zIndex', options && options.z_index);\n  },\n\n  // Create overlay layer\n  createOverlayLayer: function() {\n    if (!this.container)\n      throw new Error('Cannot create overlay layer if original selection \"d3.select(...).chart(\\'Compose\\')\" is an svg. Use a div instead for responsive and overlay support.');\n\n    return this.container.append('div')\n      .attr('class', 'chart-overlay-layer');\n  },\n\n  // Layout components and charts for given data\n  layout: function(layout, data) {\n    // 1. Place chart layers\n    this._positionChartLayers();\n\n    // 2. Extract layout from components\n    layout = this._extractLayout(data);\n\n    // 3. Set chart position from layout\n    var chart_position = extend({}, this.margins());\n    objectEach(layout, function(parts, key) {\n      parts.forEach(function(part) {\n        chart_position[key] += part.offset || 0;\n      });\n    });\n    this.chartPosition(chart_position);\n\n    // 4. Position layers with layout\n    this.positionLayers(layout);\n  },\n\n  attachHoverListeners: function() {\n    // For responsive, listen on container div and calculate enter/exit for base from bounding rectangle\n    // For non-responsive, bounding rectangle is container so calculations still apply\n\n    var trigger = this.trigger.bind(this);\n    var chartPosition = this.chartPosition.bind(this);\n    var container = this.container || this.base;\n    var base = this.base.node();\n    var chart_position, bounds, was_inside;\n\n    container.on('mouseenter', function() {\n      // Calculate chart position and bounds on enter and cache during move\n      chart_position = chartPosition();\n      bounds = getBounds();\n\n      was_inside = inside(bounds);\n      if (was_inside)\n        enter();\n    });\n    container.on('mousemove', function() {\n      // Mousemove may fire before mouseenter in IE\n      if (!chart_position || !bounds) {\n        chart_position = chartPosition();\n        bounds = getBounds();\n      }\n\n      var is_inside = inside(bounds);\n      if (was_inside && is_inside)\n        move();\n      else if (was_inside)\n        leave();\n      else if (is_inside)\n        enter();\n\n      was_inside = is_inside;\n    });\n    container.on('mouseleave', function() {\n      if (was_inside) {\n        was_inside = false;\n        leave();\n      }\n    });\n\n    function inside() {\n      var mouse = d3.mouse(document.documentElement);\n      return mouse[0] >= bounds.left && mouse[0] <= bounds.right && mouse[1] >= bounds.top && mouse[1] <= bounds.bottom;\n    }\n    function enter() {\n      trigger('mouseenter', translateToXY(d3.mouse(base)));\n    }\n    function move() {\n      trigger('mousemove', translateToXY(d3.mouse(base)));\n    }\n    function leave() {\n      trigger('mouseleave');\n    }\n\n    function translateToXY(coordinates) {\n      var x = coordinates[0];\n      var y = coordinates[1];\n      var chart_x = x - chart_position.left;\n      var chart_y = y - chart_position.top;\n\n      // Set at chart bounds if outside of chart\n      if (x > (chart_position.left + chart_position.width))\n        chart_x = chart_position.width;\n      else if (x < chart_position.left)\n        chart_x = 0;\n\n      if (y > (chart_position.top + chart_position.height))\n        chart_y = chart_position.height;\n      else if (y < chart_position.top)\n        chart_y = 0;\n\n      return {\n        container: {x: x, y: y},\n        chart: {x: chart_x, y: chart_y}\n      };\n    }\n\n    function getBounds() {\n      var scroll_y = 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;\n\n      bounds = extend({}, base.getBoundingClientRect());\n      bounds.top += scroll_y;\n      bounds.bottom += scroll_y;\n\n      return bounds;\n    }\n  },\n\n  // Attach chart/component child item with id\n  attach: function(id, item) {\n    item.id = id;\n    item.base.attr('data-id', id);\n    item.container = this;\n\n    Base.prototype.attach.call(this, id, item);\n\n    if (item && isFunction(item.trigger))\n      item.trigger('attach');\n  },\n\n  // Detach chart/component child item by id\n  detach: function(id, item) {\n    item.base.remove();\n\n    delete this._attached[id];\n\n    if (item && isFunction(item.trigger))\n      item.trigger('detach');\n  },\n\n  // Position chart and component layers\n  positionLayers: function(layout) {\n    this._positionChartLayers();\n    this._positionComponents(layout);\n    this._positionByZIndex();\n  },\n\n  //\n  // Internal\n  //\n\n  _setDimensions: function() {\n    // Set container and svg dimensions\n    // (if original selection is svg, no container and skip responsiveness)\n    if (this.container) {\n      this.container\n        .attr('style', this.containerStyle());\n    }\n\n    this.base\n      .attr('viewBox', this.viewBox())\n      .attr('preserveAspectRatio', this.preserveAspectRatio())\n      .attr('style', this.baseStyle())\n      .attr('width', this.responsive() ? null : this.width())\n      .attr('height', this.responsive() ? null : this.height());\n  },\n\n  _attachItems: function(items, container, context) {\n    items = items || [];\n    container = container || [];\n\n    // Remove charts that are no longer needed\n    var remove_ids = difference(pluck(container, 'id'), pluck(items, 'id'));\n    remove_ids.forEach(function(remove_id) {\n      context.detach(remove_id, findById(container, remove_id));\n    });\n\n    // Create or update charts\n    return items.map(function(options) {\n      // TODO May not have id, might need to auto-generate\n      // (might be during another step)\n      var id = options.id;\n      var item = findById(container, id);\n\n      if (options instanceof d3.chart()) {\n        // If chart instance, replace with instance\n        if (item)\n          context.detach(id, item);\n\n        context.attach(id, options);\n        return options;\n      }\n      else {\n        // TEMP Changing position has nasty side effects, disable for now\n        var changed_position = item && !(item instanceof Overlay) && item.position && options.position && item.position() != options.position;\n\n        if (item && (item.type != options.type || changed_position)) {\n          // If chart type has changed, detach and re-create\n          context.detach(id, item);\n          item = undefined;\n        }\n\n        if (!item) {\n          var Item = d3.chart(options.type);\n\n          if (!Item)\n            throw new Error('No registered d3.chart found for ' + options.type);\n\n          var layer_options = {z_index: Item.z_index || 0};\n          var createLayer = {\n            'chart': 'createChartLayer',\n            'component': 'createComponentLayer',\n            'overlay': 'createOverlayLayer'\n          }[Item.layer_type];\n\n          if (!createLayer)\n            throw new Error('Unrecognized layer type \"' + Item.layer_type + '\" for ' + options.type);\n\n          var base = context[createLayer](layer_options);\n\n          item = new Item(base, options);\n          item.type = options.type;\n\n          context.attach(id, item);\n        }\n        else {\n          item.options(options);\n        }\n\n        return item;\n      }\n    });\n  },\n\n  _prepareConfig: function(options, data) {\n    return extractLayout(options(data));\n  },\n\n  _positionChartLayers: function() {\n    var position = this.chartPosition();\n    this.base.selectAll('.chart-layer')\n      .attr('transform', translate(position.left, position.top))\n      .attr('width', position.width)\n      .attr('height', position.height);\n  },\n\n  _positionComponents: function(layout) {\n    var chart_position = this.chartPosition();\n    var width = this._width();\n    var height = this._height();\n\n    applyLayout(layout, chart_position, width, height);\n  },\n\n  _positionByZIndex: function() {\n    var layers = this.base.selectAll('.chart-layer, .chart-component-layer')[0];\n\n    // Sort by z-index\n    function setZIndex(layer) {\n      return {\n        layer: layer,\n        zIndex: parseInt(d3.select(layer).attr('data-zIndex')) || 0\n      };\n    }\n    function sortZIndex(a, b) {\n      if (a.zIndex < b.zIndex)\n        return -1;\n      else if (a.zIndex > b.zIndex)\n        return 1;\n      else\n        return 0;\n    }\n    function getLayer(wrapped) {\n      return wrapped.layer;\n    }\n\n    layers = layers.map(setZIndex).sort(sortZIndex).map(getLayer);\n\n    // Move layers to z-index order\n    layers.forEach(function(layer) {\n      if (layer && layer.parentNode && layer.parentNode.appendChild)\n        layer.parentNode.appendChild(layer);\n    });\n  },\n\n  _extractLayout: function(data) {\n    return calculateLayout(this.components(), data, this.demux.bind(this));\n  }\n});\n\n// TODO Find better place for this\nfunction layered(items) {\n  if (!Array.isArray(items))\n    items = Array.prototype.slice.call(arguments);\n\n  return {_layered: true, items: items};\n}\n\nfunction findById(items, id) {\n  return find(items, function(item) {\n    return item.id == id;\n  });\n}\n\nd3.chart().Compose = Compose;\nexport {\n  Compose as default,\n  layered\n};\n","import {\n  property,\n  isSeriesData,\n  di\n} from '../helpers';\nimport {\n  compact,\n  pluck,\n  objectEach,\n  contains\n} from '../utils';\n\n/**\n  Mixin for handling common hover behavior that adds standard `onMouseEnter`, `onMouseMove`, and `onMouseLeave` handlers\n  and `getPoint` helper for adding helpful meta information to raw data point.\n\n  @class Hover\n  @namespace mixins\n*/\nvar Hover = {\n  initialize: function() {\n    this.on('attach', function() {\n      this.container.on('mouseenter', this.onMouseEnter.bind(this));\n      this.container.on('mousemove', this.onMouseMove.bind(this));\n      this.container.on('mouseleave', this.onMouseLeave.bind(this));\n    }.bind(this));\n  },\n\n  /**\n    Get point information for given data-point\n\n    @method getPoint\n    @param {Any} d\n    @param {Number} i\n    @param {Number} j\n    @return {key, series, d, meta {chart, i, j, x, y}}\n  */\n  getPoint: di(function(chart, d, i, j) {\n    var key = chart.key && chart.key.call(this, d, i, j);\n    var series = chart.seriesData && chart.seriesData.call(this, d, i, j) || {};\n\n    return {\n      key: (series.key || j) + '.' + (key || i),\n      series: series,\n      d: d,\n      meta: {\n        chart: chart,\n        i: i,\n        j: j,\n        x: chart.x && chart.x.call(this, d, i, j),\n        y: chart.y && chart.y.call(this, d, i, j)\n      }\n    };\n  }),\n\n  /**\n    Call to trigger mouseenter:point when mouse enters data-point\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n      initialize: function() {\n        this.layer('bars', this.base, {\n          // dataBind...\n          insert: function() {\n            // Want to trigger enter/leave point\n            // when mouse enter/leaves bar (rect)\n            var chart = this.chart();\n            return this.append('rect')\n              .on('mouseenter', chart.mouseEnterPoint)\n              .on('mouseleave', chart.mouseLeavePoint);\n          }\n          // events...\n        })\n      }\n    }));\n    ```\n    @method mouseEnterPoint\n    @param {Any} d\n    @param {Number} i\n    @param {Number} j\n  */\n  mouseEnterPoint: di(function(chart, d, i, j) {\n    chart.container.trigger('mouseenter:point', chart.getPoint.call(this, d, i, j));\n  }),\n\n  /**\n    Call to trigger mouseleave:point when mouse leaves data-point\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Bars', helpers.mixin(Hover, {\n      initialize: function() {\n        this.layer('bars', this.base, {\n          // dataBind...\n          insert: function() {\n            // Want to trigger enter/leave point\n            // when mouse enter/leaves bar (rect)\n            var chart = this.chart();\n            return this.append('rect')\n              .on('mouseenter', chart.mouseEnterPoint)\n              .on('mouseleave', chart.mouseLeavePoint);\n          }\n          // events...\n        })\n      }\n    }));\n    ```\n    @method mouseleavePoint\n    @param {Any} d\n    @param {Number} i\n    @param {Number} j\n  */\n  mouseLeavePoint: di(function(chart, d, i, j) {\n    chart.container.trigger('mouseleave:point', chart.getPoint.call(this, d, i, j));\n  }),\n\n  /**\n    (Override) Called when mouse enters container\n\n    @method onMouseEnter\n    @param {Object} position (chart and container {x,y} position of mouse)\n    @param {Object} position.chart {x, y} position relative to chart origin\n    @param {Object} position.container {x, y} position relative to container origin\n  */\n  onMouseEnter: function(/* position */) {},\n\n  /**\n    (Override) Called when mouse moves within container\n\n    @method onMouseMove\n    @param {Object} position (chart and container {x,y} position of mouse)\n    @param {Object} position.chart {x, y} position relative to chart origin\n    @param {Object} position.container {x, y} position relative to container origin\n  */\n  onMouseMove: function(/* position */) {},\n\n  /**\n    (Override) Called when mouse leaves container\n\n    @method onMouseLeave\n  */\n  onMouseLeave: function() {}\n};\n\n/**\n  Mixin for automatically triggering \"mouseenter:point\"/\"mouseleave:point\" for chart data points that are within given `hoverTolerance`.\n\n  @class HoverPoints\n  @namespace mixins\n*/\nvar HoverPoints = {\n  initialize: function() {\n    var points, tolerance, active;\n\n    this.on('draw', function() {\n      // Clear cache on draw\n      points = null;\n    });\n\n    this.on('attach', function() {\n      var update = function update(position) {\n        var closest = [];\n        if (position)\n          closest = getClosestPoints(points, position.chart, tolerance);\n\n        updateActive(active, closest, this.container);\n        active = closest;\n      }.bind(this);\n\n      this.container.on('mouseenter', function(position) {\n        if (!points)\n          points = getPoints(this, this.data());\n\n        tolerance = this.hoverTolerance();\n        update(position);\n      }.bind(this));\n\n      this.container.on('mousemove', update);\n      this.container.on('mouseleave', update);\n    }.bind(this));\n  },\n\n  /**\n    Hover tolerance (in px) for calculating close points\n\n    @property hoverTolerance\n    @type Number\n    @default Infinity\n  */\n  hoverTolerance: property({\n    default_value: Infinity\n  })\n};\n\nfunction getPoints(chart, data) {\n  if (data) {\n    if (!isSeriesData(data))\n      data = [{values: data}];\n\n    return data.map(function(series, j) {\n      return series.values.map(function(d, i) {\n        return chart.getPoint.call({_parent_data: series}, d, i, j);\n      }).sort(function(a, b) {\n        // Sort by x\n        return a.meta.x - b.meta.x;\n      });\n    });\n  }\n}\n\nfunction getClosestPoints(points, position, tolerance) {\n  if (!points)\n    return [];\n\n  return compact(points.map(function(series) {\n    function setDistance(point) {\n      point.distance = getDistance(point.meta, position);\n      return point;\n    }\n    function closePoints(point) {\n      return point.distance < tolerance;\n    }\n    function sortPoints(a, b) {\n      if (a.distance < b.distance)\n        return -1;\n      else if (a.distance > b.distance)\n        return 1;\n      else\n        return 0;\n    }\n\n    var by_distance = series.map(setDistance).filter(closePoints).sort(sortPoints);\n\n    return by_distance[0];\n  }));\n\n  function getDistance(a, b) {\n    return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n  }\n}\n\nfunction updateActive(active, closest, container) {\n  var active_keys = pluck(active, 'key');\n  var closest_keys = pluck(closest, 'key');\n\n  objectEach(closest, function(point) {\n    if (contains(active_keys, point.key))\n      container.trigger('mousemove:point', point);\n    else\n      container.trigger('mouseenter:point', point);\n  });\n  objectEach(active, function(point) {\n    if (!contains(closest_keys, point.key))\n      container.trigger('mouseleave:point', point);\n  });\n}\n\nexport {\n  Hover as default,\n  HoverPoints\n};\n","/**\n  Mixin to create standard layer to make extending charts straightforward.\n\n  @example\n  ```js\n  d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n    initialize: function() {\n      this.standardLayer('main', this.base.append('g'))\n      // dataBind, insert, events are defined on prototype\n    },\n\n    onDataBind: function(selection, data) {\n      // ...\n    },\n    onInsert: function(selection) {\n      // ...\n    },\n    onEnter: function(selection) {\n      // ...\n    },\n    onUpdateTransition: function(selection) {\n      // ...\n    },\n    // all d3.chart events are available: onMerge, onExit, ...\n  }));\n  ```\n  @class StandardLayer\n  @namespace mixins\n*/\nvar StandardLayer = {\n  /**\n    extension of `layer()` that uses standard methods on prototype for extensibility.\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n      initialize: function() {\n        this.standardLayer('circles', this.base.append('g'));\n      }\n\n      // onDataBind, onInsert, etc. work with \"circles\" layer\n    }));\n    ```\n    @method standardLayer\n    @param {String} name\n    @param {d3.selection} selection\n  */\n  standardLayer: function standardLayer(name, selection) {\n    return createLayer(this, 'layer', name, selection);\n  },\n\n  /**\n    extension of `seriesLayer()` that uses standard methods on prototype for extensibility.\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(StandardLayer, {\n      initialize: function() {\n        this.standardSeriesLayer('circles', this.base.append('g'));\n      },\n\n      // onDataBind, onInsert, etc. work with \"circles\" seriesLayer\n    }));\n    ```\n    @method standardSeriesLayer\n    @param {String} name\n    @param {d3.selection} selection\n  */\n  standardSeriesLayer: function standardSeriesLayer(name, selection) {\n    return createLayer(this, 'series', name, selection);\n  },\n\n  /**\n    Called for standard layer's `dataBind`\n\n    @method onDataBind\n    @param {d3.selection} selection\n    @param {Any} data\n    @return {d3.selection}\n  */\n  onDataBind: function onDataBind(/* selection, data */) {},\n\n  /**\n    Called for standard layer's `insert`\n\n    @method onInsert\n    @param {d3.selection} selection\n    @return {d3.selection}\n  */\n  onInsert: function onInsert(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['enter']`\n\n    @method onEnter\n    @param {d3.selection} selection\n  */\n  onEnter: function onEnter(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['enter:transition']`\n\n    @method onEnterTransition\n    @param {d3.selection} selection\n  */\n  // onEnterTransition: function onEnterTransition(selection) {},\n\n  /**\n    Call for standard layer's `events['update']`\n\n    @method onUpdate\n    @param {d3.selection} selection\n  */\n  onUpdate: function onUpdate(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['update']`\n\n    @method onUpdateTransition\n    @param {d3.selection} selection\n  */\n  // onUpdateTransition: function onUpdateTransition(selection) {},\n\n  /**\n    Call for standard layer's `events['merge']`\n\n    @method onMerge\n    @param {d3.selection} selection\n  */\n  onMerge: function onMerge(/* selection */) {},\n\n  /**\n    Call for standard layer's `events['merge:transition']`\n\n    @method onMergeTransition\n    @param {d3.selection} selection\n  */\n  // onMergeTransition: function onMergeTransition(selection) {},\n\n  /**\n    Call for standard layer's `events['exit']`\n\n    @method onExit\n    @param {d3.selection} selection\n  */\n  onExit: function onExit(/* selection */) {}\n\n  /**\n    Call for standard layer's `events['exit:transition']`\n\n    @method onExitTransition\n    @param {d3.selection} selection\n  */\n  // onExitTransition: function onExitTransition(selection) {},\n};\n\nfunction createLayer(chart, type, name, selection) {\n  var layer = {\n    layer: 'layer',\n    series: 'seriesLayer'\n  }[type];\n\n  if (layer && chart[layer]) {\n    var events = {};\n    [\n      'enter',\n      'enter:transition',\n      'update',\n      'update:transition',\n      'merge',\n      'merge:transition',\n      'exit',\n      'exit:transition'\n    ].forEach(function(event) {\n      var method = 'on' + event.split(':').map(function capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n      }).join('');\n\n      // Only create events if chart method exists as empty transition events can cause unforeseen issues\n      if (chart[method]) {\n        events[event] = function() {\n          this.chart()[method](this);\n        };\n      }\n    });\n\n    return chart[layer](name, selection, {\n      dataBind: function(data) {\n        return this.chart().onDataBind(this, data);\n      },\n      insert: function() {\n        return this.chart().onInsert(this);\n      },\n      events: events\n    });\n  }\n}\n\nexport default StandardLayer;\n","import {\n  contains,\n  extend,\n  isString\n} from '../utils';\nimport {\n  property,\n  style,\n  translate,\n  rotate,\n  mixin\n} from '../helpers';\nimport { StandardLayer } from '../mixins';\nimport Component from '../Component';\n\n/**\n  Add text to a chart.\n\n  ### Extending\n\n  To extend the `Text` component, the following methods are available:\n\n  - `onDataBind`\n  - `onInsert`\n  - `onEnter`\n  - `onEnterTransition`\n  - `onUpdate`\n  - `onUpdateTransition`\n  - `onMerge`\n  - `onMergeTransition`\n  - `onExit`\n  - `onExitTransition`\n\n  @example\n  ```js\n  d3.select('#chart')\n    .chart('Compose', function(data) {\n      return {\n        components: {\n          title: {\n            type: 'Text',\n            position: 'top'\n            text: 'Main Title',\n            textAlign: 'left',\n            'class': 'title'\n          },\n          notes: {\n            type: 'Text',\n            position: 'bottom',\n            text: 'Notes',\n            'class': 'notes'\n          }\n        }\n      };\n    });\n  ```\n  @class Text\n  @extends Component, StandardLayer\n*/\nvar Mixed = mixin(Component, StandardLayer);\nvar Text = Mixed.extend({\n  initialize: function(options) {\n    Mixed.prototype.initialize.call(this, options);\n\n    // Use standard layer for extensibility\n    this.standardLayer('Text', this.base.append('g').classed('chart-text', true));\n  },\n\n  /**\n    Text to display\n\n    @property text\n    @type String\n  */\n  text: property(),\n\n  /**\n    Rotation of text\n\n    @property rotation\n    @type Number\n    @default 0\n  */\n  rotation: property({\n    default_value: 0\n  }),\n\n  /**\n    Horizontal text-alignment of text (`\"left\"`, `\"center\"`, or `\"right\"`)\n\n    @property textAlign\n    @type String\n    @default \"center\"\n  */\n  textAlign: property({\n    default_value: 'center',\n    validate: function(value) {\n      return contains(['left', 'center', 'right'], value);\n    }\n  }),\n\n  /**\n    text-anchor for text (`\"start\"`, `\"middle\"`, or `\"end\"`)\n\n    @property anchor\n    @type String\n    @default (set by `textAlign`)\n  */\n  anchor: property({\n    default_value: function() {\n      return {\n        left: 'start',\n        center: 'middle',\n        right: 'end'\n      }[this.textAlign()];\n    },\n    validate: function(value) {\n      return contains(['start', 'middle', 'end', 'inherit'], value);\n    }\n  }),\n\n  /**\n    Vertical aligment for text (`\"top\"`, `\"middle\"`, `\"bottom\"`)\n\n    @property verticalAlign\n    @type String\n    @default \"middle\"\n  */\n  verticalAlign: property({\n    default_value: 'middle',\n    validate: function(value) {\n      return contains(['top', 'middle', 'bottom'], value);\n    }\n  }),\n\n  /**\n    Style object containing styles for text\n\n    @property style\n    @type Object\n    @default {}\n  */\n  style: property({\n    default_value: {},\n    get: function(value) {\n      return style(value) || null;\n    }\n  }),\n\n  onDataBind: function onDataBind(selection) {\n    return selection.selectAll('text')\n      .data([0]);\n  },\n  onInsert: function onInsert(selection) {\n    return selection.append('text');\n  },\n  onMerge: function onMerge(selection) {\n    selection\n      .attr('transform', this.transformation())\n      .attr('style', this.style())\n      .attr('text-anchor', this.anchor())\n      .attr('class', this.options()['class'])\n      .text(this.text());\n  },\n\n  transformation: function() {\n    var x = {\n      left: 0,\n      center: this.width() / 2,\n      right: this.width()\n    }[this.textAlign()];\n    var y = {\n      top: 0,\n      middle: this.height() / 2,\n      bottom: this.height()\n    }[this.verticalAlign()];\n\n    var translation = translate(x, y);\n    var rotation = rotate(this.rotation());\n\n    return translation + ' ' + rotation;\n  }\n}, {\n  z_index: 70\n});\n\nfunction textOptions(id, options, default_options) {\n  if (!options) {\n    options = id;\n    id = undefined;\n  }\n  if (isString(options))\n    options = {text: options};\n\n  return extend({id: id}, default_options, options);\n}\n\nfunction text(id, options) {\n  return textOptions(id, options, {type: 'Text'});\n}\n\nd3.chart().Text = Text;\nexport {\n  Text as default,\n  text,\n  textOptions\n};\n","import {\n  getMargins,\n  property\n} from '../helpers';\nimport Text, { textOptions } from './Text';\n\n/**\n  Title component that extends Text with defaults (styling, sensible margins, and rotated when positioned left or right)\n\n  @class Title\n  @extends Text\n*/\nvar Title = Text.extend({\n  initialize: function(options) {\n    Text.prototype.initialize.call(this, options);\n    this.base.select('.chart-text').classed('chart-title', true);\n  },\n\n  /**\n    Margins (in pixels) around Title\n\n    @property margins\n    @type Object\n    @default (set based on `position`)\n  */\n  margins: property({\n    set: function(values) {\n      return {\n        override: getMargins(values, defaultMargins(this.position()))\n      };\n    },\n    default_value: function() {\n      return defaultMargins(this.position());\n    }\n  }),\n\n  /**\n    Rotation of title. (Default is `-90` for `position = \"right\"`, `90` for `position = \"left\"`, and `0` otherwise).\n\n    @property rotation\n    @type Number\n    @default (set based on `position`)\n  */\n  rotation: property({\n    default_value: function() {\n      var rotate_by_position = {\n        right: 90,\n        left: -90\n      };\n\n      return rotate_by_position[this.position()] || 0;\n    }\n  })\n});\n\nfunction defaultMargins(position) {\n  var default_margin = 8;\n  var margins_by_position = {\n    top: {top: default_margin, bottom: default_margin},\n    right: {right: default_margin, left: default_margin},\n    bottom: {top: default_margin, bottom: default_margin},\n    left: {right: default_margin, left: default_margin}\n  };\n  return getMargins(margins_by_position[position]);\n}\n\nfunction title(id, options) {\n  return textOptions(id, options, {type: 'Title'});\n}\n\nd3.chart().Title = Title;\nexport {\n  Title as default,\n  title\n};\n","import {\n  getMargins,\n  property\n} from '../helpers';\nimport { textOptions } from './Text';\nimport Title from './Title';\n\n/**\n  Axis title component that extends Title with defaults (styling)\n\n  @class AxisTitle\n  @extends Title\n*/\nvar AxisTitle = Title.extend({\n  initialize: function(options) {\n    Title.prototype.initialize.call(this, options);\n    this.base.select('.chart-text')\n      .classed('chart-title', false)\n      .classed('chart-axis-title', true);\n  },\n\n  /**\n    Margins (in pixels) around axis title\n\n    @property margins\n    @type Object\n    @default (set based on `position`)\n  */\n  margins: property({\n    set: function(values) {\n      return {\n        override: getMargins(values, defaultMargins(this.position()))\n      };\n    },\n    default_value: function() {\n      return defaultMargins(this.position());\n    }\n  })\n});\n\nfunction defaultMargins(position) {\n  var default_margin = 8;\n  var margins_by_position = {\n    top: {top: default_margin / 2, bottom: default_margin},\n    right: {left: default_margin / 2, right: default_margin},\n    bottom: {bottom: default_margin / 2, top: default_margin},\n    left: {right: default_margin / 2, left: default_margin}\n  };\n\n  return getMargins(margins_by_position[position]);\n}\n\nfunction axisTitle(id, options) {\n  return textOptions(id, options, {type: 'AxisTitle'});\n}\n\nd3.chart().AxisTitle = AxisTitle;\nexport {\n  AxisTitle as default,\n  axisTitle\n};\n","import Base from './Base';\n\n/**\n  Common base for creating charts.\n  Standard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\n\n  ### Extending\n\n  To take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\n  and automatically setting properties from `options`, use `d3.compose.helpers.di`\n  and `d3.compose.helpers.property` when creating your chart.\n\n  @example\n  ```js\n  var helpers = d3.compose.helpers;\n\n  d3.chart('Chart').extend('Pie', {\n    initialize: function() {\n      // same as d3.chart\n    },\n    transform: function(data) {\n      // same as d3.chart\n    },\n\n    color: helpers.di(function(chart, d, i) {\n      // \"di\" function with parent chart injected (\"this\" = element)\n    }),\n\n    centered: helpers.property({\n      default_value: true\n      // can be automatically set from options object\n    })\n  });\n  ```\n  @class Chart\n  @extends Base\n*/\nvar Chart = Base.extend({}, {\n  /**\n    Default z-index for chart\n    (Components are 50 by default, so Chart = 100 is above component by default)\n\n    @example\n    ```js\n    d3.chart('Chart').extend('BelowComponentLayers', {\n      // ...\n    }, {\n      z_index: 40\n    });\n    ```\n    @attribute z_index\n    @static\n    @type Number\n    @default 100\n  */\n  z_index: 100,\n  layer_type: 'chart'\n});\n\nd3.chart().Chart = Chart;\nexport default Chart;\n","import { contains } from './utils';\nimport {\n  dimensions,\n  getMargins,\n  property,\n  translate\n} from './helpers';\nimport Base from './Base';\n\n/**\n  Common base for creating components that includes helpers for positioning and layout.\n\n  ### Extending\n\n  `d3.chart('Component')` contains intelligent defaults and there are no required overrides.\n  Create a component just like a chart, by creating layers in the `initialize` method in `extend`.\n\n  - To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\n  - To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`\n\n  @example\n  ```js\n  d3.chart('Component').extend('Key', {\n    initialize: function() {\n      this.layer('Key', this.base, {\n        dataBind: function(data) {\n          return this.selectAll('text')\n            .data(data);\n        },\n        insert: function() {\n          return this.append('text');\n        },\n        events: {\n          merge: function() {\n            this.text(this.chart().keyText)\n          }\n        }\n      })\n    },\n\n    keyText: helpers.di(function(chart, d, i) {\n      return d.abbr + ' = ' + d.value;\n    })\n  });\n  ```\n  @class Component\n  @extends Base\n*/\nvar Component = Base.extend({\n  /**\n    Component's position relative to chart\n    (top, right, bottom, left)\n\n    @property position\n    @type String\n    @default 'top'\n  */\n  position: property({\n    default_value: 'top',\n    validate: function(value) {\n      return contains(['top', 'right', 'bottom', 'left'], value);\n    }\n  }),\n\n  /**\n    Get/set the width of the component (in pixels)\n    (used in layout calculations)\n\n    @property width\n    @type Number\n    @default (actual width)\n  */\n  width: property({\n    default_value: function() {\n      return dimensions(this.base).width;\n    }\n  }),\n\n  /**\n    Get/set the height of the component (in pixels)\n    (used in layout calculations)\n\n    @property height\n    @type Number\n    @default (actual height)\n  */\n  height: property({\n    default_value: function() {\n      return dimensions(this.base).height;\n    }\n  }),\n\n  /**\n    Margins (in pixels) around component\n\n    @property margins\n    @type Object\n    @default {top: 0, right: 0, bottom: 0, left: 0}\n  */\n  margins: property({\n    set: function(values) {\n      return {\n        override: getMargins(values)\n      };\n    },\n    default_value: getMargins()\n  }),\n\n  /**\n    Center the component vertically/horizontally (depending on position)\n\n    @property centered\n    @type Boolean\n    @default false\n  */\n  centered: property({\n    default_value: false\n  }),\n\n  /**\n    Skip component during layout calculations and positioning\n    (override in prototype of extension)\n\n    @example\n    ```js\n    d3.chart('Component').extend('NotLaidOut', {\n      skip_layout: true\n    });\n    ```\n    @attribute skip_layout\n    @type Boolean\n    @default false\n  */\n  skip_layout: false,\n\n  /**\n    Perform any layout preparation required before getLayout (default is draw)\n    (override in prototype of extension)\n\n    Note: By default, components are double-drawn;\n    for every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\n    This can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.\n\n    @example\n    ```js\n    d3.chart('Component').extend('Custom', {\n      prepareLayout: function(data) {\n        // default: this.draw(data);\n        // so that getLayout has real dimensions\n\n        // -> custom preparation (if necessary)\n      }\n    })\n    ```\n    @method prepareLayout\n    @param {Any} data\n  */\n  prepareLayout: function(data) {\n    this.draw(data);\n  },\n\n  /**\n    Get layout details for use when laying out component\n    (override in prototype of extension)\n\n    @example\n    ```js\n    d3.chart('Component').extend('Custom', {\n      getLayout: function(data) {\n        var calculated_width, calculated_height;\n\n        // Perform custom calculations...\n\n        // Must return position, width, and height\n        return {\n          position: this.position(),\n          width: calculated_width,\n          height: calculated_height\n        };\n      }\n    });\n    ```\n    @method getLayout\n    @param {Any} data\n    @return {Object} position, width, and height for layout\n  */\n  getLayout: function(data) {\n    this.prepareLayout(data);\n\n    var margins = this.margins();\n    return {\n      position: this.position(),\n      width: this.width() + margins.left + margins.right,\n      height: this.height() + margins.top + margins.bottom\n    };\n  },\n\n  /**\n    Set layout of underlying base\n    (override in prototype of extension)\n\n    @example\n    ```js\n    d3.chart('Component').extend('Custom', {\n      setLayout: function(x, y, options) {\n        // Set layout of this.base...\n        // (the following is the default implementation)\n        var margins = this.margins();\n\n        // (handle this.centered())\n\n        this.base\n          .attr('transform', helpers.translate(x + margins.left, y + margins.top));\n        this.height(options && options.height);\n        this.width(options && options.width);\n      }\n    });\n    ```\n    @method setLayout\n    @param {Number} x position of base top-left\n    @param {Number} y position of base top-left\n    @param {Object} options\n      @param {Object} [options.height] height of component in layout\n      @param {Object} [options.width] width of component in layout\n  */\n  setLayout: function(x, y, options) {\n    var margins = this.margins();\n\n    if (this.centered()) {\n      var actual_dimensions = dimensions(this.base);\n      if ('height' in options)\n        y += (options.height - actual_dimensions.height) / 2;\n      else\n        y += margins.top;\n\n      if ('width' in options)\n        x += (options.width - actual_dimensions.width) / 2;\n      else\n        x += margins.left;\n    }\n    else {\n      x += margins.left;\n      y += margins.top;\n    }\n\n    this.base.attr('transform', translate(x, y));\n    this.height(options && options.height);\n    this.width(options && options.width);\n  }\n}, {\n  /**\n    Default z-index for component\n    (Charts are 100 by default, so Component = 50 is below chart by default)\n\n    @example\n    ```js\n    d3.chart('Component').extend('AboveChartLayers', {\n      // ...\n    }, {\n      z_index: 150\n    });\n    ```\n    @attribute z_index\n    @static\n    @type Number\n    @default 50\n  */\n  z_index: 50,\n\n  /**\n    Set to `'chart'` to use chart layer for component.\n    (e.g. Axis uses chart layer to position with charts, but includes layout for ticks)\n\n    @example\n    ```js\n    d3.chart('Component').extend('ChartComponent', {\n      // ...\n    }, {\n      layer_type: 'chart'\n    });\n    ```\n    @attribute layer_type\n    @static\n    @type String\n    @default 'component'\n  */\n  layer_type: 'component'\n});\n\nd3.chart().Component = Component;\nexport default Component;\n","import {\n  property,\n  translate,\n  style as styleToString,\n  dimensions\n} from './helpers';\nimport Component from './Component';\n\n/**\n  Common base for creating overlays that includes helpers for positioning and show/hide.\n\n  ### Extending\n\n  Create an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\n\n  - To adjust positioning, override `position`\n  - To adjust show/hide behavior, override `show`/`hide`\n\n  @example\n  ```js\n  d3.chart('Overlay').extend('ClosestPoints', {\n    // TODO\n  });\n  ```\n  @class Overlay\n  @extends Component\n*/\nvar Overlay = Component.extend({\n  initialize: function(options) {\n    Component.prototype.initialize.call(this, options);\n    this.base.attr('style', this.style());\n  },\n  skip_layout: true,\n\n  /**\n    Overlay's top-left x-position in px from left\n\n    @property x\n    @type Number\n    @default 0\n  */\n  x: property({\n    default_value: 0\n  }),\n\n  /**\n    Overlay's top-left y-position in px from top\n\n    @property y\n    @type Number\n    @default 0\n  */\n  y: property({\n    default_value: 0\n  }),\n\n  /**\n    Whether overlay is currently hidden\n\n    @property hidden\n    @type Boolean\n    @default true\n  */\n  hidden: property({\n    default_value: true\n  }),\n\n  /**\n    Overlays base styling\n    (default includes position and hidden)\n\n    @property style\n    @type String\n    @default set from x, y, and hidden\n  */\n  style: property({\n    default_value: function() {\n      var transform = translate(this.x() + 'px', this.y() + 'px');\n      var styles = {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        '-webkit-transform': transform,\n        '-ms-transform': transform,\n        transform: transform\n      };\n\n      if (this.hidden())\n        styles.display = 'none';\n\n      return styleToString(styles);\n    }\n  }),\n\n  /**\n    Position overlay layer at given x,y coordinates\n\n    @example\n    ```js\n    // Absolute, x: 100, y: 50\n    overlay.position(100, 50);\n    overlay.position({x: 100, y: 50});\n\n    // Relative-to-chart, x: 50, y: 40\n    overlay.position({chart: {x: 50, y: 40}});\n\n    // Relative-to-container, x: 75, y: 50\n    overlay.position({container: {x: 75, y: 50}});\n    ```\n    @method position\n    @param {Object|Number} position {x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left\n    @param {Number} [y] in px from top\n  */\n  // TODO This conflicts with component.position(), might need a rename\n  position: function(position, y) {\n    if (arguments.length > 1) {\n      position = {\n        x: position,\n        y: y\n      };\n    }\n    else {\n      if ('container' in position) {\n        position = this.getAbsolutePosition(position.container);\n      }\n      else if ('chart' in position) {\n        if (this.container) {\n          var chart = this.container.chartPosition();\n          position = this.getAbsolutePosition({\n            x: position.chart.x + chart.left,\n            y: position.chart.y + chart.top\n          });\n        }\n        else {\n          position = this.getAbsolutePosition(position.chart);\n        }\n      }\n    }\n\n    this.x(position.x).y(position.y);\n    this.base.attr('style', this.style());\n  },\n\n  /**\n    Show overlay (with `display: block`)\n\n    @method show\n  */\n  show: function() {\n    this.hidden(false);\n    this.base.attr('style', this.style());\n  },\n\n  /**\n    Hide overlay (with `display: none`)\n\n    @method hide\n  */\n  hide: function() {\n    this.hidden(true);\n    this.base.attr('style', this.style());\n  },\n\n  /**\n    Get absolute position from container position\n    (needed since container position uses viewBox and needs to be scaled to absolute position)\n\n    @method getAbsolutePosition\n    @param {Object} container_position ({x, y})\n    @return {Object} absolute {x, y} relative to container div\n  */\n  getAbsolutePosition: function(container_position) {\n    var container = this.container && this.container.container;\n\n    if (container && this.container.responsive()) {\n      var container_dimensions = dimensions(container);\n      var chart_width = this.container.width();\n      var chart_height = this.container.height();\n      var width_ratio = container_dimensions.width / chart_width;\n      var height_ratio = container_dimensions.height / chart_height;\n\n      return {\n        x: width_ratio * container_position.x,\n        y: height_ratio * container_position.y\n      };\n    }\n    else {\n      // Not attached so can't get actual dimensions\n      // fallback to container position\n      return container_position;\n    }\n  }\n}, {\n  layer_type: 'overlay'\n});\n\nd3.chart().Overlay = Overlay;\nexport default Overlay;\n","import d3 from 'd3';\nimport {\n  getParentData,\n  style,\n  isSeriesData,\n  di\n} from '../helpers';\n\n/**\n  Mixin for handling series data\n\n  @class Series\n  @namespace mixins\n*/\nvar Series = {\n  /**\n    Get key for given series data\n\n    @method seriesKey\n    @param {Any} d Series object with `key`\n    @return {Any}\n  */\n  seriesKey: di(function(chart, d) {\n    return d.key;\n  }),\n\n  /**\n    Get values for given series data\n\n    @method seriesValues\n    @param {Any} d Series object with `values` array\n    @return {Array}\n  */\n  seriesValues: di(function(chart, d, i) {\n    // Store seriesIndex on series\n    d.seriesIndex = i;\n    return d.values;\n  }),\n\n  /**\n    Get class for given series data\n\n    @method seriesClass\n    @param {Any} d\n    @param {Number} i\n    @return {String}\n  */\n  seriesClass: di(function(chart, d, i) {\n    return 'chart-series chart-index-' + i + (d['class'] ? ' ' + d['class'] : '');\n  }),\n\n  /**\n    Get index for given data-point of series\n\n    @method seriesIndex\n    @param {Any} d\n    @param {Number} i\n  */\n  seriesIndex: di(function(chart, d, i) {\n    var series = chart.seriesData.call(this, d, i);\n    return series && series.seriesIndex || 0;\n  }),\n\n  /**\n    Get parent series data for given data-point\n\n    @method seriesData\n    @return {Any}\n  */\n  seriesData: di(function() {\n    return getParentData(this);\n  }),\n\n  /**\n    (di) Get style given series data or data-point\n    (Uses \"style\" object on `d`, if defined)\n\n    @method itemStyle\n    @param {Any} d\n    @param {Number} [i]\n    @param {Number} [j]\n    @return {String}\n  */\n  itemStyle: di(function(chart, d) {\n    return style(d.style) || null;\n  }),\n\n  /**\n    Get series count for chart\n\n    @method seriesCount\n    @return {Number}\n  */\n  seriesCount: function() {\n    var data = this.data();\n    return (data && isSeriesData(data)) ? data.length : 1;\n  },\n\n  /**\n    Extension of layer() that handles data-binding and layering for series data.\n\n    - Updates `dataBind` method to access underlying series values\n    - Creates group layer for each series in chart\n    - Should be used just like layer()\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(mixins.Series, {\n      initialize: function() {\n        this.seriesLayer('Circles', this.base, {\n          // Create group for each series on this.base\n          // and calls the following for each series item\n          // (entire layer is called twice: series-1 and series-2)\n\n          dataBind: function(data) {\n            // 1. data = [1, 2, 3]\n            // 2. data = [4, 5, 6]\n          },\n          insert: function() {\n            // Same as chart.layer\n            // (where \"this\" is series group layer)\n          },\n          events: {\n            // Same as chart.layer\n          }\n        });\n      }\n    }));\n\n    // ...\n\n    chart.draw([\n      {key: 'series-1', values: [1, 2, 3]},\n      {key: 'series-2', values: [4, 5, 6]}\n    ]);\n    ```\n    @method seriesLayer\n    @param {String} name\n    @param {Selection} selection\n    @param {Object} options (`dataBind` and `insert` required)\n    @return {d3.chart.layer}\n  */\n  seriesLayer: function(name, selection, options) {\n    if (options && options.dataBind) {\n      var dataBind = options.dataBind;\n\n      options.dataBind = function(data) {\n        var chart = this.chart();\n        var series = this.selectAll('g')\n          .data(data, chart.seriesKey);\n\n        series.enter()\n          .append('g');\n\n        series\n          .attr('class', chart.seriesClass)\n          .attr('style', chart.itemStyle);\n\n        // TODO Exit layer items then exit series layer\n        series.exit()\n          .remove();\n\n        series.chart = function() { return chart; };\n\n        return dataBind.call(series, chart.seriesValues);\n      };\n    }\n\n    return d3.chart().prototype.layer.call(this, name, selection, options);\n  },\n\n  // Ensure data is in series form\n  transform: function(data) {\n    return !isSeriesData(data) ? [{values: data}] : data;\n  }\n};\n\nexport default Series;\n","import {\n  extend,\n  isUndefined,\n  isObject,\n  valueOrDefault\n} from '../utils';\nimport {\n  property,\n  isSeriesData,\n  createScale,\n  di\n} from '../helpers';\n\n/**\n  Mixin for handling XY data\n\n  @class XY\n  @namespace mixins\n*/\nvar XY = {\n  initialize: function() {\n    // Set scale ranges once chart is ready to be rendered\n    this.on('before:draw', this.setScales.bind(this));\n  },\n\n  transform: function(data) {\n    data = data || [];\n\n    // Transform series data from values to x,y\n    if (isSeriesData(data)) {\n      data = data.map(function(series) {\n        return extend({}, series, {\n          values: series.values.map(normalizeData)\n        });\n      });\n    }\n    else if (Array.isArray(data)) {\n      data = data.map(normalizeData);\n    }\n\n    return data;\n\n    function normalizeData(point, index) {\n      if (!isObject(point))\n        point = {x: index, y: point};\n      else if (!Array.isArray(point) && isUndefined(point.x))\n        point.x = index;\n\n      return point;\n    }\n  },\n\n  /**\n    Get/set x-scale with `d3.scale` or with object (uses `helpers.createScale`)\n\n    @property xScale\n    @type Object|d3.scale\n  */\n  xScale: property({\n    set: function(value) {\n      var scale = createScale(value);\n      this.setXScaleRange(scale);\n\n      return {\n        override: scale\n      };\n    },\n    get: function(scale) {\n      if (!scale) {\n        scale = this.getDefaultXScale();\n        this.setXScaleRange(scale);\n      }\n\n      return scale;\n    }\n  }),\n\n  /**\n    Get/set yscale with `d3.scale` or with object (uses `helpers.createScale`)\n\n    @property xScale\n    @type Object|d3.scale\n  */\n  yScale: property({\n    set: function(value) {\n      var scale = createScale(value);\n      this.setYScaleRange(scale);\n\n      return {\n        override: scale\n      };\n    },\n    get: function(scale) {\n      if (!scale) {\n        scale = this.getDefaultYScale();\n        this.setYScaleRange(scale);\n      }\n\n      return scale;\n    }\n  }),\n\n  /**\n    Key on data object for x-value\n\n    @property xKey\n    @type String\n    @default 'x'\n  */\n  xKey: property({\n    default_value: 'x'\n  }),\n\n  /**\n    Key on data object for y-value\n\n    @property yKey\n    @type String\n    @default 'y'\n  */\n  yKey: property({\n    default_value: 'y'\n  }),\n\n  /**\n    Get scaled x-value for given data-point\n\n    @method x\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  x: di(function(chart, d, i) {\n    var value = chart.xValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.xScale()(value, series_index));\n  }),\n\n  /**\n    Get scaled y-value for given data-point\n\n    @method y\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  y: di(function(chart, d, i) {\n    var value = chart.yValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.yScale()(value, series_index));\n  }),\n\n  /**\n    Get key for data-point. Looks for \"key\" on `d` first, otherwise uses x-value.\n\n    @method key\n    @param {Any} d\n    @param {Number} i\n    @return {Any}\n  */\n  key: di(function(chart, d, i) {\n    return valueOrDefault(d.key, chart.xValue.call(this, d, i));\n  }),\n\n  /**\n    Get scaled `x = 0` value\n\n    @method x0\n    @return {Number}\n  */\n  x0: function() {\n    return parseFloat(this.xScale()(0));\n  },\n\n  /**\n    Get scaled `y = 0` value\n\n    @method x0\n    @return {Number}\n  */\n  y0: function() {\n    return parseFloat(this.yScale()(0));\n  },\n\n  /**\n    Get x-value for data-point. Checks for `xKey()` on `d` first, otherwise uses `d[0]`.\n\n    @example\n    ```js\n    xValue({x: 10, y: 20}); // -> 10\n    xValue([10, 20]); // -> 10\n    ```\n    @method xValue\n    @param {Any} d\n    @return {Any}\n  */\n  xValue: di(function(chart, d) {\n    var key = chart.xKey();\n    if (d)\n      return key in d ? d[key] : d[0];\n  }),\n\n  /**\n    Get y-value for data-point. Checks for `yKey()` on `d` first, otherwise uses `d[1]`.\n\n    @example\n    ```js\n    yValue({x: 10, y: 20}); // -> 20\n    yValue([10, 20]); // -> 20\n    ```\n    @method yValue\n    @param {Any} d\n    @return {Any}\n  */\n  yValue: di(function(chart, d) {\n    var key = chart.yKey();\n    if (d)\n      return key in d ? d[key] : d[1];\n  }),\n\n  /**\n    Set x- and y-scale ranges (using `setXScaleRange` and `setYScaleRange`)\n\n    @method setScales\n  */\n  setScales: function() {\n    this.setXScaleRange(this.xScale());\n    this.setYScaleRange(this.yScale());\n  },\n\n  /**\n    Set range (0, width) for given x-scale\n\n    @method setXScaleRange\n    @param {d3.scale} x_scale\n  */\n  setXScaleRange: function(x_scale) {\n    x_scale.range([0, this.width()]);\n  },\n\n  /**\n    Set range(height, 0) for given y-scale\n\n    @method setYScaleRange\n    @param {d3.scale} y_scale\n  */\n  setYScaleRange: function(y_scale) {\n    y_scale.range([this.height(), 0]);\n  },\n\n  /**\n    Get default x-scale: `{data: this.data(), key: 'x'}`\n\n    @method getDefaultXScale\n    @return {d3.scale}\n  */\n  getDefaultXScale: function() {\n    return createScale({\n      data: this.data(),\n      key: 'x'\n    });\n  },\n\n  /**\n    Get default y-scale: `{data: this.data(), key: 'y'}`\n\n    @method getDefaultYScale\n    @return {d3.scale}\n  */\n  getDefaultYScale: function() {\n    return createScale({\n      data: this.data(),\n      key: 'y'\n    });\n  }\n};\n\nexport default XY;\n","import { createScale } from '../helpers';\n\n/**\n  Mixin for charts of centered key,value data (x: index, y: value, key)\n\n  @class XYValues\n  @namespace mixins\n*/\nvar XYValues = {\n  /**\n    Determine width of data-point when displayed adjacent\n\n    @method adjacentWidth\n    @return {Number}\n  */\n  adjacentWidth: function() {\n    var series_count = this.seriesCount ? this.seriesCount() : 1;\n    return this.layeredWidth() / series_count;\n  },\n\n  /**\n    Determine layered width (width of group for adjacent)\n\n    @method layeredWidth\n    @return {Number}\n  */\n  layeredWidth: function() {\n    var range_band = this.xScale() && this.xScale().rangeBand && this.xScale().rangeBand();\n    var width = isFinite(range_band) ? range_band : 0;\n\n    return width;\n  },\n\n  /**\n    Determine item width based on series display type (adjacent or layered)\n\n    @method itemWidth\n    @return {Number}\n  */\n  itemWidth: function() {\n    var scale = this.xScale();\n    return scale && scale.width ? scale.width() : this.layeredWidth();\n  },\n\n  // Override default x-scale to use ordinal type\n  /**\n    Override default x-scale to use ordinal type: `{type: 'ordinal', data: this.data(), key: 'y', centered: true}`\n\n    @method getDefaultYScale\n    @return {d3.scale}\n  */\n  getDefaultXScale: function() {\n    return createScale({\n      type: 'ordinal',\n      data: this.data(),\n      key: 'x',\n      centered: true\n    });\n  }\n};\n\nexport default XYValues;\n","import { di } from '../helpers';\n\n/**\n  Mixin for inverting XY calculations with x vertical, increasing bottom-to-top and y horizontal, increasing left-to-right\n\n  @class XYInverted\n  @namespace mixins\n*/\nvar XYInverted = {\n  /**\n    Get x-value for plotting (scaled y-value)\n\n    @method x\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  x: di(function(chart, d, i) {\n    var value = chart.yValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.yScale()(value, series_index));\n  }),\n\n  /**\n    Get y-value for plotting (scaled x-value)\n\n    @method y\n    @param {Any} d\n    @param {Number} i\n    @return {Number}\n  */\n  y: di(function(chart, d, i) {\n    var value = chart.xValue.call(this, d, i);\n    var series_index = chart.seriesIndex && chart.seriesIndex.call(this, d, i) || 0;\n\n    return parseFloat(chart.xScale()(value, series_index));\n  }),\n\n  /**\n    Get scaled y = 0 value (along x-axis)\n\n    @method x0\n    @return {Number}\n  */\n  x0: function() {\n    return parseFloat(this.yScale()(0));\n  },\n\n  /**\n    Get scaled x = 0 value (along y-axis)\n\n    @method x0\n    @return {Number}\n  */\n  y0: function() {\n    return parseFloat(this.xScale()(0));\n  },\n\n  /**\n    Set range (height, 0) for given x-scale\n\n    @method setXScaleRange\n    @param {d3.scale} x_scale\n  */\n  setXScaleRange: function(x_scale) {\n    x_scale.range([this.height(), 0]);\n  },\n\n  /**\n    Set range (0, width) for given y-scale\n\n    @method setYScaleRange\n    @param {d3.scale} y_scale\n  */\n  setYScaleRange: function(y_scale) {\n    y_scale.range([0, this.width()]);\n  }\n};\n\nexport default XYInverted;\n","import d3 from 'd3';\nimport { property } from '../helpers';\nimport {\n  extend,\n  defaults,\n  isBoolean\n} from '../utils';\n\n/**\n  Mixin for handling labels in charts\n\n  @class Labels\n  @namespace mixins\n*/\nvar Labels = {\n  /**\n    Call during chart initialization to add labels to chart\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n      initialize: function() {\n        // this.layer()...\n\n        // Attach labels layer\n        this.attachLabels();\n      }\n    }));\n    ```\n    @method attachLabels\n  */\n  attachLabels: function() {\n    var options = this.labels();\n    options.parent = this;\n\n    var LabelsClass = d3.chart(options.type);\n    var base = this.base.append('g').attr('class', 'chart-labels');\n    var labels = this._labels = new LabelsClass(base, options);\n\n    // Proxy x and y to parent chart\n    this.proxyLabelMethods.forEach(function(method) {\n      labels[method] = this[method];\n    }, this);\n\n    this.on('draw', function(data) {\n      options = this.labels();\n      options.parent = this;\n\n      labels.options(options);\n\n      if (options.display !== false)\n        labels.draw(options.data || data);\n      else\n        labels.draw([]);\n    }.bind(this));\n  },\n\n  /**\n    Options passed to labels chart\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(Labels, {\n      // ...\n    }));\n\n    // ...\n\n    chart.labels(true); // -> display labels with defaults\n    chart.labels(false); // -> hide labels\n    chart.labels({offset: 10}); // -> pass options to labels chart\n\n    d3.select('#chart')\n      .chart('Compose', function(data) {\n        return {\n          charts: {\n            custom: {labels: {offset: 10}}\n          }\n        };\n      });\n    ```\n    @property labels\n    @type Object\n  */\n  labels: property({\n    get: function(value) {\n      if (isBoolean(value))\n        value = {display: value};\n      else if (!value)\n        value = {display: false};\n\n      return defaults({}, value, {\n        type: 'Labels'\n      });\n    }\n  }),\n\n  // Array of methods to proxy on labels chart\n  proxyLabelMethods: []\n};\n\n/**\n  Mixin for handling labels in XY charts\n  (proxies `x` and `y` to properly place labels for XY charts)\n\n  @class LabelsXY\n  @namespace mixins\n  @extends Labels\n*/\nvar LabelsXY = extend({}, Labels, {\n  proxyLabelMethods: ['x', 'y']\n});\n\nexport {\n  Labels as default,\n  LabelsXY\n};\n","import {\n  property\n} from '../helpers';\nimport {\n  isUndefined\n} from '../utils';\n\n/**\n  Mixin for handling common transition behaviors\n\n  @class Transition\n  @namespace mixins\n*/\nvar Transition = {\n  /**\n    Delay start of transition by specified milliseconds.\n\n    @property delay\n    @type Number|Function\n    @default (use container value, if available)\n  */\n  delay: property({\n    default_value: function() {\n      return this.container && this.container.delay && this.container.delay();\n    }\n  }),\n\n  /**\n    Transition duration in milliseconds.\n\n    @property duration\n    @type Number|Function\n    @default (use container value, if available)\n  */\n  duration: property({\n    default_value: function() {\n      return this.container && this.container.delay && this.container.duration();\n    }\n  }),\n\n  /**\n    Transition ease function\n\n    - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\n    - Note: arguments to pass to `d3.ease` are not supported\n\n    @property ease\n    @type String|Function\n    @default (use container value, if available)\n  */\n  ease: property({\n    default_value: function() {\n      return this.container && this.container.delay && this.container.ease();\n    }\n  }),\n\n  /**\n    Setup delay, duration, and ease for transition\n\n    @example\n    ```js\n    d3.chart('Chart').extend('Custom', helpers.mixin(Transition, {\n      initialize: function() {\n        this.layer('circles', this.base, {\n          // ...\n          events: {\n            'merge:transition': function() {\n              // Set delay, duration, and ease from properties\n              this.chart().setupTransition(this);\n            }\n          }\n        });\n      }\n    }));\n    ```\n    @method setupTransition\n    @param {d3.selection} selection\n  */\n  setupTransition: function setupTransition(selection) {\n    var delay = this.delay();\n    var duration = this.duration();\n    var ease = this.ease();\n\n    if (!isUndefined(delay))\n      selection.delay(delay);\n    if (!isUndefined(duration))\n      selection.duration(duration);\n    if (!isUndefined(ease))\n      selection.ease(ease);\n  }\n};\n\nexport default Transition;\n","import Series from './mixins/series';\nimport XY from './mixins/xy';\nimport XYValues from './mixins/xy-values';\nimport XYInverted from './mixins/xy-inverted';\nimport Labels, { LabelsXY } from './mixins/labels';\nimport Hover, { HoverPoints } from './mixins/hover';\nimport Transition from './mixins/transition';\nimport StandardLayer from './mixins/standard-layer';\n\nvar mixins = {\n  Series: Series,\n  XY: XY,\n  XYValues: XYValues,\n  XYInverted: XYInverted,\n  Labels: Labels,\n  LabelsXY: LabelsXY,\n  Hover: Hover,\n  HoverPoints: HoverPoints,\n  Transition: Transition,\n  StandardLayer: StandardLayer\n};\n\nexport {\n  mixins as default,\n  Series,\n  XY,\n  XYValues,\n  XYInverted,\n  Labels,\n  LabelsXY,\n  Hover,\n  HoverPoints,\n  Transition,\n  StandardLayer\n};\n","import d3 from 'd3';\nimport {\n  property,\n  di,\n  mixin,\n  createHelper\n} from '../helpers';\nimport {\n  Series,\n  XY,\n  LabelsXY,\n  Hover,\n  HoverPoints,\n  Transition,\n  StandardLayer\n} from '../mixins';\nimport Chart from '../Chart';\n\n/**\n  Create an XY Lines chart with single or series data.\n\n  ### Extending\n\n  Great care has been taken in making the standard charts in d3.compose extensible.\n  To extend the `Lines` chart, the following methods are available:\n\n  - `createLine`\n  - `lineKey`\n  - `lineData`\n  - `onDataBind`\n  - `onInsert`\n  - `onEnter`\n  - `onEnterTransition`\n  - `onUpdate`\n  - `onUpdateTransition`\n  - `onMerge`\n  - `onMergeTransition`\n  - `onExit`\n  - `onExitTransition`\n\n  View the `Lines.js` source for the default implementation and more information on these methods.\n\n  @example\n  ```js\n  var chart = d3.select('#chart').chart('Compose', function(data) {\n    return {\n      charts: {\n        input: {\n          type: 'Lines'\n          data: data.input,\n          // xScale: ...,\n          // yScale: ...,\n          // other properties...\n        }\n      }\n    };\n  });\n\n  // Single y-values\n  chart.draw([1, 2, 3]);\n\n  // Series (x,y) values\n  chart.draw([\n    {values: [{x: 0, y: 1}, {x: 1, y: 2}, {x: 2, y: 3}]}\n    {values: [{x: 0, y: 3}, {x: 1, y: 2}, {x: 2, y: 1}]}\n  ]);\n  ```\n  @class Lines\n  @extends Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer\n*/\nvar Mixed = mixin(Chart, Series, XY, LabelsXY, Hover, HoverPoints, Transition, StandardLayer);\nvar Lines = Mixed.extend({\n  initialize: function(options) {\n    Mixed.prototype.initialize.call(this, options);\n\n    this.lines = {};\n\n    // Use standard series layer for extensibility\n    // (dataBind, insert, and events defined in prototype)\n    this.standardSeriesLayer('Lines', this.base.append('g').classed('chart-lines', true));\n\n    this.attachLabels();\n  },\n\n  /**\n    Set interpolation mode for line\n\n    - See: [SVG-Shapes#line_interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate)\n    - Set to `null` or `'linear'` for no interpolation\n\n    @property interpolate\n    @type String\n    @default monotone\n  */\n  interpolate: property({\n    default_value: 'monotone'\n  }),\n\n  // Create line on insert (keyed by series/index)\n  createLine: di(function(chart, d, i, j) {\n    var key = chart.lineKey.call(this, d, i, j);\n    var line = chart.lines[key] = d3.svg.line()\n      .x(chart.x)\n      .y(chart.y);\n\n    var interpolate = d.interpolate || chart.interpolate();\n    if (interpolate)\n      line.interpolate(interpolate);\n  }),\n\n  // Get key for line (from series key or index)\n  lineKey: di(function(chart, d, i, j) {\n    var key = chart.seriesKey(chart.seriesData.call(this, d, i, j));\n    return key != null ? key : chart.seriesIndex.call(this, d, i, j);\n  }),\n\n  // Get data for line\n  lineData: di(function(chart, d, i, j) {\n    var key = chart.lineKey.call(this, d, i, j);\n    if (chart.lines[key])\n      return chart.lines[key](d);\n  }),\n\n  // Override StandardLayer\n  onDataBind: function onDataBind(selection, data) {\n    return selection.selectAll('path')\n      .data(function(d, i, j) {\n        return [data.call(selection, d, i, j)];\n      });\n  },\n\n  // Override StandardLayer\n  onInsert: function onInsert(selection) {\n    return selection.append('path')\n      .classed('chart-line', true)\n      .each(this.createLine);\n  },\n\n  // Override StandardLayer\n  onMergeTransition: function onMergeTransition(selection) {\n    this.setupTransition(selection);\n\n    selection\n      .attr('d', this.lineData)\n      .attr('style', this.itemStyle);\n  }\n});\n\nvar lines = createHelper('Lines');\n\nd3.chart().Lines = Lines;\nexport {\n  Lines as default,\n  lines\n};\n","import {\n  objectFind\n} from '../utils';\nimport {\n  mixin,\n  di,\n  createHelper\n} from '../helpers';\nimport {\n  Series,\n  XY,\n  XYValues,\n  LabelsXY,\n  Hover,\n  Transition,\n  StandardLayer\n} from '../mixins';\nimport Chart from '../Chart';\n\n/**\n  Bars chart with centered or adjacent display for single or series data.\n\n  To display bars for different series next to each other (adjacent),\n  use the `adjacent` option when creating the `xScale` (see example below).\n\n  ### Extending\n\n  To extend the `Bars` chart, the following methods are available:\n\n  - `barHeight`\n  - `barWidth`\n  - `barX`\n  - `barY`\n  - `barClass`\n  - `onDataBind`\n  - `onInsert`\n  - `onEnter`\n  - `onEnterTransition`\n  - `onUpdate`\n  - `onUpdateTransition`\n  - `onMerge`\n  - `onMergeTransition`\n  - `onExit`\n  - `onExitTransition`\n\n  @example\n  ```js\n  var chart = d3.select('#chart').chart('Compose', function(data) {\n    // Display bars for different series next to each other (adjacent: true)\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n    return {\n      charts: {\n        output: {\n          type: 'Bars',\n          data: data.output,\n          xScale: xScale,\n          // yScale: ...,\n          // other properties...\n        }\n      }\n    };\n  });\n\n  // Single y-values\n  chart.draw([10, 20, 30]);\n\n  // Series (x,y) values\n  chart.draw([\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n  ]);\n  ```\n  @class Bars\n  @extends Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer\n*/\n\nvar Mixed = mixin(Chart, Series, XY, XYValues, LabelsXY, Hover, Transition, StandardLayer);\nvar Bars = Mixed.extend({\n  initialize: function(options) {\n    Mixed.prototype.initialize.call(this, options);\n\n    this.on('before:draw', function() {\n      this.offset_axis = this.getOffsetAxis();\n    }.bind(this));\n\n    // Use standard series layer for extensibility\n    // (dataBind, insert, and events defined in prototype)\n    this.standardSeriesLayer('Bars', this.base.append('g').classed('chart-bars', true));\n    this.attachLabels();\n  },\n\n  barHeight: di(function(chart, d, i) {\n    var height = Math.abs(chart.y0() - chart.y.call(this, d, i)) - chart.barOffset();\n    return height > 0 ? height : 0;\n  }),\n  barWidth: di(function(chart) {\n    return chart.itemWidth();\n  }),\n  barX: di(function(chart, d, i) {\n    return chart.x.call(this, d, i) - chart.itemWidth() / 2;\n  }),\n  barY: di(function(chart, d, i) {\n    var y = chart.y.call(this, d, i);\n    var y0 = chart.y0();\n\n    return y < y0 ? y : y0 + chart.barOffset();\n  }),\n  bar0: di(function(chart, d, i) {\n    var y0 = chart.y0();\n    var offset = chart.barOffset();\n    return chart.y.call(this, d, i) <= y0 ? y0 - offset : y0 + offset;\n  }),\n  barClass: di(function(chart, d) {\n    return 'chart-bar' + (d['class'] ? ' ' + d['class'] : '');\n  }),\n\n  // Shift bars slightly to account for axis thickness\n  barOffset: function barOffset() {\n    if (this.offset_axis) {\n      var axis_thickness = parseInt(this.offset_axis.base.select('.domain').style('stroke-width')) || 0;\n      return axis_thickness / 2;\n    }\n    else {\n      return 0;\n    }\n  },\n\n  getOffsetAxis: function getOffsetAxis() {\n    var components = this.container && this.container.components();\n    return objectFind(components, function(component) {\n      if (component.type == 'Axis' && component.position() == 'bottom')\n        return component;\n    });\n  },\n\n  // Override StandardLayer\n  onDataBind: function onDataBind(selection, data) {\n    return selection.selectAll('rect')\n      .data(data, this.key);\n  },\n\n  // Override StandardLayer\n  onInsert: function onInsert(selection) {\n    return selection.append('rect')\n      .on('mouseenter', this.mouseEnterPoint)\n      .on('mouseleave', this.mouseLeavePoint);\n  },\n\n  // Override StandardLayer\n  onEnter: function onEnter(selection) {\n    selection\n      .attr('y', this.bar0)\n      .attr('height', 0);\n  },\n\n  // Override StandardLayer\n  onMerge: function onMerge(selection) {\n    selection\n      .attr('class', this.barClass)\n      .attr('style', this.itemStyle)\n      .attr('x', this.barX)\n      .attr('width', this.barWidth);\n  },\n\n  // Override StandardLayer\n  onMergeTransition: function onMergeTransition(selection) {\n    this.setupTransition(selection);\n\n    selection\n      .attr('y', this.barY)\n      .attr('height', this.barHeight);\n  },\n\n  // Override StandardLayer\n  onExitTransition: function onExitTransition(selection) {\n    this.setupTransition(selection);\n\n    selection\n      .attr('y', this.bar0)\n      .attr('height', 0)\n      .remove();\n  }\n});\n\nvar bars = createHelper('Bars');\n\nd3.chart().Bars = Bars;\nexport {\n  Bars as default,\n  bars\n};\n","import {\n  extend\n} from '../utils';\nimport {\n  di,\n  createHelper\n} from '../helpers';\nimport Bars from './Bars';\n\n/**\n  Bars chart with values stacked on top of each other\n\n  (See `Bars` for extensibility details)\n\n  @example\n  ```js\n  var chart = d3.select('#chart').chart('Compose', function(data) {\n    // Display bars for different series next to each other (adjacent: true)\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n    return {\n      charts: {\n        stacked_output: {\n          type: 'StackedBars',\n          data: data.output,\n          xScale: xScale,\n          // yScale: ...,\n          // other properties...\n        }\n      }\n    };\n  });\n\n  // Single y-values\n  chart.draw([10, 20, 30]);\n\n  // Series (x,y) values\n  chart.draw([\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n  ]);\n  ```\n  @class StackedBars\n  @extends Bars\n*/\nvar StackedBars = Bars.extend({\n  transform: function(data) {\n    data = Bars.prototype.transform.call(this, data);\n\n    var grouped = {};\n    var x_key = this.xKey();\n    var y_key = this.yKey();\n    data = data.map(function(series) {\n      series = extend({}, series);\n      series.values = series.values.map(function(value) {\n        value = extend({}, value);\n        var x = value[x_key];\n        var y = value.__original_y = value[y_key];\n\n        if (!grouped[x])\n          grouped[x] = {pos: 0, neg: 0};\n\n        if (y >= 0) {\n          value.__previous = grouped[x].pos;\n          grouped[x].pos = value[y_key] = grouped[x].pos + y;\n        }\n        else {\n          value.__previous = grouped[x].neg;\n          grouped[x].neg = value[y_key] = grouped[x].neg + y;\n        }\n\n        return value;\n      }, this);\n\n      return series;\n    }, this);\n\n    return data;\n  },\n\n  barHeight: di(function(chart, d, i) {\n    var height = Math.abs(chart.yScale()(d.__previous) - chart.y.call(this, d, i));\n    var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\n    return height > 0 ? height - offset : 0;\n  })\n});\n\nvar stackedBars = createHelper('StackedBars');\n\nd3.chart().StackedBars = StackedBars;\nexport {\n  StackedBars as default,\n  stackedBars\n};\n","import { objectFind } from '../utils';\nimport {\n  mixin,\n  di,\n  createHelper\n} from '../helpers';\nimport { XYInverted } from '../mixins';\nimport Bars from './Bars';\n\n/**\n  Bars chart with bars that group from left-to-right\n\n  (See `Bars` for extensibility details)\n\n  @example\n  ```js\n  var chart = d3.select('#chart').chart('Compose', function(data) {\n    // Display bars for different series next to each other (adjacent: true)\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n    return {\n      charts: {\n        output: {\n          type: 'HorizontalBars',\n          data: data.output,\n          xScale: xScale,\n          // yScale: ...,\n          // other properties...\n        }\n      }\n    };\n  });\n\n  // Single y-values\n  chart.draw([10, 20, 30]);\n\n  // Series (x,y) values\n  chart.draw([\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n  ]);\n  ```\n  @class HorizontalBars\n  @extends Bars, XYInverted\n*/\nvar HorizontalBars = mixin(Bars, XYInverted).extend({\n  barX: di(function(chart, d, i) {\n    var x = chart.x.call(this, d, i);\n    var x0 = chart.x0();\n\n    return x < x0 ? x : x0 + chart.barOffset();\n  }),\n  barY: di(function(chart, d, i) {\n    return chart.y.call(this, d, i) - chart.itemWidth() / 2;\n  }),\n  barWidth: di(function(chart, d, i) {\n    var width = Math.abs(chart.x0() - chart.x.call(this, d, i)) - chart.barOffset();\n    return width > 0 ? width : 0;\n  }),\n  barHeight: di(function(chart) {\n    return chart.itemWidth();\n  }),\n  bar0: di(function(chart, d, i) {\n    var x0 = chart.x0();\n    var offset = chart.barOffset();\n    return chart.x.call(this, d, i) >= x0 ? x0 + offset : x0 - offset;\n  }),\n\n  getOffsetAxis: function getOffsetAxis() {\n    var components = this.container && this.container.components();\n    return objectFind(components, function(component) {\n      if (component.type == 'Axis' && component.position() == 'left')\n        return component;\n    });\n  },\n\n  onEnter: function onEnter(selection) {\n    selection\n      .attr('x', this.bar0)\n      .attr('width', 0);\n  },\n\n  onMerge: function onMerge(selection) {\n    selection\n      .attr('class', this.barClass)\n      .attr('style', this.itemStyle)\n      .attr('y', this.barY)\n      .attr('height', this.barHeight);\n  },\n\n  onMergeTransition: function onMergeTransition(selection) {\n    this.setupTransition(selection);\n\n    selection\n      .attr('x', this.barX)\n      .attr('width', this.barWidth);\n  },\n\n  onExitTransition: function onExitTransition(selection) {\n    this.setupTransition(selection);\n\n    selection\n      .attr('x', this.bar0)\n      .attr('width', 0)\n      .remove();\n  }\n});\n\nvar horizontalBars = createHelper('HorizontalBars');\n\nd3.chart().HorizontalBars = HorizontalBars;\nexport {\n  HorizontalBars as default,\n  horizontalBars\n};\n","import {\n  di,\n  createHelper\n} from '../helpers';\nimport HorizontalBars from './HorizontalBars';\nimport StackedBars from './StackedBars';\n\n/**\n  Horizontal Stacked Bars\n\n  (See `Bars` for extensibility details)\n\n  @example\n  ```js\n  var chart = d3.select('#chart').chart('Compose', function(data) {\n    // Display bars for different series next to each other (adjacent: true)\n    var xScale = {type: 'ordinal', adjacent: true, domain: [0, 1, 2]};\n\n    return {\n      charts: {\n        output: {\n          type: 'HorizontalStackedBars',\n          data: data.output,\n          xScale: xScale,\n          // yScale: ...,\n          // other properties...\n        }\n      }\n    };\n  });\n\n  // Single y-values\n  chart.draw([10, 20, 30]);\n\n  // Series (x,y) values\n  chart.draw([\n    {values: [{x: 0, y: 10}, {x: 1, y: 20}, {x: 2, y: 30}]},\n    {values: [{x: 0, y: 30}, {x: 1, y: 20}, {x: 2, y: 10}]}\n  ]);\n  ```\n  @class HorizontalStackedBars\n  @extends HorizontalBars\n*/\nvar HorizontalStackedBars = HorizontalBars.extend({\n  transform: function(data) {\n    data = StackedBars.prototype.transform.call(this, data);\n    data = HorizontalBars.prototype.transform.call(this, data);\n    return data;\n  },\n\n  barWidth: di(function(chart, d, i) {\n    var width = Math.abs(chart.yScale()(d.__previous) - chart.x.call(this, d, i));\n    var offset = chart.seriesIndex.call(this, d, i) === 0 ? chart.barOffset() : 0;\n    return width > 0 ? width - offset : 0;\n  }),\n  barX: di(function(chart, d, i) {\n    var x = chart.x.call(this, d, i);\n    var x0 = chart.yScale()(d.__previous);\n\n    return x < x0 ? x : x0 + chart.barOffset();\n  })\n});\n\nvar horizontalStackedBars = createHelper('HorizontalStackedBars');\n\nd3.chart().HorizontalStackedBars = HorizontalStackedBars;\nexport {\n  HorizontalStackedBars as default,\n  horizontalStackedBars\n};\n","import d3 from 'd3';\nimport {\n  contains,\n  extend,\n  first,\n  isFunction,\n  isString,\n  isNumber,\n  isUndefined,\n  objectEach,\n  valueOrDefault\n} from '../utils';\nimport {\n  property,\n  di,\n  mixin,\n  createHelper,\n  isSeriesData,\n  translate,\n  alignText\n} from '../helpers';\nimport {\n  Series,\n  XY,\n  Hover,\n  Transition,\n  StandardLayer\n} from '../mixins';\nimport Chart from '../Chart';\n\n/**\n  Standalone or \"embeddable\" labels (uses `mixins.Labels` and `attachLabels` to embed in chart)\n\n  ### Extending\n\n  To extend the `Labels` chart, the following methods are available:\n\n  - `insertLabels`\n  - `mergeLabels`\n  - `layoutLabels`\n  - `transitionLabels`\n  - `onDataBind`\n  - `onInsert`\n  - `onEnter`\n  - `onEnterTransition`\n  - `onUpdate`\n  - `onUpdateTransition`\n  - `onMerge`\n  - `onMergeTransition`\n  - `onExit`\n  - `onExitTransition`\n\n  View the `Labels.js` source for the default implementation and more information on these methods.\n\n  @example\n  ```js\n  var chart = d3.select('#chart').chart('Compose', function(data) {\n    return {\n      charts: {\n        input: {\n          type: 'Lines',\n          data: data.input,\n          // xScale, yScale, other properties...\n\n          // Show labels with default properties\n          labels: true\n        },\n        output: {\n          type: 'Bars',\n          data: data.output,\n          // xScale, yScale, other properties...\n\n          // Pass options to labels\n          labels: {\n            offset: 2,\n            position: 'top',\n            style: {\n              'font-size': '14px'\n            },\n            format: d3.format(',0d')\n          }\n        },\n        labels: {\n          type: 'Labels',\n          data: data.labels,\n\n          // xScale, yScale, other properties...\n        }\n      }\n    };\n  });\n\n  chart.draw({\n    input: [1, 2, 3],\n    output: [10, 20, 30],\n    labels: [\n      {x: 0, y: 0},\n      {x: 0, y: 30, label: 'Override (y by default)'},\n      {x: 2, y: 0},\n      {x: 2, y: 30}\n    ]\n  });\n  ```\n  @class Labels\n  @extends Chart, Series, XY, Hover, Transition, StandardLayer\n*/\nvar Mixed = mixin(Chart, Series, XY, Hover, Transition, StandardLayer);\nvar Labels = Mixed.extend({\n  initialize: function(options) {\n    Mixed.prototype.initialize.call(this, options);\n\n    // Proxy attach to parent for hover\n    var parent = this.options().parent;\n    if (parent) {\n      this.parent = parent;\n      parent.on('attach', function() {\n        this.container = parent.container;\n        this.trigger('attach');\n      }.bind(this));\n    }\n\n    // Use StandardLayer for extensibility\n    this.standardSeriesLayer('Labels', this.base);\n  },\n\n  transform: function(data) {\n    data = Mixed.prototype.transform.call(this, data);\n\n    if (!isSeriesData(data))\n      data = [{key: 'labels', name: 'Labels', values: data}];\n\n    // TODO Use ticks / domain from xScale\n    // ticks = scale.ticks ? scale.ticks.apply(scale, [10]) : scale.domain()\n    return data;\n  },\n\n  /**\n    Formatting function or string (string is passed to `d3.format`) for label values\n\n    @property format\n    @type String|Function\n  */\n  format: property({\n    set: function(value) {\n      if (isString(value)) {\n        return {\n          override: d3.format(value)\n        };\n      }\n    }\n  }),\n\n  /**\n    Label position relative to data point\n    (top, right, bottom, or left)\n\n    Additionally, `(a)|(b)` can be used to set position to `a` if y-value >= 0 and `b` otherwise,\n    where `a` and `b` are `top`, `right`, `bottom`, or `left`\n\n    For more advanced positioning, a \"di\" function can be specified to set position per label\n\n    @example\n    ```js\n    labels.position('top'); // top for all values\n    labels.position('top|bottom'); // top for y-value >= 0, bottom otherwise\n    labels.position(function(d, i) { return d.x >= 0 ? 'right' : 'left'; });\n    ```\n    @property position\n    @type String|Function\n    @default top|bottom\n  */\n  position: property({\n    default_value: 'top|bottom',\n    get: function(value) {\n      if (isString(value) && value.indexOf('|') >= 0) {\n        var chart = this;\n        var parts = value.split('|');\n        return function(d, i, j) {\n          var y_value = chart.yValue.call(this, d, i, j);\n          return y_value >= 0 ? parts[0] : parts[1];\n        };\n      }\n      else {\n        return value;\n      }\n    }\n  }),\n\n  /**\n    Offset between data point and label\n    (if `Number` is given, offset is set based on position)\n\n    @property offset\n    @type Number|Object\n    @default 0\n  */\n  offset: property({\n    default_value: 0\n  }),\n\n  /**\n    Padding between text and label background\n\n    @property padding\n    @type Number\n    @default 1\n  */\n  padding: property({default_value: 1}),\n\n  /**\n    Define text anchor (start, middle, or end)\n\n    (set by default based on label position)\n\n    @property anchor\n    @type String\n    @default middle\n  */\n  anchor: property({\n    validate: function(value) {\n      return contains(['start', 'middle', 'end'], value);\n    }\n  }),\n\n  /**\n    Define text-alignment (top, middle, or bottom)\n\n    (set by default based on label position)\n\n    @property alignment\n    @type String\n    @default middle\n  */\n  alignment: property({\n    validate: function(value) {\n      return contains(['top', 'middle', 'bottom'], value);\n    }\n  }),\n\n  /**\n    Get label text for data-point (uses \"label\" property or y-value)\n\n    @method labelText\n    @param {Any} d\n    @param {Number} i\n    @return {String}\n  */\n  labelText: di(function(chart, d, i) {\n    var value = valueOrDefault(d.label, valueOrDefault(d.__original_y, chart.yValue.call(this, d, i)));\n    var format = chart.format();\n\n    return format ? format(value) : value;\n  }),\n\n  /**\n    Get class for label group\n\n    @method labelClass\n    @param {Any} d\n    @param {Number} i\n    @return {String}\n  */\n  labelClass: di(function(chart, d) {\n    return 'chart-label' + (d['class'] ? ' ' + d['class'] : '');\n  }),\n\n  onDataBind: function onDataBind(selection, data) {\n    return selection.selectAll('g')\n      .data(data, this.key);\n  },\n  onInsert: function onInsert(selection) {\n    return selection.append('g')\n      .call(this.insertLabels);\n  },\n  onMerge: function onMerge(selection) {\n    selection.attr('class', this.labelClass);\n\n    this.mergeLabels(selection);\n    this.layoutLabels(selection);\n  },\n  onMergeTransition: function onMergeTransition(selection) {\n    // Transition labels into position\n    this.setupTransition(selection);\n    this.transitionLabels(selection);\n  },\n\n  // (Override for custom labels)\n  insertLabels: function(selection) {\n    selection.append('rect')\n      .attr('class', 'chart-label-bg');\n    selection.append('text')\n      .attr('class', 'chart-label-text');\n  },\n\n  // (Override for custom labels)\n  mergeLabels: function(selection) {\n    selection.selectAll('text')\n      .text(this.labelText);\n  },\n\n  // (Override for custom labels)\n  layoutLabels: function(selection) {\n    // Calculate layout\n    var chart = this;\n    var labels = [];\n    var position = chart.position();\n    var values = {\n      offset: chart.offset(),\n      padding: chart.padding(),\n      anchor: chart.anchor(),\n      alignment: chart.alignment()\n    };\n\n    var options;\n    if (isString(position))\n      options = getOptions();\n\n    selection.each(function(d, i, j) {\n      if (!labels[j])\n        labels[j] = [];\n\n      // Store values for label and calculate layout\n      var label = chart._prepareLabel(chart, this, d, i, j);\n      labels[j].push(label);\n\n      var label_options = options || getOptions.call(chart, this, d, i, j);\n\n      chart._calculateLayout(chart, label_options, label);\n    });\n\n    // Collision detection\n    this._handleCollisions(chart, labels);\n\n    // Layout labels\n    labels.forEach(function(series) {\n      series.forEach(function(label) {\n        this._setLayout(chart, label);\n      }, this);\n    }, this);\n\n    function getOptions(element, d, i, j) {\n      var label_options = extend({}, values);\n      var label_position;\n\n      if (isFunction(position))\n        label_position = position.call(element, d, i, j);\n      else\n        label_position = position;\n\n      if (isNumber(label_options.offset)) {\n        var offset = {\n          top: {x: 0, y: -label_options.offset},\n          right: {x: label_options.offset, y: 0},\n          bottom: {x: 0, y: label_options.offset},\n          left: {x: -label_options.offset, y: 0}\n        }[label_position];\n\n        if (!offset)\n          offset = {x: 0, y: 0};\n\n        label_options.offset = offset;\n      }\n      if (isUndefined(label_options.anchor)) {\n        label_options.anchor = {\n          top: 'middle',\n          right: 'start',\n          bottom: 'middle',\n          left: 'end'\n        }[label_position];\n      }\n      if (isUndefined(label_options.alignment)) {\n        label_options.alignment = {\n          top: 'bottom',\n          right: 'middle',\n          bottom: 'top',\n          left: 'middle'\n        }[label_position];\n      }\n      return label_options;\n    }\n  },\n\n  // (Override for custom labels)\n  transitionLabels: function(selection) {\n    selection.attr('opacity', 1);\n  },\n\n  //\n  // Internal\n  //\n\n  _prepareLabel: function(chart, element, d, i) {\n    var selection = d3.select(element);\n    var text = selection.select('text');\n    var bg = selection.select('rect');\n\n    return {\n      x: chart.x.call(element, d, i),\n      y: chart.y.call(element, d, i),\n      element: element,\n      selection: selection,\n      text: {\n        element: text.node(),\n        selection: text\n      },\n      bg: {\n        element: bg.node(),\n        selection: bg\n      }\n    };\n  },\n\n  _calculateLayout: function(chart, options, label) {\n    var text_bounds = label.text.element.getBBox();\n\n    // Need to adjust text for line-height\n    var text_y_adjustment = alignText(label.text.element);\n\n    // Position background\n    var layout = label.bg.layout = {\n      x: options.offset.x,\n      y: options.offset.y,\n      width: text_bounds.width + (2 * options.padding),\n      height: text_bounds.height + (2 * options.padding)\n    };\n\n    // Set width / height of label\n    label.width = layout.width;\n    label.height = layout.height;\n\n    if (options.anchor == 'end')\n      label.x -= layout.width;\n    else if (options.anchor == 'middle')\n      label.x -= (layout.width / 2);\n\n    if (options.alignment == 'bottom')\n      label.y -= layout.height;\n    else if (options.alignment == 'middle')\n      label.y -= (layout.height / 2);\n\n    // Center text in background\n    label.text.layout = {\n      x: layout.x + (layout.width / 2) - (text_bounds.width / 2),\n      y: layout.y + (layout.height / 2) - (text_bounds.height / 2) + text_y_adjustment\n    };\n  },\n\n  _handleCollisions: function(chart, labels) {\n    labels.forEach(function(series, seriesIndex) {\n      // Check through remaining series for collisions\n      labels.slice(seriesIndex + 1).forEach(function(compareSeries) {\n        compareSeries.forEach(function(compareLabel) {\n          series.forEach(function(label) {\n            if (checkForOverlap(label, compareLabel))\n              groupLabels(label, compareLabel);\n          });\n        });\n      });\n    });\n\n    function checkForOverlap(labelA, labelB) {\n      var a = getEdges(labelA);\n      var b = getEdges(labelB);\n\n      var contained_LR = (b.left < a.left && b.right > a.right);\n      var contained_TB = (b.bottom < a.bottom && b.top > a.top);\n      var overlap_LR = (b.left >= a.left && b.left < a.right) || (b.right > a.left && b.right <= a.right) || contained_LR;\n      var overlap_TB = (b.top >= a.top && b.top < a.bottom) || (b.bottom > a.top && b.bottom <= a.bottom) || contained_TB;\n\n      return overlap_LR && overlap_TB;\n\n      function getEdges(label) {\n        return {\n          left: label.x,\n          right: label.x + label.width,\n          top: label.y,\n          bottom: label.y + label.height\n        };\n      }\n    }\n\n    function groupLabels(labelA, labelB) {\n      if (labelA.group && labelB.group) {\n        // Move labelB group labels into labelA group\n        objectEach(labelB.group.labels, function(label) {\n          labelA.group.labels.push(label);\n          label.group = labelA.group;\n        });\n\n        updateGroupPositions(labelA.group);\n      }\n      else if (labelA.group) {\n        addLabelToGroup(labelB, labelA.group);\n      }\n      else if (labelB.group) {\n        addLabelToGroup(labelA, labelB.group);\n      }\n      else {\n        var group = {labels: []};\n        addLabelToGroup(labelA, group);\n        addLabelToGroup(labelB, group);\n      }\n    }\n\n    function addLabelToGroup(label, group) {\n      group.labels.push(label);\n      label.group = group;\n      label.originalY = label.y;\n\n      updateGroupPositions(group);\n    }\n\n    function updateGroupPositions(group) {\n      function reset(label) {\n        // Reset to original y\n        label.y = label.originalY;\n        return label;\n      }\n      function sortY(a, b) {\n        if (a.y < b.y)\n          return -1;\n        else if (a.y > b.y)\n          return 1;\n        else\n          return 0;\n      }\n\n      var byY = group.labels.map(reset).sort(sortY).reverse();\n\n      byY.forEach(function(label, index) {\n        var prev = first(byY, index);\n        var overlap;\n\n        for (var i = prev.length - 1; i >= 0; i--) {\n          if (checkForOverlap(label, prev[i])) {\n            overlap = prev[i];\n            break;\n          }\n        }\n\n        if (overlap)\n          label.y = overlap.y - label.height;\n      });\n    }\n  },\n\n  _setLayout: function(chart, label) {\n    label.bg.selection\n      .attr('transform', translate(label.bg.layout.x, label.bg.layout.y))\n      .attr('width', label.bg.layout.width)\n      .attr('height', label.bg.layout.height);\n\n    label.text.selection\n      .attr('transform', translate(label.text.layout.x, label.text.layout.y));\n\n    // Position label and set opacity to fade-in\n    label.selection\n      .attr('transform', translate(label.x, label.y))\n      .attr('opacity', 0);\n  }\n}, {\n  z_index: 150\n});\n\nvar labels = createHelper('Labels');\n\nd3.chart().Labels = Labels;\nexport {\n  Labels as default,\n  labels\n};\n","import d3 from 'd3';\nimport {\n  property,\n  mixin,\n  createHelper\n} from '../helpers';\nimport {\n  Hover\n} from '../mixins';\nimport Labels from './Labels';\n/**\n  (in-progress)\n\n  @class HoverLabels\n*/\nvar Mixed = mixin(Labels, Hover);\nvar HoverLabels = Mixed.extend({\n  initialize: function(options) {\n    Mixed.prototype.initialize.call(this, options);\n    this.on('attach', function() {\n      this.container.on('mouseenter:point', this.onMouseEnterPoint.bind(this));\n      this.container.on('mouseleave:point', this.onMouseLeavePoint.bind(this));\n    }.bind(this));\n  },\n\n  /**\n    Maximum distance to find active points\n\n    @property hoverTolerance\n    @type Number\n    @default Infinity\n  */\n  hoverTolerance: property({\n    set: function(value) {\n      // Pass through hover tolerance to parent (if present)\n      if (this.parent && this.parent.hoverTolerance)\n        this.parent.hoverTolerance(value);\n    },\n    default_value: Infinity\n  }),\n\n  // Don't fade in labels, hidden until hover\n  transitionLabels: function() {},\n\n  onMouseEnterPoint: function(point) {\n    var label = this.findLabelForPoint(point);\n    if (label)\n      d3.select(label).attr('opacity', 1);\n  },\n  onMouseLeavePoint: function(point) {\n    var label = this.findLabelForPoint(point);\n    if (label)\n      d3.select(label).attr('opacity', 0);\n  },\n\n  findLabelForPoint: function(point) {\n    var labels = this.base.selectAll('g.chart-series').selectAll('g');\n    var chart = this;\n    var label;\n\n    labels.each(function(d, i, j) {\n      var series = chart.seriesData.call(this, d, i, j);\n      if (d === point.d && series === point.series)\n        label = this;\n    });\n\n    return label;\n  }\n});\n\nvar hoverLabels = createHelper('HoverLabels');\n\nd3.chart().HoverLabels = HoverLabels;\nexport {\n  HoverLabels as default,\n  hoverLabels\n};\n","import d3 from 'd3';\nimport { contains } from '../utils';\nimport {\n  createHelper,\n  di,\n  dimensions,\n  mixin,\n  property\n} from '../helpers';\nimport {\n  XY,\n  Transition,\n  StandardLayer\n} from '../mixins';\nimport Component from '../Component';\n\n/**\n  Gridlines component that draws major ticks for chart\n\n  Uses d3.axis extensions for ticks:\n\n  - `ticks`\n  - `tickValues`\n\n  ### Extending\n\n  To extend the `Gridlines` component, the following methods are available\n\n  - `onInsert`\n  - `onEnter`\n  - `onEnterTransition`\n  - `onUpdate`\n  - `onUpdateTransition`\n  - `onMerge`\n  - `onMergeTransition`\n  - `onExit`\n  - `onExitTransition`\n\n  @example\n  ```js\n  d3.select('#chart').chart('Compose', function(data) {\n    var scales = {\n      x: {data: data, key: 'x'},\n      y: {data: data, key: 'y'}\n    };\n\n    var vertical = d3c.gridlines({\n      scale: scales.x,\n      orientation: 'vertical'\n    });\n    var horizontal = d3c.gridlines({\n      scale: scales.y,\n      orientation: 'horizontal'\n    });\n\n    return [\n      vertical,\n      horizontal\n    ];\n  });\n  ```\n  @class Gridlines\n*/\nvar Mixed = mixin(Component, XY, Transition, StandardLayer);\nvar Gridlines = Mixed.extend({\n  initialize: function(options) {\n    Mixed.prototype.initialize.call(this, options);\n\n    // Proxy attach to parent for width/height\n    var parent = this.options().parent;\n    if (parent) {\n      this.parent = parent;\n\n      if (parent.container) {\n        this.container = parent.container;\n        this.trigger('attach');\n      }\n      else {\n        parent.on('attach', function() {\n          this.container = parent.container;\n          this.trigger('attach');\n        }.bind(this));\n      }\n    }\n\n    // Use standard layer for extensibility\n    this.standardLayer('Gridlines', this.base.append('g').attr('class', 'chart-gridlines'));\n  },\n\n  /**\n    Use horizontal, vertical gridlines\n\n    @property orientation\n    @type String\n    @default horizontal\n  */\n  orientation: property({\n    default_value: 'horizontal',\n    validate: function(value) {\n      return contains(['horizontal', 'vertical'], value);\n    },\n    set: function() {\n      // Update scale -> xScale/yScale when position changes\n      if (this.scale())\n        this.scale(this.scale());\n    }\n  }),\n\n  /**\n    Scale to use for gridlines.\n    Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used.\n\n    @example\n    ```js\n    // Set with d3.scale directly\n    gridlines.scale(d3.scale());\n\n    // or with Object passed to helpers.createScale\n    gridlines.scale({data: data, key: 'x'});\n    ```\n    @property scale\n    @type Object|d3.scale\n  */\n  scale: property({\n    set: function(value) {\n      if (this.orientation() == 'vertical') {\n        this.xScale(value);\n        value = this.xScale();\n      }\n      else {\n        this.yScale(value);\n        value = this.yScale();\n      }\n\n      return {\n        override: value\n      };\n    }\n  }),\n\n  // d3.axis extensions\n  ticks: property({\n    default_value: [10]\n  }),\n  tickValues: property(),\n\n  drawLine: di(function(chart, d) {\n    var x1, x2, y1, y2;\n    if (chart.orientation() == 'vertical') {\n      x1 = x2 = chart.xScale()(d);\n      y1 = 0;\n      y2 = chart.height();\n    }\n    else {\n      x1 = 0;\n      x2 = chart.width();\n      y1 = y2 = chart.yScale()(d);\n    }\n\n    d3.select(this)\n      .attr('x1', x1)\n      .attr('x2', x2)\n      .attr('y1', y1)\n      .attr('y2', y2);\n  }),\n\n  width: function width() {\n    // Use container's explicit chart width rather than component width (if available)\n    return this.container ? this.container.chartPosition().width : dimensions(this.base).width;\n  },\n  height: function height() {\n    // Use container's explicit chart height rather than component width (if available)\n    return this.container ? this.container.chartPosition().height : dimensions(this.base).width;\n  },\n\n  onDataBind: function onDataBind(selection, data) {\n    // [false] is given for display: false when attached from Axis\n    var hide = data && data[0] && data[0].y === false;\n\n    var tick_values = this.tickValues();\n    if (tick_values == null && !hide) {\n      // Get tick values from scale\n      var scale = this.orientation() == 'vertical' ? this.xScale() : this.yScale();\n      var ticks_args = this.ticks();\n\n      if (!ticks_args)\n        ticks_args = [10];\n      if (!Array.isArray(ticks_args))\n        ticks_args = [ticks_args];\n\n      tick_values = scale.ticks ? scale.ticks.apply(scale, ticks_args) : scale.domain();\n    }\n\n    return selection.selectAll('line').data(hide ? [] : tick_values);\n  },\n  onInsert: function onInsert(selection) {\n    return selection.append('line')\n      .attr('class', 'chart-gridline');\n  },\n  onMerge: function onMerge(selection) {\n    selection\n      .attr('opacity', 0)\n      .each(this.drawLine);\n  },\n  onMergeTransition: function onMergeTransition(selection) {\n    selection.attr('opacity', 1);\n  },\n  onExit: function onExit(selection) {\n    selection.remove();\n  },\n\n  skip_layout: true\n}, {\n  layer_type: 'chart',\n  z_index: 55\n});\n\nvar gridlines = createHelper('Gridlines');\n\nd3.chart().Gridlines = Gridlines;\nexport {\n  Gridlines as default,\n  gridlines\n};\n","import d3 from 'd3';\r\nimport {\r\n  contains,\r\n  defaults,\r\n  isBoolean,\r\n  isUndefined\r\n} from '../utils';\r\nimport {\r\n  property,\r\n  translate,\r\n  mixin,\r\n  createHelper\r\n} from '../helpers';\r\nimport {\r\n  XY,\r\n  Transition,\r\n  StandardLayer\r\n} from '../mixins';\r\nimport Component from '../Component';\r\nimport Gridlines from './Gridlines';\r\n\r\n/**\r\n  Axis component for XY data (wraps `d3.axis`).\r\n\r\n  Available d3.axis extensions:\r\n\r\n  - `ticks`\r\n  - `tickValues`\r\n  - `tickSize`\r\n  - `innerTickSize`\r\n  - `outerTickSize`\r\n  - `tickPadding`\r\n  - `tickFormat`\r\n\r\n  ### Extending\r\n\r\n  To extend the `Axis` component, the following methods are available:\r\n\r\n  - `onInsert`\r\n  - `onEnter`\r\n  - `onEnterTransition`\r\n  - `onUpdate`\r\n  - `onUpdateTransition`\r\n  - `onMerge`\r\n  - `onMergeTransition`\r\n  - `onExit`\r\n  - `onExitTransition`\r\n\r\n  @example\r\n  ```js\r\n  d3.select('#chart')\r\n    .chart('Compose', function(data) {\r\n      var scales = {\r\n        x: {data: data, key: 'x'},\r\n        y: {data: data, key: 'y'}\r\n      };\r\n\r\n      var charts = [];\r\n      var xAxis = d3c.axis({scale: scales.x});\r\n      var yAxis = d3c.axis({scale: scales.y});\r\n\r\n      return [\r\n        // Display y-axis to left of charts\r\n        [yAxis, d3c.layered(charts)],\r\n\r\n        // Display x-axis below charts\r\n        xAxis\r\n      ];\r\n    });\r\n  ```\r\n  @class Axis\r\n  @extends Component, XY, Transition, StandardLayer\r\n*/\r\nvar Mixed = mixin(Component, XY, Transition, StandardLayer);\r\nvar Axis = Mixed.extend({\r\n  initialize: function(options) {\r\n    Mixed.prototype.initialize.call(this, options);\r\n\r\n    // Create two axes (so that layout and transitions work)\r\n    // 1. Display and transitions\r\n    // 2. Layout (draw to get width, but separate so that transitions aren't affected)\r\n    this.axis = d3.svg.axis();\r\n    this._layout_axis = d3.svg.axis();\r\n\r\n    this.axis_base = this.base.append('g').attr('class', 'chart-axis');\r\n    this._layout_base = this.base.append('g')\r\n      .attr('class', 'chart-axis chart-layout')\r\n      .append('g')\r\n        .style('display', 'none');\r\n\r\n    // Use standard layer for extensibility\r\n    this.standardLayer('Axis', this.axis_base);\r\n\r\n    // Setup gridlines\r\n    this.attachGridlines();\r\n  },\r\n\r\n  /**\r\n    Scale to pass to d3.axis\r\n\r\n    - If `xScale`/`yScale` are given, `scale` is set automatically based on `position`.\r\n    - Can be `d3.scale` or, if `Object` is given, `helpers.createScale` is used\r\n\r\n    @example\r\n    ```js\r\n    // Set with d3.scale directly\r\n    axis.scale(d3.scale());\r\n\r\n    // or with Object passed helpers.createScale\r\n    axis.scale({data: data, key: 'x'});\r\n\r\n    // For x0/y0 position, both xScale and yScale needed\r\n    // (scale is automatically set by position)\r\n    axis.xScale({domain: [0, 100]});\r\n    axis.yScale({domain: [0, 10]});\r\n    axis.position('y0');\r\n\r\n    // -> axis.scale() -> axis.xScale by default\r\n    ```\r\n    @property scale\r\n    @type Object|d3.scale\r\n  */\r\n  scale: property({\r\n    set: function(value) {\r\n      if (this.orientation() == 'vertical') {\r\n        this.yScale(value);\r\n        value = this.yScale();\r\n      }\r\n      else {\r\n        this.xScale(value);\r\n        value = this.xScale();\r\n      }\r\n\r\n      return {\r\n        override: value\r\n      };\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Position axis relative to chart\r\n    (top, right, bottom, left)\r\n\r\n    Note: x0 and y0 are currently disabled for more testing\r\n\r\n    @property position\r\n    @type String\r\n    @default bottom\r\n  */\r\n  position: property({\r\n    default_value: 'bottom',\r\n    validate: function(value) {\r\n      return contains(['top', 'right', 'bottom', 'left'], value);\r\n    },\r\n    set: function() {\r\n      // Update scale -> xScale/yScale when position changes\r\n      if (this.scale())\r\n        this.scale(this.scale());\r\n    }\r\n  }),\r\n\r\n  /**\r\n    {x,y} translation of axis relative to chart\r\n    (set by default based on position)\r\n\r\n    @property translation\r\n    @type Object\r\n    @default (set based on position)\r\n  */\r\n  translation: property({\r\n    default_value: function() {\r\n      switch (this.position()) {\r\n        case 'top':\r\n          return {x: 0, y: 0};\r\n        case 'right':\r\n          return {x: this.width(), y: 0};\r\n        case 'bottom':\r\n          return {x: 0, y: this.height()};\r\n        case 'left':\r\n          return {x: 0, y: 0};\r\n        case 'x0':\r\n          return {x: this.x0(), y: 0};\r\n        case 'y0':\r\n          return {x: 0, y: this.y0()};\r\n      }\r\n    },\r\n    get: function(value) {\r\n      return translate(value);\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Axis orient for ticks\r\n    (set by default based on position)\r\n\r\n    @property orient\r\n    @type String\r\n    @default (set based on position)\r\n  */\r\n  orient: property({\r\n    default_value: function() {\r\n      var orient = this.position();\r\n\r\n      if (orient == 'x0')\r\n        orient = 'left';\r\n      else if (orient == 'y0')\r\n        orient = 'bottom';\r\n\r\n      return orient;\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Axis orientation (vertical or horizonal)\r\n\r\n    @property orientation\r\n    @type String\r\n    @default (set based on position)\r\n  */\r\n  orientation: property({\r\n    validate: function(value) {\r\n      return contains(['horizontal', 'vertical'], value);\r\n    },\r\n    default_value: function() {\r\n      return {\r\n        top: 'horizontal',\r\n        right: 'vertical',\r\n        bottom: 'horizontal',\r\n        left: 'vertical',\r\n        x0: 'vertical',\r\n        y0: 'horizontal'\r\n      }[this.position()];\r\n    },\r\n    set: function() {\r\n      // Update scale -> xScale/yScale when orientation changes\r\n      if (this.scale())\r\n        this.scale(this.scale());\r\n    }\r\n  }),\r\n\r\n  /**\r\n    Attach gridlines for axis\r\n    (`true` to show with default options, `{...}` to pass options to `Gridlines`)\r\n\r\n    @property gridlines\r\n    @type Boolean|Object\r\n    @default false\r\n  */\r\n  gridlines: property({\r\n    get: function(value) {\r\n      if (isBoolean(value))\r\n        value = {display: value};\r\n      else if (!value)\r\n        value = {display: false};\r\n\r\n      return value;\r\n    }\r\n  }),\r\n\r\n  // d3.axis extensions\r\n  ticks: property(),\r\n  tickValues: property(),\r\n  tickSize: property(),\r\n  innerTickSize: property(),\r\n  outerTickSize: property(),\r\n  tickPadding: property(),\r\n  tickFormat: property(),\r\n\r\n  onDataBind: function onDataBind(selection) {\r\n    // Setup axis (scale and properties)\r\n    this._setupAxis(this.axis);\r\n\r\n    // Force addition of just one axis with dummy data array\r\n    // (Axis will be drawn using underlying chart scales)\r\n    return selection.selectAll('g').data([0]);\r\n  },\r\n  onInsert: function onInsert(selection) {\r\n    return selection.append('g');\r\n  },\r\n  onEnter: function onEnter(selection) {\r\n    // Render axis\r\n    selection.call(this.axis);\r\n  },\r\n  onMerge: function onUpdate(selection) {\r\n    // Position axis\r\n    selection.attr('transform', this.translation());\r\n  },\r\n  onUpdateTransition: function onUpdateTransition(selection) {\r\n    // Render axis (with transition)\r\n    this.setupTransition(selection);\r\n\r\n    selection.call(this.axis);\r\n  },\r\n  onExit: function onExit(selection) {\r\n    selection.selectAll('g').remove();\r\n  },\r\n\r\n  getLayout: function() {\r\n    // Draw layout axis\r\n    this.setScales();\r\n    this._setupAxis(this._layout_axis);\r\n    this._layout_base.call(this._layout_axis);\r\n\r\n    // Calculate layout\r\n    // (make layout axis visible for width calculations in Firefox)\r\n    this._layout_base.style('display', 'block');\r\n\r\n    var label_overhang = this._getLabelOverhang();\r\n\r\n    this._layout_base.style('display', 'none');\r\n\r\n    return {\r\n      position: this.position(),\r\n      width: label_overhang.width,\r\n      height: label_overhang.height\r\n    };\r\n  },\r\n  setLayout: function() {\r\n    // Axis is positioned as chart layer, so don't set layout\r\n    return;\r\n  },\r\n\r\n  attachGridlines: function() {\r\n    var gridlines_options = gridlinesOptions(this);\r\n    var gridlines = this._gridlines = gridlines_options.display && createGridlines(this, gridlines_options);\r\n\r\n    this.on('draw', function() {\r\n      gridlines_options = gridlinesOptions(this);\r\n\r\n      if (gridlines)\r\n        gridlines.options(gridlines_options);\r\n      else if (gridlines_options.display)\r\n        gridlines = this._gridlines = createGridlines(this, gridlines_options);\r\n\r\n      if (gridlines && gridlines_options.display)\r\n        gridlines.draw();\r\n      else if (gridlines)\r\n        gridlines.draw([false]);\r\n    }.bind(this));\r\n\r\n    function gridlinesOptions(axis) {\r\n      return defaults({}, axis.gridlines(), {\r\n        parent: axis,\r\n        xScale: axis.xScale(),\r\n        yScale: axis.yScale(),\r\n        ticks: axis.ticks(),\r\n        tickValues: axis.tickValues(),\r\n        orientation: axis.orientation() == 'horizontal' ? 'vertical' : 'horizontal'\r\n      });\r\n    }\r\n\r\n    function createGridlines(axis, gridline_options) {\r\n      var base = axis.base.append('g').attr('class', 'chart-axis-gridlines');\r\n      return new Gridlines(base, gridline_options);\r\n    }\r\n  },\r\n\r\n  _setupAxis: function(axis) {\r\n    // Setup axis\r\n    if (this.orientation() == 'vertical')\r\n      axis.scale(this.yScale());\r\n    else\r\n      axis.scale(this.xScale());\r\n\r\n    var extensions = ['orient', 'ticks', 'tickValues', 'tickSize', 'innerTickSize', 'outerTickSize', 'tickPadding', 'tickFormat'];\r\n    var array_extensions = ['tickValues'];\r\n    extensions.forEach(function(key) {\r\n      var value = this[key] && this[key]();\r\n      if (!isUndefined(value)) {\r\n        // If value is array, treat as arguments array\r\n        // otherwise, pass in directly\r\n        if (Array.isArray(value) && !contains(array_extensions, key))\r\n          axis[key].apply(axis, value);\r\n        else\r\n          axis[key](value);\r\n      }\r\n    }, this);\r\n  },\r\n\r\n  _getLabelOverhang: function() {\r\n    // TODO Look into overhang relative to chartBase (for x0, y0)\r\n    var overhangs = {width: [0], height: [0]};\r\n    var orientation = this.orientation();\r\n\r\n    this._layout_base.selectAll('g').each(function() {\r\n      try {\r\n        // There are cases where getBBox may throw\r\n        // (e.g. not currently displayed in Firefox)\r\n        var bbox = this.getBBox();\r\n\r\n        if (orientation == 'horizontal')\r\n          overhangs.height.push(bbox.height);\r\n        else\r\n          overhangs.width.push(bbox.width);\r\n      }\r\n      catch (ex) {\r\n        // Ignore error\r\n      }\r\n    });\r\n\r\n    return {\r\n      width: d3.max(overhangs.width),\r\n      height: d3.max(overhangs.height)\r\n    };\r\n  }\r\n}, {\r\n  layer_type: 'chart',\r\n  z_index: 60\r\n});\r\n\r\nvar axis = createHelper('Axis');\r\n\r\nd3.chart().Axis = Axis;\r\nexport {\r\n  Axis as default,\r\n  axis\r\n};\r\n","import d3 from 'd3';\nimport {\n  compact,\n  contains,\n  find\n} from '../utils';\nimport {\n  alignText,\n  createHelper,\n  di,\n  getMargins,\n  isSeriesData,\n  mixin,\n  property,\n  stack,\n  translate\n} from '../helpers';\nimport { StandardLayer } from '../mixins';\nimport Component from '../Component';\nvar default_legend_margins = {top: 8, right: 8, bottom: 8, left: 8};\n\n/**\n  Legend component that can automatically pull chart and series information from d3.compose\n\n  Notes:\n\n  - To exclude a chart from the legend, use `exclude_from_legend = true` in chart prototype or options\n  - To exclude a series from the legend, use `exclude_from_legend = true` in series object\n  - To add swatch for custom chart, use `Legend.registerSwatch()`\n\n  ### Extending\n\n  To extend the `Legend` component, the following methods are available:\n\n  - `itemKey`\n  - `itemText`\n  - `swatchClass`\n  - `createSwatch`\n  - `onDataBind`\n  - `onInsert`\n  - `onEnter`\n  - `onEnterTransition`\n  - `onUpdate`\n  - `onUpdateTransition`\n  - `onMerge`\n  - `onMergeTransition`\n  - `onExit`\n  - `onExitTransition`\n\n  @example\n  ```js\n  d3.select('#chart')\n    .chart('Compose', function(data) {\n      var input = [{key: 'input', name: 'Input', values: data.input}];\n      var output = [\n        {key: 'output1', name: 'Output 1', values: data.output1},\n        {key: 'output2', name: 'Output 2', values: data.output2}\n      ];\n\n      var charts = [\n        d3c.lines('a', {data: input}), // ...\n        d3c.bars('b', {data: output}) // ...\n      ];\n      var legend = d3c.legend({charts: ['a', 'b']});\n\n      return [\n        [d3c.layered(charts), legend]\n      ];\n    });\n\n  // -> automatically creates legend from series data for 'a' and 'b'\n  //    (Lines Swatch) Input\n  //    (Bars Swatch) Output 1\n  //    (Bars Swatch) Output 2\n\n  // or, manually set data for legend\n  return [\n    d3c.legend({\n      data: [\n        {type: 'Lines', text: 'Input', class: 'series-index-0'},\n        {type: 'Bars', text: 'Output 1', class: 'series-index-0'},\n        {type: 'Bars', text: 'Output 2', class: 'series-index-1'},\n      ]\n    })\n  };\n  ```\n  @class Legend\n  @extends Component, StandardLayer\n*/\nvar Mixed = mixin(Component, StandardLayer);\nvar Legend = Mixed.extend({\n  initialize: function(options) {\n    Mixed.prototype.initialize.call(this, options);\n    this.legend_base = this.base.append('g').classed('chart-legend', true);\n    this.standardLayer('Legend', this.legend_base);\n  },\n\n  /**\n    Array of chart keys from container to display in legend\n\n    @example\n    ```js\n    d3.select('#chart')\n    .chart('Compose', function(data) {\n      var charts = [\n        {id: 'a'},\n        {id: 'b'},\n        {id: 'c'}\n      ];\n      var legend = d3c.legend({charts: ['a', 'c']});\n\n      return [\n        [d3c.layered(charts), legend]\n      ];\n    });\n    ```\n    @property charts\n    @type Array\n  */\n  charts: property(),\n\n  /**\n    Dimensions of \"swatch\" in px\n\n    @property swatchDimensions\n    @type Object\n    @default {width: 20, height: 20}\n  */\n  swatchDimensions: property({\n    default_value: {width: 20, height: 20}\n  }),\n\n  /**\n    Margins (in pixels) around legend\n\n    @property margins\n    @type Object\n    @default {top: 8, right: 8, bottom: 8, left: 8}\n  */\n  margins: property({\n    default_value: default_legend_margins,\n    set: function(values) {\n      return {\n        override: getMargins(values, default_legend_margins)\n      };\n    }\n  }),\n\n  /**\n    Direction to \"stack\" legend, \"vertical\" or \"horizontal\".\n    (Default is set based on position: top/bottom = \"horizontal\", left/right = \"vertical\")\n\n    @property stackDirection\n    @type String\n    @default (based on position)\n  */\n  stackDirection: property({\n    validate: function(value) {\n      return contains(['vertical', 'horizontal'], value);\n    },\n    default_value: function() {\n      var direction_by_position = {\n        top: 'horizontal',\n        right: 'vertical',\n        bottom: 'horizontal',\n        left: 'vertical'\n      };\n      return direction_by_position[this.position()];\n    }\n  }),\n\n  transform: function(data) {\n    if (this.charts()) {\n      // Pull legend data from charts\n      var charts = this.container.charts();\n      data = this.charts().reduce(function(combined_data, chart_id) {\n        var chart = find(charts, function(find_chart) { return find_chart.id == chart_id; });\n\n        // Check for exclude from legend option\n        if (!chart || chart.exclude_from_legend || chart.options().exclude_from_legend)\n          return combined_data;\n\n        var chart_data = this.container.demux(chart_id, this.container.data());\n        if (!isSeriesData(chart_data))\n          chart_data = [chart_data];\n\n        var legend_data = chart_data.reduce(function(memo, series, index) {\n          // Check for exclude from legend option on series\n          if (series && !series.exclude_from_legend) {\n            memo.push(this.getLegendData(chart, series, index));\n          }\n\n          return memo;\n        }.bind(this), []);\n\n        return combined_data.concat(legend_data);\n      }.bind(this), []);\n    }\n\n    return data;\n  },\n\n  // Key for legend item (default is key from data)\n  itemKey: di(function(chart, d) {\n    return d.key;\n  }),\n\n  // Text for legend item (default is text from data)\n  itemText: di(function(chart, d) {\n    return d.text;\n  }),\n\n  // Class to apply to swatch (default is class from data)\n  swatchClass: di(function(chart, d) {\n    return compact(['chart-legend-swatch', d['class']]).join(' ');\n  }),\n\n  // Create swatch (using registered swatches based on type from data)\n  createSwatch: di(function(chart, d, i) {\n    var selection = d3.select(this);\n\n    // Clear existing swatch\n    selection.selectAll('*').remove();\n    selection\n      .attr('class', chart.swatchClass);\n\n    var swatches = Legend.swatches;\n    if (!swatches)\n      return;\n\n    if (d && d.type && swatches[d.type])\n      swatches[d.type].call(selection, chart, d, i);\n    else if (swatches['default'])\n      swatches['default'].call(selection, chart, d, i);\n  }),\n\n  onDataBind: function onDataBind(selection, data) {\n    return selection.selectAll('.chart-legend-group')\n      .data(data, this.itemKey);\n  },\n  onInsert: function onInsert(selection) {\n    var groups = selection.append('g')\n      .attr('class', 'chart-legend-group')\n      .style('pointer-events', 'all')\n      .on('mouseenter', function(d, i) {\n        this.container.trigger('mouseenter:legend', this._itemDetails(d, i));\n      }.bind(this))\n      .on('mousemove', function(d, i) {\n        this.container.trigger('mousemove:legend', this._itemDetails(d, i));\n      }.bind(this))\n      .on('mouseleave', function(d, i) {\n        this.container.trigger('mouseleave:legend', this._itemDetails(d, i));\n      }.bind(this));\n\n    groups.append('g')\n      .attr('width', this.swatchDimensions().width)\n      .attr('height', this.swatchDimensions().height)\n      .attr('class', 'chart-legend-swatch');\n    groups.append('text')\n      .attr('class', 'chart-legend-label');\n\n    groups.append('rect')\n      .attr('class', 'chart-legend-hover')\n      .style('visibility', 'hidden');\n\n    return groups;\n  },\n  onMerge: function onMerge(selection) {\n    var swatch = this.swatchDimensions();\n\n    selection.select('.chart-legend-swatch').each(this.createSwatch);\n\n    selection.select('.chart-legend-label')\n      .text(this.itemText)\n      .each(function() {\n        // Vertically center text\n        var offset = alignText(this, swatch.height);\n        d3.select(this)\n          .attr('transform', translate(swatch.width + 5, offset));\n      });\n\n    // Position groups after positioning everything inside\n    selection.call(stack({\n      direction: this.stackDirection(),\n      origin: 'top',\n      padding: 5,\n      min_height: swatch.height,\n      min_width: swatch.width\n    }));\n\n    // Position hover listeners\n    var sizes = [];\n    selection.each(function() {\n      sizes.push(this.getBBox());\n    });\n    selection.select('.chart-legend-hover').each(function() {\n      var size = sizes.shift();\n      d3.select(this)\n        .attr('width', size.width)\n        .attr('height', size.height);\n    });\n  },\n  onExit: function onExit(selection) {\n    selection.remove();\n  },\n\n  getLegendData: function getLegendData(chart, series, series_index) {\n    return {\n      text: series.name || 'Series ' + (series_index + 1),\n      key: chart.id + '.' + (series.key || series_index),\n      type: chart.type,\n      'class': compact([\n        'chart-series',\n        'chart-index-' + series_index,\n        chart.options()['class'],\n        series['class']\n      ]).join(' ')\n    };\n  },\n\n  _itemDetails: function _itemDetails(d, i) {\n    return {\n      legend: this,\n      d: d,\n      i: i\n    };\n  }\n}, {\n  z_index: 200,\n  swatches: {\n    'default': function(chart) {\n      var swatch_dimensions = chart.swatchDimensions();\n\n      this.append('circle')\n        .attr('cx', swatch_dimensions.width / 2)\n        .attr('cy', swatch_dimensions.height / 2)\n        .attr('r', d3.min([swatch_dimensions.width, swatch_dimensions.height]) / 2)\n        .attr('class', 'chart-swatch');\n    }\n  },\n\n  /**\n    Register a swatch create function for the given chart type\n\n    @example\n    ```js\n    d3.chart('Legend').registerSwatch(['Lines'], function(chart, d, i) {\n      var dimensions = chart.swatchDimensions();\n\n      return this.append('line')\n        .attr('x1', 0).attr('y1', dimensions.height / 2)\n        .attr('x2', dimensions.width).attr('y2', dimensions.height / 2)\n        .attr('class', 'chart-line');\n    });\n    ```\n    @method registerSwatch\n    @static\n    @param {Array|String} types Chart type(s)\n    @param {Function} create \"di\" function that inserts swatch\n  */\n  registerSwatch: function(types, create) {\n    if (!Array.isArray(types))\n      types = [types];\n\n    types.forEach(function(type) {\n      this.swatches[type] = create;\n    }, this);\n  }\n});\n\n// Create line swatch for Line and LineValues\nLegend.registerSwatch(['Lines'], function(chart) {\n  var swatch_dimensions = chart.swatchDimensions();\n\n  return this.append('line')\n    .attr('x1', 0).attr('y1', swatch_dimensions.height / 2)\n    .attr('x2', swatch_dimensions.width).attr('y2', swatch_dimensions.height / 2)\n    .attr('class', 'chart-line');\n});\n\n// Create bars swatch for Bars and StackedBars\nLegend.registerSwatch(['Bars', 'StackedBars', 'HorizontalBars', 'HorizontalStackedBars'], function(chart) {\n  var swatch_dimensions = chart.swatchDimensions();\n\n  return this.append('rect')\n    .attr('x', 0).attr('y', 0)\n    .attr('width', swatch_dimensions.width).attr('height', swatch_dimensions.height)\n    .attr('class', 'chart-bar');\n});\n\nvar legend = createHelper('Legend');\n\nd3.chart().Legend = Legend;\nexport {\n  Legend as default,\n  legend\n};\n","import {\n  property,\n  dimensions,\n  translate,\n  createHelper\n} from '../helpers';\nimport Legend from './Legend';\n\n/**\n  Legend positioned within chart bounds.\n\n  @class InsetLegend\n  @extends Legend\n*/\nvar InsetLegend = Legend.extend({\n  initialize: function(options) {\n    Legend.prototype.initialize.call(this, options);\n    this.on('draw', function() {\n      // Position legend on draw\n      // (Need actual width/height for relative_to)\n      var translation = this.translation();\n      this.legend_base.attr('transform', translate(translation.x, translation.y));\n    }.bind(this));\n  },\n\n  /**\n    Position legend within chart layer `{x, y, relative_to}`\n    Use `relative_to` to use x,y values relative to x-y origin\n    (e.g. `\"left-top\"` is default)\n\n    @example\n    ```js\n    d3.select('#chart')\n      .chart('Compose', function(data) {\n        return {\n          components: {\n            legend: {\n              type: 'InsetLegend',\n              // Position legend 10px away from right-bottom corner of chart\n              translation: {x: 10, y: 10, relative_to: 'right-bottom'}\n            }\n          }\n        }\n      });\n    ```\n    @property translation\n    @type Object {x,y}\n    @default {x: 10, y: 10, relative_to: 'left-top'}\n  */\n  translation: property({\n    default_value: {x: 10, y: 0, relative_to: 'left-top'},\n    get: function(value) {\n      var x = value.x || 0;\n      var y = value.y || 0;\n      var relative_to_x = (value.relative_to && value.relative_to.split('-')[0]) || 'left';\n      var relative_to_y = (value.relative_to && value.relative_to.split('-')[1]) || 'top';\n\n      if (relative_to_x === 'right') {\n        x = this.width() - dimensions(this.legend_base).width - x;\n      }\n      if (relative_to_y === 'bottom') {\n        y = this.height() - dimensions(this.legend_base).height - y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }),\n\n  skip_layout: true\n}, {\n  layer_type: 'chart'\n});\n\nvar insetLegend = createHelper('InsetLegend');\n\nd3.chart().InsetLegend = InsetLegend;\nexport {\n  InsetLegend as default,\n  insetLegend\n};\n","import d3 from 'd3';\nimport utils from './src/utils';\nimport helpers from './src/helpers';\nimport Base from './src/Base';\nimport Chart from './src/Chart';\nimport Component from './src/Component';\nimport Overlay from './src/Overlay';\nimport Compose, { layered } from './src/Compose';\n\nimport mixins from './src/mixins';\n\nimport Lines, { lines } from './src/charts/Lines';\nimport Bars, { bars } from './src/charts/Bars';\nimport StackedBars, { stackedBars } from './src/charts/StackedBars';\nimport HorizontalBars, { horizontalBars } from './src/charts/HorizontalBars';\nimport HorizontalStackedBars, { horizontalStackedBars } from './src/charts/HorizontalStackedBars';\nimport Labels, { labels } from './src/charts/Labels';\nimport HoverLabels, { hoverLabels } from './src/charts/HoverLabels';\n\nimport Text, { text } from './src/components/Text';\nimport Title, { title } from './src/components/Title';\nimport Axis, { axis } from './src/components/Axis';\nimport AxisTitle, { axisTitle } from './src/components/AxisTitle';\nimport Legend, { legend } from './src/components/Legend';\nimport InsetLegend, { insetLegend } from './src/components/InsetLegend';\nimport Gridlines, { gridlines } from './src/components/Gridlines';\n\nvar d3c = d3.compose = {\n  VERSION: '{version}',\n  utils: utils,\n  helpers: helpers,\n  Base: Base,\n  Chart: Chart,\n  Component: Component,\n  Overlay: Overlay,\n  Compose: Compose,\n  layered: layered,\n\n  mixins: mixins,\n\n  Lines: Lines,\n  lines: lines,\n  Bars: Bars,\n  bars: bars,\n  StackedBars: StackedBars,\n  stackedBars: stackedBars,\n  HorizontalBars: HorizontalBars,\n  horizontalBars: horizontalBars,\n  HorizontalStackedBars: HorizontalStackedBars,\n  horizontalStackedBars: horizontalStackedBars,\n  Labels: Labels,\n  labels: labels,\n  HoverLabels: HoverLabels,\n  hoverLabels: hoverLabels,\n\n  Text: Text,\n  text: text,\n  Title: Title,\n  title: title,\n  Axis: Axis,\n  axis: axis,\n  AxisTitle: AxisTitle,\n  axisTitle: axisTitle,\n  Legend: Legend,\n  legend: legend,\n  InsetLegend: InsetLegend,\n  insetLegend: insetLegend,\n  Gridlines: Gridlines,\n  gridlines: gridlines\n};\n\nexport default d3c;\n"],"sourceRoot":"/source/"}