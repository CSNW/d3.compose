{"version":3,"sources":["d3.compose.js"],"names":["global","factory","exports","module","require","define","amd","d3c","d3","d3_chart","this","_extend","target","extensions","undefined_only","i","length","key","contains","arr","item","indexOf","compact","filter","difference","a","b","value","defaults","slice","call","arguments","extend","flatten","reduce","memo","concat","find","fn","context","first","n","Array","prototype","isBoolean","obj","isObject","type","isNumber","toString","isString","isUndefined","objectEach","keys","Object","objectFind","pluck","objs","map","uniq","result","push","inherits","Child","Parent","create","constructor","enumerable","writeable","configurable","setPrototypeOf","__proto__","valueOrDefault","default_value","property","options","console","warn","id","unique_index","get","properties","isFunction","set","validate","Error","JSON","stringify","previous","response","override","after","__properties","is_property","set_from_options","mixin","mixins","initializes","transforms","mixed","forEach","mix","initialize","args","apply","init","transform","data","trans","bind","stack","padding","direction","origin","min_height","min_width","elements","attr","d","next_position","element_dimensions","getBBox","spacing_width","max","width","spacing_height","height","x","y","translate","createScale","scale","time","linear","domain","setDomain","centered","adjacent","addCentered","addPadding","getValue","isSeriesData","values","series","min_value","min","original","series_count","series_index","range_band","rangeBand","isFinite","original_range","range","rangeBands","dimensions","selection","client","clientDimensions","attrDimensions","isSVG","bbox","bboxDimensions","element","node","clientWidth","clientHeight","window","getComputedStyle","styles","parseFloat","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","isNaN","ex","nodeName","rotate","degrees","center","rotation","alignText","line_height","offset","element_style","css_font_size","css_line_height","css_adjustment","height_adjustment","first_item","isArray","getMax","series_data","extent","series_max","Infinity","getMin","series_min","style","keyValues","join","getMargins","margins","default_margins","top","right","bottom","left","di","callback","wrapped","j","undefined","_is_di","bindDi","diFn","chart","bindAllDi","getParentData","_parent_data","parent","parentNode","select","createHelper","checkProp","definition","createPrepare","steps","base","props","step","createDraw","prepared","prepareSteps","selected","exit","update","enter","merge","remove","curry","createTransition","duration","delay","ease","getLayer","layer","empty","append","Base","_layers","_attached","_events","extractLayout","prepareComponent","component","row_index","col_index","getId","setPosition","position","layered_index","extractData","_charts","_components","items","layout","charts","components","found","row","row_components","row_layout","_layered","chart_ids","chart_index","unshift","calculateLayout","demux","overall_layout","skip_layout","getLayout","applyLayout","chart_position","setLayout","part","index","parts","previousPart","layered","findById","Int8Array","utils","types","string","number","array","object","any","helpers","d3Chart","name","draw","trigger","attachment","unlayer","attach","on","once","off","isProperty","unset","proto_props","static_props","hasOwnProperty","Component","prepareLayout","actual_dimensions","getDefault","z_index","layer_type","Overlay","hidden","-webkit-transform","-ms-transform","display","getAbsolutePosition","container","chartPosition","show","hide","container_position","responsive","container_dimensions","chart_width","chart_height","width_ratio","height_ratio","default_compose_margins","Compose","tagName","classed","attachHoverListeners","rawData","_width","_height","viewBox","preserveAspectRatio","containerStyle","aspect_ratio","padding-top","baseStyle","chart_options","_attachItems","component_options","config","_prepareConfig","_setDimensions","redraw","createChartLayer","createComponentLayer","createOverlayLayer","_positionChartLayers","_extractLayout","positionLayers","inside","mouse","document","documentElement","bounds","translateToXY","move","leave","coordinates","chart_x","chart_y","getBounds","scroll_y","scrollY","scrollTop","getBoundingClientRect","was_inside","is_inside","detach","_positionComponents","_positionByZIndex","remove_ids","remove_id","changed_position","Item","layer_options","createLayer","overlay","selectAll","setZIndex","zIndex","parseInt","sortZIndex","layers","sort","appendChild","Chart","compose","VERSION"],"mappings":"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","file":"d3.compose.min.js","sourcesContent":["/*!\n * d3.compose - Compose complex, data-driven visualizations from reusable charts and components with d3\n * v0.15.11 - https://github.com/CSNW/d3.compose - license: MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3'), require('d3.chart')) :\n  typeof define === 'function' && define.amd ? define(['d3', 'd3.chart'], factory) :\n  global.d3c = factory(global.d3,global.d3_chart);\n}(this, function (d3,d3_chart) { 'use strict';\n\n  d3 = 'default' in d3 ? d3['default'] : d3;\n\n  // Many utils inlined from Underscore.js\n  // (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\n  var slice = Array.prototype.slice;\n  var toString = Object.prototype.toString;\n\n  function _extend(target, extensions, undefined_only) {\n    for (var i = 0, length = extensions.length; i < length; i++) {\n      for (var key in extensions[i]) {\n        if (!undefined_only || target[key] === void 0)\n          target[key] = extensions[i][key];\n      }\n    }\n\n    return target;\n  }\n\n  function contains(arr, item) {\n    return arr.indexOf(item) >= 0;\n  }\n\n  function compact(arr) {\n    return arr.filter(function(item) {\n      return item;\n    });\n  }\n\n  function difference(a, b) {\n    return a.filter(function(value) {\n      return b.indexOf(value) < 0;\n    });\n  }\n\n  function defaults(target) {\n    return _extend(target, slice.call(arguments, 1), true);\n  }\n\n  function extend(target) {\n    return _extend(target, slice.call(arguments, 1));\n  }\n\n  function flatten(arr) {\n    // Assumes all items in arr are arrays and only flattens one level\n    return arr.reduce(function(memo, item) {\n      return memo.concat(item);\n    }, []);\n  }\n\n  function find(arr, fn, context) {\n    if (!arr) return;\n    for (var i = 0, length = arr.length; i < length; i++) {\n      if (fn.call(context, arr[i], i, arr))\n        return arr[i];\n    }\n  }\n\n  function first(arr, n) {\n    if (arr == null) return void 0;\n    if (n == null) return arr[0];\n    return Array.prototype.slice.call(arr, 0, n);\n  }\n\n  function isBoolean(obj) {\n    return obj === true || obj === false;\n  }\n  function isObject(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n  function isNumber(obj) {\n    return toString.call(obj) === '[object Number]';\n  }\n  function isString(obj) {\n    return toString.call(obj) === '[object String]';\n  }\n  function isUndefined(obj) {\n    return obj === void 0;\n  }\n\n  var isFunction = function(obj) {\n    return toString.call(obj) === '[object Function]';\n  };\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  function objectEach(obj, fn, context) {\n    if (!obj) return;\n    var keys = Object.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      fn.call(context, obj[keys[i]], keys[i], obj);\n    }\n  }\n\n  function objectFind(obj, fn, context) {\n    if (!obj) return;\n    var keys = Object.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      if (fn.call(context, obj[keys[i]], keys[i], obj))\n        return obj[keys[i]];\n    }\n  }\n\n  function pluck(objs, key) {\n    if (!objs) return [];\n    return objs.map(function(obj) {\n      return obj[key];\n    });\n  }\n\n  function uniq(arr) {\n    var result = [];\n    for (var i = 0, length = arr.length; i < length; i++) {\n      if (result.indexOf(arr[i]) < 0)\n        result.push(arr[i]);\n    }\n    return result;\n  }\n\n  function inherits(Child, Parent) {\n    Child.prototype = Object.create(Parent.prototype, {\n      constructor: {\n        value: Child,\n        enumerable: false,\n        writeable: true,\n        configurable: true\n      }\n    });\n\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(Child, Parent);\n    }\n    else {\n      Child.__proto__ = Parent; //eslint-disable-line no-proto\n\n      // __proto__ isn't supported in IE,\n      // use one-time copy of static properties to approximate\n      defaults(Child, Parent);\n    }\n  }\n\n  // If value isn't `undefined`, return `value`, otherwise use `default_value`\n  //\n  // @method valueOrDefault\n  // @param {Any} [value]\n  // @param {Any} default_value\n  // @return {Any}\n  function valueOrDefault(value, default_value) {\n    return !isUndefined(value) ? value : default_value;\n  }\n\n  var utils = {\n    slice: slice,\n    toString: toString,\n    contains: contains,\n    compact: compact,\n    difference: difference,\n    defaults: defaults,\n    extend: extend,\n    flatten: flatten,\n    find: find,\n    first: first,\n    isBoolean: isBoolean,\n    isFunction: isFunction,\n    isObject: isObject,\n    isNumber: isNumber,\n    isString: isString,\n    isUndefined: isUndefined,\n    objectEach: objectEach,\n    objectFind: objectFind,\n    pluck: pluck,\n    uniq: uniq,\n    inherits: inherits,\n    valueOrDefault: valueOrDefault\n  };\n\n  var unique_index = 0;\n\n  /**\n    Helper for creating properties for charts/components\n\n    @example\n    ```javascript\n    var Custom = d3.chart('Chart').extend('Custom', {\n      // Create property that's stored internally as 'simple'\n      simple: property()\n    });\n    var custom; // = new Custom(...);\n\n    // set\n    custom.simple('Howdy');\n\n    // get\n    console.log(custom.simple()); // -> 'Howdy'\n\n    // Advanced\n    // --------\n    // Default values:\n    Custom.prototype.message = property({\n      default_value: 'Howdy!'\n    });\n\n    console.log(custom.message()); // -> 'Howdy!'\n    custom.message('Goodbye');\n    console.log(custom.message()); // -> 'Goodbye'\n\n    // Set to undefined to reset to default value\n    custom.message(undefined);\n    console.log(custom.message()); // -> 'Howdy!'\n\n    // Computed default value:\n    Custom.property.computed = property({\n      default_value: function() {\n        // \"this\" = Custom instance\n        return this.message();\n      }\n    });\n\n    // Function default value:\n    // For function default_values, wrap in function to differentiate from computed\n    Custom.property.fn = property({\n      default_value: function() {\n        return function defaultFn() {};\n      }\n      // The following would be incorrectly evaluated\n      // default_value: function defaultFn() {}\n    })\n\n    // Custom getter:\n    Custom.prototype.exclaimed = property({\n      get: function(value) {\n        // Value is the underlying set value\n        return value + '!';\n      }\n    });\n\n    custom.exclaimed('Howdy');\n    console.log(custom.exclaimed()); // -> 'Howdy!'\n\n    // Custom setter:\n    Custom.prototype.feeling = property({\n      set: function(value, previous) {\n        if (value == 'Hate') {\n          // To override value, return Object with override specified\n          return {\n            override: 'Love',\n\n            // To do something after override, use after callback\n            after: function() {\n              console.log('After: ' + this.feeling()); // -> 'After: Love'\n            }\n          };\n        }\n      }\n\n      custom.feeling('Hate'); // -> 'After: Love'\n      console.log(custom.feeling()); // -> 'Love'\n    });\n    ```\n    @method property\n    @for helpers\n    @param {Object} [options]\n    @param {Any} [options.default_value] default value for property (when set value is `undefined`). If default value is a function, wrap in another function as default_value is evaluated by default.\n    @param {Function} [options.get] `function(value) {return ...}` getter, where `value` is the stored value and return desired value\n    @param {Function} [options.set] `function(value, previous) {return {override, after}}`. Return `override` to override stored value and `after()` to run after set\n    @param {Object} [options.context=this] context to evaluate get/set/after functions\n    @return {Function} `()`: get, `(value)`: set\n  */\n  function property(options) {\n    // DEPRECATED: name as first argument\n    if (arguments.length == 2) {\n      if (typeof console != 'undefined' && console.warn)\n        console.warn('DEPRECATED - name argument for property is no longer supported will be removed in the next version of d3.compose');\n      options = arguments[1];\n    }\n\n    options = options || {};\n    var id = 'property_' + unique_index++;\n\n    var property = function(value) {//eslint-disable-line no-shadow\n      var properties = this.__properties = this.__properties || {};\n      var context = valueOrDefault(property.context, this);\n\n      if (arguments.length)\n        return set.call(this);\n      else\n        return get.call(this);\n\n      function get() {\n        value = properties[id];\n\n        if (isUndefined(value)) {\n          // Use default value and unwrap if it's a function\n          value = property.default_value;\n          if (isFunction(value))\n            value = value.call(context);\n        }\n\n        return isFunction(options.get) ? options.get.call(context, value) : value;\n      }\n\n      function set() {\n        // Validate\n        if (isFunction(options.validate) && !isUndefined(value) && !options.validate.call(context, value))\n          throw new Error('Invalid value for property: ' + JSON.stringify(value));\n\n        var previous = properties[id];\n        properties[id] = value;\n\n        if (isFunction(options.set) && !isUndefined(value)) {\n          var response = options.set.call(context, value, previous);\n\n          if (response && 'override' in response)\n            properties[id] = response.override;\n          if (response && isFunction(response.after))\n            response.after.call(context, properties[id]);\n        }\n\n        return this;\n      }\n    };\n\n    // For checking if function is a property\n    property.is_property = true;\n    property.id = id;\n    property.set_from_options = valueOrDefault(options.set_from_options, true);\n    property.default_value = options.default_value;\n    property.context = options.context;\n    property.options = options;\n\n    return property;\n  }\n\n  /**\n    Combine mixins with Parent super class for extension\n\n    @example\n    ```js\n    var a = {transform: function() {}, a: 1};\n    var b = {initialize: function() {}, b: 2};\n    var c = {c: 3};\n\n    var Custom = mixin(Chart, a, b, c).extend({\n      initialize: function(options) {\n        this._super.initialize.call(this, options);\n        // d\n      },\n      transform: function(data) {\n        data = this._super.transform.call(this, data);\n        // d\n      }\n    });\n\n    // initialize: Chart, b, d\n    // transform: Chart, a, d\n    ```\n    @method mixin\n    @for helpers\n    @param {Function} Parent\n    @param {...Object} ...mixins\n    @return {Function}\n  */\n  function mixin(Parent/*, ...mixins*/) {\n    var mixins = slice.call(arguments, 1);\n    var initializes = [];\n    var transforms = [];\n    var mixed = {};\n\n    mixins.forEach(function(mix) {\n      objectEach(mix, function(value, key) {\n        if (key == 'initialize')\n          initializes.push(value);\n        else if (key == 'transform')\n          transforms.push(value);\n        else\n          mixed[key] = value;\n      });\n    });\n\n    if (initializes.length) {\n      mixed.initialize = function initialize() {\n        var args = slice.call(arguments);\n        Parent.prototype.initialize.apply(this, args);\n        initializes.forEach(function(init) {\n          init.apply(this, args);\n        }, this);\n      };\n    }\n\n    if (transforms.length) {\n      mixed.transform = function transform(data) {\n        data = Parent.prototype.transform.call(this, data);\n        return transforms.reduce(function(memo, trans) {\n          return trans.call(this, memo);\n        }.bind(this), data);\n      };\n    }\n\n    return Parent.extend(mixed);\n  }\n\n  /**\r\n    Stack given array of elements vertically or horizontally\r\n\r\n    @example\r\n    ```js\r\n    // Stack all text elements vertically, from the top, with 0px padding\r\n    d3.selectAll('text').call(helpers.stack())\r\n\r\n    // Stack all text elements horizontally, from the right, with 5px padding\r\n    d3.selectAll('text').call(helpers.stack({\r\n      direction: 'horizontal',\r\n      origin: 'right',\r\n      padding: 5\r\n    }));\r\n    ```\r\n    @method stack\r\n    @for helpers\r\n    @param {Object} [options]\r\n    @param {String} [options.direction=vertical] `\"vertical\"` or `\"horizontal\"`\r\n    @param {String} [options.origin] `\"top\"`, `\"right\"`, `\"bottom\"`, or `\"left\"` (by default, `\"top\"` for `\"vertical\"` and `\"left\"` for `\"horizontal\"`)\r\n    @param {Number} [options.padding=0] padding (in px) between elements\r\n    @param {Number} [options.min_height=0] minimum spacing height (for vertical stacking)\r\n    @param {Number} [options.min_width=0]  minimum spacing width (for horizontal stacking)\r\n    @return {Function}\r\n  */\r\n  function stack(options) {\r\n    options = extend({\r\n      direction: 'vertical',\r\n      origin: 'top',\r\n      padding: 0,\r\n      min_height: 0,\r\n      min_width: 0\r\n    }, options);\r\n\r\n    // Ensure valid origin based on direction\r\n    if (options.direction == 'horizontal' && !(options.origin == 'left' || options.origin == 'right'))\r\n      options.origin = 'left';\r\n    else if (options.direction == 'vertical' && !(options.origin == 'top' || options.origin == 'bottom'))\r\n      options.origin = 'top';\r\n\r\n    function padding(i) {\r\n      return i > 0 && options.padding ? options.padding : 0;\r\n    }\r\n\r\n    return function(elements) {\r\n      if (elements && elements.attr) {\r\n        var previous = 0;\r\n\r\n        elements.attr('transform', function(d, i) {\r\n          var element_dimensions = this.getBBox();\r\n          var spacing_width = d3.max([element_dimensions.width, options.min_width]);\r\n          var spacing_height = d3.max([element_dimensions.height, options.min_height]);\r\n          var x = 0;\r\n          var y = 0;\r\n          var next_position;\r\n\r\n          if (options.direction == 'horizontal') {\r\n            next_position = previous + spacing_width + padding(i);\r\n\r\n            if (options.origin == 'left')\r\n              x = previous + padding(i);\r\n            else\r\n              x = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n          else {\r\n            next_position = previous + spacing_height + padding(i);\r\n\r\n            if (options.origin == 'top')\r\n              y = previous + padding(i);\r\n            else\r\n              y = next_position;\r\n\r\n            previous = next_position;\r\n          }\r\n\r\n          return translate(x, y);\r\n        });\r\n      }\r\n    };\r\n  }\n\n  /**\n    Create scale from options\n\n    @example\n    ```javascript\n    // Simple type, range, and domain\n    var scale = createScale({\n      type: 'linear',\n      domain: [0, 100],\n      range: [0, 500]\n    });\n\n    // Calculate domain for data\n    var scale = createScale({\n      type: 'log',\n      data: [{y: 1}, {y: 100}, {y: 2000}, {y: 5000}],\n      key: 'y'\n    });\n\n    // Scale is passed through\n    var original = d3.scale.linear();\n    var scale = createScale(original);\n    scale === original;\n\n    // Set other properties by passing in \"arguments\" array\n    var scale = createScale({\n      type: 'ordinal',\n      domain: ['a', 'b', 'c', 'd', 'e'],\n      rangeRoundBands: [[0, 100], 0.1, 0.05] // -> rangeRoundBands([0, 100], 0.1, 0.05)\n    });\n\n    // Use ordinal + adjacent for bar charts\n    var scale = createScale({\n      type: 'ordinal',\n      adjacent: true,\n      domain: ['a', 'b', 'c'],\n      series: 2 // Series count is required for adjacent if data isn't given\n    })\n    ```\n    @method createScale\n    @for helpers\n    @param {Object|Function} options (passing in `Function` returns original function with no changes)\n    @param {String} [options.type='linear'] Any available `d3.scale` (`\"linear\"`, `\"ordinal\"`, `\"log\"`, etc.) or `\"time\"`\n    @param {Array} [options.domain] Domain for scale\n    @param {Array} [options.range] Range for scale\n    @param {Any} [options.data] Used to dynamically set domain (with given value or key)\n    @param {Function} [options.value] \"di\"-function for getting value for data\n    @param {String} [options.key] Data key to extract value\n    @param {Boolean} [options.centered] For \"ordinal\" scales, use centered x-values\n    @param {Boolean} [options.adjacent] For \"ordinal\" + centered, set x-values for different series next to each other\n\n    - Requires series-index as second argument to scale, otherwise centered x-value is used\n    - Requires \"data\" or \"series\" options to determine number of series\n    @param {Number} [options.series] Used with \"adjacent\" if no \"data\" is given to set series count\n    @param {Number} [options.padding=0.1] For \"ordinal\" scales, set padding between different x-values\n    @param {Array...} [options....] Set any other scale properties with array of arguments to pass to property\n    @return {d3.Scale}\n  */\n  function createScale(options) {\n    options = options || {};\n\n    // If function, scale was passed in as options\n    if (isFunction(options))\n      return options;\n\n    // Create scale (using d3.time.scale() if type is 'time')\n    var scale;\n    if (options.type == 'time')\n      scale = d3.time.scale();\n    else if (d3.scale[options.type])\n      scale = d3.scale[options.type]();\n    else\n      scale = d3.scale.linear();\n\n    objectEach(options, function(value, key) {\n      if (scale[key]) {\n        // If option is standard property (domain or range), pass in directly\n        // otherwise, pass in as arguments\n        // (don't pass through internal options)\n        if (key == 'range' || key == 'domain')\n          scale[key](value);\n        else if (!contains(['type', 'data', 'value', 'key', 'centered', 'adjacent', 'series', 'padding'], key))\n          scale[key].apply(scale, value);\n      }\n    });\n\n    if (!options.domain && options.data && (options.key || options.value))\n      scale = setDomain(scale, options);\n\n    // Add centered and adjacent extensions to ordinal\n    // (centered by default for ordinal)\n    var centered = options.centered || (options.type == 'ordinal' && options.centered == null);\n    if (options.type == 'ordinal' && (centered || options.adjacent))\n      scale = addCentered(scale, options);\n\n    // Add padding extension to ordinal\n    if (options.type == 'ordinal' && (options.padding != null || centered || options.adjacent))\n      scale = addPadding(scale, options);\n\n    return scale;\n  }\n\n  function setDomain(scale, options) {\n    // Use value \"di\" or create for key\n    var getValue = options.value || function(d) {\n      return d[options.key];\n    };\n\n    // Enforce series data\n    var data = options.data;\n    if (!isSeriesData(data))\n      data = [{values: data}];\n\n    var domain;\n    if (options.type == 'ordinal') {\n      // Domain for ordinal is array of unique values\n      domain = uniq(flatten(data.map(function(series) {\n        if (series && series.values)\n          return series.values.map(getValue);\n      })));\n    }\n    else {\n      var min_value = min(data, getValue);\n\n      domain = [\n        min_value < 0 ? min_value : 0,\n        max(data, getValue)\n      ];\n    }\n\n    scale.domain(domain);\n    return scale;\n  }\n\n  function addCentered(original, options) {\n    // Get series count for adjacent\n    var series_count = options.series || (!isSeriesData(options.data) ? 1 : options.data.length);\n\n    // TODO Look into removing closure\n    var scale = (function(original, options, series_count) {//eslint-disable-line no-shadow\n      var context = function(value, series_index) {\n        var width = context.width();\n\n        if (!options.adjacent)\n          series_index = 0;\n\n        return original(value) + (0.5 * width) + (width * (series_index || 0));\n      };\n      extend(context, original, {\n        width: function() {\n          var range_band = context.rangeBand && context.rangeBand();\n          var width = isFinite(range_band) ? range_band : 0;\n\n          if (options.adjacent)\n            width = width / series_count;\n\n          return width;\n        }\n      });\n\n      // TODO test copy() behavior\n\n      return context;\n    })(original, options, series_count);\n\n    return scale;\n  }\n\n  function addPadding(scale, options) {\n    var padding = options.padding != null ? options.padding : 0.1;\n\n    var original_range = scale.range;\n    scale.range = function(range) {\n      if (!arguments.length) return original_range();\n\n      scale.rangeBands(\n        range,\n        padding,\n        padding / 2\n      );\n    };\n\n    if (options.range)\n      scale.range(options.range);\n\n    // TODO test copy() behavior\n    return scale;\n  }\n\n  /**\r\n    Helper for robustly determining width/height of given selector.\r\n    Checks dimensions from css, attributes, and bounding box.\r\n\r\n    @method dimensions\r\n    @for helpers\r\n    @param {d3.Selection} selection\r\n    @return {Object} `{width, height}`\r\n  */\r\n  function dimensions(selection) {\r\n    // 1. Get width/height set via css (only valid for svg and some other elements)\r\n    var client = clientDimensions(selection);\r\n\r\n    if (client.width && client.height)\r\n      return client;\r\n\r\n    // 2. Get width/height set via attribute\r\n    var attr = attrDimensions(selection);\r\n\r\n    if (isSVG(selection)) {\r\n      return {\r\n        width: client.width != null ? client.width : attr.width || 0,\r\n        height: client.height != null ? client.height : attr.height || 0\r\n      };\r\n    }\r\n    else {\r\n      var bbox = bboxDimensions(selection);\r\n\r\n      // Size set by css -> client (only valid for svg and some other elements)\r\n      // Size set by svg -> attr override or bounding_box\r\n      // -> Take maximum\r\n      return {\r\n        width: d3.max([client.width, attr.width || bbox.width]) || 0,\r\n        height: d3.max([client.height, attr.height || bbox.height]) || 0\r\n      };\r\n    }\r\n  }\r\n\r\n  function clientDimensions(selection) {\r\n    var element = selection.node();\r\n    var width = element && element.clientWidth;\r\n    var height = element && element.clientHeight;\r\n\r\n    // Issue: Firefox does not correctly calculate clientWidth/clientHeight for svg\r\n    //        calculate from css\r\n    //        http://stackoverflow.com/questions/13122790/how-to-get-svg-element-dimensions-in-firefox\r\n    //        Note: This makes assumptions about the box model in use and that width/height are not percent values\r\n    if (isSVG(selection) && (!element.clientWidth || !element.clientHeight) && typeof window !== 'undefined' && window.getComputedStyle) {\r\n      var styles = window.getComputedStyle(element);\r\n      height = parseFloat(styles.height) - parseFloat(styles.borderTopWidth) - parseFloat(styles.borderBottomWidth);\r\n      width = parseFloat(styles.width) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\r\n    }\r\n\r\n    return {\r\n      width: width && !isNaN(width) ? width : null,\r\n      height: height && !isNaN(height) ? height : null\r\n    };\r\n  }\r\n\r\n  function attrDimensions(selection) {\r\n    return {\r\n      width: selection && selection.attr && parseFloat(selection.attr('width')),\r\n      height: selection && selection.attr && parseFloat(selection.attr('height'))\r\n    };\r\n  }\r\n\r\n  function bboxDimensions(selection) {\r\n    var element = selection.node();\r\n    var bbox;\r\n    try {\r\n      bbox = element && typeof element.getBBox == 'function' && element.getBBox();\r\n    }\r\n    catch(ex) {\r\n      // Firefox throws error when calling getBBox when svg hasn't been displayed\r\n      // Ignore error and set to empty\r\n      bbox = {width: 0, height: 0};\r\n    }\r\n\r\n    return bbox;\r\n  }\r\n\r\n  function isSVG(selection) {\r\n    return selection.node().nodeName == 'svg';\r\n  }\n\n  /**\r\n    Translate by (x, y) distance\r\n\r\n    @example\r\n    ```javascript\r\n    translate(10, 15) == 'translate(10, 15)'\r\n    translate({x: 10, y: 15}) == 'translate(10, 15)'\r\n    ```\r\n    @method translate\r\n    @param {Number|Object} [x] value or `{x, y}`\r\n    @param {Number} [y]\r\n    @return {String}\r\n  */\r\n  function translate(x, y) {\r\n    if (isObject(x)) {\r\n      y = x.y;\r\n      x = x.x;\r\n    }\r\n\r\n    return 'translate(' + (x || 0) + ', ' + (y || 0) + ')';\r\n  }\r\n\r\n  /**\r\n    Rotate by degrees, with optional center\r\n\r\n    @method rotate\r\n    @param {Number} degrees\r\n    @param {Object} [center = {x: 0, y: 0}]\r\n    @return {String}\r\n  */\r\n  function rotate(degrees, center) {\r\n    var rotation = 'rotate(' + (degrees || 0);\r\n    if (center)\r\n      rotation += ' ' + (center.x || 0) + ',' + (center.y || 0);\r\n    rotation += ')';\r\n\r\n    return rotation;\r\n  }\r\n\r\n  /**\r\n    Find vertical offset to vertically align text\r\n    (needed due to lack of `alignment-baseline` support in Firefox)\r\n\r\n    @example\r\n    ```js\r\n    var label = d3.select('text');\r\n\r\n    // Place label vertically so that origin is top-left\r\n    var offset = alignText(label);\r\n    label.attr('transform', translate(0, offset));\r\n\r\n    // Center label for line-height of 20px\r\n    var offset = alignText(label, 20);\r\n    label.attr('transform', translate(0, offset));\r\n    ```\r\n    @method alignText\r\n    @param {element} element\r\n    @param {Number} [line_height]\r\n    @return {Number} offset\r\n  */\r\n  function alignText(element, line_height) {\r\n    var offset = 0;\r\n    try {\r\n      var height = element.getBBox().height;\r\n\r\n      var element_style = window.getComputedStyle(element);\r\n      var css_font_size = parseFloat(element_style['font-size']);\r\n      var css_line_height = parseFloat(element_style['line-height']);\r\n\r\n      // If line-height: normal, use estimate 1.14em\r\n      // (actual line-height depends on browser and font)\r\n      if (isNaN(css_line_height))\r\n        css_line_height = 1.15 * css_font_size;\r\n\r\n      var css_adjustment = -(css_line_height - css_font_size) / 2;\r\n\r\n      // Add additional line-height, if specified\r\n      var height_adjustment = 0;\r\n      if (line_height && line_height > 0)\r\n        height_adjustment = (line_height - height) / 2;\r\n\r\n      offset = height + (css_adjustment || 0) + (height_adjustment || 0);\r\n    }\r\n    catch (ex) {\r\n      // Errors can occur from getBBox and getComputedStyle\r\n      // No useful information for offset, do nothing\r\n    }\r\n\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n    Determine if given data is likely series data\r\n\r\n    @method isSeriesData\r\n    @param {Array} data\r\n    @return {Boolean}\r\n  */\r\n  function isSeriesData(data) {\r\n    var first_item = first(data);\r\n    return first_item && isObject(first_item) && Array.isArray(first_item.values);\r\n  }\r\n\r\n  /**\r\n    Get max for array/series by value di\r\n\r\n    @example\r\n    ```js\r\n    var data = [\r\n      {values: [{y: 1}, {y: 2}, {y: 3}]},\r\n      {values: [{y: 4}, {y: 2}, {y: 0}]}\r\n    ];\r\n    max(data, function(d, i) { return d.y; }); // -> 4\r\n    ```\r\n    @method max\r\n    @param {Array} data\r\n    @param {Function} getValue di function that returns value for given (d, i)\r\n    @return {Number}\r\n  */\r\n  function max(data, getValue) {\r\n    var getMax = function(series_data) {\r\n      return series_data && d3.extent(series_data, getValue)[1];\r\n    };\r\n\r\n    if (isSeriesData(data)) {\r\n      return data.reduce(function(memo, series) {\r\n        if (series && Array.isArray(series.values)) {\r\n          var series_max = getMax(series.values);\r\n          return series_max > memo ? series_max : memo;\r\n        }\r\n        else {\r\n          return memo;\r\n        }\r\n      }, -Infinity);\r\n    }\r\n    else {\r\n      return getMax(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n    Get min for array/series by value di\r\n\r\n    @example\r\n    ```js\r\n    var data = [\r\n      {values: [{x: 1}, {x: 2}, {x: 3}]},\r\n      {values: [{x: 4}, {x: 2}, {x: 0}]}\r\n    ];\r\n    min(data, function(d, i) { return d.x; }); // -> 0\r\n    ```\r\n    @method min\r\n    @param {Array} data\r\n    @param {Function} getValue di function that returns value for given (d, i)\r\n    @return {Number}\r\n  */\r\n  function min(data, getValue) {\r\n    var getMin = function(series_data) {\r\n      return series_data && d3.extent(series_data, getValue)[0];\r\n    };\r\n\r\n    if (isSeriesData(data)) {\r\n      return data.reduce(function(memo, series) {\r\n        if (series && Array.isArray(series.values)) {\r\n          var series_min = getMin(series.values);\r\n          return series_min < memo ? series_min : memo;\r\n        }\r\n        else {\r\n          return memo;\r\n        }\r\n      }, Infinity);\r\n    }\r\n    else {\r\n      return getMin(data);\r\n    }\r\n  }\r\n\r\n  // TODO Look into converting to d3's internal style handling\r\n  // Convert key,values to style string\r\n  //\r\n  // @example\r\n  // ```js\r\n  // style({color: 'red', display: 'block'}) -> color: red; display: block;\r\n  // ```\r\n  // @method style\r\n  // @param {Object} styles\r\n  // @return {String}\r\n  function style(styles) {\r\n    if (!styles)\r\n      return '';\r\n\r\n    var keyValues = [];\r\n    objectEach(styles, function(value, key) {\r\n      keyValues.push(key + ': ' + value);\r\n    });\r\n    styles = keyValues.join('; ');\r\n\r\n    return styles ? styles + ';' : '';\r\n  }\r\n\r\n  /**\r\n    Get formatted margins for varying input\r\n\r\n    @method getMargins\r\n    @example\r\n    ```js\r\n    getMargins(4);\r\n    // -> {top: 4, right: 4, bottom: 4, left: 4}\r\n\r\n    getMargins({top: 20}, {top: 8, bottom: 8});\r\n    // -> {top: 20, right: 0, bottom: 8, left: 0}\r\n    ```\r\n    @param {Number|Object} margins\r\n    @param {Object} default_margins\r\n    @return {Object}\r\n  */\r\n  function getMargins(margins, default_margins) {\r\n    if (isNumber(margins))\r\n      return {top: margins, right: margins, bottom: margins, left: margins};\r\n    else\r\n      return defaults({}, margins, default_margins, {top: 0, right: 0, bottom: 0, left: 0});\r\n  }\r\n\r\n  /**\r\n    Create wrapped `(d, i)` function that adds chart instance as first argument.\r\n    Wrapped function uses standard d3 arguments and context.\r\n\r\n    Note: in order to pass proper context to di-functions called within di-function\r\n    use `.call(this, d, i)` (where \"this\" is d3 context)\r\n\r\n    @example\r\n    ```javascript\r\n    d3.chart('Base').extend('Custom', {\r\n      initialize: function() {\r\n        this.base.select('point')\r\n          .attr('cx', this.x);\r\n        // -> (d, i) and \"this\" used from d3, \"chart\" injected automatically\r\n      },\r\n\r\n      x: di(function(chart, d, i) {\r\n        // \"this\" is standard d3 context: node\r\n        return chart.xScale()(chart.xValue.call(this, d, i));\r\n      })\r\n\r\n      // xScale, xValue...\r\n    });\r\n    ```\r\n    @method di\r\n    @param {Function} callback with `(chart, d, i)` arguments\r\n    @return {Function}\r\n  */\r\n  function di(callback) {\r\n    // Create intermediate wrapping in case it's called without binding\r\n    var wrapped = function wrapped(d, i, j) {\r\n      return callback.call(this, undefined, d, i, j);\r\n    };\r\n    wrapped._is_di = true;\r\n    wrapped.original = callback;\r\n\r\n    return wrapped;\r\n  }\r\n\r\n  function bindDi(diFn, chart) {\r\n    return function wrapped(d, i, j) {\r\n      return (diFn.original || diFn).call(this, chart, d, i, j);\r\n    };\r\n  }\r\n\r\n  // Bind all di-functions found in chart\r\n  function bindAllDi(chart) {\r\n    for (var key in chart) {\r\n      if (chart[key] && chart[key]._is_di)\r\n        chart[key] = bindDi(chart[key], chart);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n    Get parent data for element (used to get parent series for data point)\r\n\r\n    @example\r\n    ```js\r\n    var data = [{\r\n      name: 'Input',\r\n      values: [1, 2, 3]\r\n    }];\r\n\r\n    d3.selectAll('g')\r\n      .data(data)\r\n      .enter().append('g')\r\n        .selectAll('text')\r\n          .data(function(d) { return d.values; })\r\n          .enter().append('text')\r\n            .text(function(d) {\r\n              var series_data = getParentData(this);\r\n              return series_data.name + ': ' + d;\r\n            });\r\n\r\n    // Input: 1, Input: 2, Input: 3\r\n    ```\r\n    @method getParentData\r\n    @param {Element} element\r\n    @return {Any}\r\n  */\r\n  function getParentData(element) {\r\n    // @internal Shortcut if element + parentData needs to be mocked\r\n    if (element._parent_data)\r\n      return element._parent_data;\r\n\r\n    var parent = element && element.parentNode;\r\n    if (parent) {\r\n      var data = d3.select(parent).data();\r\n      return data && data[0];\r\n    }\r\n  }\r\n\r\n  function createHelper(type) {\r\n    return function(id, options) {\r\n      if (!options) {\r\n        options = id;\r\n        id = undefined;\r\n      }\r\n\r\n      return extend({id: id, type: type}, options);\r\n    };\r\n  }\r\n\r\n  var types = {\r\n    string: {},\r\n    number: {},\r\n    array: {},\r\n    object: {},\r\n    any: {}\r\n  };\r\n\r\n  function checkProp(value, definition) {\r\n    if (definition.validate && !definition.validate(value))\r\n      throw new Error('Invalid value for property: ' + JSON.stringify(value));\r\n  }\r\n\r\n  function createPrepare(steps) {\r\n    if (!Array.isArray(steps))\r\n      steps = Array.prototype.slice.call(arguments);\r\n\r\n    return function() {\r\n      var selection = this.base;\r\n      var context = this;\r\n\r\n      return steps.reduce(function(props, step) {\r\n        return step(selection, props, context);\r\n      }, this.props);\r\n    };\r\n  }\r\n\r\n  function createDraw(steps) {\r\n    return function(selection, props) {\r\n      var prepared = prepareSteps(steps, props);\r\n\r\n      // TODO transitions\r\n      var selected = prepared.select.call(selection);\r\n      selected.exit().call(prepared.exit);\r\n      selected.call(prepared.update);\r\n      selected.enter().call(prepared.enter);\r\n      selected.call(prepared.merge);\r\n    };\r\n  }\r\n\r\n  function prepareSteps(steps, props) {\r\n    steps = defaults({}, steps, {\r\n      select: function() { return this; },\r\n      enter: function() {},\r\n      update: function() {},\r\n      merge: function() {},\r\n      exit: function() { this.remove(); }\r\n    });\r\n    // TODO transitions\r\n\r\n    return {\r\n      select: curry(steps.select, props),\r\n      enter: curry(steps.enter, props),\r\n      update: curry(steps.update, props),\r\n      merge: curry(steps.merge, props),\r\n      exit: curry(steps.exit, props)\r\n    };\r\n  }\r\n\r\n  function curry(fn) {\r\n    var values = Array.prototype.slice.call(arguments, 1);\r\n\r\n    return function() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n      return fn.apply(this, values.concat(args));\r\n    };\r\n  }\r\n\r\n  function createTransition(props) {\r\n    return function() {\r\n      if (!isUndefined(props.duration))\r\n        this.duration(props.duration);\r\n      if (!isUndefined(props.delay))\r\n        this.delay(props.delay);\r\n      if (!isUndefined(props.ease))\r\n        this.ease(props.ease);\r\n    };\r\n  }\r\n\r\n  function getLayer(selection, id) {\r\n    var layer = selection.select('[data-layer=\"' + id + '\"]');\r\n    if (layer.empty())\r\n      layer = selection.append('g').attr('data-layer', id);\r\n\r\n    return layer;\r\n  }\r\n\r\n  // TODO Move to Chart/Base\r\n  var architecture = {\r\n    update: function(selection, props) {\r\n      this.base = selection;\r\n      this.props = this.prepareProps(props);\r\n    },\r\n    prepareProps: function(props) {\r\n      var properties = this.constructor && this.constructor.properties;\r\n      if (!properties)\r\n        return props;\r\n\r\n      var prepared = extend({}, props);\r\n\r\n      objectEach(properties, function(definition, key) {\r\n        var prop = prepared[key];\r\n\r\n        if (!isUndefined(prop))\r\n          checkProp(prop, definition);\r\n        else if (definition.getDefault)\r\n          prepared[key] = definition.getDefault(this.base, prepared, this);\r\n      }, this);\r\n\r\n      return prepared;\r\n    },\r\n    attach: function(id, Type, selection, props) {\r\n      var attached = this.attached[id];\r\n\r\n      if (attached)\r\n        attached.options(props);\r\n      else\r\n        attached = new Type(selection, props);\r\n\r\n      attached.draw();\r\n      this.attached[id] = attached;\r\n    },\r\n    detach: function(id) {\r\n      var attached = this.attached[id];\r\n      if (attached) {\r\n        attached.base.remove();\r\n        delete this.attached[id];\r\n      }\r\n    }\r\n  };\r\n\r\n  var helpers = {\r\n    property: property,\r\n    dimensions: dimensions,\r\n    translate: translate,\r\n    rotate: rotate,\r\n    alignText: alignText,\r\n    isSeriesData: isSeriesData,\r\n    max: max,\r\n    min: min,\r\n    createScale: createScale,\r\n    style: style,\r\n    getMargins: getMargins,\r\n    stack: stack,\r\n    di: di,\r\n    bindDi: bindDi,\r\n    bindAllDi: bindAllDi,\r\n    getParentData: getParentData,\r\n    mixin: mixin,\r\n    createHelper: createHelper,\r\n\r\n    types: types,\r\n    checkProp: checkProp,\r\n    createPrepare: createPrepare,\r\n    createDraw: createDraw,\r\n    createTransition: createTransition,\r\n    getLayer: getLayer\r\n  };\n\n  var d3Chart = d3.chart();\r\n\r\n  // TEMP Clear namespace from mixins\r\n  /**\r\n    @namespace\r\n  */\r\n\r\n  /**\r\n    Shared functionality between all charts and components.\r\n\r\n    - Set properties automatically from `options`,\r\n    - Store fully transformed data\r\n    - Adds `\"before:draw\"` and `\"draw\"` events\r\n    - Standard `width` and `height` calculations\r\n\r\n    @class Base\r\n  */\r\n  function Base(selection, options) {\r\n    // d3.chart() constructor without transform and initialize cascade\r\n    this.base = selection;\r\n    this._layers = {};\r\n    this._attached = {};\r\n    this._events = {};\r\n\r\n    // Bind all di-functions to this chart\r\n    bindAllDi(this);\r\n\r\n    // Set options (and properties with set_from_options)\r\n    if (options)\r\n      this.options(options);\r\n\r\n    // Initialize Chart (relies on explicitly calling super in initialize)\r\n    this.initialize(options);\r\n  }\r\n\r\n  inherits(Base, d3Chart);\r\n\r\n  extend(Base.prototype, {\r\n    initialize: function() {},\r\n    transform: function(data) {\r\n      return data;\r\n    },\r\n    demux: function(name, data) { return data; },\r\n\r\n    // Add events to draw: \"before:draw\" and \"draw\"\r\n    draw: function(data) {\r\n      // Transform data (relies on explicitly calling super in transform)\r\n      data = this.transform(data);\r\n\r\n      // Store fully-transformed data for reference\r\n      this.data(data);\r\n\r\n      this.trigger('before:draw', data);\r\n\r\n      objectEach(this._layers, function(layer) {\r\n        layer.draw(data);\r\n      });\r\n      objectEach(this._attached, function(attachment, name) {\r\n        attachment.draw(this.demux(name, data));\r\n      }, this);\r\n\r\n      this.trigger('draw', data);\r\n    },\r\n\r\n    // Explicitly load d3.chart prototype\r\n    layer: d3Chart.prototype.layer,\r\n    unlayer: d3Chart.prototype.unlayer,\r\n    attach: d3Chart.prototype.attach,\r\n    on: d3Chart.prototype.on,\r\n    once: d3Chart.prototype.once,\r\n    off: d3Chart.prototype.off,\r\n    trigger: d3Chart.prototype.trigger,\r\n\r\n    /**\r\n      Store fully-transformed data for direct access from the chart\r\n\r\n      @property data\r\n      @type Any\r\n    */\r\n    data: property(),\r\n\r\n    /**\r\n      Overall options for chart/component, automatically setting any matching properties.\r\n\r\n      @example\r\n      ```js\r\n      var property = d3.compose.helpers.property;\r\n\r\n      d3.chart('Base').extend('HasProperties', {\r\n        a: property(),\r\n        b: property({\r\n          set: function(value) {\r\n            return {\r\n              override: value + '!'\r\n            };\r\n          }\r\n        })\r\n      });\r\n\r\n      var instance = d3.select('#chart')\r\n        .chart('HasProperties', {\r\n          a: 123,\r\n          b: 'Howdy',\r\n          c: true\r\n        });\r\n\r\n      // Equivalent to:\r\n      // d3.select(...)\r\n      //   .chart('HasProperties')\r\n      //   .options({...});\r\n\r\n      console.log(instance.a()); // -> 123\r\n      console.log(instance.b()); // -> Howdy!\r\n      console.log(instance.options().c); // -> true\r\n      ```\r\n      @property options\r\n      @type Object\r\n    */\r\n    options: property({\r\n      default_value: {},\r\n      set: function(options, previous) {\r\n        // Clear all unset options, except for data and options\r\n        if (previous) {\r\n          var unset = difference(Object.keys(previous), Object.keys(options));\r\n          unset.forEach(function(key) {\r\n            if (key != 'data' && key != 'options' && isProperty(this, key))\r\n              this[key](undefined);\r\n          }, this);\r\n        }\r\n\r\n        objectEach(options, function setFromOptions(value, key) {\r\n          if (isProperty(this, key))\r\n            this[key](value);\r\n        }, this);\r\n\r\n        function isProperty(chart, key) {\r\n          return chart[key] && chart[key].is_property && chart[key].set_from_options;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get width of `this.base`.\r\n      (Does not include `set` for setting width of `this.base`)\r\n\r\n      @method width\r\n      @return {Number}\r\n    */\r\n    width: function width() {\r\n      return dimensions(this.base).width;\r\n    },\r\n\r\n    /**\r\n      Get height of `this.base`.\r\n      (Does not include `set` for setting height of `this.base`)\r\n\r\n      @method height\r\n      @return {Number}\r\n    */\r\n    height: function height() {\r\n      return dimensions(this.base).height;\r\n    }\r\n  });\r\n\r\n  Base.extend = function(proto_props, static_props) {\r\n    // name may be first parameter for d3.chart usage\r\n    var name;\r\n    if (isString(proto_props)) {\r\n      name = proto_props;\r\n      proto_props = static_props;\r\n      static_props = arguments[2];\r\n    }\r\n\r\n    var Parent = this;\r\n    var Child;\r\n\r\n    if (proto_props && proto_props.hasOwnProperty('constructor')) {\r\n      Child = proto_props.constructor;\r\n\r\n      // inherits sets constructor, remove from proto_props\r\n      proto_props = extend({}, proto_props);\r\n      delete proto_props.constructor;\r\n    }\r\n    else {\r\n      Child = function() { return Parent.apply(this, arguments); };\r\n    }\r\n\r\n    inherits(Child, Parent);\r\n    if (static_props)\r\n      extend(Child, static_props);\r\n    if (proto_props)\r\n      extend(Child.prototype, proto_props);\r\n\r\n    // If name is given, register with d3.chart\r\n    if (name)\r\n      d3Chart[name] = Child;\r\n\r\n    return Child;\r\n  };\n\n  /*\n    Extract layout from the given options\n\n    @param {Array} options\n    @return {Object} {data, items, layout}\n  */\n  function extractLayout(options) {\n    if (!options)\n      return;\n\n    var data = {\n      _charts: {},\n      _components: {}\n    };\n    var items = {};\n    var layout = [];\n    var charts = [];\n    var components = [];\n\n    // TEMP Idenfify charts from layered,\n    // eventually no distinction between charts and components\n    var found = {\n      row: false,\n      charts: false\n    };\n\n    // Components are added from inside-out\n    // so for position: top, position: left, use unshift\n    options.forEach(function(row, row_index) {\n      var row_components = [];\n\n      if (!Array.isArray(row))\n        row = [row];\n      if (row.length > 1)\n        found.row = true;\n\n      var row_layout = row.map(function(item, col_index) {\n        if (!item)\n          return;\n\n        if (item._layered) {\n          // Charts\n          found.charts = found.row = true;\n          var chart_ids = [];\n\n          item.items.forEach(function(chart, chart_index) {\n            if (!chart)\n              return;\n\n            chart = defaults({}, chart, {id: getId(row_index, col_index, chart_index)});\n\n            chart_ids.push(chart.id);\n            charts.push(chart);\n            items[chart.id] = chart;\n          });\n\n          return chart_ids;\n        }\n\n        var component = prepareComponent(item, row_index, col_index);\n        items[component.id] = component;\n\n        if (row.length > 1) {\n          if (!found.charts) {\n            // Left\n            setPosition(component, 'left');\n            row_components.unshift(component);\n          }\n          else {\n            // Right\n            setPosition(component, 'right');\n            row_components.push(component);\n          }\n        }\n        else {\n          if (!found.row) {\n            // Top\n            setPosition(component, 'top');\n            components.unshift(component);\n          }\n          else {\n            // Bottom\n            setPosition(component, 'bottom');\n            components.push(component);\n          }\n        }\n\n        return component.id;\n      });\n\n      if (row_components.length)\n        components = components.concat(row_components);\n\n      layout.push(row_layout);\n    });\n\n    charts.forEach(extractData('_charts'));\n    components.forEach(extractData('_components'));\n\n    return {\n      data: data,\n      items: items,\n      layout: layout,\n\n      charts: charts,\n      components: components\n    };\n\n    function prepareComponent(component, row_index, col_index) {\n      return defaults({}, component, {id: getId(row_index, col_index)});\n    }\n    function setPosition(component, position) {\n      if (component && isFunction(component.position))\n        component.position(position);\n      else\n        component.position = position;\n    }\n    function getId(row_index, col_index, layered_index) {\n      var id = 'item-' + (row_index + 1) + '-' + (col_index + 1);\n      if (layered_index != null)\n        id += '-' + (layered_index + 1);\n\n      return id;\n    }\n\n    function extractData(type) {\n      return function(item) {\n        if (item.data && !isFunction(item.data)) {\n          data[type][item.id] = item.data;\n          data[item.id] = item.data;\n          delete item.data;\n        }\n      };\n    }\n  }\n\n  /*\n    Calculate component and chart coordinates for given layout\n  */\n  function calculateLayout(components, data, demux) {\n    var overall_layout = {top: [], right: [], bottom: [], left: []};\n    components.forEach(function(component) {\n      if (component.skip_layout || !component.getLayout)\n        return;\n\n      var layout = component.getLayout(demux(component.id, data));\n      var position = layout && layout.position;\n\n      if (!contains(['top', 'right', 'bottom', 'left'], position))\n        return;\n\n      overall_layout[position].push({\n        offset: position == 'top' || position == 'bottom' ? layout.height : layout.width,\n        component: component\n      });\n    });\n\n    return overall_layout;\n  }\n\n  /*\n    Apply calculated layout to charts and components\n  */\n  function applyLayout(layout, chart_position, width, height) {\n    layout.top.reduce(function(previous, part) {\n      var y = previous - part.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, chart_position.top);\n\n    layout.right.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var x = previous + previousPart.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, width - chart_position.right);\n\n    layout.bottom.reduce(function(previous, part, index, parts) {\n      var previousPart = parts[index - 1] || {offset: 0};\n      var y = previous + previousPart.offset;\n      setLayout(part.component, chart_position.left, y, {width: chart_position.width});\n\n      return y;\n    }, height - chart_position.bottom);\n\n    layout.left.reduce(function(previous, part) {\n      var x = previous - part.offset;\n      setLayout(part.component, x, chart_position.top, {height: chart_position.height});\n\n      return x;\n    }, chart_position.left);\n\n    function setLayout(component, x, y, options) {\n      if (component && isFunction(component.setLayout))\n        component.setLayout(x, y, options);\n    }\n  }\n\n  /**\r\n    Common base for creating components that includes helpers for positioning and layout.\r\n\r\n    ### Extending\r\n\r\n    `d3.chart('Component')` contains intelligent defaults and there are no required overrides.\r\n    Create a component just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust layout calculation, use `prepareLayout`, `getLayout`, and `setLayout`.\r\n    - To layout a component within the chart, use `skip_layout: true` and the static `layer_type: 'chart'`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Component').extend('Key', {\r\n      initialize: function() {\r\n        this.layer('Key', this.base, {\r\n          dataBind: function(data) {\r\n            return this.selectAll('text')\r\n              .data(data);\r\n          },\r\n          insert: function() {\r\n            return this.append('text');\r\n          },\r\n          events: {\r\n            merge: function() {\r\n              this.text(this.chart().keyText)\r\n            }\r\n          }\r\n        })\r\n      },\r\n\r\n      keyText: helpers.di(function(chart, d, i) {\r\n        return d.abbr + ' = ' + d.value;\r\n      })\r\n    });\r\n    ```\r\n    @class Component\r\n    @extends Base\r\n  */\r\n  var Component = Base.extend({\r\n    /**\r\n      Component's position relative to chart\r\n      (top, right, bottom, left)\r\n\r\n      @property position\r\n      @type String\r\n      @default 'top'\r\n    */\r\n    position: property({\r\n      default_value: 'top',\r\n      validate: function(value) {\r\n        return contains(['top', 'right', 'bottom', 'left'], value);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the width of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property width\r\n      @type Number\r\n      @default (actual width)\r\n    */\r\n    width: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).width;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set the height of the component (in pixels)\r\n      (used in layout calculations)\r\n\r\n      @property height\r\n      @type Number\r\n      @default (actual height)\r\n    */\r\n    height: property({\r\n      default_value: function() {\r\n        return dimensions(this.base).height;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Margins (in pixels) around component\r\n\r\n      @property margins\r\n      @type Object\r\n      @default {top: 0, right: 0, bottom: 0, left: 0}\r\n    */\r\n    margins: property({\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values)\r\n        };\r\n      },\r\n      default_value: getMargins()\r\n    }),\r\n\r\n    /**\r\n      Center the component vertically/horizontally (depending on position)\r\n\r\n      @property centered\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    centered: property({\r\n      default_value: false\r\n    }),\r\n\r\n    /**\r\n      Skip component during layout calculations and positioning\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('NotLaidOut', {\r\n        skip_layout: true\r\n      });\r\n      ```\r\n      @attribute skip_layout\r\n      @type Boolean\r\n      @default false\r\n    */\r\n    skip_layout: false,\r\n\r\n    /**\r\n      Perform any layout preparation required before getLayout (default is draw)\r\n      (override in prototype of extension)\r\n\r\n      Note: By default, components are double-drawn;\r\n      for every draw, they are drawn once to determine the layout size of the component and a second time for display with the calculated layout.\r\n      This can cause issues if the component uses transitions. See Axis for an example of a Component with transitions.\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        prepareLayout: function(data) {\r\n          // default: this.draw(data);\r\n          // so that getLayout has real dimensions\r\n\r\n          // -> custom preparation (if necessary)\r\n        }\r\n      })\r\n      ```\r\n      @method prepareLayout\r\n      @param {Any} data\r\n    */\r\n    prepareLayout: function(data) {\r\n      this.draw(data);\r\n    },\r\n\r\n    /**\r\n      Get layout details for use when laying out component\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        getLayout: function(data) {\r\n          var calculated_width, calculated_height;\r\n\r\n          // Perform custom calculations...\r\n\r\n          // Must return position, width, and height\r\n          return {\r\n            position: this.position(),\r\n            width: calculated_width,\r\n            height: calculated_height\r\n          };\r\n        }\r\n      });\r\n      ```\r\n      @method getLayout\r\n      @param {Any} data\r\n      @return {Object} position, width, and height for layout\r\n    */\r\n    getLayout: function(data) {\r\n      this.prepareLayout(data);\r\n\r\n      var margins = this.margins();\r\n      return {\r\n        position: this.position(),\r\n        width: this.width() + margins.left + margins.right,\r\n        height: this.height() + margins.top + margins.bottom\r\n      };\r\n    },\r\n\r\n    /**\r\n      Set layout of underlying base\r\n      (override in prototype of extension)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('Custom', {\r\n        setLayout: function(x, y, options) {\r\n          // Set layout of this.base...\r\n          // (the following is the default implementation)\r\n          var margins = this.margins();\r\n\r\n          // (handle this.centered())\r\n\r\n          this.base\r\n            .attr('transform', helpers.translate(x + margins.left, y + margins.top));\r\n          this.height(options && options.height);\r\n          this.width(options && options.width);\r\n        }\r\n      });\r\n      ```\r\n      @method setLayout\r\n      @param {Number} x position of base top-left\r\n      @param {Number} y position of base top-left\r\n      @param {Object} options\r\n        @param {Object} [options.height] height of component in layout\r\n        @param {Object} [options.width] width of component in layout\r\n    */\r\n    setLayout: function(x, y, options) {\r\n      var margins = this.margins();\r\n\r\n      if (this.centered()) {\r\n        var actual_dimensions = dimensions(this.base);\r\n        if ('height' in options)\r\n          y += (options.height - actual_dimensions.height) / 2;\r\n        else\r\n          y += margins.top;\r\n\r\n        if ('width' in options)\r\n          x += (options.width - actual_dimensions.width) / 2;\r\n        else\r\n          x += margins.left;\r\n      }\r\n      else {\r\n        x += margins.left;\r\n        y += margins.top;\r\n      }\r\n\r\n      this.base.attr('transform', translate(x, y));\r\n      this.height(options && options.height);\r\n      this.width(options && options.width);\r\n    }\r\n  }, {\r\n    properties: {\r\n      position: {\r\n        type: types.string,\r\n        validate: function(value) {\r\n          return contains(['top', 'right', 'bottom', 'left'], value);\r\n        }\r\n      },\r\n      width: {\r\n        type: types.number,\r\n        getDefault: function(selection, props, context) {\r\n          // TODO Move to Component.prepare\r\n          var width = context.width();\r\n          return !isUndefined(width) ? width : dimensions(selection).width;\r\n        }\r\n      },\r\n      height: {\r\n        type: types.number,\r\n        getDefault: function(selection, props, context) {\r\n          // TODO Move to Component.prepare\r\n          var height = context.height();\r\n          return !isUndefined(height) ? height : dimensions(selection).height;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n      Default z-index for component\r\n      (Charts are 100 by default, so Component = 50 is below chart by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('AboveChartLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 150\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 50\r\n    */\r\n    z_index: 50,\r\n\r\n    /**\r\n      Set to `'chart'` to use chart layer for component.\r\n      (e.g. Axis uses chart layer to position with charts, but includes layout for ticks)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Component').extend('ChartComponent', {\r\n        // ...\r\n      }, {\r\n        layer_type: 'chart'\r\n      });\r\n      ```\r\n      @attribute layer_type\r\n      @static\r\n      @type String\r\n      @default 'component'\r\n    */\r\n    layer_type: 'component'\r\n  });\n\n  /**\r\n    Common base for creating overlays that includes helpers for positioning and show/hide.\r\n\r\n    ### Extending\r\n\r\n    Create an overlay just like a chart, by creating layers in the `initialize` method in `extend`.\r\n\r\n    - To adjust positioning, override `position`\r\n    - To adjust show/hide behavior, override `show`/`hide`\r\n\r\n    @example\r\n    ```js\r\n    d3.chart('Overlay').extend('ClosestPoints', {\r\n      // TODO\r\n    });\r\n    ```\r\n    @class Overlay\r\n    @extends Component\r\n  */\r\n  var Overlay = Component.extend({\r\n    initialize: function(options) {\r\n      Component.prototype.initialize.call(this, options);\r\n      this.base.attr('style', this.style());\r\n    },\r\n    skip_layout: true,\r\n\r\n    /**\r\n      Overlay's top-left x-position in px from left\r\n\r\n      @property x\r\n      @type Number\r\n      @default 0\r\n    */\r\n    x: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Overlay's top-left y-position in px from top\r\n\r\n      @property y\r\n      @type Number\r\n      @default 0\r\n    */\r\n    y: property({\r\n      default_value: 0\r\n    }),\r\n\r\n    /**\r\n      Whether overlay is currently hidden\r\n\r\n      @property hidden\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    hidden: property({\r\n      default_value: true\r\n    }),\r\n\r\n    /**\r\n      Overlays base styling\r\n      (default includes position and hidden)\r\n\r\n      @property style\r\n      @type String\r\n      @default set from x, y, and hidden\r\n    */\r\n    style: property({\r\n      default_value: function() {\r\n        var transform = translate(this.x() + 'px', this.y() + 'px');\r\n        var styles = {\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          '-webkit-transform': transform,\r\n          '-ms-transform': transform,\r\n          transform: transform\r\n        };\r\n\r\n        if (this.hidden())\r\n          styles.display = 'none';\r\n\r\n        return style(styles);\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Position overlay layer at given x,y coordinates\r\n\r\n      @example\r\n      ```js\r\n      // Absolute, x: 100, y: 50\r\n      overlay.position(100, 50);\r\n      overlay.position({x: 100, y: 50});\r\n\r\n      // Relative-to-chart, x: 50, y: 40\r\n      overlay.position({chart: {x: 50, y: 40}});\r\n\r\n      // Relative-to-container, x: 75, y: 50\r\n      overlay.position({container: {x: 75, y: 50}});\r\n      ```\r\n      @method position\r\n      @param {Object|Number} position {x,y}, {container: {x,y}}, {chart: {x,y}} or x in px from left\r\n      @param {Number} [y] in px from top\r\n    */\r\n    // TODO This conflicts with component.position(), might need a rename\r\n    position: function(position, y) {\r\n      if (arguments.length > 1) {\r\n        position = {\r\n          x: position,\r\n          y: y\r\n        };\r\n      }\r\n      else {\r\n        if ('container' in position) {\r\n          position = this.getAbsolutePosition(position.container);\r\n        }\r\n        else if ('chart' in position) {\r\n          if (this.container) {\r\n            var chart = this.container.chartPosition();\r\n            position = this.getAbsolutePosition({\r\n              x: position.chart.x + chart.left,\r\n              y: position.chart.y + chart.top\r\n            });\r\n          }\r\n          else {\r\n            position = this.getAbsolutePosition(position.chart);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.x(position.x).y(position.y);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Show overlay (with `display: block`)\r\n\r\n      @method show\r\n    */\r\n    show: function() {\r\n      this.hidden(false);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Hide overlay (with `display: none`)\r\n\r\n      @method hide\r\n    */\r\n    hide: function() {\r\n      this.hidden(true);\r\n      this.base.attr('style', this.style());\r\n    },\r\n\r\n    /**\r\n      Get absolute position from container position\r\n      (needed since container position uses viewBox and needs to be scaled to absolute position)\r\n\r\n      @method getAbsolutePosition\r\n      @param {Object} container_position ({x, y})\r\n      @return {Object} absolute {x, y} relative to container div\r\n    */\r\n    getAbsolutePosition: function(container_position) {\r\n      var container = this.container && this.container.container;\r\n\r\n      if (container && this.container.responsive()) {\r\n        var container_dimensions = dimensions(container);\r\n        var chart_width = this.container.width();\r\n        var chart_height = this.container.height();\r\n        var width_ratio = container_dimensions.width / chart_width;\r\n        var height_ratio = container_dimensions.height / chart_height;\r\n\r\n        return {\r\n          x: width_ratio * container_position.x,\r\n          y: height_ratio * container_position.y\r\n        };\r\n      }\r\n      else {\r\n        // Not attached so can't get actual dimensions\r\n        // fallback to container position\r\n        return container_position;\r\n      }\r\n    }\r\n  }, {\r\n    layer_type: 'overlay'\r\n  });\n\n  var default_compose_margins = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n  /**\r\n    Compose rich, data-bound charts from charts (like Lines and Bars) and components (like Axis, Title, and Legend) with d3 and d3.chart.\r\n    Using the `options` property, charts and components can be bound to data and customized to create dynamic charts.\r\n\r\n    @example\r\n    ```html\r\n    <div id=\"#chart\"></div>\r\n    ```\r\n    ```js\r\n    var chart = d3.select('#chart').chart('Compose', function(data) {\r\n      // Process data...\r\n\r\n      // Create shared scales\r\n      var scales = {\r\n        x: {data: data.input, key: 'x', adjacent: true},\r\n        y: {data: data.input, key: 'y'},\r\n        y2: {data: data.output, key: 'y'}\r\n      };\r\n\r\n      // Setup charts and components\r\n      var charts = [\r\n        d3c.bars('input', {data: data.input, xScale: scales.x, yScale: scales.y}),\r\n        d3c.lines('output', {data: data.output, xScale: scales.x, yScale: scales.y2})\r\n      ];\r\n\r\n      var title = d3c.title('d3.compose');\r\n      var xAxis = d3c.axis('xAxis', {scale: scales.x});\r\n      var yAxis = d3c.axis('yAxis', {scale: scales.y});\r\n      var y2Axis = d3c.axis('y2Axis', {scale: scales.y2});\r\n\r\n      // Layout charts and components\r\n      return [\r\n        title,\r\n        [yAxis, d3c.layered(charts), y2Axis],\r\n        xAxis\r\n      ];;\r\n    });\r\n\r\n    chart.draw({input: [...], output: [...]});\r\n    ```\r\n    @class Compose\r\n    @extends Base\r\n  */\r\n  var Compose = Base.extend({\r\n    initialize: function(options) {\r\n      Base.prototype.initialize.call(this, options);\r\n\r\n      // Responsive svg based on the following approach (embedded + padding hack)\r\n      // http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/\r\n      // (not enabled if selection is svg)\r\n      if (this.base.node().tagName != 'svg') {\r\n        this.container = this.base.append('div')\r\n          .attr('class', 'chart-compose-container');\r\n\r\n        this.base = this.container.append('svg')\r\n          .attr('xlmns', 'http://www.w3.org/2000/svg')\r\n          .attr('version', '1.1')\r\n          .attr('class', 'chart-compose');\r\n      }\r\n      else {\r\n        this.base.classed('chart-compose', true);\r\n      }\r\n\r\n      this.attachHoverListeners();\r\n    },\r\n\r\n    transform: function(data) {\r\n      // Save raw data for redraw\r\n      this.rawData(data);\r\n      return Base.prototype.transform.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Get/set the options `object/function` for the chart that takes `data` and\r\n      returns `[...layout]` for composing child charts and components.\r\n\r\n      @example\r\n      ```js\r\n      // get\r\n      chart.options();\r\n\r\n      // set (static)\r\n      chart.options([\r\n        // ...\r\n      ]);\r\n\r\n      // set (dynamic, takes data and returns options)\r\n      chart.options(function(data) {\r\n        // process data...\r\n\r\n        return [\r\n          // ...\r\n        ];\r\n      });\r\n\r\n      // Set directly from d3.chart creation\r\n      d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n      ```\r\n      @property options\r\n      @type Function|Object\r\n    */\r\n    options: property({\r\n      default_value: function() { return function() {}; },\r\n      set: function(options) {\r\n        // If options is plain object,\r\n        // return from generic options function\r\n        if (!isFunction(options)) {\r\n          return {\r\n            override: function() {\r\n              return options;\r\n            }\r\n          };\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Store raw data for container before it has been transformed\r\n    rawData: property(),\r\n\r\n    /**\r\n      Margins between edge of container and components/chart\r\n\r\n      @example\r\n      ```js\r\n      chart.margins({top: 10, right: 20, bottom: 10, left: 20});\r\n      ```\r\n      @property margins\r\n      @type Object {top, right, bottom, left}\r\n      @default {top: 10, right: 10, bottom: 10, left: 10}\r\n    */\r\n    margins: property({\r\n      default_value: default_compose_margins,\r\n      set: function(values) {\r\n        return {\r\n          override: getMargins(values, default_compose_margins)\r\n        };\r\n      }\r\n    }),\r\n\r\n    // Chart position\r\n    chartPosition: property({\r\n      default_value: {top: 0, right: 0, bottom: 0, left: 0},\r\n      set: function(values) {\r\n        return {\r\n          override: defaults({}, values, {top: 0, right: 0, bottom: 0, left: 0})\r\n        };\r\n      },\r\n      get: function(values) {\r\n        values.width = this._width() - values.right - values.left;\r\n        values.height = this._height() - values.bottom - values.top;\r\n\r\n        return values;\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Get/set overall width of chart\r\n\r\n      @property width\r\n      @type Number\r\n    */\r\n    width: property({\r\n      default_value: null\r\n    }),\r\n\r\n    /**\r\n      Get/set overall height of chart\r\n\r\n      @property height\r\n      @type Number\r\n    */\r\n    height: property({\r\n      default_value: null\r\n    }),\r\n\r\n    _width: function() {\r\n      var width = this.width();\r\n      return width != null ? width : Base.prototype.width.call(this);\r\n    },\r\n    _height: function() {\r\n      var height = this.height();\r\n      return height != null ? height : Base.prototype.height.call(this);\r\n    },\r\n\r\n    /**\r\n      Enable responsive container + viewBox so that chart scales to fill width\r\n      (only works if selection is not an svg)\r\n\r\n      @property responsive\r\n      @type Boolean\r\n      @default true\r\n    */\r\n    responsive: property({\r\n      default_value: true\r\n    }),\r\n\r\n    // Set svg viewBox attribute\r\n    viewBox: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.width() && this.height())\r\n          return '0 0 ' + this.width() + ' ' + this.height();\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set svg preserveAspectRatio attribute\r\n    preserveAspectRatio: property({\r\n      default_value: function() {\r\n        if (this.responsive())\r\n          return 'xMidYMid meet';\r\n        else\r\n          return null;\r\n      }\r\n    }),\r\n\r\n    // Set container style\r\n    containerStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive()) {\r\n          var aspect_ratio = 1;\r\n          if (this.width() && this.height())\r\n            aspect_ratio = this.height() / this.width();\r\n\r\n          return style({\r\n            width: '100%',\r\n            height: 0,\r\n            'padding-top': (aspect_ratio * 100) + '%',\r\n            position: 'relative'\r\n          });\r\n        }\r\n        else {\r\n          return style({position: 'relative'});\r\n        }\r\n      }\r\n    }),\r\n\r\n    // Set base style\r\n    baseStyle: property({\r\n      default_value: function() {\r\n        if (this.responsive() && this.container) {\r\n          return style({\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0\r\n          });\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n      Set charts from options or get chart instances.\r\n      Each chart should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the chart.\r\n\r\n      @example\r\n      ```js\r\n      chart.charts([\r\n        {id: 'input', type: 'Bars'}, // options to pass to Bars chart\r\n        {id: 'output', type: 'Lines'} // options to pass to Lines chart\r\n      ]);\r\n      ```\r\n      @property charts\r\n      @type Array\r\n    */\r\n    charts: property({\r\n      set: function(chart_options, charts) {\r\n        // Store actual charts rather than options\r\n        return {\r\n          override: this._attachItems(chart_options, charts, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Set components from options or get components instances.\r\n      Each component should use a unique key so that updates are passed to the existing chart\r\n      (otherwise they are recreated on update).\r\n      The `type` option must be a registered `d3.chart` and all other options are passed to the component.\r\n\r\n      @example\r\n      ```js\r\n      chart.components([\r\n        {id: 'axis.y', type: 'Axis'}, // options to pass to Axis component\r\n        {id: 'title', type: 'Title'} // options to pass to Title component\r\n      ])\r\n      ```\r\n      @property components\r\n      @type Array\r\n    */\r\n    components: property({\r\n      set: function(component_options, components) {\r\n        // Store actual components rather than options\r\n        return {\r\n          override: this._attachItems(component_options, components, this)\r\n        };\r\n      },\r\n      default_value: []\r\n    }),\r\n\r\n    /**\r\n      Delay start of transition by specified milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property delay\r\n      @type Number|Function\r\n      @default d3 default: 0\r\n    */\r\n    delay: property(),\r\n\r\n    /**\r\n      Transition duration in milliseconds.\r\n      (applied to all charts and components as default)\r\n\r\n      @property duration\r\n      @type Number|Function\r\n      @default d3 default: 250ms\r\n    */\r\n    duration: property(),\r\n\r\n    /**\r\n      Transition ease function.\r\n      (applied to all charts and components as default)\r\n\r\n      - See: [Transitions#ease](https://github.com/mbostock/d3/wiki/Transitions#ease)\r\n      - Note: arguments to pass to `d3.ease` are not supported\r\n\r\n      @property ease\r\n      @type String|Function\r\n      @default d3 default: 'cubic-in-out'\r\n    */\r\n    ease: property(),\r\n\r\n    /**\r\n      Draw chart with given data\r\n\r\n      @example\r\n      ```js\r\n      var chart = d3.select('#chart')\r\n        .chart('Compose', function(data) {\r\n          // ...\r\n        });\r\n\r\n      chart.draw([1, 2, 3]);\r\n\r\n      chart.draw({values: [1, 2, 3]});\r\n\r\n      chart.draw([\r\n        {values: [1, 2, 3]},\r\n        {values: [4, 5, 6]}\r\n      ]);\r\n      ```\r\n      @method draw\r\n      @param {Any} data\r\n    */\r\n    draw: function(data) {\r\n      var config = this._prepareConfig(this.options(), data);\r\n      if (!config)\r\n        config = {data: {_charts: {}, _components: {}}, layout: [], charts: [], components: []};\r\n\r\n      // Set charts and components from config\r\n      this.charts(config.charts);\r\n      this.components(config.components);\r\n\r\n      // Add config data\r\n      data = {\r\n        original: data,\r\n        config: config.data\r\n      };\r\n      this.data(data);\r\n\r\n      this._setDimensions();\r\n\r\n      // Layout components\r\n      this.layout(config.layout, data);\r\n\r\n      // Full draw now that everything has been laid out\r\n      d3.chart().prototype.draw.call(this, data);\r\n    },\r\n\r\n    /**\r\n      Redraw chart with current data\r\n\r\n      @method redraw\r\n    */\r\n    redraw: function() {\r\n      if (this.rawData())\r\n        this.draw(this.rawData().original);\r\n    },\r\n\r\n    demux: function(name, data) {\r\n      if (!data || !data.config || !data.original)\r\n        return data;\r\n\r\n      if (findById(this.charts(), name) && data.config._charts[name])\r\n        return data.config._charts[name];\r\n      else if (findById(this.components(), name) && data.config._components[name])\r\n        return data.config._components[name];\r\n      else\r\n        return data.original;\r\n    },\r\n\r\n    // Create chart layer (for laying out charts)\r\n    createChartLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create component layer\r\n    createComponentLayer: function(options) {\r\n      return this.base.append('g')\r\n        .attr('class', 'chart-component-layer')\r\n        .attr('data-zIndex', options && options.z_index);\r\n    },\r\n\r\n    // Create overlay layer\r\n    createOverlayLayer: function() {\r\n      if (!this.container)\r\n        throw new Error('Cannot create overlay layer if original selection \"d3.select(...).chart(\\'Compose\\')\" is an svg. Use a div instead for responsive and overlay support.');\r\n\r\n      return this.container.append('div')\r\n        .attr('class', 'chart-overlay-layer');\r\n    },\r\n\r\n    // Layout components and charts for given data\r\n    layout: function(layout, data) {\r\n      // 1. Place chart layers\r\n      this._positionChartLayers();\r\n\r\n      // 2. Extract layout from components\r\n      layout = this._extractLayout(data);\r\n\r\n      // 3. Set chart position from layout\r\n      var chart_position = extend({}, this.margins());\r\n      objectEach(layout, function(parts, key) {\r\n        parts.forEach(function(part) {\r\n          chart_position[key] += part.offset || 0;\r\n        });\r\n      });\r\n      this.chartPosition(chart_position);\r\n\r\n      // 4. Position layers with layout\r\n      this.positionLayers(layout);\r\n    },\r\n\r\n    attachHoverListeners: function() {\r\n      // For responsive, listen on container div and calculate enter/exit for base from bounding rectangle\r\n      // For non-responsive, bounding rectangle is container so calculations still apply\r\n\r\n      var trigger = this.trigger.bind(this);\r\n      var chartPosition = this.chartPosition.bind(this);\r\n      var container = this.container || this.base;\r\n      var base = this.base.node();\r\n      var chart_position, bounds, was_inside;\r\n\r\n      container.on('mouseenter', function() {\r\n        // Calculate chart position and bounds on enter and cache during move\r\n        chart_position = chartPosition();\r\n        bounds = getBounds();\r\n\r\n        was_inside = inside(bounds);\r\n        if (was_inside)\r\n          enter();\r\n      });\r\n      container.on('mousemove', function() {\r\n        // Mousemove may fire before mouseenter in IE\r\n        if (!chart_position || !bounds) {\r\n          chart_position = chartPosition();\r\n          bounds = getBounds();\r\n        }\r\n\r\n        var is_inside = inside(bounds);\r\n        if (was_inside && is_inside)\r\n          move();\r\n        else if (was_inside)\r\n          leave();\r\n        else if (is_inside)\r\n          enter();\r\n\r\n        was_inside = is_inside;\r\n      });\r\n      container.on('mouseleave', function() {\r\n        if (was_inside) {\r\n          was_inside = false;\r\n          leave();\r\n        }\r\n      });\r\n\r\n      function inside() {\r\n        var mouse = d3.mouse(document.documentElement);\r\n        return mouse[0] >= bounds.left && mouse[0] <= bounds.right && mouse[1] >= bounds.top && mouse[1] <= bounds.bottom;\r\n      }\r\n      function enter() {\r\n        trigger('mouseenter', translateToXY(d3.mouse(base)));\r\n      }\r\n      function move() {\r\n        trigger('mousemove', translateToXY(d3.mouse(base)));\r\n      }\r\n      function leave() {\r\n        trigger('mouseleave');\r\n      }\r\n\r\n      function translateToXY(coordinates) {\r\n        var x = coordinates[0];\r\n        var y = coordinates[1];\r\n        var chart_x = x - chart_position.left;\r\n        var chart_y = y - chart_position.top;\r\n\r\n        // Set at chart bounds if outside of chart\r\n        if (x > (chart_position.left + chart_position.width))\r\n          chart_x = chart_position.width;\r\n        else if (x < chart_position.left)\r\n          chart_x = 0;\r\n\r\n        if (y > (chart_position.top + chart_position.height))\r\n          chart_y = chart_position.height;\r\n        else if (y < chart_position.top)\r\n          chart_y = 0;\r\n\r\n        return {\r\n          container: {x: x, y: y},\r\n          chart: {x: chart_x, y: chart_y}\r\n        };\r\n      }\r\n\r\n      function getBounds() {\r\n        var scroll_y = 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;\r\n\r\n        bounds = extend({}, base.getBoundingClientRect());\r\n        bounds.top += scroll_y;\r\n        bounds.bottom += scroll_y;\r\n\r\n        return bounds;\r\n      }\r\n    },\r\n\r\n    // Attach chart/component child item with id\r\n    attach: function(id, item) {\r\n      item.id = id;\r\n      item.base.attr('data-id', id);\r\n      item.container = this;\r\n\r\n      Base.prototype.attach.call(this, id, item);\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('attach');\r\n    },\r\n\r\n    // Detach chart/component child item by id\r\n    detach: function(id, item) {\r\n      item.base.remove();\r\n\r\n      delete this._attached[id];\r\n\r\n      if (item && isFunction(item.trigger))\r\n        item.trigger('detach');\r\n    },\r\n\r\n    // Position chart and component layers\r\n    positionLayers: function(layout) {\r\n      this._positionChartLayers();\r\n      this._positionComponents(layout);\r\n      this._positionByZIndex();\r\n    },\r\n\r\n    //\r\n    // Internal\r\n    //\r\n\r\n    _setDimensions: function() {\r\n      // Set container and svg dimensions\r\n      // (if original selection is svg, no container and skip responsiveness)\r\n      if (this.container) {\r\n        this.container\r\n          .attr('style', this.containerStyle());\r\n      }\r\n\r\n      this.base\r\n        .attr('viewBox', this.viewBox())\r\n        .attr('preserveAspectRatio', this.preserveAspectRatio())\r\n        .attr('style', this.baseStyle())\r\n        .attr('width', this.responsive() ? null : this.width())\r\n        .attr('height', this.responsive() ? null : this.height());\r\n    },\r\n\r\n    _attachItems: function(items, container, context) {\r\n      items = items || [];\r\n      container = container || [];\r\n\r\n      // Remove charts that are no longer needed\r\n      var remove_ids = difference(pluck(container, 'id'), pluck(items, 'id'));\r\n      remove_ids.forEach(function(remove_id) {\r\n        context.detach(remove_id, findById(container, remove_id));\r\n      });\r\n\r\n      // Create or update charts\r\n      return items.map(function(options) {\r\n        // TODO May not have id, might need to auto-generate\r\n        // (might be during another step)\r\n        var id = options.id;\r\n        var item = findById(container, id);\r\n\r\n        if (options instanceof d3.chart()) {\r\n          // If chart instance, replace with instance\r\n          if (item)\r\n            context.detach(id, item);\r\n\r\n          context.attach(id, options);\r\n          return options;\r\n        }\r\n        else {\r\n          // TEMP Changing position has nasty side effects, disable for now\r\n          var changed_position = item && !(item instanceof Overlay) && item.position && options.position && item.position() != options.position;\r\n\r\n          if (item && (item.type != options.type || changed_position)) {\r\n            // If chart type has changed, detach and re-create\r\n            context.detach(id, item);\r\n            item = undefined;\r\n          }\r\n\r\n          if (!item) {\r\n            var Item = d3.chart(options.type);\r\n\r\n            if (!Item)\r\n              throw new Error('No registered d3.chart found for ' + options.type);\r\n\r\n            var layer_options = {z_index: Item.z_index || 0};\r\n            var createLayer = {\r\n              'chart': 'createChartLayer',\r\n              'component': 'createComponentLayer',\r\n              'overlay': 'createOverlayLayer'\r\n            }[Item.layer_type];\r\n\r\n            if (!createLayer)\r\n              throw new Error('Unrecognized layer type \"' + Item.layer_type + '\" for ' + options.type);\r\n\r\n            var base = context[createLayer](layer_options);\r\n\r\n            item = new Item(base, options);\r\n            item.type = options.type;\r\n\r\n            context.attach(id, item);\r\n          }\r\n          else {\r\n            item.options(options);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      });\r\n    },\r\n\r\n    _prepareConfig: function(options, data) {\r\n      return extractLayout(options(data));\r\n    },\r\n\r\n    _positionChartLayers: function() {\r\n      var position = this.chartPosition();\r\n      this.base.selectAll('.chart-layer')\r\n        .attr('transform', translate(position.left, position.top))\r\n        .attr('width', position.width)\r\n        .attr('height', position.height);\r\n    },\r\n\r\n    _positionComponents: function(layout) {\r\n      var chart_position = this.chartPosition();\r\n      var width = this._width();\r\n      var height = this._height();\r\n\r\n      applyLayout(layout, chart_position, width, height);\r\n    },\r\n\r\n    _positionByZIndex: function() {\r\n      var layers = this.base.selectAll('.chart-layer, .chart-component-layer')[0];\r\n\r\n      // Sort by z-index\r\n      function setZIndex(layer) {\r\n        return {\r\n          layer: layer,\r\n          zIndex: parseInt(d3.select(layer).attr('data-zIndex')) || 0\r\n        };\r\n      }\r\n      function sortZIndex(a, b) {\r\n        if (a.zIndex < b.zIndex)\r\n          return -1;\r\n        else if (a.zIndex > b.zIndex)\r\n          return 1;\r\n        else\r\n          return 0;\r\n      }\r\n      function getLayer(wrapped) {\r\n        return wrapped.layer;\r\n      }\r\n\r\n      layers = layers.map(setZIndex).sort(sortZIndex).map(getLayer);\r\n\r\n      // Move layers to z-index order\r\n      layers.forEach(function(layer) {\r\n        if (layer && layer.parentNode && layer.parentNode.appendChild)\r\n          layer.parentNode.appendChild(layer);\r\n      });\r\n    },\r\n\r\n    _extractLayout: function(data) {\r\n      return calculateLayout(this.components(), data, this.demux.bind(this));\r\n    }\r\n  });\r\n\r\n  // TODO Find better place for this\r\n  function layered(items) {\r\n    if (!Array.isArray(items))\r\n      items = Array.prototype.slice.call(arguments);\r\n\r\n    return {_layered: true, items: items};\r\n  }\r\n\r\n  function findById(items, id) {\r\n    return find(items, function(item) {\r\n      return item.id == id;\r\n    });\r\n  }\n\n  /**\r\n    Common base for creating charts.\r\n    Standard `d3.chart` charts can be used with d3.compose, but extending `d3.chart('Chart')` includes helpers for properties and \"di\" functions.\r\n\r\n    ### Extending\r\n\r\n    To take advantage of \"di\"-binding (automatically injects `chart` into \"di\" methods)\r\n    and automatically setting properties from `options`, use `d3.compose.helpers.di`\r\n    and `d3.compose.helpers.property` when creating your chart.\r\n\r\n    @example\r\n    ```js\r\n    var helpers = d3.compose.helpers;\r\n\r\n    d3.chart('Chart').extend('Pie', {\r\n      initialize: function() {\r\n        // same as d3.chart\r\n      },\r\n      transform: function(data) {\r\n        // same as d3.chart\r\n      },\r\n\r\n      color: helpers.di(function(chart, d, i) {\r\n        // \"di\" function with parent chart injected (\"this\" = element)\r\n      }),\r\n\r\n      centered: helpers.property({\r\n        default_value: true\r\n        // can be automatically set from options object\r\n      })\r\n    });\r\n    ```\r\n    @class Chart\r\n    @extends Base\r\n  */\r\n  var Chart = Base.extend({}, {\r\n    /**\r\n      Default z-index for chart\r\n      (Components are 50 by default, so Chart = 100 is above component by default)\r\n\r\n      @example\r\n      ```js\r\n      d3.chart('Chart').extend('BelowComponentLayers', {\r\n        // ...\r\n      }, {\r\n        z_index: 40\r\n      });\r\n      ```\r\n      @attribute z_index\r\n      @static\r\n      @type Number\r\n      @default 100\r\n    */\r\n    z_index: 100,\r\n    layer_type: 'chart'\r\n  });\n\n  // Export charts/components to d3.chart\r\n  utils.extend(d3.chart(), {\r\n    Base: Base,\r\n    Chart: Chart,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose\r\n  });\r\n\r\n  var d3c = d3.compose = {\r\n    VERSION: '0.15.11',\r\n    utils: utils,\r\n    helpers: helpers,\r\n    Base: Base,\r\n    Chart: Chart,\r\n    Component: Component,\r\n    Overlay: Overlay,\r\n    Compose: Compose,\r\n    layered: layered\r\n  };\n\n  return d3c;\n\n}));"],"sourceRoot":"/source/"}